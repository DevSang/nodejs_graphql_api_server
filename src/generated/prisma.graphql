# source: http://localhost:4466
# timestamp: Wed Jul 10 2019 02:57:41 GMT+0000 (UTC)

type AggregateAnswer_types {
  count: Int!
}

type AggregateApp_server_sync {
  count: Int!
}

type AggregateAuth_token {
  count: Int!
}

type AggregateCalibration {
  count: Int!
}

type AggregateCompany {
  count: Int!
}

type AggregateCountry {
  count: Int!
}

type AggregateCup {
  count: Int!
}

type AggregateCup_app_sync {
  count: Int!
}

type AggregateCup_data {
  count: Int!
}

type AggregateCup_data_answer {
  count: Int!
}

type AggregateCup_data_colour_calc {
  count: Int!
}

type AggregateCup_data_colour_calib {
  count: Int!
}

type AggregateCup_data_man_mdates {
  count: Int!
}

type AggregateCup_data_proc_flow {
  count: Int!
}

type AggregateCup_data_proc_mdates {
  count: Int!
}

type AggregateCup_data_proc_volume {
  count: Int!
}

type AggregateCup_data_qa_response {
  count: Int!
}

type AggregateCup_data_question {
  count: Int!
}

type AggregateCup_data_raw {
  count: Int!
}

type AggregateCup_data_rejection {
  count: Int!
}

type AggregateCup_data_user_remove {
  count: Int!
}

type AggregateCup_data_user_remove_explain {
  count: Int!
}

type AggregateEthnicity {
  count: Int!
}

type AggregateFirmware {
  count: Int!
}

type AggregateHardware {
  count: Int!
}

type AggregatePlatform_comp {
  count: Int!
}

type AggregateUser_coin_history {
  count: Int!
}

type AggregateUser_cups {
  count: Int!
}

type AggregateUser_interview_data {
  count: Int!
}

type AggregateUser_interview_questions {
  count: Int!
}

type AggregateUser_record_data_by_day {
  count: Int!
}

type AggregateUser_record_data_by_period {
  count: Int!
}

type AggregateUser_record_data_by_time {
  count: Int!
}

type AggregateUsers {
  count: Int!
}

type AggregateUsers_data_analysis {
  count: Int!
}

type Answer_types {
  id: Int!
  answer_type: String!
  user_interview_questions(
    where: User_interview_questionsWhereInput
    orderBy: User_interview_questionsOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User_interview_questions!]
}

"""
A connection to a list of items.
"""
type Answer_typesConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [Answer_typesEdge]!
  aggregate: AggregateAnswer_types!
}

input Answer_typesCreateInput {
  answer_type: String!
  user_interview_questions: User_interview_questionsCreateManyWithoutAnswer_typeInput
}

input Answer_typesCreateOneWithoutUser_interview_questionsInput {
  create: Answer_typesCreateWithoutUser_interview_questionsInput
  connect: Answer_typesWhereUniqueInput
}

input Answer_typesCreateWithoutUser_interview_questionsInput {
  answer_type: String!
}

"""
An edge in a connection.
"""
type Answer_typesEdge {
  """
  The item at the end of the edge.
  """
  node: Answer_types!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Answer_typesOrderByInput {
  id_ASC
  id_DESC
  answer_type_ASC
  answer_type_DESC
}

type Answer_typesPreviousValues {
  id: Int!
  answer_type: String!
}

type Answer_typesSubscriptionPayload {
  mutation: MutationType!
  node: Answer_types
  updatedFields: [String!]
  previousValues: Answer_typesPreviousValues
}

input Answer_typesSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Answer_typesSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Answer_typesSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Answer_typesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Answer_typesWhereInput
}

input Answer_typesUpdateInput {
  answer_type: String
  user_interview_questions: User_interview_questionsUpdateManyWithoutAnswer_typeInput
}

input Answer_typesUpdateManyMutationInput {
  answer_type: String
}

input Answer_typesUpdateOneWithoutUser_interview_questionsInput {
  create: Answer_typesCreateWithoutUser_interview_questionsInput
  connect: Answer_typesWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: Answer_typesUpdateWithoutUser_interview_questionsDataInput
  upsert: Answer_typesUpsertWithoutUser_interview_questionsInput
}

input Answer_typesUpdateWithoutUser_interview_questionsDataInput {
  answer_type: String
}

input Answer_typesUpsertWithoutUser_interview_questionsInput {
  update: Answer_typesUpdateWithoutUser_interview_questionsDataInput!
  create: Answer_typesCreateWithoutUser_interview_questionsInput!
}

input Answer_typesWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Answer_typesWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Answer_typesWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Answer_typesWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  answer_type: String

  """
  All values that are not equal to given value.
  """
  answer_type_not: String

  """
  All values that are contained in given list.
  """
  answer_type_in: [String!]

  """
  All values that are not contained in given list.
  """
  answer_type_not_in: [String!]

  """
  All values less than the given value.
  """
  answer_type_lt: String

  """
  All values less than or equal the given value.
  """
  answer_type_lte: String

  """
  All values greater than the given value.
  """
  answer_type_gt: String

  """
  All values greater than or equal the given value.
  """
  answer_type_gte: String

  """
  All values containing the given string.
  """
  answer_type_contains: String

  """
  All values not containing the given string.
  """
  answer_type_not_contains: String

  """
  All values starting with the given string.
  """
  answer_type_starts_with: String

  """
  All values not starting with the given string.
  """
  answer_type_not_starts_with: String

  """
  All values ending with the given string.
  """
  answer_type_ends_with: String

  """
  All values not ending with the given string.
  """
  answer_type_not_ends_with: String
  user_interview_questions_every: User_interview_questionsWhereInput
  user_interview_questions_some: User_interview_questionsWhereInput
  user_interview_questions_none: User_interview_questionsWhereInput
}

input Answer_typesWhereUniqueInput {
  id: Int
  answer_type: String
}

type App_server_sync {
  id: Int!
  server_synch_time: DateTime!
  user: Users
}

"""
A connection to a list of items.
"""
type App_server_syncConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [App_server_syncEdge]!
  aggregate: AggregateApp_server_sync!
}

input App_server_syncCreateInput {
  server_synch_time: DateTime!
  user: UsersCreateOneWithoutApp_server_syncsInput
}

input App_server_syncCreateManyWithoutUserInput {
  create: [App_server_syncCreateWithoutUserInput!]
  connect: [App_server_syncWhereUniqueInput!]
}

input App_server_syncCreateWithoutUserInput {
  server_synch_time: DateTime!
}

"""
An edge in a connection.
"""
type App_server_syncEdge {
  """
  The item at the end of the edge.
  """
  node: App_server_sync!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum App_server_syncOrderByInput {
  id_ASC
  id_DESC
  server_synch_time_ASC
  server_synch_time_DESC
}

type App_server_syncPreviousValues {
  id: Int!
  server_synch_time: DateTime!
}

input App_server_syncScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [App_server_syncScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [App_server_syncScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [App_server_syncScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  server_synch_time: DateTime

  """
  All values that are not equal to given value.
  """
  server_synch_time_not: DateTime

  """
  All values that are contained in given list.
  """
  server_synch_time_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  server_synch_time_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  server_synch_time_lt: DateTime

  """
  All values less than or equal the given value.
  """
  server_synch_time_lte: DateTime

  """
  All values greater than the given value.
  """
  server_synch_time_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  server_synch_time_gte: DateTime
}

type App_server_syncSubscriptionPayload {
  mutation: MutationType!
  node: App_server_sync
  updatedFields: [String!]
  previousValues: App_server_syncPreviousValues
}

input App_server_syncSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [App_server_syncSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [App_server_syncSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [App_server_syncSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: App_server_syncWhereInput
}

input App_server_syncUpdateInput {
  server_synch_time: DateTime
  user: UsersUpdateOneWithoutApp_server_syncsInput
}

input App_server_syncUpdateManyDataInput {
  server_synch_time: DateTime
}

input App_server_syncUpdateManyMutationInput {
  server_synch_time: DateTime
}

input App_server_syncUpdateManyWithoutUserInput {
  create: [App_server_syncCreateWithoutUserInput!]
  connect: [App_server_syncWhereUniqueInput!]
  set: [App_server_syncWhereUniqueInput!]
  disconnect: [App_server_syncWhereUniqueInput!]
  delete: [App_server_syncWhereUniqueInput!]
  update: [App_server_syncUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [App_server_syncUpdateManyWithWhereNestedInput!]
  deleteMany: [App_server_syncScalarWhereInput!]
  upsert: [App_server_syncUpsertWithWhereUniqueWithoutUserInput!]
}

input App_server_syncUpdateManyWithWhereNestedInput {
  where: App_server_syncScalarWhereInput!
  data: App_server_syncUpdateManyDataInput!
}

input App_server_syncUpdateWithoutUserDataInput {
  server_synch_time: DateTime
}

input App_server_syncUpdateWithWhereUniqueWithoutUserInput {
  where: App_server_syncWhereUniqueInput!
  data: App_server_syncUpdateWithoutUserDataInput!
}

input App_server_syncUpsertWithWhereUniqueWithoutUserInput {
  where: App_server_syncWhereUniqueInput!
  update: App_server_syncUpdateWithoutUserDataInput!
  create: App_server_syncCreateWithoutUserInput!
}

input App_server_syncWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [App_server_syncWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [App_server_syncWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [App_server_syncWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  server_synch_time: DateTime

  """
  All values that are not equal to given value.
  """
  server_synch_time_not: DateTime

  """
  All values that are contained in given list.
  """
  server_synch_time_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  server_synch_time_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  server_synch_time_lt: DateTime

  """
  All values less than or equal the given value.
  """
  server_synch_time_lte: DateTime

  """
  All values greater than the given value.
  """
  server_synch_time_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  server_synch_time_gte: DateTime
  user: UsersWhereInput
}

input App_server_syncWhereUniqueInput {
  id: Int
}

type Auth_token {
  id: Int!
  email_jwt_token: String
  facebook_oauth2_id: Int
  facebook_oauth2_token: String
  google_oauth2_id: Int
  google_oauth2_token: String
  lang: Int!
  user: Users
}

"""
A connection to a list of items.
"""
type Auth_tokenConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [Auth_tokenEdge]!
  aggregate: AggregateAuth_token!
}

input Auth_tokenCreateInput {
  email_jwt_token: String
  facebook_oauth2_id: Int
  facebook_oauth2_token: String
  google_oauth2_id: Int
  google_oauth2_token: String
  lang: Int!
  user: UsersCreateOneWithoutAuth_tokensInput
}

input Auth_tokenCreateManyWithoutUserInput {
  create: [Auth_tokenCreateWithoutUserInput!]
  connect: [Auth_tokenWhereUniqueInput!]
}

input Auth_tokenCreateWithoutUserInput {
  email_jwt_token: String
  facebook_oauth2_id: Int
  facebook_oauth2_token: String
  google_oauth2_id: Int
  google_oauth2_token: String
  lang: Int!
}

"""
An edge in a connection.
"""
type Auth_tokenEdge {
  """
  The item at the end of the edge.
  """
  node: Auth_token!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Auth_tokenOrderByInput {
  id_ASC
  id_DESC
  email_jwt_token_ASC
  email_jwt_token_DESC
  facebook_oauth2_id_ASC
  facebook_oauth2_id_DESC
  facebook_oauth2_token_ASC
  facebook_oauth2_token_DESC
  google_oauth2_id_ASC
  google_oauth2_id_DESC
  google_oauth2_token_ASC
  google_oauth2_token_DESC
  lang_ASC
  lang_DESC
}

type Auth_tokenPreviousValues {
  id: Int!
  email_jwt_token: String
  facebook_oauth2_id: Int
  facebook_oauth2_token: String
  google_oauth2_id: Int
  google_oauth2_token: String
  lang: Int!
}

input Auth_tokenScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Auth_tokenScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Auth_tokenScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Auth_tokenScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  email_jwt_token: String

  """
  All values that are not equal to given value.
  """
  email_jwt_token_not: String

  """
  All values that are contained in given list.
  """
  email_jwt_token_in: [String!]

  """
  All values that are not contained in given list.
  """
  email_jwt_token_not_in: [String!]

  """
  All values less than the given value.
  """
  email_jwt_token_lt: String

  """
  All values less than or equal the given value.
  """
  email_jwt_token_lte: String

  """
  All values greater than the given value.
  """
  email_jwt_token_gt: String

  """
  All values greater than or equal the given value.
  """
  email_jwt_token_gte: String

  """
  All values containing the given string.
  """
  email_jwt_token_contains: String

  """
  All values not containing the given string.
  """
  email_jwt_token_not_contains: String

  """
  All values starting with the given string.
  """
  email_jwt_token_starts_with: String

  """
  All values not starting with the given string.
  """
  email_jwt_token_not_starts_with: String

  """
  All values ending with the given string.
  """
  email_jwt_token_ends_with: String

  """
  All values not ending with the given string.
  """
  email_jwt_token_not_ends_with: String
  facebook_oauth2_id: Int

  """
  All values that are not equal to given value.
  """
  facebook_oauth2_id_not: Int

  """
  All values that are contained in given list.
  """
  facebook_oauth2_id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  facebook_oauth2_id_not_in: [Int!]

  """
  All values less than the given value.
  """
  facebook_oauth2_id_lt: Int

  """
  All values less than or equal the given value.
  """
  facebook_oauth2_id_lte: Int

  """
  All values greater than the given value.
  """
  facebook_oauth2_id_gt: Int

  """
  All values greater than or equal the given value.
  """
  facebook_oauth2_id_gte: Int
  facebook_oauth2_token: String

  """
  All values that are not equal to given value.
  """
  facebook_oauth2_token_not: String

  """
  All values that are contained in given list.
  """
  facebook_oauth2_token_in: [String!]

  """
  All values that are not contained in given list.
  """
  facebook_oauth2_token_not_in: [String!]

  """
  All values less than the given value.
  """
  facebook_oauth2_token_lt: String

  """
  All values less than or equal the given value.
  """
  facebook_oauth2_token_lte: String

  """
  All values greater than the given value.
  """
  facebook_oauth2_token_gt: String

  """
  All values greater than or equal the given value.
  """
  facebook_oauth2_token_gte: String

  """
  All values containing the given string.
  """
  facebook_oauth2_token_contains: String

  """
  All values not containing the given string.
  """
  facebook_oauth2_token_not_contains: String

  """
  All values starting with the given string.
  """
  facebook_oauth2_token_starts_with: String

  """
  All values not starting with the given string.
  """
  facebook_oauth2_token_not_starts_with: String

  """
  All values ending with the given string.
  """
  facebook_oauth2_token_ends_with: String

  """
  All values not ending with the given string.
  """
  facebook_oauth2_token_not_ends_with: String
  google_oauth2_id: Int

  """
  All values that are not equal to given value.
  """
  google_oauth2_id_not: Int

  """
  All values that are contained in given list.
  """
  google_oauth2_id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  google_oauth2_id_not_in: [Int!]

  """
  All values less than the given value.
  """
  google_oauth2_id_lt: Int

  """
  All values less than or equal the given value.
  """
  google_oauth2_id_lte: Int

  """
  All values greater than the given value.
  """
  google_oauth2_id_gt: Int

  """
  All values greater than or equal the given value.
  """
  google_oauth2_id_gte: Int
  google_oauth2_token: String

  """
  All values that are not equal to given value.
  """
  google_oauth2_token_not: String

  """
  All values that are contained in given list.
  """
  google_oauth2_token_in: [String!]

  """
  All values that are not contained in given list.
  """
  google_oauth2_token_not_in: [String!]

  """
  All values less than the given value.
  """
  google_oauth2_token_lt: String

  """
  All values less than or equal the given value.
  """
  google_oauth2_token_lte: String

  """
  All values greater than the given value.
  """
  google_oauth2_token_gt: String

  """
  All values greater than or equal the given value.
  """
  google_oauth2_token_gte: String

  """
  All values containing the given string.
  """
  google_oauth2_token_contains: String

  """
  All values not containing the given string.
  """
  google_oauth2_token_not_contains: String

  """
  All values starting with the given string.
  """
  google_oauth2_token_starts_with: String

  """
  All values not starting with the given string.
  """
  google_oauth2_token_not_starts_with: String

  """
  All values ending with the given string.
  """
  google_oauth2_token_ends_with: String

  """
  All values not ending with the given string.
  """
  google_oauth2_token_not_ends_with: String
  lang: Int

  """
  All values that are not equal to given value.
  """
  lang_not: Int

  """
  All values that are contained in given list.
  """
  lang_in: [Int!]

  """
  All values that are not contained in given list.
  """
  lang_not_in: [Int!]

  """
  All values less than the given value.
  """
  lang_lt: Int

  """
  All values less than or equal the given value.
  """
  lang_lte: Int

  """
  All values greater than the given value.
  """
  lang_gt: Int

  """
  All values greater than or equal the given value.
  """
  lang_gte: Int
}

type Auth_tokenSubscriptionPayload {
  mutation: MutationType!
  node: Auth_token
  updatedFields: [String!]
  previousValues: Auth_tokenPreviousValues
}

input Auth_tokenSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Auth_tokenSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Auth_tokenSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Auth_tokenSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Auth_tokenWhereInput
}

input Auth_tokenUpdateInput {
  email_jwt_token: String
  facebook_oauth2_id: Int
  facebook_oauth2_token: String
  google_oauth2_id: Int
  google_oauth2_token: String
  lang: Int
  user: UsersUpdateOneWithoutAuth_tokensInput
}

input Auth_tokenUpdateManyDataInput {
  email_jwt_token: String
  facebook_oauth2_id: Int
  facebook_oauth2_token: String
  google_oauth2_id: Int
  google_oauth2_token: String
  lang: Int
}

input Auth_tokenUpdateManyMutationInput {
  email_jwt_token: String
  facebook_oauth2_id: Int
  facebook_oauth2_token: String
  google_oauth2_id: Int
  google_oauth2_token: String
  lang: Int
}

input Auth_tokenUpdateManyWithoutUserInput {
  create: [Auth_tokenCreateWithoutUserInput!]
  connect: [Auth_tokenWhereUniqueInput!]
  set: [Auth_tokenWhereUniqueInput!]
  disconnect: [Auth_tokenWhereUniqueInput!]
  delete: [Auth_tokenWhereUniqueInput!]
  update: [Auth_tokenUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [Auth_tokenUpdateManyWithWhereNestedInput!]
  deleteMany: [Auth_tokenScalarWhereInput!]
  upsert: [Auth_tokenUpsertWithWhereUniqueWithoutUserInput!]
}

input Auth_tokenUpdateManyWithWhereNestedInput {
  where: Auth_tokenScalarWhereInput!
  data: Auth_tokenUpdateManyDataInput!
}

input Auth_tokenUpdateWithoutUserDataInput {
  email_jwt_token: String
  facebook_oauth2_id: Int
  facebook_oauth2_token: String
  google_oauth2_id: Int
  google_oauth2_token: String
  lang: Int
}

input Auth_tokenUpdateWithWhereUniqueWithoutUserInput {
  where: Auth_tokenWhereUniqueInput!
  data: Auth_tokenUpdateWithoutUserDataInput!
}

input Auth_tokenUpsertWithWhereUniqueWithoutUserInput {
  where: Auth_tokenWhereUniqueInput!
  update: Auth_tokenUpdateWithoutUserDataInput!
  create: Auth_tokenCreateWithoutUserInput!
}

input Auth_tokenWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Auth_tokenWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Auth_tokenWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Auth_tokenWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  email_jwt_token: String

  """
  All values that are not equal to given value.
  """
  email_jwt_token_not: String

  """
  All values that are contained in given list.
  """
  email_jwt_token_in: [String!]

  """
  All values that are not contained in given list.
  """
  email_jwt_token_not_in: [String!]

  """
  All values less than the given value.
  """
  email_jwt_token_lt: String

  """
  All values less than or equal the given value.
  """
  email_jwt_token_lte: String

  """
  All values greater than the given value.
  """
  email_jwt_token_gt: String

  """
  All values greater than or equal the given value.
  """
  email_jwt_token_gte: String

  """
  All values containing the given string.
  """
  email_jwt_token_contains: String

  """
  All values not containing the given string.
  """
  email_jwt_token_not_contains: String

  """
  All values starting with the given string.
  """
  email_jwt_token_starts_with: String

  """
  All values not starting with the given string.
  """
  email_jwt_token_not_starts_with: String

  """
  All values ending with the given string.
  """
  email_jwt_token_ends_with: String

  """
  All values not ending with the given string.
  """
  email_jwt_token_not_ends_with: String
  facebook_oauth2_id: Int

  """
  All values that are not equal to given value.
  """
  facebook_oauth2_id_not: Int

  """
  All values that are contained in given list.
  """
  facebook_oauth2_id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  facebook_oauth2_id_not_in: [Int!]

  """
  All values less than the given value.
  """
  facebook_oauth2_id_lt: Int

  """
  All values less than or equal the given value.
  """
  facebook_oauth2_id_lte: Int

  """
  All values greater than the given value.
  """
  facebook_oauth2_id_gt: Int

  """
  All values greater than or equal the given value.
  """
  facebook_oauth2_id_gte: Int
  facebook_oauth2_token: String

  """
  All values that are not equal to given value.
  """
  facebook_oauth2_token_not: String

  """
  All values that are contained in given list.
  """
  facebook_oauth2_token_in: [String!]

  """
  All values that are not contained in given list.
  """
  facebook_oauth2_token_not_in: [String!]

  """
  All values less than the given value.
  """
  facebook_oauth2_token_lt: String

  """
  All values less than or equal the given value.
  """
  facebook_oauth2_token_lte: String

  """
  All values greater than the given value.
  """
  facebook_oauth2_token_gt: String

  """
  All values greater than or equal the given value.
  """
  facebook_oauth2_token_gte: String

  """
  All values containing the given string.
  """
  facebook_oauth2_token_contains: String

  """
  All values not containing the given string.
  """
  facebook_oauth2_token_not_contains: String

  """
  All values starting with the given string.
  """
  facebook_oauth2_token_starts_with: String

  """
  All values not starting with the given string.
  """
  facebook_oauth2_token_not_starts_with: String

  """
  All values ending with the given string.
  """
  facebook_oauth2_token_ends_with: String

  """
  All values not ending with the given string.
  """
  facebook_oauth2_token_not_ends_with: String
  google_oauth2_id: Int

  """
  All values that are not equal to given value.
  """
  google_oauth2_id_not: Int

  """
  All values that are contained in given list.
  """
  google_oauth2_id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  google_oauth2_id_not_in: [Int!]

  """
  All values less than the given value.
  """
  google_oauth2_id_lt: Int

  """
  All values less than or equal the given value.
  """
  google_oauth2_id_lte: Int

  """
  All values greater than the given value.
  """
  google_oauth2_id_gt: Int

  """
  All values greater than or equal the given value.
  """
  google_oauth2_id_gte: Int
  google_oauth2_token: String

  """
  All values that are not equal to given value.
  """
  google_oauth2_token_not: String

  """
  All values that are contained in given list.
  """
  google_oauth2_token_in: [String!]

  """
  All values that are not contained in given list.
  """
  google_oauth2_token_not_in: [String!]

  """
  All values less than the given value.
  """
  google_oauth2_token_lt: String

  """
  All values less than or equal the given value.
  """
  google_oauth2_token_lte: String

  """
  All values greater than the given value.
  """
  google_oauth2_token_gt: String

  """
  All values greater than or equal the given value.
  """
  google_oauth2_token_gte: String

  """
  All values containing the given string.
  """
  google_oauth2_token_contains: String

  """
  All values not containing the given string.
  """
  google_oauth2_token_not_contains: String

  """
  All values starting with the given string.
  """
  google_oauth2_token_starts_with: String

  """
  All values not starting with the given string.
  """
  google_oauth2_token_not_starts_with: String

  """
  All values ending with the given string.
  """
  google_oauth2_token_ends_with: String

  """
  All values not ending with the given string.
  """
  google_oauth2_token_not_ends_with: String
  lang: Int

  """
  All values that are not equal to given value.
  """
  lang_not: Int

  """
  All values that are contained in given list.
  """
  lang_in: [Int!]

  """
  All values that are not contained in given list.
  """
  lang_not_in: [Int!]

  """
  All values less than the given value.
  """
  lang_lt: Int

  """
  All values less than or equal the given value.
  """
  lang_lte: Int

  """
  All values greater than the given value.
  """
  lang_gt: Int

  """
  All values greater than or equal the given value.
  """
  lang_gte: Int
  user: UsersWhereInput
}

input Auth_tokenWhereUniqueInput {
  id: Int
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

type Calibration {
  id: Int!
  calib_version: String!
  cups(
    where: CupWhereInput
    orderBy: CupOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup!]
}

"""
A connection to a list of items.
"""
type CalibrationConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CalibrationEdge]!
  aggregate: AggregateCalibration!
}

input CalibrationCreateInput {
  calib_version: String!
  cups: CupCreateManyWithoutCalibInput
}

input CalibrationCreateOneWithoutCupsInput {
  create: CalibrationCreateWithoutCupsInput
  connect: CalibrationWhereUniqueInput
}

input CalibrationCreateWithoutCupsInput {
  calib_version: String!
}

"""
An edge in a connection.
"""
type CalibrationEdge {
  """
  The item at the end of the edge.
  """
  node: Calibration!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CalibrationOrderByInput {
  id_ASC
  id_DESC
  calib_version_ASC
  calib_version_DESC
}

type CalibrationPreviousValues {
  id: Int!
  calib_version: String!
}

type CalibrationSubscriptionPayload {
  mutation: MutationType!
  node: Calibration
  updatedFields: [String!]
  previousValues: CalibrationPreviousValues
}

input CalibrationSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CalibrationSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CalibrationSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CalibrationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CalibrationWhereInput
}

input CalibrationUpdateInput {
  calib_version: String
  cups: CupUpdateManyWithoutCalibInput
}

input CalibrationUpdateManyMutationInput {
  calib_version: String
}

input CalibrationUpdateOneWithoutCupsInput {
  create: CalibrationCreateWithoutCupsInput
  connect: CalibrationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CalibrationUpdateWithoutCupsDataInput
  upsert: CalibrationUpsertWithoutCupsInput
}

input CalibrationUpdateWithoutCupsDataInput {
  calib_version: String
}

input CalibrationUpsertWithoutCupsInput {
  update: CalibrationUpdateWithoutCupsDataInput!
  create: CalibrationCreateWithoutCupsInput!
}

input CalibrationWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CalibrationWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CalibrationWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CalibrationWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  calib_version: String

  """
  All values that are not equal to given value.
  """
  calib_version_not: String

  """
  All values that are contained in given list.
  """
  calib_version_in: [String!]

  """
  All values that are not contained in given list.
  """
  calib_version_not_in: [String!]

  """
  All values less than the given value.
  """
  calib_version_lt: String

  """
  All values less than or equal the given value.
  """
  calib_version_lte: String

  """
  All values greater than the given value.
  """
  calib_version_gt: String

  """
  All values greater than or equal the given value.
  """
  calib_version_gte: String

  """
  All values containing the given string.
  """
  calib_version_contains: String

  """
  All values not containing the given string.
  """
  calib_version_not_contains: String

  """
  All values starting with the given string.
  """
  calib_version_starts_with: String

  """
  All values not starting with the given string.
  """
  calib_version_not_starts_with: String

  """
  All values ending with the given string.
  """
  calib_version_ends_with: String

  """
  All values not ending with the given string.
  """
  calib_version_not_ends_with: String
  cups_every: CupWhereInput
  cups_some: CupWhereInput
  cups_none: CupWhereInput
}

input CalibrationWhereUniqueInput {
  id: Int
  calib_version: String
}

type Company {
  id: Int!
  company_name: String!
  cups(
    where: CupWhereInput
    orderBy: CupOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup!]
}

"""
A connection to a list of items.
"""
type CompanyConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  company_name: String!
  cups: CupCreateManyWithoutCompanyInput
}

input CompanyCreateOneWithoutCupsInput {
  create: CompanyCreateWithoutCupsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutCupsInput {
  company_name: String!
}

"""
An edge in a connection.
"""
type CompanyEdge {
  """
  The item at the end of the edge.
  """
  node: Company!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  company_name_ASC
  company_name_DESC
}

type CompanyPreviousValues {
  id: Int!
  company_name: String!
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CompanySubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CompanySubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CompanySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
}

input CompanyUpdateInput {
  company_name: String
  cups: CupUpdateManyWithoutCompanyInput
}

input CompanyUpdateManyMutationInput {
  company_name: String
}

input CompanyUpdateOneWithoutCupsInput {
  create: CompanyCreateWithoutCupsInput
  connect: CompanyWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CompanyUpdateWithoutCupsDataInput
  upsert: CompanyUpsertWithoutCupsInput
}

input CompanyUpdateWithoutCupsDataInput {
  company_name: String
}

input CompanyUpsertWithoutCupsInput {
  update: CompanyUpdateWithoutCupsDataInput!
  create: CompanyCreateWithoutCupsInput!
}

input CompanyWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CompanyWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CompanyWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CompanyWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  company_name: String

  """
  All values that are not equal to given value.
  """
  company_name_not: String

  """
  All values that are contained in given list.
  """
  company_name_in: [String!]

  """
  All values that are not contained in given list.
  """
  company_name_not_in: [String!]

  """
  All values less than the given value.
  """
  company_name_lt: String

  """
  All values less than or equal the given value.
  """
  company_name_lte: String

  """
  All values greater than the given value.
  """
  company_name_gt: String

  """
  All values greater than or equal the given value.
  """
  company_name_gte: String

  """
  All values containing the given string.
  """
  company_name_contains: String

  """
  All values not containing the given string.
  """
  company_name_not_contains: String

  """
  All values starting with the given string.
  """
  company_name_starts_with: String

  """
  All values not starting with the given string.
  """
  company_name_not_starts_with: String

  """
  All values ending with the given string.
  """
  company_name_ends_with: String

  """
  All values not ending with the given string.
  """
  company_name_not_ends_with: String
  cups_every: CupWhereInput
  cups_some: CupWhereInput
  cups_none: CupWhereInput
}

input CompanyWhereUniqueInput {
  id: Int
  company_name: String
}

type Country {
  id: Int!
  country_name: String!
  users(
    where: UsersWhereInput
    orderBy: UsersOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Users!]
}

"""
A connection to a list of items.
"""
type CountryConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CountryEdge]!
  aggregate: AggregateCountry!
}

input CountryCreateInput {
  country_name: String!
  users: UsersCreateManyWithoutCountryInput
}

input CountryCreateOneWithoutUsersInput {
  create: CountryCreateWithoutUsersInput
  connect: CountryWhereUniqueInput
}

input CountryCreateWithoutUsersInput {
  country_name: String!
}

"""
An edge in a connection.
"""
type CountryEdge {
  """
  The item at the end of the edge.
  """
  node: Country!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CountryOrderByInput {
  id_ASC
  id_DESC
  country_name_ASC
  country_name_DESC
}

type CountryPreviousValues {
  id: Int!
  country_name: String!
}

type CountrySubscriptionPayload {
  mutation: MutationType!
  node: Country
  updatedFields: [String!]
  previousValues: CountryPreviousValues
}

input CountrySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CountrySubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CountrySubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CountrySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CountryWhereInput
}

input CountryUpdateInput {
  country_name: String
  users: UsersUpdateManyWithoutCountryInput
}

input CountryUpdateManyMutationInput {
  country_name: String
}

input CountryUpdateOneWithoutUsersInput {
  create: CountryCreateWithoutUsersInput
  connect: CountryWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CountryUpdateWithoutUsersDataInput
  upsert: CountryUpsertWithoutUsersInput
}

input CountryUpdateWithoutUsersDataInput {
  country_name: String
}

input CountryUpsertWithoutUsersInput {
  update: CountryUpdateWithoutUsersDataInput!
  create: CountryCreateWithoutUsersInput!
}

input CountryWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CountryWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CountryWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CountryWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  country_name: String

  """
  All values that are not equal to given value.
  """
  country_name_not: String

  """
  All values that are contained in given list.
  """
  country_name_in: [String!]

  """
  All values that are not contained in given list.
  """
  country_name_not_in: [String!]

  """
  All values less than the given value.
  """
  country_name_lt: String

  """
  All values less than or equal the given value.
  """
  country_name_lte: String

  """
  All values greater than the given value.
  """
  country_name_gt: String

  """
  All values greater than or equal the given value.
  """
  country_name_gte: String

  """
  All values containing the given string.
  """
  country_name_contains: String

  """
  All values not containing the given string.
  """
  country_name_not_contains: String

  """
  All values starting with the given string.
  """
  country_name_starts_with: String

  """
  All values not starting with the given string.
  """
  country_name_not_starts_with: String

  """
  All values ending with the given string.
  """
  country_name_ends_with: String

  """
  All values not ending with the given string.
  """
  country_name_not_ends_with: String
  users_every: UsersWhereInput
  users_some: UsersWhereInput
  users_none: UsersWhereInput
}

input CountryWhereUniqueInput {
  id: Int
  country_name: String
}

type Cup {
  id: Int!
  anon_serial_number: Int!
  calib: Calibration
  company: Company
  cup_app_syncs(
    where: Cup_app_syncWhereInput
    orderBy: Cup_app_syncOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_app_sync!]
  cup_data(
    where: Cup_dataWhereInput
    orderBy: Cup_dataOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data!]
  cup_data_colour_calibs(
    where: Cup_data_colour_calibWhereInput
    orderBy: Cup_data_colour_calibOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_colour_calib!]
  cup_data_raws(
    where: Cup_data_rawWhereInput
    orderBy: Cup_data_rawOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_raw!]
  cup_data_user_removes(
    where: Cup_data_user_removeWhereInput
    orderBy: Cup_data_user_removeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_user_remove!]
  encryption_key: Int!
  fw: Firmware
  hw: Hardware
  user_cups(
    where: User_cupsWhereInput
    orderBy: User_cupsOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User_cups!]
}

type Cup_app_sync {
  id: Int!
  app_synch_time: DateTime!
  serial_number: Cup
}

"""
A connection to a list of items.
"""
type Cup_app_syncConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [Cup_app_syncEdge]!
  aggregate: AggregateCup_app_sync!
}

input Cup_app_syncCreateInput {
  app_synch_time: DateTime!
  serial_number: CupCreateOneWithoutCup_app_syncsInput
}

input Cup_app_syncCreateManyWithoutSerial_numberInput {
  create: [Cup_app_syncCreateWithoutSerial_numberInput!]
  connect: [Cup_app_syncWhereUniqueInput!]
}

input Cup_app_syncCreateWithoutSerial_numberInput {
  app_synch_time: DateTime!
}

"""
An edge in a connection.
"""
type Cup_app_syncEdge {
  """
  The item at the end of the edge.
  """
  node: Cup_app_sync!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Cup_app_syncOrderByInput {
  id_ASC
  id_DESC
  app_synch_time_ASC
  app_synch_time_DESC
}

type Cup_app_syncPreviousValues {
  id: Int!
  app_synch_time: DateTime!
}

input Cup_app_syncScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_app_syncScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_app_syncScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_app_syncScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  app_synch_time: DateTime

  """
  All values that are not equal to given value.
  """
  app_synch_time_not: DateTime

  """
  All values that are contained in given list.
  """
  app_synch_time_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  app_synch_time_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  app_synch_time_lt: DateTime

  """
  All values less than or equal the given value.
  """
  app_synch_time_lte: DateTime

  """
  All values greater than the given value.
  """
  app_synch_time_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  app_synch_time_gte: DateTime
}

type Cup_app_syncSubscriptionPayload {
  mutation: MutationType!
  node: Cup_app_sync
  updatedFields: [String!]
  previousValues: Cup_app_syncPreviousValues
}

input Cup_app_syncSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_app_syncSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_app_syncSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_app_syncSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Cup_app_syncWhereInput
}

input Cup_app_syncUpdateInput {
  app_synch_time: DateTime
  serial_number: CupUpdateOneWithoutCup_app_syncsInput
}

input Cup_app_syncUpdateManyDataInput {
  app_synch_time: DateTime
}

input Cup_app_syncUpdateManyMutationInput {
  app_synch_time: DateTime
}

input Cup_app_syncUpdateManyWithoutSerial_numberInput {
  create: [Cup_app_syncCreateWithoutSerial_numberInput!]
  connect: [Cup_app_syncWhereUniqueInput!]
  set: [Cup_app_syncWhereUniqueInput!]
  disconnect: [Cup_app_syncWhereUniqueInput!]
  delete: [Cup_app_syncWhereUniqueInput!]
  update: [Cup_app_syncUpdateWithWhereUniqueWithoutSerial_numberInput!]
  updateMany: [Cup_app_syncUpdateManyWithWhereNestedInput!]
  deleteMany: [Cup_app_syncScalarWhereInput!]
  upsert: [Cup_app_syncUpsertWithWhereUniqueWithoutSerial_numberInput!]
}

input Cup_app_syncUpdateManyWithWhereNestedInput {
  where: Cup_app_syncScalarWhereInput!
  data: Cup_app_syncUpdateManyDataInput!
}

input Cup_app_syncUpdateWithoutSerial_numberDataInput {
  app_synch_time: DateTime
}

input Cup_app_syncUpdateWithWhereUniqueWithoutSerial_numberInput {
  where: Cup_app_syncWhereUniqueInput!
  data: Cup_app_syncUpdateWithoutSerial_numberDataInput!
}

input Cup_app_syncUpsertWithWhereUniqueWithoutSerial_numberInput {
  where: Cup_app_syncWhereUniqueInput!
  update: Cup_app_syncUpdateWithoutSerial_numberDataInput!
  create: Cup_app_syncCreateWithoutSerial_numberInput!
}

input Cup_app_syncWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_app_syncWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_app_syncWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_app_syncWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  app_synch_time: DateTime

  """
  All values that are not equal to given value.
  """
  app_synch_time_not: DateTime

  """
  All values that are contained in given list.
  """
  app_synch_time_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  app_synch_time_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  app_synch_time_lt: DateTime

  """
  All values less than or equal the given value.
  """
  app_synch_time_lte: DateTime

  """
  All values greater than the given value.
  """
  app_synch_time_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  app_synch_time_gte: DateTime
  serial_number: CupWhereInput
}

input Cup_app_syncWhereUniqueInput {
  id: Int
}

type Cup_data {
  id: Int!
  battery: Int!
  calib_flag: Boolean!
  ch1: Int!
  ch10: Int!
  ch11: Int!
  ch12: Int!
  ch13: Int!
  ch14: Int!
  ch2: Int!
  ch3: Int!
  ch4: Int!
  ch5: Int!
  ch6: Int!
  ch7: Int!
  ch8: Int!
  ch9: Int!
  colour_b: Int!
  colour_c: Int!
  colour_g: Int!
  colour_r: Int!
  cup_data_colour_calcs(
    where: Cup_data_colour_calcWhereInput
    orderBy: Cup_data_colour_calcOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_colour_calc!]
  cup_data_proc_volumes(
    where: Cup_data_proc_volumeWhereInput
    orderBy: Cup_data_proc_volumeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_proc_volume!]
  date: DateTime!
  day: Int!
  hour: Int!
  line: Int!
  minute: Int!
  month: Int!
  page: Int!
  raw_total_volume: Int
  raw_volume_l: Int
  raw_volume_r: Int
  serial_number: Cup
  temperature: Int!
  x: Int!
  y: Int!
  year: Int!
  z: Int!
}

type Cup_data_answer {
  id: Int!
  answer_text: String!
  cup_data_qa_responses(
    where: Cup_data_qa_responseWhereInput
    orderBy: Cup_data_qa_responseOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_qa_response!]
  question: Cup_data_question
}

"""
A connection to a list of items.
"""
type Cup_data_answerConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [Cup_data_answerEdge]!
  aggregate: AggregateCup_data_answer!
}

input Cup_data_answerCreateInput {
  answer_text: String!
  cup_data_qa_responses: Cup_data_qa_responseCreateManyWithoutAnswerInput
  question: Cup_data_questionCreateOneWithoutCup_data_answersInput
}

input Cup_data_answerCreateManyWithoutQuestionInput {
  create: [Cup_data_answerCreateWithoutQuestionInput!]
  connect: [Cup_data_answerWhereUniqueInput!]
}

input Cup_data_answerCreateOneWithoutCup_data_qa_responsesInput {
  create: Cup_data_answerCreateWithoutCup_data_qa_responsesInput
  connect: Cup_data_answerWhereUniqueInput
}

input Cup_data_answerCreateWithoutCup_data_qa_responsesInput {
  answer_text: String!
  question: Cup_data_questionCreateOneWithoutCup_data_answersInput
}

input Cup_data_answerCreateWithoutQuestionInput {
  answer_text: String!
  cup_data_qa_responses: Cup_data_qa_responseCreateManyWithoutAnswerInput
}

"""
An edge in a connection.
"""
type Cup_data_answerEdge {
  """
  The item at the end of the edge.
  """
  node: Cup_data_answer!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Cup_data_answerOrderByInput {
  id_ASC
  id_DESC
  answer_text_ASC
  answer_text_DESC
}

type Cup_data_answerPreviousValues {
  id: Int!
  answer_text: String!
}

input Cup_data_answerScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_answerScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_answerScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_answerScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  answer_text: String

  """
  All values that are not equal to given value.
  """
  answer_text_not: String

  """
  All values that are contained in given list.
  """
  answer_text_in: [String!]

  """
  All values that are not contained in given list.
  """
  answer_text_not_in: [String!]

  """
  All values less than the given value.
  """
  answer_text_lt: String

  """
  All values less than or equal the given value.
  """
  answer_text_lte: String

  """
  All values greater than the given value.
  """
  answer_text_gt: String

  """
  All values greater than or equal the given value.
  """
  answer_text_gte: String

  """
  All values containing the given string.
  """
  answer_text_contains: String

  """
  All values not containing the given string.
  """
  answer_text_not_contains: String

  """
  All values starting with the given string.
  """
  answer_text_starts_with: String

  """
  All values not starting with the given string.
  """
  answer_text_not_starts_with: String

  """
  All values ending with the given string.
  """
  answer_text_ends_with: String

  """
  All values not ending with the given string.
  """
  answer_text_not_ends_with: String
}

type Cup_data_answerSubscriptionPayload {
  mutation: MutationType!
  node: Cup_data_answer
  updatedFields: [String!]
  previousValues: Cup_data_answerPreviousValues
}

input Cup_data_answerSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_answerSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_answerSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_answerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Cup_data_answerWhereInput
}

input Cup_data_answerUpdateInput {
  answer_text: String
  cup_data_qa_responses: Cup_data_qa_responseUpdateManyWithoutAnswerInput
  question: Cup_data_questionUpdateOneWithoutCup_data_answersInput
}

input Cup_data_answerUpdateManyDataInput {
  answer_text: String
}

input Cup_data_answerUpdateManyMutationInput {
  answer_text: String
}

input Cup_data_answerUpdateManyWithoutQuestionInput {
  create: [Cup_data_answerCreateWithoutQuestionInput!]
  connect: [Cup_data_answerWhereUniqueInput!]
  set: [Cup_data_answerWhereUniqueInput!]
  disconnect: [Cup_data_answerWhereUniqueInput!]
  delete: [Cup_data_answerWhereUniqueInput!]
  update: [Cup_data_answerUpdateWithWhereUniqueWithoutQuestionInput!]
  updateMany: [Cup_data_answerUpdateManyWithWhereNestedInput!]
  deleteMany: [Cup_data_answerScalarWhereInput!]
  upsert: [Cup_data_answerUpsertWithWhereUniqueWithoutQuestionInput!]
}

input Cup_data_answerUpdateManyWithWhereNestedInput {
  where: Cup_data_answerScalarWhereInput!
  data: Cup_data_answerUpdateManyDataInput!
}

input Cup_data_answerUpdateOneWithoutCup_data_qa_responsesInput {
  create: Cup_data_answerCreateWithoutCup_data_qa_responsesInput
  connect: Cup_data_answerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: Cup_data_answerUpdateWithoutCup_data_qa_responsesDataInput
  upsert: Cup_data_answerUpsertWithoutCup_data_qa_responsesInput
}

input Cup_data_answerUpdateWithoutCup_data_qa_responsesDataInput {
  answer_text: String
  question: Cup_data_questionUpdateOneWithoutCup_data_answersInput
}

input Cup_data_answerUpdateWithoutQuestionDataInput {
  answer_text: String
  cup_data_qa_responses: Cup_data_qa_responseUpdateManyWithoutAnswerInput
}

input Cup_data_answerUpdateWithWhereUniqueWithoutQuestionInput {
  where: Cup_data_answerWhereUniqueInput!
  data: Cup_data_answerUpdateWithoutQuestionDataInput!
}

input Cup_data_answerUpsertWithoutCup_data_qa_responsesInput {
  update: Cup_data_answerUpdateWithoutCup_data_qa_responsesDataInput!
  create: Cup_data_answerCreateWithoutCup_data_qa_responsesInput!
}

input Cup_data_answerUpsertWithWhereUniqueWithoutQuestionInput {
  where: Cup_data_answerWhereUniqueInput!
  update: Cup_data_answerUpdateWithoutQuestionDataInput!
  create: Cup_data_answerCreateWithoutQuestionInput!
}

input Cup_data_answerWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_answerWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_answerWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_answerWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  answer_text: String

  """
  All values that are not equal to given value.
  """
  answer_text_not: String

  """
  All values that are contained in given list.
  """
  answer_text_in: [String!]

  """
  All values that are not contained in given list.
  """
  answer_text_not_in: [String!]

  """
  All values less than the given value.
  """
  answer_text_lt: String

  """
  All values less than or equal the given value.
  """
  answer_text_lte: String

  """
  All values greater than the given value.
  """
  answer_text_gt: String

  """
  All values greater than or equal the given value.
  """
  answer_text_gte: String

  """
  All values containing the given string.
  """
  answer_text_contains: String

  """
  All values not containing the given string.
  """
  answer_text_not_contains: String

  """
  All values starting with the given string.
  """
  answer_text_starts_with: String

  """
  All values not starting with the given string.
  """
  answer_text_not_starts_with: String

  """
  All values ending with the given string.
  """
  answer_text_ends_with: String

  """
  All values not ending with the given string.
  """
  answer_text_not_ends_with: String
  cup_data_qa_responses_every: Cup_data_qa_responseWhereInput
  cup_data_qa_responses_some: Cup_data_qa_responseWhereInput
  cup_data_qa_responses_none: Cup_data_qa_responseWhereInput
  question: Cup_data_questionWhereInput
}

input Cup_data_answerWhereUniqueInput {
  id: Int
}

type Cup_data_colour_calc {
  id: Int!
  blue: Int!
  green: Int!
  red: Int!
  row: Cup_data
}

"""
A connection to a list of items.
"""
type Cup_data_colour_calcConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [Cup_data_colour_calcEdge]!
  aggregate: AggregateCup_data_colour_calc!
}

input Cup_data_colour_calcCreateInput {
  blue: Int!
  green: Int!
  red: Int!
  row: Cup_dataCreateOneWithoutCup_data_colour_calcsInput
}

input Cup_data_colour_calcCreateManyWithoutRowInput {
  create: [Cup_data_colour_calcCreateWithoutRowInput!]
  connect: [Cup_data_colour_calcWhereUniqueInput!]
}

input Cup_data_colour_calcCreateWithoutRowInput {
  blue: Int!
  green: Int!
  red: Int!
}

"""
An edge in a connection.
"""
type Cup_data_colour_calcEdge {
  """
  The item at the end of the edge.
  """
  node: Cup_data_colour_calc!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Cup_data_colour_calcOrderByInput {
  id_ASC
  id_DESC
  blue_ASC
  blue_DESC
  green_ASC
  green_DESC
  red_ASC
  red_DESC
}

type Cup_data_colour_calcPreviousValues {
  id: Int!
  blue: Int!
  green: Int!
  red: Int!
}

input Cup_data_colour_calcScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_colour_calcScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_colour_calcScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_colour_calcScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  blue: Int

  """
  All values that are not equal to given value.
  """
  blue_not: Int

  """
  All values that are contained in given list.
  """
  blue_in: [Int!]

  """
  All values that are not contained in given list.
  """
  blue_not_in: [Int!]

  """
  All values less than the given value.
  """
  blue_lt: Int

  """
  All values less than or equal the given value.
  """
  blue_lte: Int

  """
  All values greater than the given value.
  """
  blue_gt: Int

  """
  All values greater than or equal the given value.
  """
  blue_gte: Int
  green: Int

  """
  All values that are not equal to given value.
  """
  green_not: Int

  """
  All values that are contained in given list.
  """
  green_in: [Int!]

  """
  All values that are not contained in given list.
  """
  green_not_in: [Int!]

  """
  All values less than the given value.
  """
  green_lt: Int

  """
  All values less than or equal the given value.
  """
  green_lte: Int

  """
  All values greater than the given value.
  """
  green_gt: Int

  """
  All values greater than or equal the given value.
  """
  green_gte: Int
  red: Int

  """
  All values that are not equal to given value.
  """
  red_not: Int

  """
  All values that are contained in given list.
  """
  red_in: [Int!]

  """
  All values that are not contained in given list.
  """
  red_not_in: [Int!]

  """
  All values less than the given value.
  """
  red_lt: Int

  """
  All values less than or equal the given value.
  """
  red_lte: Int

  """
  All values greater than the given value.
  """
  red_gt: Int

  """
  All values greater than or equal the given value.
  """
  red_gte: Int
}

type Cup_data_colour_calcSubscriptionPayload {
  mutation: MutationType!
  node: Cup_data_colour_calc
  updatedFields: [String!]
  previousValues: Cup_data_colour_calcPreviousValues
}

input Cup_data_colour_calcSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_colour_calcSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_colour_calcSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_colour_calcSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Cup_data_colour_calcWhereInput
}

input Cup_data_colour_calcUpdateInput {
  blue: Int
  green: Int
  red: Int
  row: Cup_dataUpdateOneWithoutCup_data_colour_calcsInput
}

input Cup_data_colour_calcUpdateManyDataInput {
  blue: Int
  green: Int
  red: Int
}

input Cup_data_colour_calcUpdateManyMutationInput {
  blue: Int
  green: Int
  red: Int
}

input Cup_data_colour_calcUpdateManyWithoutRowInput {
  create: [Cup_data_colour_calcCreateWithoutRowInput!]
  connect: [Cup_data_colour_calcWhereUniqueInput!]
  set: [Cup_data_colour_calcWhereUniqueInput!]
  disconnect: [Cup_data_colour_calcWhereUniqueInput!]
  delete: [Cup_data_colour_calcWhereUniqueInput!]
  update: [Cup_data_colour_calcUpdateWithWhereUniqueWithoutRowInput!]
  updateMany: [Cup_data_colour_calcUpdateManyWithWhereNestedInput!]
  deleteMany: [Cup_data_colour_calcScalarWhereInput!]
  upsert: [Cup_data_colour_calcUpsertWithWhereUniqueWithoutRowInput!]
}

input Cup_data_colour_calcUpdateManyWithWhereNestedInput {
  where: Cup_data_colour_calcScalarWhereInput!
  data: Cup_data_colour_calcUpdateManyDataInput!
}

input Cup_data_colour_calcUpdateWithoutRowDataInput {
  blue: Int
  green: Int
  red: Int
}

input Cup_data_colour_calcUpdateWithWhereUniqueWithoutRowInput {
  where: Cup_data_colour_calcWhereUniqueInput!
  data: Cup_data_colour_calcUpdateWithoutRowDataInput!
}

input Cup_data_colour_calcUpsertWithWhereUniqueWithoutRowInput {
  where: Cup_data_colour_calcWhereUniqueInput!
  update: Cup_data_colour_calcUpdateWithoutRowDataInput!
  create: Cup_data_colour_calcCreateWithoutRowInput!
}

input Cup_data_colour_calcWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_colour_calcWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_colour_calcWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_colour_calcWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  blue: Int

  """
  All values that are not equal to given value.
  """
  blue_not: Int

  """
  All values that are contained in given list.
  """
  blue_in: [Int!]

  """
  All values that are not contained in given list.
  """
  blue_not_in: [Int!]

  """
  All values less than the given value.
  """
  blue_lt: Int

  """
  All values less than or equal the given value.
  """
  blue_lte: Int

  """
  All values greater than the given value.
  """
  blue_gt: Int

  """
  All values greater than or equal the given value.
  """
  blue_gte: Int
  green: Int

  """
  All values that are not equal to given value.
  """
  green_not: Int

  """
  All values that are contained in given list.
  """
  green_in: [Int!]

  """
  All values that are not contained in given list.
  """
  green_not_in: [Int!]

  """
  All values less than the given value.
  """
  green_lt: Int

  """
  All values less than or equal the given value.
  """
  green_lte: Int

  """
  All values greater than the given value.
  """
  green_gt: Int

  """
  All values greater than or equal the given value.
  """
  green_gte: Int
  red: Int

  """
  All values that are not equal to given value.
  """
  red_not: Int

  """
  All values that are contained in given list.
  """
  red_in: [Int!]

  """
  All values that are not contained in given list.
  """
  red_not_in: [Int!]

  """
  All values less than the given value.
  """
  red_lt: Int

  """
  All values less than or equal the given value.
  """
  red_lte: Int

  """
  All values greater than the given value.
  """
  red_gt: Int

  """
  All values greater than or equal the given value.
  """
  red_gte: Int
  row: Cup_dataWhereInput
}

input Cup_data_colour_calcWhereUniqueInput {
  id: Int
}

type Cup_data_colour_calib {
  id: Int!
  blue: Int!
  c: Int!
  green: Int!
  red: Int!
  serial_number: Cup
}

"""
A connection to a list of items.
"""
type Cup_data_colour_calibConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [Cup_data_colour_calibEdge]!
  aggregate: AggregateCup_data_colour_calib!
}

input Cup_data_colour_calibCreateInput {
  blue: Int!
  c: Int!
  green: Int!
  red: Int!
  serial_number: CupCreateOneWithoutCup_data_colour_calibsInput
}

input Cup_data_colour_calibCreateManyWithoutSerial_numberInput {
  create: [Cup_data_colour_calibCreateWithoutSerial_numberInput!]
  connect: [Cup_data_colour_calibWhereUniqueInput!]
}

input Cup_data_colour_calibCreateWithoutSerial_numberInput {
  blue: Int!
  c: Int!
  green: Int!
  red: Int!
}

"""
An edge in a connection.
"""
type Cup_data_colour_calibEdge {
  """
  The item at the end of the edge.
  """
  node: Cup_data_colour_calib!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Cup_data_colour_calibOrderByInput {
  id_ASC
  id_DESC
  blue_ASC
  blue_DESC
  c_ASC
  c_DESC
  green_ASC
  green_DESC
  red_ASC
  red_DESC
}

type Cup_data_colour_calibPreviousValues {
  id: Int!
  blue: Int!
  c: Int!
  green: Int!
  red: Int!
}

input Cup_data_colour_calibScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_colour_calibScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_colour_calibScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_colour_calibScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  blue: Int

  """
  All values that are not equal to given value.
  """
  blue_not: Int

  """
  All values that are contained in given list.
  """
  blue_in: [Int!]

  """
  All values that are not contained in given list.
  """
  blue_not_in: [Int!]

  """
  All values less than the given value.
  """
  blue_lt: Int

  """
  All values less than or equal the given value.
  """
  blue_lte: Int

  """
  All values greater than the given value.
  """
  blue_gt: Int

  """
  All values greater than or equal the given value.
  """
  blue_gte: Int
  c: Int

  """
  All values that are not equal to given value.
  """
  c_not: Int

  """
  All values that are contained in given list.
  """
  c_in: [Int!]

  """
  All values that are not contained in given list.
  """
  c_not_in: [Int!]

  """
  All values less than the given value.
  """
  c_lt: Int

  """
  All values less than or equal the given value.
  """
  c_lte: Int

  """
  All values greater than the given value.
  """
  c_gt: Int

  """
  All values greater than or equal the given value.
  """
  c_gte: Int
  green: Int

  """
  All values that are not equal to given value.
  """
  green_not: Int

  """
  All values that are contained in given list.
  """
  green_in: [Int!]

  """
  All values that are not contained in given list.
  """
  green_not_in: [Int!]

  """
  All values less than the given value.
  """
  green_lt: Int

  """
  All values less than or equal the given value.
  """
  green_lte: Int

  """
  All values greater than the given value.
  """
  green_gt: Int

  """
  All values greater than or equal the given value.
  """
  green_gte: Int
  red: Int

  """
  All values that are not equal to given value.
  """
  red_not: Int

  """
  All values that are contained in given list.
  """
  red_in: [Int!]

  """
  All values that are not contained in given list.
  """
  red_not_in: [Int!]

  """
  All values less than the given value.
  """
  red_lt: Int

  """
  All values less than or equal the given value.
  """
  red_lte: Int

  """
  All values greater than the given value.
  """
  red_gt: Int

  """
  All values greater than or equal the given value.
  """
  red_gte: Int
}

type Cup_data_colour_calibSubscriptionPayload {
  mutation: MutationType!
  node: Cup_data_colour_calib
  updatedFields: [String!]
  previousValues: Cup_data_colour_calibPreviousValues
}

input Cup_data_colour_calibSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_colour_calibSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_colour_calibSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_colour_calibSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Cup_data_colour_calibWhereInput
}

input Cup_data_colour_calibUpdateInput {
  blue: Int
  c: Int
  green: Int
  red: Int
  serial_number: CupUpdateOneWithoutCup_data_colour_calibsInput
}

input Cup_data_colour_calibUpdateManyDataInput {
  blue: Int
  c: Int
  green: Int
  red: Int
}

input Cup_data_colour_calibUpdateManyMutationInput {
  blue: Int
  c: Int
  green: Int
  red: Int
}

input Cup_data_colour_calibUpdateManyWithoutSerial_numberInput {
  create: [Cup_data_colour_calibCreateWithoutSerial_numberInput!]
  connect: [Cup_data_colour_calibWhereUniqueInput!]
  set: [Cup_data_colour_calibWhereUniqueInput!]
  disconnect: [Cup_data_colour_calibWhereUniqueInput!]
  delete: [Cup_data_colour_calibWhereUniqueInput!]
  update: [Cup_data_colour_calibUpdateWithWhereUniqueWithoutSerial_numberInput!]
  updateMany: [Cup_data_colour_calibUpdateManyWithWhereNestedInput!]
  deleteMany: [Cup_data_colour_calibScalarWhereInput!]
  upsert: [Cup_data_colour_calibUpsertWithWhereUniqueWithoutSerial_numberInput!]
}

input Cup_data_colour_calibUpdateManyWithWhereNestedInput {
  where: Cup_data_colour_calibScalarWhereInput!
  data: Cup_data_colour_calibUpdateManyDataInput!
}

input Cup_data_colour_calibUpdateWithoutSerial_numberDataInput {
  blue: Int
  c: Int
  green: Int
  red: Int
}

input Cup_data_colour_calibUpdateWithWhereUniqueWithoutSerial_numberInput {
  where: Cup_data_colour_calibWhereUniqueInput!
  data: Cup_data_colour_calibUpdateWithoutSerial_numberDataInput!
}

input Cup_data_colour_calibUpsertWithWhereUniqueWithoutSerial_numberInput {
  where: Cup_data_colour_calibWhereUniqueInput!
  update: Cup_data_colour_calibUpdateWithoutSerial_numberDataInput!
  create: Cup_data_colour_calibCreateWithoutSerial_numberInput!
}

input Cup_data_colour_calibWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_colour_calibWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_colour_calibWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_colour_calibWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  blue: Int

  """
  All values that are not equal to given value.
  """
  blue_not: Int

  """
  All values that are contained in given list.
  """
  blue_in: [Int!]

  """
  All values that are not contained in given list.
  """
  blue_not_in: [Int!]

  """
  All values less than the given value.
  """
  blue_lt: Int

  """
  All values less than or equal the given value.
  """
  blue_lte: Int

  """
  All values greater than the given value.
  """
  blue_gt: Int

  """
  All values greater than or equal the given value.
  """
  blue_gte: Int
  c: Int

  """
  All values that are not equal to given value.
  """
  c_not: Int

  """
  All values that are contained in given list.
  """
  c_in: [Int!]

  """
  All values that are not contained in given list.
  """
  c_not_in: [Int!]

  """
  All values less than the given value.
  """
  c_lt: Int

  """
  All values less than or equal the given value.
  """
  c_lte: Int

  """
  All values greater than the given value.
  """
  c_gt: Int

  """
  All values greater than or equal the given value.
  """
  c_gte: Int
  green: Int

  """
  All values that are not equal to given value.
  """
  green_not: Int

  """
  All values that are contained in given list.
  """
  green_in: [Int!]

  """
  All values that are not contained in given list.
  """
  green_not_in: [Int!]

  """
  All values less than the given value.
  """
  green_lt: Int

  """
  All values less than or equal the given value.
  """
  green_lte: Int

  """
  All values greater than the given value.
  """
  green_gt: Int

  """
  All values greater than or equal the given value.
  """
  green_gte: Int
  red: Int

  """
  All values that are not equal to given value.
  """
  red_not: Int

  """
  All values that are contained in given list.
  """
  red_in: [Int!]

  """
  All values that are not contained in given list.
  """
  red_not_in: [Int!]

  """
  All values less than the given value.
  """
  red_lt: Int

  """
  All values less than or equal the given value.
  """
  red_lte: Int

  """
  All values greater than the given value.
  """
  red_gt: Int

  """
  All values greater than or equal the given value.
  """
  red_gte: Int
  serial_number: CupWhereInput
}

input Cup_data_colour_calibWhereUniqueInput {
  id: Int
}

type Cup_data_man_mdates {
  id: Int!
  mdate_row: Cup_data_proc_mdates
  men_finish: DateTime
  men_start: DateTime
}

"""
A connection to a list of items.
"""
type Cup_data_man_mdatesConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [Cup_data_man_mdatesEdge]!
  aggregate: AggregateCup_data_man_mdates!
}

input Cup_data_man_mdatesCreateInput {
  men_finish: DateTime
  men_start: DateTime
  mdate_row: Cup_data_proc_mdatesCreateOneWithoutCup_data_man_mdatesInput
}

input Cup_data_man_mdatesCreateManyWithoutMdate_rowInput {
  create: [Cup_data_man_mdatesCreateWithoutMdate_rowInput!]
  connect: [Cup_data_man_mdatesWhereUniqueInput!]
}

input Cup_data_man_mdatesCreateWithoutMdate_rowInput {
  men_finish: DateTime
  men_start: DateTime
}

"""
An edge in a connection.
"""
type Cup_data_man_mdatesEdge {
  """
  The item at the end of the edge.
  """
  node: Cup_data_man_mdates!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Cup_data_man_mdatesOrderByInput {
  id_ASC
  id_DESC
  men_finish_ASC
  men_finish_DESC
  men_start_ASC
  men_start_DESC
}

type Cup_data_man_mdatesPreviousValues {
  id: Int!
  men_finish: DateTime
  men_start: DateTime
}

input Cup_data_man_mdatesScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_man_mdatesScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_man_mdatesScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_man_mdatesScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  men_finish: DateTime

  """
  All values that are not equal to given value.
  """
  men_finish_not: DateTime

  """
  All values that are contained in given list.
  """
  men_finish_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  men_finish_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  men_finish_lt: DateTime

  """
  All values less than or equal the given value.
  """
  men_finish_lte: DateTime

  """
  All values greater than the given value.
  """
  men_finish_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  men_finish_gte: DateTime
  men_start: DateTime

  """
  All values that are not equal to given value.
  """
  men_start_not: DateTime

  """
  All values that are contained in given list.
  """
  men_start_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  men_start_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  men_start_lt: DateTime

  """
  All values less than or equal the given value.
  """
  men_start_lte: DateTime

  """
  All values greater than the given value.
  """
  men_start_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  men_start_gte: DateTime
}

type Cup_data_man_mdatesSubscriptionPayload {
  mutation: MutationType!
  node: Cup_data_man_mdates
  updatedFields: [String!]
  previousValues: Cup_data_man_mdatesPreviousValues
}

input Cup_data_man_mdatesSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_man_mdatesSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_man_mdatesSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_man_mdatesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Cup_data_man_mdatesWhereInput
}

input Cup_data_man_mdatesUpdateInput {
  men_finish: DateTime
  men_start: DateTime
  mdate_row: Cup_data_proc_mdatesUpdateOneWithoutCup_data_man_mdatesInput
}

input Cup_data_man_mdatesUpdateManyDataInput {
  men_finish: DateTime
  men_start: DateTime
}

input Cup_data_man_mdatesUpdateManyMutationInput {
  men_finish: DateTime
  men_start: DateTime
}

input Cup_data_man_mdatesUpdateManyWithoutMdate_rowInput {
  create: [Cup_data_man_mdatesCreateWithoutMdate_rowInput!]
  connect: [Cup_data_man_mdatesWhereUniqueInput!]
  set: [Cup_data_man_mdatesWhereUniqueInput!]
  disconnect: [Cup_data_man_mdatesWhereUniqueInput!]
  delete: [Cup_data_man_mdatesWhereUniqueInput!]
  update: [Cup_data_man_mdatesUpdateWithWhereUniqueWithoutMdate_rowInput!]
  updateMany: [Cup_data_man_mdatesUpdateManyWithWhereNestedInput!]
  deleteMany: [Cup_data_man_mdatesScalarWhereInput!]
  upsert: [Cup_data_man_mdatesUpsertWithWhereUniqueWithoutMdate_rowInput!]
}

input Cup_data_man_mdatesUpdateManyWithWhereNestedInput {
  where: Cup_data_man_mdatesScalarWhereInput!
  data: Cup_data_man_mdatesUpdateManyDataInput!
}

input Cup_data_man_mdatesUpdateWithoutMdate_rowDataInput {
  men_finish: DateTime
  men_start: DateTime
}

input Cup_data_man_mdatesUpdateWithWhereUniqueWithoutMdate_rowInput {
  where: Cup_data_man_mdatesWhereUniqueInput!
  data: Cup_data_man_mdatesUpdateWithoutMdate_rowDataInput!
}

input Cup_data_man_mdatesUpsertWithWhereUniqueWithoutMdate_rowInput {
  where: Cup_data_man_mdatesWhereUniqueInput!
  update: Cup_data_man_mdatesUpdateWithoutMdate_rowDataInput!
  create: Cup_data_man_mdatesCreateWithoutMdate_rowInput!
}

input Cup_data_man_mdatesWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_man_mdatesWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_man_mdatesWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_man_mdatesWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  men_finish: DateTime

  """
  All values that are not equal to given value.
  """
  men_finish_not: DateTime

  """
  All values that are contained in given list.
  """
  men_finish_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  men_finish_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  men_finish_lt: DateTime

  """
  All values less than or equal the given value.
  """
  men_finish_lte: DateTime

  """
  All values greater than the given value.
  """
  men_finish_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  men_finish_gte: DateTime
  men_start: DateTime

  """
  All values that are not equal to given value.
  """
  men_start_not: DateTime

  """
  All values that are contained in given list.
  """
  men_start_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  men_start_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  men_start_lt: DateTime

  """
  All values less than or equal the given value.
  """
  men_start_lte: DateTime

  """
  All values greater than the given value.
  """
  men_start_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  men_start_gte: DateTime
  mdate_row: Cup_data_proc_mdatesWhereInput
}

input Cup_data_man_mdatesWhereUniqueInput {
  id: Int
}

type Cup_data_proc_flow {
  id: Int!
  date: DateTime!
  hourly_flow: Int!
  mdate_row: Cup_data_proc_mdates
  user: Users
}

"""
A connection to a list of items.
"""
type Cup_data_proc_flowConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [Cup_data_proc_flowEdge]!
  aggregate: AggregateCup_data_proc_flow!
}

input Cup_data_proc_flowCreateInput {
  date: DateTime!
  hourly_flow: Int!
  mdate_row: Cup_data_proc_mdatesCreateOneWithoutCup_data_proc_flowsInput
  user: UsersCreateOneWithoutCup_data_proc_flowsInput
}

input Cup_data_proc_flowCreateManyWithoutMdate_rowInput {
  create: [Cup_data_proc_flowCreateWithoutMdate_rowInput!]
  connect: [Cup_data_proc_flowWhereUniqueInput!]
}

input Cup_data_proc_flowCreateManyWithoutUserInput {
  create: [Cup_data_proc_flowCreateWithoutUserInput!]
  connect: [Cup_data_proc_flowWhereUniqueInput!]
}

input Cup_data_proc_flowCreateWithoutMdate_rowInput {
  date: DateTime!
  hourly_flow: Int!
  user: UsersCreateOneWithoutCup_data_proc_flowsInput
}

input Cup_data_proc_flowCreateWithoutUserInput {
  date: DateTime!
  hourly_flow: Int!
  mdate_row: Cup_data_proc_mdatesCreateOneWithoutCup_data_proc_flowsInput
}

"""
An edge in a connection.
"""
type Cup_data_proc_flowEdge {
  """
  The item at the end of the edge.
  """
  node: Cup_data_proc_flow!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Cup_data_proc_flowOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  hourly_flow_ASC
  hourly_flow_DESC
}

type Cup_data_proc_flowPreviousValues {
  id: Int!
  date: DateTime!
  hourly_flow: Int!
}

input Cup_data_proc_flowScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_proc_flowScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_proc_flowScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_proc_flowScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  date: DateTime

  """
  All values that are not equal to given value.
  """
  date_not: DateTime

  """
  All values that are contained in given list.
  """
  date_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  date_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  date_lt: DateTime

  """
  All values less than or equal the given value.
  """
  date_lte: DateTime

  """
  All values greater than the given value.
  """
  date_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  date_gte: DateTime
  hourly_flow: Int

  """
  All values that are not equal to given value.
  """
  hourly_flow_not: Int

  """
  All values that are contained in given list.
  """
  hourly_flow_in: [Int!]

  """
  All values that are not contained in given list.
  """
  hourly_flow_not_in: [Int!]

  """
  All values less than the given value.
  """
  hourly_flow_lt: Int

  """
  All values less than or equal the given value.
  """
  hourly_flow_lte: Int

  """
  All values greater than the given value.
  """
  hourly_flow_gt: Int

  """
  All values greater than or equal the given value.
  """
  hourly_flow_gte: Int
}

type Cup_data_proc_flowSubscriptionPayload {
  mutation: MutationType!
  node: Cup_data_proc_flow
  updatedFields: [String!]
  previousValues: Cup_data_proc_flowPreviousValues
}

input Cup_data_proc_flowSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_proc_flowSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_proc_flowSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_proc_flowSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Cup_data_proc_flowWhereInput
}

input Cup_data_proc_flowUpdateInput {
  date: DateTime
  hourly_flow: Int
  mdate_row: Cup_data_proc_mdatesUpdateOneWithoutCup_data_proc_flowsInput
  user: UsersUpdateOneWithoutCup_data_proc_flowsInput
}

input Cup_data_proc_flowUpdateManyDataInput {
  date: DateTime
  hourly_flow: Int
}

input Cup_data_proc_flowUpdateManyMutationInput {
  date: DateTime
  hourly_flow: Int
}

input Cup_data_proc_flowUpdateManyWithoutMdate_rowInput {
  create: [Cup_data_proc_flowCreateWithoutMdate_rowInput!]
  connect: [Cup_data_proc_flowWhereUniqueInput!]
  set: [Cup_data_proc_flowWhereUniqueInput!]
  disconnect: [Cup_data_proc_flowWhereUniqueInput!]
  delete: [Cup_data_proc_flowWhereUniqueInput!]
  update: [Cup_data_proc_flowUpdateWithWhereUniqueWithoutMdate_rowInput!]
  updateMany: [Cup_data_proc_flowUpdateManyWithWhereNestedInput!]
  deleteMany: [Cup_data_proc_flowScalarWhereInput!]
  upsert: [Cup_data_proc_flowUpsertWithWhereUniqueWithoutMdate_rowInput!]
}

input Cup_data_proc_flowUpdateManyWithoutUserInput {
  create: [Cup_data_proc_flowCreateWithoutUserInput!]
  connect: [Cup_data_proc_flowWhereUniqueInput!]
  set: [Cup_data_proc_flowWhereUniqueInput!]
  disconnect: [Cup_data_proc_flowWhereUniqueInput!]
  delete: [Cup_data_proc_flowWhereUniqueInput!]
  update: [Cup_data_proc_flowUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [Cup_data_proc_flowUpdateManyWithWhereNestedInput!]
  deleteMany: [Cup_data_proc_flowScalarWhereInput!]
  upsert: [Cup_data_proc_flowUpsertWithWhereUniqueWithoutUserInput!]
}

input Cup_data_proc_flowUpdateManyWithWhereNestedInput {
  where: Cup_data_proc_flowScalarWhereInput!
  data: Cup_data_proc_flowUpdateManyDataInput!
}

input Cup_data_proc_flowUpdateWithoutMdate_rowDataInput {
  date: DateTime
  hourly_flow: Int
  user: UsersUpdateOneWithoutCup_data_proc_flowsInput
}

input Cup_data_proc_flowUpdateWithoutUserDataInput {
  date: DateTime
  hourly_flow: Int
  mdate_row: Cup_data_proc_mdatesUpdateOneWithoutCup_data_proc_flowsInput
}

input Cup_data_proc_flowUpdateWithWhereUniqueWithoutMdate_rowInput {
  where: Cup_data_proc_flowWhereUniqueInput!
  data: Cup_data_proc_flowUpdateWithoutMdate_rowDataInput!
}

input Cup_data_proc_flowUpdateWithWhereUniqueWithoutUserInput {
  where: Cup_data_proc_flowWhereUniqueInput!
  data: Cup_data_proc_flowUpdateWithoutUserDataInput!
}

input Cup_data_proc_flowUpsertWithWhereUniqueWithoutMdate_rowInput {
  where: Cup_data_proc_flowWhereUniqueInput!
  update: Cup_data_proc_flowUpdateWithoutMdate_rowDataInput!
  create: Cup_data_proc_flowCreateWithoutMdate_rowInput!
}

input Cup_data_proc_flowUpsertWithWhereUniqueWithoutUserInput {
  where: Cup_data_proc_flowWhereUniqueInput!
  update: Cup_data_proc_flowUpdateWithoutUserDataInput!
  create: Cup_data_proc_flowCreateWithoutUserInput!
}

input Cup_data_proc_flowWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_proc_flowWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_proc_flowWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_proc_flowWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  date: DateTime

  """
  All values that are not equal to given value.
  """
  date_not: DateTime

  """
  All values that are contained in given list.
  """
  date_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  date_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  date_lt: DateTime

  """
  All values less than or equal the given value.
  """
  date_lte: DateTime

  """
  All values greater than the given value.
  """
  date_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  date_gte: DateTime
  hourly_flow: Int

  """
  All values that are not equal to given value.
  """
  hourly_flow_not: Int

  """
  All values that are contained in given list.
  """
  hourly_flow_in: [Int!]

  """
  All values that are not contained in given list.
  """
  hourly_flow_not_in: [Int!]

  """
  All values less than the given value.
  """
  hourly_flow_lt: Int

  """
  All values less than or equal the given value.
  """
  hourly_flow_lte: Int

  """
  All values greater than the given value.
  """
  hourly_flow_gt: Int

  """
  All values greater than or equal the given value.
  """
  hourly_flow_gte: Int
  mdate_row: Cup_data_proc_mdatesWhereInput
  user: UsersWhereInput
}

input Cup_data_proc_flowWhereUniqueInput {
  id: Int
}

type Cup_data_proc_mdates {
  id: Int!
  cup_data_man_mdates(
    where: Cup_data_man_mdatesWhereInput
    orderBy: Cup_data_man_mdatesOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_man_mdates!]
  cup_data_proc_flows(
    where: Cup_data_proc_flowWhereInput
    orderBy: Cup_data_proc_flowOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_proc_flow!]
  data_rejected: Boolean
  data_verified: Boolean!
  men_finish: DateTime!
  men_start: DateTime!
  reject: Cup_data_rejection
  reward_amount: Int
  user: Users
}

"""
A connection to a list of items.
"""
type Cup_data_proc_mdatesConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [Cup_data_proc_mdatesEdge]!
  aggregate: AggregateCup_data_proc_mdates!
}

input Cup_data_proc_mdatesCreateInput {
  data_rejected: Boolean
  data_verified: Boolean!
  men_finish: DateTime!
  men_start: DateTime!
  reward_amount: Int
  cup_data_man_mdates: Cup_data_man_mdatesCreateManyWithoutMdate_rowInput
  cup_data_proc_flows: Cup_data_proc_flowCreateManyWithoutMdate_rowInput
  reject: Cup_data_rejectionCreateOneWithoutCup_data_proc_mdatesInput
  user: UsersCreateOneWithoutCup_data_proc_mdatesInput
}

input Cup_data_proc_mdatesCreateManyWithoutRejectInput {
  create: [Cup_data_proc_mdatesCreateWithoutRejectInput!]
  connect: [Cup_data_proc_mdatesWhereUniqueInput!]
}

input Cup_data_proc_mdatesCreateManyWithoutUserInput {
  create: [Cup_data_proc_mdatesCreateWithoutUserInput!]
  connect: [Cup_data_proc_mdatesWhereUniqueInput!]
}

input Cup_data_proc_mdatesCreateOneWithoutCup_data_man_mdatesInput {
  create: Cup_data_proc_mdatesCreateWithoutCup_data_man_mdatesInput
  connect: Cup_data_proc_mdatesWhereUniqueInput
}

input Cup_data_proc_mdatesCreateOneWithoutCup_data_proc_flowsInput {
  create: Cup_data_proc_mdatesCreateWithoutCup_data_proc_flowsInput
  connect: Cup_data_proc_mdatesWhereUniqueInput
}

input Cup_data_proc_mdatesCreateWithoutCup_data_man_mdatesInput {
  data_rejected: Boolean
  data_verified: Boolean!
  men_finish: DateTime!
  men_start: DateTime!
  reward_amount: Int
  cup_data_proc_flows: Cup_data_proc_flowCreateManyWithoutMdate_rowInput
  reject: Cup_data_rejectionCreateOneWithoutCup_data_proc_mdatesInput
  user: UsersCreateOneWithoutCup_data_proc_mdatesInput
}

input Cup_data_proc_mdatesCreateWithoutCup_data_proc_flowsInput {
  data_rejected: Boolean
  data_verified: Boolean!
  men_finish: DateTime!
  men_start: DateTime!
  reward_amount: Int
  cup_data_man_mdates: Cup_data_man_mdatesCreateManyWithoutMdate_rowInput
  reject: Cup_data_rejectionCreateOneWithoutCup_data_proc_mdatesInput
  user: UsersCreateOneWithoutCup_data_proc_mdatesInput
}

input Cup_data_proc_mdatesCreateWithoutRejectInput {
  data_rejected: Boolean
  data_verified: Boolean!
  men_finish: DateTime!
  men_start: DateTime!
  reward_amount: Int
  cup_data_man_mdates: Cup_data_man_mdatesCreateManyWithoutMdate_rowInput
  cup_data_proc_flows: Cup_data_proc_flowCreateManyWithoutMdate_rowInput
  user: UsersCreateOneWithoutCup_data_proc_mdatesInput
}

input Cup_data_proc_mdatesCreateWithoutUserInput {
  data_rejected: Boolean
  data_verified: Boolean!
  men_finish: DateTime!
  men_start: DateTime!
  reward_amount: Int
  cup_data_man_mdates: Cup_data_man_mdatesCreateManyWithoutMdate_rowInput
  cup_data_proc_flows: Cup_data_proc_flowCreateManyWithoutMdate_rowInput
  reject: Cup_data_rejectionCreateOneWithoutCup_data_proc_mdatesInput
}

"""
An edge in a connection.
"""
type Cup_data_proc_mdatesEdge {
  """
  The item at the end of the edge.
  """
  node: Cup_data_proc_mdates!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Cup_data_proc_mdatesOrderByInput {
  id_ASC
  id_DESC
  data_rejected_ASC
  data_rejected_DESC
  data_verified_ASC
  data_verified_DESC
  men_finish_ASC
  men_finish_DESC
  men_start_ASC
  men_start_DESC
  reward_amount_ASC
  reward_amount_DESC
}

type Cup_data_proc_mdatesPreviousValues {
  id: Int!
  data_rejected: Boolean
  data_verified: Boolean!
  men_finish: DateTime!
  men_start: DateTime!
  reward_amount: Int
}

input Cup_data_proc_mdatesScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_proc_mdatesScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_proc_mdatesScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_proc_mdatesScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  data_rejected: Boolean

  """
  All values that are not equal to given value.
  """
  data_rejected_not: Boolean
  data_verified: Boolean

  """
  All values that are not equal to given value.
  """
  data_verified_not: Boolean
  men_finish: DateTime

  """
  All values that are not equal to given value.
  """
  men_finish_not: DateTime

  """
  All values that are contained in given list.
  """
  men_finish_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  men_finish_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  men_finish_lt: DateTime

  """
  All values less than or equal the given value.
  """
  men_finish_lte: DateTime

  """
  All values greater than the given value.
  """
  men_finish_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  men_finish_gte: DateTime
  men_start: DateTime

  """
  All values that are not equal to given value.
  """
  men_start_not: DateTime

  """
  All values that are contained in given list.
  """
  men_start_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  men_start_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  men_start_lt: DateTime

  """
  All values less than or equal the given value.
  """
  men_start_lte: DateTime

  """
  All values greater than the given value.
  """
  men_start_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  men_start_gte: DateTime
  reward_amount: Int

  """
  All values that are not equal to given value.
  """
  reward_amount_not: Int

  """
  All values that are contained in given list.
  """
  reward_amount_in: [Int!]

  """
  All values that are not contained in given list.
  """
  reward_amount_not_in: [Int!]

  """
  All values less than the given value.
  """
  reward_amount_lt: Int

  """
  All values less than or equal the given value.
  """
  reward_amount_lte: Int

  """
  All values greater than the given value.
  """
  reward_amount_gt: Int

  """
  All values greater than or equal the given value.
  """
  reward_amount_gte: Int
}

type Cup_data_proc_mdatesSubscriptionPayload {
  mutation: MutationType!
  node: Cup_data_proc_mdates
  updatedFields: [String!]
  previousValues: Cup_data_proc_mdatesPreviousValues
}

input Cup_data_proc_mdatesSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_proc_mdatesSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_proc_mdatesSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_proc_mdatesSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Cup_data_proc_mdatesWhereInput
}

input Cup_data_proc_mdatesUpdateInput {
  data_rejected: Boolean
  data_verified: Boolean
  men_finish: DateTime
  men_start: DateTime
  reward_amount: Int
  cup_data_man_mdates: Cup_data_man_mdatesUpdateManyWithoutMdate_rowInput
  cup_data_proc_flows: Cup_data_proc_flowUpdateManyWithoutMdate_rowInput
  reject: Cup_data_rejectionUpdateOneWithoutCup_data_proc_mdatesInput
  user: UsersUpdateOneWithoutCup_data_proc_mdatesInput
}

input Cup_data_proc_mdatesUpdateManyDataInput {
  data_rejected: Boolean
  data_verified: Boolean
  men_finish: DateTime
  men_start: DateTime
  reward_amount: Int
}

input Cup_data_proc_mdatesUpdateManyMutationInput {
  data_rejected: Boolean
  data_verified: Boolean
  men_finish: DateTime
  men_start: DateTime
  reward_amount: Int
}

input Cup_data_proc_mdatesUpdateManyWithoutRejectInput {
  create: [Cup_data_proc_mdatesCreateWithoutRejectInput!]
  connect: [Cup_data_proc_mdatesWhereUniqueInput!]
  set: [Cup_data_proc_mdatesWhereUniqueInput!]
  disconnect: [Cup_data_proc_mdatesWhereUniqueInput!]
  delete: [Cup_data_proc_mdatesWhereUniqueInput!]
  update: [Cup_data_proc_mdatesUpdateWithWhereUniqueWithoutRejectInput!]
  updateMany: [Cup_data_proc_mdatesUpdateManyWithWhereNestedInput!]
  deleteMany: [Cup_data_proc_mdatesScalarWhereInput!]
  upsert: [Cup_data_proc_mdatesUpsertWithWhereUniqueWithoutRejectInput!]
}

input Cup_data_proc_mdatesUpdateManyWithoutUserInput {
  create: [Cup_data_proc_mdatesCreateWithoutUserInput!]
  connect: [Cup_data_proc_mdatesWhereUniqueInput!]
  set: [Cup_data_proc_mdatesWhereUniqueInput!]
  disconnect: [Cup_data_proc_mdatesWhereUniqueInput!]
  delete: [Cup_data_proc_mdatesWhereUniqueInput!]
  update: [Cup_data_proc_mdatesUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [Cup_data_proc_mdatesUpdateManyWithWhereNestedInput!]
  deleteMany: [Cup_data_proc_mdatesScalarWhereInput!]
  upsert: [Cup_data_proc_mdatesUpsertWithWhereUniqueWithoutUserInput!]
}

input Cup_data_proc_mdatesUpdateManyWithWhereNestedInput {
  where: Cup_data_proc_mdatesScalarWhereInput!
  data: Cup_data_proc_mdatesUpdateManyDataInput!
}

input Cup_data_proc_mdatesUpdateOneWithoutCup_data_man_mdatesInput {
  create: Cup_data_proc_mdatesCreateWithoutCup_data_man_mdatesInput
  connect: Cup_data_proc_mdatesWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: Cup_data_proc_mdatesUpdateWithoutCup_data_man_mdatesDataInput
  upsert: Cup_data_proc_mdatesUpsertWithoutCup_data_man_mdatesInput
}

input Cup_data_proc_mdatesUpdateOneWithoutCup_data_proc_flowsInput {
  create: Cup_data_proc_mdatesCreateWithoutCup_data_proc_flowsInput
  connect: Cup_data_proc_mdatesWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: Cup_data_proc_mdatesUpdateWithoutCup_data_proc_flowsDataInput
  upsert: Cup_data_proc_mdatesUpsertWithoutCup_data_proc_flowsInput
}

input Cup_data_proc_mdatesUpdateWithoutCup_data_man_mdatesDataInput {
  data_rejected: Boolean
  data_verified: Boolean
  men_finish: DateTime
  men_start: DateTime
  reward_amount: Int
  cup_data_proc_flows: Cup_data_proc_flowUpdateManyWithoutMdate_rowInput
  reject: Cup_data_rejectionUpdateOneWithoutCup_data_proc_mdatesInput
  user: UsersUpdateOneWithoutCup_data_proc_mdatesInput
}

input Cup_data_proc_mdatesUpdateWithoutCup_data_proc_flowsDataInput {
  data_rejected: Boolean
  data_verified: Boolean
  men_finish: DateTime
  men_start: DateTime
  reward_amount: Int
  cup_data_man_mdates: Cup_data_man_mdatesUpdateManyWithoutMdate_rowInput
  reject: Cup_data_rejectionUpdateOneWithoutCup_data_proc_mdatesInput
  user: UsersUpdateOneWithoutCup_data_proc_mdatesInput
}

input Cup_data_proc_mdatesUpdateWithoutRejectDataInput {
  data_rejected: Boolean
  data_verified: Boolean
  men_finish: DateTime
  men_start: DateTime
  reward_amount: Int
  cup_data_man_mdates: Cup_data_man_mdatesUpdateManyWithoutMdate_rowInput
  cup_data_proc_flows: Cup_data_proc_flowUpdateManyWithoutMdate_rowInput
  user: UsersUpdateOneWithoutCup_data_proc_mdatesInput
}

input Cup_data_proc_mdatesUpdateWithoutUserDataInput {
  data_rejected: Boolean
  data_verified: Boolean
  men_finish: DateTime
  men_start: DateTime
  reward_amount: Int
  cup_data_man_mdates: Cup_data_man_mdatesUpdateManyWithoutMdate_rowInput
  cup_data_proc_flows: Cup_data_proc_flowUpdateManyWithoutMdate_rowInput
  reject: Cup_data_rejectionUpdateOneWithoutCup_data_proc_mdatesInput
}

input Cup_data_proc_mdatesUpdateWithWhereUniqueWithoutRejectInput {
  where: Cup_data_proc_mdatesWhereUniqueInput!
  data: Cup_data_proc_mdatesUpdateWithoutRejectDataInput!
}

input Cup_data_proc_mdatesUpdateWithWhereUniqueWithoutUserInput {
  where: Cup_data_proc_mdatesWhereUniqueInput!
  data: Cup_data_proc_mdatesUpdateWithoutUserDataInput!
}

input Cup_data_proc_mdatesUpsertWithoutCup_data_man_mdatesInput {
  update: Cup_data_proc_mdatesUpdateWithoutCup_data_man_mdatesDataInput!
  create: Cup_data_proc_mdatesCreateWithoutCup_data_man_mdatesInput!
}

input Cup_data_proc_mdatesUpsertWithoutCup_data_proc_flowsInput {
  update: Cup_data_proc_mdatesUpdateWithoutCup_data_proc_flowsDataInput!
  create: Cup_data_proc_mdatesCreateWithoutCup_data_proc_flowsInput!
}

input Cup_data_proc_mdatesUpsertWithWhereUniqueWithoutRejectInput {
  where: Cup_data_proc_mdatesWhereUniqueInput!
  update: Cup_data_proc_mdatesUpdateWithoutRejectDataInput!
  create: Cup_data_proc_mdatesCreateWithoutRejectInput!
}

input Cup_data_proc_mdatesUpsertWithWhereUniqueWithoutUserInput {
  where: Cup_data_proc_mdatesWhereUniqueInput!
  update: Cup_data_proc_mdatesUpdateWithoutUserDataInput!
  create: Cup_data_proc_mdatesCreateWithoutUserInput!
}

input Cup_data_proc_mdatesWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_proc_mdatesWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_proc_mdatesWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_proc_mdatesWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  data_rejected: Boolean

  """
  All values that are not equal to given value.
  """
  data_rejected_not: Boolean
  data_verified: Boolean

  """
  All values that are not equal to given value.
  """
  data_verified_not: Boolean
  men_finish: DateTime

  """
  All values that are not equal to given value.
  """
  men_finish_not: DateTime

  """
  All values that are contained in given list.
  """
  men_finish_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  men_finish_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  men_finish_lt: DateTime

  """
  All values less than or equal the given value.
  """
  men_finish_lte: DateTime

  """
  All values greater than the given value.
  """
  men_finish_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  men_finish_gte: DateTime
  men_start: DateTime

  """
  All values that are not equal to given value.
  """
  men_start_not: DateTime

  """
  All values that are contained in given list.
  """
  men_start_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  men_start_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  men_start_lt: DateTime

  """
  All values less than or equal the given value.
  """
  men_start_lte: DateTime

  """
  All values greater than the given value.
  """
  men_start_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  men_start_gte: DateTime
  reward_amount: Int

  """
  All values that are not equal to given value.
  """
  reward_amount_not: Int

  """
  All values that are contained in given list.
  """
  reward_amount_in: [Int!]

  """
  All values that are not contained in given list.
  """
  reward_amount_not_in: [Int!]

  """
  All values less than the given value.
  """
  reward_amount_lt: Int

  """
  All values less than or equal the given value.
  """
  reward_amount_lte: Int

  """
  All values greater than the given value.
  """
  reward_amount_gt: Int

  """
  All values greater than or equal the given value.
  """
  reward_amount_gte: Int
  cup_data_man_mdates_every: Cup_data_man_mdatesWhereInput
  cup_data_man_mdates_some: Cup_data_man_mdatesWhereInput
  cup_data_man_mdates_none: Cup_data_man_mdatesWhereInput
  cup_data_proc_flows_every: Cup_data_proc_flowWhereInput
  cup_data_proc_flows_some: Cup_data_proc_flowWhereInput
  cup_data_proc_flows_none: Cup_data_proc_flowWhereInput
  reject: Cup_data_rejectionWhereInput
  user: UsersWhereInput
}

input Cup_data_proc_mdatesWhereUniqueInput {
  id: Int
}

type Cup_data_proc_volume {
  id: Int!
  confidence_l: Int
  confidence_r: Int
  in_vitro: Boolean!
  row: Cup_data
  volume: Int
  volume_adj: Int
  volume_l: Int
  volume_r: Int
}

"""
A connection to a list of items.
"""
type Cup_data_proc_volumeConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [Cup_data_proc_volumeEdge]!
  aggregate: AggregateCup_data_proc_volume!
}

input Cup_data_proc_volumeCreateInput {
  confidence_l: Int
  confidence_r: Int
  in_vitro: Boolean
  volume: Int
  volume_adj: Int
  volume_l: Int
  volume_r: Int
  row: Cup_dataCreateOneWithoutCup_data_proc_volumesInput
}

input Cup_data_proc_volumeCreateManyWithoutRowInput {
  create: [Cup_data_proc_volumeCreateWithoutRowInput!]
  connect: [Cup_data_proc_volumeWhereUniqueInput!]
}

input Cup_data_proc_volumeCreateWithoutRowInput {
  confidence_l: Int
  confidence_r: Int
  in_vitro: Boolean
  volume: Int
  volume_adj: Int
  volume_l: Int
  volume_r: Int
}

"""
An edge in a connection.
"""
type Cup_data_proc_volumeEdge {
  """
  The item at the end of the edge.
  """
  node: Cup_data_proc_volume!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Cup_data_proc_volumeOrderByInput {
  id_ASC
  id_DESC
  confidence_l_ASC
  confidence_l_DESC
  confidence_r_ASC
  confidence_r_DESC
  in_vitro_ASC
  in_vitro_DESC
  volume_ASC
  volume_DESC
  volume_adj_ASC
  volume_adj_DESC
  volume_l_ASC
  volume_l_DESC
  volume_r_ASC
  volume_r_DESC
}

type Cup_data_proc_volumePreviousValues {
  id: Int!
  confidence_l: Int
  confidence_r: Int
  in_vitro: Boolean!
  volume: Int
  volume_adj: Int
  volume_l: Int
  volume_r: Int
}

input Cup_data_proc_volumeScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_proc_volumeScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_proc_volumeScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_proc_volumeScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  confidence_l: Int

  """
  All values that are not equal to given value.
  """
  confidence_l_not: Int

  """
  All values that are contained in given list.
  """
  confidence_l_in: [Int!]

  """
  All values that are not contained in given list.
  """
  confidence_l_not_in: [Int!]

  """
  All values less than the given value.
  """
  confidence_l_lt: Int

  """
  All values less than or equal the given value.
  """
  confidence_l_lte: Int

  """
  All values greater than the given value.
  """
  confidence_l_gt: Int

  """
  All values greater than or equal the given value.
  """
  confidence_l_gte: Int
  confidence_r: Int

  """
  All values that are not equal to given value.
  """
  confidence_r_not: Int

  """
  All values that are contained in given list.
  """
  confidence_r_in: [Int!]

  """
  All values that are not contained in given list.
  """
  confidence_r_not_in: [Int!]

  """
  All values less than the given value.
  """
  confidence_r_lt: Int

  """
  All values less than or equal the given value.
  """
  confidence_r_lte: Int

  """
  All values greater than the given value.
  """
  confidence_r_gt: Int

  """
  All values greater than or equal the given value.
  """
  confidence_r_gte: Int
  in_vitro: Boolean

  """
  All values that are not equal to given value.
  """
  in_vitro_not: Boolean
  volume: Int

  """
  All values that are not equal to given value.
  """
  volume_not: Int

  """
  All values that are contained in given list.
  """
  volume_in: [Int!]

  """
  All values that are not contained in given list.
  """
  volume_not_in: [Int!]

  """
  All values less than the given value.
  """
  volume_lt: Int

  """
  All values less than or equal the given value.
  """
  volume_lte: Int

  """
  All values greater than the given value.
  """
  volume_gt: Int

  """
  All values greater than or equal the given value.
  """
  volume_gte: Int
  volume_adj: Int

  """
  All values that are not equal to given value.
  """
  volume_adj_not: Int

  """
  All values that are contained in given list.
  """
  volume_adj_in: [Int!]

  """
  All values that are not contained in given list.
  """
  volume_adj_not_in: [Int!]

  """
  All values less than the given value.
  """
  volume_adj_lt: Int

  """
  All values less than or equal the given value.
  """
  volume_adj_lte: Int

  """
  All values greater than the given value.
  """
  volume_adj_gt: Int

  """
  All values greater than or equal the given value.
  """
  volume_adj_gte: Int
  volume_l: Int

  """
  All values that are not equal to given value.
  """
  volume_l_not: Int

  """
  All values that are contained in given list.
  """
  volume_l_in: [Int!]

  """
  All values that are not contained in given list.
  """
  volume_l_not_in: [Int!]

  """
  All values less than the given value.
  """
  volume_l_lt: Int

  """
  All values less than or equal the given value.
  """
  volume_l_lte: Int

  """
  All values greater than the given value.
  """
  volume_l_gt: Int

  """
  All values greater than or equal the given value.
  """
  volume_l_gte: Int
  volume_r: Int

  """
  All values that are not equal to given value.
  """
  volume_r_not: Int

  """
  All values that are contained in given list.
  """
  volume_r_in: [Int!]

  """
  All values that are not contained in given list.
  """
  volume_r_not_in: [Int!]

  """
  All values less than the given value.
  """
  volume_r_lt: Int

  """
  All values less than or equal the given value.
  """
  volume_r_lte: Int

  """
  All values greater than the given value.
  """
  volume_r_gt: Int

  """
  All values greater than or equal the given value.
  """
  volume_r_gte: Int
}

type Cup_data_proc_volumeSubscriptionPayload {
  mutation: MutationType!
  node: Cup_data_proc_volume
  updatedFields: [String!]
  previousValues: Cup_data_proc_volumePreviousValues
}

input Cup_data_proc_volumeSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_proc_volumeSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_proc_volumeSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_proc_volumeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Cup_data_proc_volumeWhereInput
}

input Cup_data_proc_volumeUpdateInput {
  confidence_l: Int
  confidence_r: Int
  in_vitro: Boolean
  volume: Int
  volume_adj: Int
  volume_l: Int
  volume_r: Int
  row: Cup_dataUpdateOneWithoutCup_data_proc_volumesInput
}

input Cup_data_proc_volumeUpdateManyDataInput {
  confidence_l: Int
  confidence_r: Int
  in_vitro: Boolean
  volume: Int
  volume_adj: Int
  volume_l: Int
  volume_r: Int
}

input Cup_data_proc_volumeUpdateManyMutationInput {
  confidence_l: Int
  confidence_r: Int
  in_vitro: Boolean
  volume: Int
  volume_adj: Int
  volume_l: Int
  volume_r: Int
}

input Cup_data_proc_volumeUpdateManyWithoutRowInput {
  create: [Cup_data_proc_volumeCreateWithoutRowInput!]
  connect: [Cup_data_proc_volumeWhereUniqueInput!]
  set: [Cup_data_proc_volumeWhereUniqueInput!]
  disconnect: [Cup_data_proc_volumeWhereUniqueInput!]
  delete: [Cup_data_proc_volumeWhereUniqueInput!]
  update: [Cup_data_proc_volumeUpdateWithWhereUniqueWithoutRowInput!]
  updateMany: [Cup_data_proc_volumeUpdateManyWithWhereNestedInput!]
  deleteMany: [Cup_data_proc_volumeScalarWhereInput!]
  upsert: [Cup_data_proc_volumeUpsertWithWhereUniqueWithoutRowInput!]
}

input Cup_data_proc_volumeUpdateManyWithWhereNestedInput {
  where: Cup_data_proc_volumeScalarWhereInput!
  data: Cup_data_proc_volumeUpdateManyDataInput!
}

input Cup_data_proc_volumeUpdateWithoutRowDataInput {
  confidence_l: Int
  confidence_r: Int
  in_vitro: Boolean
  volume: Int
  volume_adj: Int
  volume_l: Int
  volume_r: Int
}

input Cup_data_proc_volumeUpdateWithWhereUniqueWithoutRowInput {
  where: Cup_data_proc_volumeWhereUniqueInput!
  data: Cup_data_proc_volumeUpdateWithoutRowDataInput!
}

input Cup_data_proc_volumeUpsertWithWhereUniqueWithoutRowInput {
  where: Cup_data_proc_volumeWhereUniqueInput!
  update: Cup_data_proc_volumeUpdateWithoutRowDataInput!
  create: Cup_data_proc_volumeCreateWithoutRowInput!
}

input Cup_data_proc_volumeWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_proc_volumeWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_proc_volumeWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_proc_volumeWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  confidence_l: Int

  """
  All values that are not equal to given value.
  """
  confidence_l_not: Int

  """
  All values that are contained in given list.
  """
  confidence_l_in: [Int!]

  """
  All values that are not contained in given list.
  """
  confidence_l_not_in: [Int!]

  """
  All values less than the given value.
  """
  confidence_l_lt: Int

  """
  All values less than or equal the given value.
  """
  confidence_l_lte: Int

  """
  All values greater than the given value.
  """
  confidence_l_gt: Int

  """
  All values greater than or equal the given value.
  """
  confidence_l_gte: Int
  confidence_r: Int

  """
  All values that are not equal to given value.
  """
  confidence_r_not: Int

  """
  All values that are contained in given list.
  """
  confidence_r_in: [Int!]

  """
  All values that are not contained in given list.
  """
  confidence_r_not_in: [Int!]

  """
  All values less than the given value.
  """
  confidence_r_lt: Int

  """
  All values less than or equal the given value.
  """
  confidence_r_lte: Int

  """
  All values greater than the given value.
  """
  confidence_r_gt: Int

  """
  All values greater than or equal the given value.
  """
  confidence_r_gte: Int
  in_vitro: Boolean

  """
  All values that are not equal to given value.
  """
  in_vitro_not: Boolean
  volume: Int

  """
  All values that are not equal to given value.
  """
  volume_not: Int

  """
  All values that are contained in given list.
  """
  volume_in: [Int!]

  """
  All values that are not contained in given list.
  """
  volume_not_in: [Int!]

  """
  All values less than the given value.
  """
  volume_lt: Int

  """
  All values less than or equal the given value.
  """
  volume_lte: Int

  """
  All values greater than the given value.
  """
  volume_gt: Int

  """
  All values greater than or equal the given value.
  """
  volume_gte: Int
  volume_adj: Int

  """
  All values that are not equal to given value.
  """
  volume_adj_not: Int

  """
  All values that are contained in given list.
  """
  volume_adj_in: [Int!]

  """
  All values that are not contained in given list.
  """
  volume_adj_not_in: [Int!]

  """
  All values less than the given value.
  """
  volume_adj_lt: Int

  """
  All values less than or equal the given value.
  """
  volume_adj_lte: Int

  """
  All values greater than the given value.
  """
  volume_adj_gt: Int

  """
  All values greater than or equal the given value.
  """
  volume_adj_gte: Int
  volume_l: Int

  """
  All values that are not equal to given value.
  """
  volume_l_not: Int

  """
  All values that are contained in given list.
  """
  volume_l_in: [Int!]

  """
  All values that are not contained in given list.
  """
  volume_l_not_in: [Int!]

  """
  All values less than the given value.
  """
  volume_l_lt: Int

  """
  All values less than or equal the given value.
  """
  volume_l_lte: Int

  """
  All values greater than the given value.
  """
  volume_l_gt: Int

  """
  All values greater than or equal the given value.
  """
  volume_l_gte: Int
  volume_r: Int

  """
  All values that are not equal to given value.
  """
  volume_r_not: Int

  """
  All values that are contained in given list.
  """
  volume_r_in: [Int!]

  """
  All values that are not contained in given list.
  """
  volume_r_not_in: [Int!]

  """
  All values less than the given value.
  """
  volume_r_lt: Int

  """
  All values less than or equal the given value.
  """
  volume_r_lte: Int

  """
  All values greater than the given value.
  """
  volume_r_gt: Int

  """
  All values greater than or equal the given value.
  """
  volume_r_gte: Int
  row: Cup_dataWhereInput
}

input Cup_data_proc_volumeWhereUniqueInput {
  id: Int
}

type Cup_data_qa_response {
  id: Int!
  answer: Cup_data_answer
  qa_date: DateTime!
  question: Cup_data_question
  user: Users
}

"""
A connection to a list of items.
"""
type Cup_data_qa_responseConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [Cup_data_qa_responseEdge]!
  aggregate: AggregateCup_data_qa_response!
}

input Cup_data_qa_responseCreateInput {
  qa_date: DateTime!
  answer: Cup_data_answerCreateOneWithoutCup_data_qa_responsesInput
  question: Cup_data_questionCreateOneWithoutCup_data_qa_responsesInput
  user: UsersCreateOneWithoutCup_data_qa_responsesInput
}

input Cup_data_qa_responseCreateManyWithoutAnswerInput {
  create: [Cup_data_qa_responseCreateWithoutAnswerInput!]
  connect: [Cup_data_qa_responseWhereUniqueInput!]
}

input Cup_data_qa_responseCreateManyWithoutQuestionInput {
  create: [Cup_data_qa_responseCreateWithoutQuestionInput!]
  connect: [Cup_data_qa_responseWhereUniqueInput!]
}

input Cup_data_qa_responseCreateManyWithoutUserInput {
  create: [Cup_data_qa_responseCreateWithoutUserInput!]
  connect: [Cup_data_qa_responseWhereUniqueInput!]
}

input Cup_data_qa_responseCreateWithoutAnswerInput {
  qa_date: DateTime!
  question: Cup_data_questionCreateOneWithoutCup_data_qa_responsesInput
  user: UsersCreateOneWithoutCup_data_qa_responsesInput
}

input Cup_data_qa_responseCreateWithoutQuestionInput {
  qa_date: DateTime!
  answer: Cup_data_answerCreateOneWithoutCup_data_qa_responsesInput
  user: UsersCreateOneWithoutCup_data_qa_responsesInput
}

input Cup_data_qa_responseCreateWithoutUserInput {
  qa_date: DateTime!
  answer: Cup_data_answerCreateOneWithoutCup_data_qa_responsesInput
  question: Cup_data_questionCreateOneWithoutCup_data_qa_responsesInput
}

"""
An edge in a connection.
"""
type Cup_data_qa_responseEdge {
  """
  The item at the end of the edge.
  """
  node: Cup_data_qa_response!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Cup_data_qa_responseOrderByInput {
  id_ASC
  id_DESC
  qa_date_ASC
  qa_date_DESC
}

type Cup_data_qa_responsePreviousValues {
  id: Int!
  qa_date: DateTime!
}

input Cup_data_qa_responseScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_qa_responseScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_qa_responseScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_qa_responseScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  qa_date: DateTime

  """
  All values that are not equal to given value.
  """
  qa_date_not: DateTime

  """
  All values that are contained in given list.
  """
  qa_date_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  qa_date_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  qa_date_lt: DateTime

  """
  All values less than or equal the given value.
  """
  qa_date_lte: DateTime

  """
  All values greater than the given value.
  """
  qa_date_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  qa_date_gte: DateTime
}

type Cup_data_qa_responseSubscriptionPayload {
  mutation: MutationType!
  node: Cup_data_qa_response
  updatedFields: [String!]
  previousValues: Cup_data_qa_responsePreviousValues
}

input Cup_data_qa_responseSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_qa_responseSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_qa_responseSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_qa_responseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Cup_data_qa_responseWhereInput
}

input Cup_data_qa_responseUpdateInput {
  qa_date: DateTime
  answer: Cup_data_answerUpdateOneWithoutCup_data_qa_responsesInput
  question: Cup_data_questionUpdateOneWithoutCup_data_qa_responsesInput
  user: UsersUpdateOneWithoutCup_data_qa_responsesInput
}

input Cup_data_qa_responseUpdateManyDataInput {
  qa_date: DateTime
}

input Cup_data_qa_responseUpdateManyMutationInput {
  qa_date: DateTime
}

input Cup_data_qa_responseUpdateManyWithoutAnswerInput {
  create: [Cup_data_qa_responseCreateWithoutAnswerInput!]
  connect: [Cup_data_qa_responseWhereUniqueInput!]
  set: [Cup_data_qa_responseWhereUniqueInput!]
  disconnect: [Cup_data_qa_responseWhereUniqueInput!]
  delete: [Cup_data_qa_responseWhereUniqueInput!]
  update: [Cup_data_qa_responseUpdateWithWhereUniqueWithoutAnswerInput!]
  updateMany: [Cup_data_qa_responseUpdateManyWithWhereNestedInput!]
  deleteMany: [Cup_data_qa_responseScalarWhereInput!]
  upsert: [Cup_data_qa_responseUpsertWithWhereUniqueWithoutAnswerInput!]
}

input Cup_data_qa_responseUpdateManyWithoutQuestionInput {
  create: [Cup_data_qa_responseCreateWithoutQuestionInput!]
  connect: [Cup_data_qa_responseWhereUniqueInput!]
  set: [Cup_data_qa_responseWhereUniqueInput!]
  disconnect: [Cup_data_qa_responseWhereUniqueInput!]
  delete: [Cup_data_qa_responseWhereUniqueInput!]
  update: [Cup_data_qa_responseUpdateWithWhereUniqueWithoutQuestionInput!]
  updateMany: [Cup_data_qa_responseUpdateManyWithWhereNestedInput!]
  deleteMany: [Cup_data_qa_responseScalarWhereInput!]
  upsert: [Cup_data_qa_responseUpsertWithWhereUniqueWithoutQuestionInput!]
}

input Cup_data_qa_responseUpdateManyWithoutUserInput {
  create: [Cup_data_qa_responseCreateWithoutUserInput!]
  connect: [Cup_data_qa_responseWhereUniqueInput!]
  set: [Cup_data_qa_responseWhereUniqueInput!]
  disconnect: [Cup_data_qa_responseWhereUniqueInput!]
  delete: [Cup_data_qa_responseWhereUniqueInput!]
  update: [Cup_data_qa_responseUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [Cup_data_qa_responseUpdateManyWithWhereNestedInput!]
  deleteMany: [Cup_data_qa_responseScalarWhereInput!]
  upsert: [Cup_data_qa_responseUpsertWithWhereUniqueWithoutUserInput!]
}

input Cup_data_qa_responseUpdateManyWithWhereNestedInput {
  where: Cup_data_qa_responseScalarWhereInput!
  data: Cup_data_qa_responseUpdateManyDataInput!
}

input Cup_data_qa_responseUpdateWithoutAnswerDataInput {
  qa_date: DateTime
  question: Cup_data_questionUpdateOneWithoutCup_data_qa_responsesInput
  user: UsersUpdateOneWithoutCup_data_qa_responsesInput
}

input Cup_data_qa_responseUpdateWithoutQuestionDataInput {
  qa_date: DateTime
  answer: Cup_data_answerUpdateOneWithoutCup_data_qa_responsesInput
  user: UsersUpdateOneWithoutCup_data_qa_responsesInput
}

input Cup_data_qa_responseUpdateWithoutUserDataInput {
  qa_date: DateTime
  answer: Cup_data_answerUpdateOneWithoutCup_data_qa_responsesInput
  question: Cup_data_questionUpdateOneWithoutCup_data_qa_responsesInput
}

input Cup_data_qa_responseUpdateWithWhereUniqueWithoutAnswerInput {
  where: Cup_data_qa_responseWhereUniqueInput!
  data: Cup_data_qa_responseUpdateWithoutAnswerDataInput!
}

input Cup_data_qa_responseUpdateWithWhereUniqueWithoutQuestionInput {
  where: Cup_data_qa_responseWhereUniqueInput!
  data: Cup_data_qa_responseUpdateWithoutQuestionDataInput!
}

input Cup_data_qa_responseUpdateWithWhereUniqueWithoutUserInput {
  where: Cup_data_qa_responseWhereUniqueInput!
  data: Cup_data_qa_responseUpdateWithoutUserDataInput!
}

input Cup_data_qa_responseUpsertWithWhereUniqueWithoutAnswerInput {
  where: Cup_data_qa_responseWhereUniqueInput!
  update: Cup_data_qa_responseUpdateWithoutAnswerDataInput!
  create: Cup_data_qa_responseCreateWithoutAnswerInput!
}

input Cup_data_qa_responseUpsertWithWhereUniqueWithoutQuestionInput {
  where: Cup_data_qa_responseWhereUniqueInput!
  update: Cup_data_qa_responseUpdateWithoutQuestionDataInput!
  create: Cup_data_qa_responseCreateWithoutQuestionInput!
}

input Cup_data_qa_responseUpsertWithWhereUniqueWithoutUserInput {
  where: Cup_data_qa_responseWhereUniqueInput!
  update: Cup_data_qa_responseUpdateWithoutUserDataInput!
  create: Cup_data_qa_responseCreateWithoutUserInput!
}

input Cup_data_qa_responseWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_qa_responseWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_qa_responseWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_qa_responseWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  qa_date: DateTime

  """
  All values that are not equal to given value.
  """
  qa_date_not: DateTime

  """
  All values that are contained in given list.
  """
  qa_date_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  qa_date_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  qa_date_lt: DateTime

  """
  All values less than or equal the given value.
  """
  qa_date_lte: DateTime

  """
  All values greater than the given value.
  """
  qa_date_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  qa_date_gte: DateTime
  answer: Cup_data_answerWhereInput
  question: Cup_data_questionWhereInput
  user: UsersWhereInput
}

input Cup_data_qa_responseWhereUniqueInput {
  id: Int
  qa_date: DateTime
}

type Cup_data_question {
  id: Int!
  cup_data_answers(
    where: Cup_data_answerWhereInput
    orderBy: Cup_data_answerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_answer!]
  cup_data_qa_responses(
    where: Cup_data_qa_responseWhereInput
    orderBy: Cup_data_qa_responseOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_qa_response!]
  question_text: String!
}

"""
A connection to a list of items.
"""
type Cup_data_questionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [Cup_data_questionEdge]!
  aggregate: AggregateCup_data_question!
}

input Cup_data_questionCreateInput {
  question_text: String!
  cup_data_answers: Cup_data_answerCreateManyWithoutQuestionInput
  cup_data_qa_responses: Cup_data_qa_responseCreateManyWithoutQuestionInput
}

input Cup_data_questionCreateOneWithoutCup_data_answersInput {
  create: Cup_data_questionCreateWithoutCup_data_answersInput
  connect: Cup_data_questionWhereUniqueInput
}

input Cup_data_questionCreateOneWithoutCup_data_qa_responsesInput {
  create: Cup_data_questionCreateWithoutCup_data_qa_responsesInput
  connect: Cup_data_questionWhereUniqueInput
}

input Cup_data_questionCreateWithoutCup_data_answersInput {
  question_text: String!
  cup_data_qa_responses: Cup_data_qa_responseCreateManyWithoutQuestionInput
}

input Cup_data_questionCreateWithoutCup_data_qa_responsesInput {
  question_text: String!
  cup_data_answers: Cup_data_answerCreateManyWithoutQuestionInput
}

"""
An edge in a connection.
"""
type Cup_data_questionEdge {
  """
  The item at the end of the edge.
  """
  node: Cup_data_question!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Cup_data_questionOrderByInput {
  id_ASC
  id_DESC
  question_text_ASC
  question_text_DESC
}

type Cup_data_questionPreviousValues {
  id: Int!
  question_text: String!
}

type Cup_data_questionSubscriptionPayload {
  mutation: MutationType!
  node: Cup_data_question
  updatedFields: [String!]
  previousValues: Cup_data_questionPreviousValues
}

input Cup_data_questionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_questionSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_questionSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_questionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Cup_data_questionWhereInput
}

input Cup_data_questionUpdateInput {
  question_text: String
  cup_data_answers: Cup_data_answerUpdateManyWithoutQuestionInput
  cup_data_qa_responses: Cup_data_qa_responseUpdateManyWithoutQuestionInput
}

input Cup_data_questionUpdateManyMutationInput {
  question_text: String
}

input Cup_data_questionUpdateOneWithoutCup_data_answersInput {
  create: Cup_data_questionCreateWithoutCup_data_answersInput
  connect: Cup_data_questionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: Cup_data_questionUpdateWithoutCup_data_answersDataInput
  upsert: Cup_data_questionUpsertWithoutCup_data_answersInput
}

input Cup_data_questionUpdateOneWithoutCup_data_qa_responsesInput {
  create: Cup_data_questionCreateWithoutCup_data_qa_responsesInput
  connect: Cup_data_questionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: Cup_data_questionUpdateWithoutCup_data_qa_responsesDataInput
  upsert: Cup_data_questionUpsertWithoutCup_data_qa_responsesInput
}

input Cup_data_questionUpdateWithoutCup_data_answersDataInput {
  question_text: String
  cup_data_qa_responses: Cup_data_qa_responseUpdateManyWithoutQuestionInput
}

input Cup_data_questionUpdateWithoutCup_data_qa_responsesDataInput {
  question_text: String
  cup_data_answers: Cup_data_answerUpdateManyWithoutQuestionInput
}

input Cup_data_questionUpsertWithoutCup_data_answersInput {
  update: Cup_data_questionUpdateWithoutCup_data_answersDataInput!
  create: Cup_data_questionCreateWithoutCup_data_answersInput!
}

input Cup_data_questionUpsertWithoutCup_data_qa_responsesInput {
  update: Cup_data_questionUpdateWithoutCup_data_qa_responsesDataInput!
  create: Cup_data_questionCreateWithoutCup_data_qa_responsesInput!
}

input Cup_data_questionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_questionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_questionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_questionWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  question_text: String

  """
  All values that are not equal to given value.
  """
  question_text_not: String

  """
  All values that are contained in given list.
  """
  question_text_in: [String!]

  """
  All values that are not contained in given list.
  """
  question_text_not_in: [String!]

  """
  All values less than the given value.
  """
  question_text_lt: String

  """
  All values less than or equal the given value.
  """
  question_text_lte: String

  """
  All values greater than the given value.
  """
  question_text_gt: String

  """
  All values greater than or equal the given value.
  """
  question_text_gte: String

  """
  All values containing the given string.
  """
  question_text_contains: String

  """
  All values not containing the given string.
  """
  question_text_not_contains: String

  """
  All values starting with the given string.
  """
  question_text_starts_with: String

  """
  All values not starting with the given string.
  """
  question_text_not_starts_with: String

  """
  All values ending with the given string.
  """
  question_text_ends_with: String

  """
  All values not ending with the given string.
  """
  question_text_not_ends_with: String
  cup_data_answers_every: Cup_data_answerWhereInput
  cup_data_answers_some: Cup_data_answerWhereInput
  cup_data_answers_none: Cup_data_answerWhereInput
  cup_data_qa_responses_every: Cup_data_qa_responseWhereInput
  cup_data_qa_responses_some: Cup_data_qa_responseWhereInput
  cup_data_qa_responses_none: Cup_data_qa_responseWhereInput
}

input Cup_data_questionWhereUniqueInput {
  id: Int
}

type Cup_data_raw {
  id: Int!
  page_data: String!
  serial_number: Cup
}

"""
A connection to a list of items.
"""
type Cup_data_rawConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [Cup_data_rawEdge]!
  aggregate: AggregateCup_data_raw!
}

input Cup_data_rawCreateInput {
  page_data: String!
  serial_number: CupCreateOneWithoutCup_data_rawsInput
}

input Cup_data_rawCreateManyWithoutSerial_numberInput {
  create: [Cup_data_rawCreateWithoutSerial_numberInput!]
  connect: [Cup_data_rawWhereUniqueInput!]
}

input Cup_data_rawCreateWithoutSerial_numberInput {
  page_data: String!
}

"""
An edge in a connection.
"""
type Cup_data_rawEdge {
  """
  The item at the end of the edge.
  """
  node: Cup_data_raw!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Cup_data_rawOrderByInput {
  id_ASC
  id_DESC
  page_data_ASC
  page_data_DESC
}

type Cup_data_rawPreviousValues {
  id: Int!
  page_data: String!
}

input Cup_data_rawScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_rawScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_rawScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_rawScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  page_data: String

  """
  All values that are not equal to given value.
  """
  page_data_not: String

  """
  All values that are contained in given list.
  """
  page_data_in: [String!]

  """
  All values that are not contained in given list.
  """
  page_data_not_in: [String!]

  """
  All values less than the given value.
  """
  page_data_lt: String

  """
  All values less than or equal the given value.
  """
  page_data_lte: String

  """
  All values greater than the given value.
  """
  page_data_gt: String

  """
  All values greater than or equal the given value.
  """
  page_data_gte: String

  """
  All values containing the given string.
  """
  page_data_contains: String

  """
  All values not containing the given string.
  """
  page_data_not_contains: String

  """
  All values starting with the given string.
  """
  page_data_starts_with: String

  """
  All values not starting with the given string.
  """
  page_data_not_starts_with: String

  """
  All values ending with the given string.
  """
  page_data_ends_with: String

  """
  All values not ending with the given string.
  """
  page_data_not_ends_with: String
}

type Cup_data_rawSubscriptionPayload {
  mutation: MutationType!
  node: Cup_data_raw
  updatedFields: [String!]
  previousValues: Cup_data_rawPreviousValues
}

input Cup_data_rawSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_rawSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_rawSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_rawSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Cup_data_rawWhereInput
}

input Cup_data_rawUpdateInput {
  page_data: String
  serial_number: CupUpdateOneWithoutCup_data_rawsInput
}

input Cup_data_rawUpdateManyDataInput {
  page_data: String
}

input Cup_data_rawUpdateManyMutationInput {
  page_data: String
}

input Cup_data_rawUpdateManyWithoutSerial_numberInput {
  create: [Cup_data_rawCreateWithoutSerial_numberInput!]
  connect: [Cup_data_rawWhereUniqueInput!]
  set: [Cup_data_rawWhereUniqueInput!]
  disconnect: [Cup_data_rawWhereUniqueInput!]
  delete: [Cup_data_rawWhereUniqueInput!]
  update: [Cup_data_rawUpdateWithWhereUniqueWithoutSerial_numberInput!]
  updateMany: [Cup_data_rawUpdateManyWithWhereNestedInput!]
  deleteMany: [Cup_data_rawScalarWhereInput!]
  upsert: [Cup_data_rawUpsertWithWhereUniqueWithoutSerial_numberInput!]
}

input Cup_data_rawUpdateManyWithWhereNestedInput {
  where: Cup_data_rawScalarWhereInput!
  data: Cup_data_rawUpdateManyDataInput!
}

input Cup_data_rawUpdateWithoutSerial_numberDataInput {
  page_data: String
}

input Cup_data_rawUpdateWithWhereUniqueWithoutSerial_numberInput {
  where: Cup_data_rawWhereUniqueInput!
  data: Cup_data_rawUpdateWithoutSerial_numberDataInput!
}

input Cup_data_rawUpsertWithWhereUniqueWithoutSerial_numberInput {
  where: Cup_data_rawWhereUniqueInput!
  update: Cup_data_rawUpdateWithoutSerial_numberDataInput!
  create: Cup_data_rawCreateWithoutSerial_numberInput!
}

input Cup_data_rawWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_rawWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_rawWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_rawWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  page_data: String

  """
  All values that are not equal to given value.
  """
  page_data_not: String

  """
  All values that are contained in given list.
  """
  page_data_in: [String!]

  """
  All values that are not contained in given list.
  """
  page_data_not_in: [String!]

  """
  All values less than the given value.
  """
  page_data_lt: String

  """
  All values less than or equal the given value.
  """
  page_data_lte: String

  """
  All values greater than the given value.
  """
  page_data_gt: String

  """
  All values greater than or equal the given value.
  """
  page_data_gte: String

  """
  All values containing the given string.
  """
  page_data_contains: String

  """
  All values not containing the given string.
  """
  page_data_not_contains: String

  """
  All values starting with the given string.
  """
  page_data_starts_with: String

  """
  All values not starting with the given string.
  """
  page_data_not_starts_with: String

  """
  All values ending with the given string.
  """
  page_data_ends_with: String

  """
  All values not ending with the given string.
  """
  page_data_not_ends_with: String
  serial_number: CupWhereInput
}

input Cup_data_rawWhereUniqueInput {
  id: Int
}

type Cup_data_rejection {
  id: Int!
  cup_data_proc_mdates(
    where: Cup_data_proc_mdatesWhereInput
    orderBy: Cup_data_proc_mdatesOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_proc_mdates!]
  rejection_description: String!
}

"""
A connection to a list of items.
"""
type Cup_data_rejectionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [Cup_data_rejectionEdge]!
  aggregate: AggregateCup_data_rejection!
}

input Cup_data_rejectionCreateInput {
  rejection_description: String!
  cup_data_proc_mdates: Cup_data_proc_mdatesCreateManyWithoutRejectInput
}

input Cup_data_rejectionCreateOneWithoutCup_data_proc_mdatesInput {
  create: Cup_data_rejectionCreateWithoutCup_data_proc_mdatesInput
  connect: Cup_data_rejectionWhereUniqueInput
}

input Cup_data_rejectionCreateWithoutCup_data_proc_mdatesInput {
  rejection_description: String!
}

"""
An edge in a connection.
"""
type Cup_data_rejectionEdge {
  """
  The item at the end of the edge.
  """
  node: Cup_data_rejection!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Cup_data_rejectionOrderByInput {
  id_ASC
  id_DESC
  rejection_description_ASC
  rejection_description_DESC
}

type Cup_data_rejectionPreviousValues {
  id: Int!
  rejection_description: String!
}

type Cup_data_rejectionSubscriptionPayload {
  mutation: MutationType!
  node: Cup_data_rejection
  updatedFields: [String!]
  previousValues: Cup_data_rejectionPreviousValues
}

input Cup_data_rejectionSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_rejectionSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_rejectionSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_rejectionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Cup_data_rejectionWhereInput
}

input Cup_data_rejectionUpdateInput {
  rejection_description: String
  cup_data_proc_mdates: Cup_data_proc_mdatesUpdateManyWithoutRejectInput
}

input Cup_data_rejectionUpdateManyMutationInput {
  rejection_description: String
}

input Cup_data_rejectionUpdateOneWithoutCup_data_proc_mdatesInput {
  create: Cup_data_rejectionCreateWithoutCup_data_proc_mdatesInput
  connect: Cup_data_rejectionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: Cup_data_rejectionUpdateWithoutCup_data_proc_mdatesDataInput
  upsert: Cup_data_rejectionUpsertWithoutCup_data_proc_mdatesInput
}

input Cup_data_rejectionUpdateWithoutCup_data_proc_mdatesDataInput {
  rejection_description: String
}

input Cup_data_rejectionUpsertWithoutCup_data_proc_mdatesInput {
  update: Cup_data_rejectionUpdateWithoutCup_data_proc_mdatesDataInput!
  create: Cup_data_rejectionCreateWithoutCup_data_proc_mdatesInput!
}

input Cup_data_rejectionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_rejectionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_rejectionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_rejectionWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  rejection_description: String

  """
  All values that are not equal to given value.
  """
  rejection_description_not: String

  """
  All values that are contained in given list.
  """
  rejection_description_in: [String!]

  """
  All values that are not contained in given list.
  """
  rejection_description_not_in: [String!]

  """
  All values less than the given value.
  """
  rejection_description_lt: String

  """
  All values less than or equal the given value.
  """
  rejection_description_lte: String

  """
  All values greater than the given value.
  """
  rejection_description_gt: String

  """
  All values greater than or equal the given value.
  """
  rejection_description_gte: String

  """
  All values containing the given string.
  """
  rejection_description_contains: String

  """
  All values not containing the given string.
  """
  rejection_description_not_contains: String

  """
  All values starting with the given string.
  """
  rejection_description_starts_with: String

  """
  All values not starting with the given string.
  """
  rejection_description_not_starts_with: String

  """
  All values ending with the given string.
  """
  rejection_description_ends_with: String

  """
  All values not ending with the given string.
  """
  rejection_description_not_ends_with: String
  cup_data_proc_mdates_every: Cup_data_proc_mdatesWhereInput
  cup_data_proc_mdates_some: Cup_data_proc_mdatesWhereInput
  cup_data_proc_mdates_none: Cup_data_proc_mdatesWhereInput
}

input Cup_data_rejectionWhereUniqueInput {
  id: Int
  rejection_description: String
}

type Cup_data_user_remove {
  id: Int!
  change_time: DateTime!
  explain: Cup_data_user_remove_explain
  serial_number: Cup
  user: Users
}

type Cup_data_user_remove_explain {
  id: Int!
  cup_data_user_removes(
    where: Cup_data_user_removeWhereInput
    orderBy: Cup_data_user_removeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_user_remove!]
  explain: String!
}

"""
A connection to a list of items.
"""
type Cup_data_user_remove_explainConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [Cup_data_user_remove_explainEdge]!
  aggregate: AggregateCup_data_user_remove_explain!
}

input Cup_data_user_remove_explainCreateInput {
  explain: String!
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutExplainInput
}

input Cup_data_user_remove_explainCreateOneWithoutCup_data_user_removesInput {
  create: Cup_data_user_remove_explainCreateWithoutCup_data_user_removesInput
  connect: Cup_data_user_remove_explainWhereUniqueInput
}

input Cup_data_user_remove_explainCreateWithoutCup_data_user_removesInput {
  explain: String!
}

"""
An edge in a connection.
"""
type Cup_data_user_remove_explainEdge {
  """
  The item at the end of the edge.
  """
  node: Cup_data_user_remove_explain!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Cup_data_user_remove_explainOrderByInput {
  id_ASC
  id_DESC
  explain_ASC
  explain_DESC
}

type Cup_data_user_remove_explainPreviousValues {
  id: Int!
  explain: String!
}

type Cup_data_user_remove_explainSubscriptionPayload {
  mutation: MutationType!
  node: Cup_data_user_remove_explain
  updatedFields: [String!]
  previousValues: Cup_data_user_remove_explainPreviousValues
}

input Cup_data_user_remove_explainSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_user_remove_explainSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_user_remove_explainSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_user_remove_explainSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Cup_data_user_remove_explainWhereInput
}

input Cup_data_user_remove_explainUpdateInput {
  explain: String
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutExplainInput
}

input Cup_data_user_remove_explainUpdateManyMutationInput {
  explain: String
}

input Cup_data_user_remove_explainUpdateOneWithoutCup_data_user_removesInput {
  create: Cup_data_user_remove_explainCreateWithoutCup_data_user_removesInput
  connect: Cup_data_user_remove_explainWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: Cup_data_user_remove_explainUpdateWithoutCup_data_user_removesDataInput
  upsert: Cup_data_user_remove_explainUpsertWithoutCup_data_user_removesInput
}

input Cup_data_user_remove_explainUpdateWithoutCup_data_user_removesDataInput {
  explain: String
}

input Cup_data_user_remove_explainUpsertWithoutCup_data_user_removesInput {
  update: Cup_data_user_remove_explainUpdateWithoutCup_data_user_removesDataInput!
  create: Cup_data_user_remove_explainCreateWithoutCup_data_user_removesInput!
}

input Cup_data_user_remove_explainWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_user_remove_explainWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_user_remove_explainWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_user_remove_explainWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  explain: String

  """
  All values that are not equal to given value.
  """
  explain_not: String

  """
  All values that are contained in given list.
  """
  explain_in: [String!]

  """
  All values that are not contained in given list.
  """
  explain_not_in: [String!]

  """
  All values less than the given value.
  """
  explain_lt: String

  """
  All values less than or equal the given value.
  """
  explain_lte: String

  """
  All values greater than the given value.
  """
  explain_gt: String

  """
  All values greater than or equal the given value.
  """
  explain_gte: String

  """
  All values containing the given string.
  """
  explain_contains: String

  """
  All values not containing the given string.
  """
  explain_not_contains: String

  """
  All values starting with the given string.
  """
  explain_starts_with: String

  """
  All values not starting with the given string.
  """
  explain_not_starts_with: String

  """
  All values ending with the given string.
  """
  explain_ends_with: String

  """
  All values not ending with the given string.
  """
  explain_not_ends_with: String
  cup_data_user_removes_every: Cup_data_user_removeWhereInput
  cup_data_user_removes_some: Cup_data_user_removeWhereInput
  cup_data_user_removes_none: Cup_data_user_removeWhereInput
}

input Cup_data_user_remove_explainWhereUniqueInput {
  id: Int
}

"""
A connection to a list of items.
"""
type Cup_data_user_removeConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [Cup_data_user_removeEdge]!
  aggregate: AggregateCup_data_user_remove!
}

input Cup_data_user_removeCreateInput {
  change_time: DateTime!
  explain: Cup_data_user_remove_explainCreateOneWithoutCup_data_user_removesInput
  serial_number: CupCreateOneWithoutCup_data_user_removesInput
  user: UsersCreateOneWithoutCup_data_user_removesInput
}

input Cup_data_user_removeCreateManyWithoutExplainInput {
  create: [Cup_data_user_removeCreateWithoutExplainInput!]
  connect: [Cup_data_user_removeWhereUniqueInput!]
}

input Cup_data_user_removeCreateManyWithoutSerial_numberInput {
  create: [Cup_data_user_removeCreateWithoutSerial_numberInput!]
  connect: [Cup_data_user_removeWhereUniqueInput!]
}

input Cup_data_user_removeCreateManyWithoutUserInput {
  create: [Cup_data_user_removeCreateWithoutUserInput!]
  connect: [Cup_data_user_removeWhereUniqueInput!]
}

input Cup_data_user_removeCreateWithoutExplainInput {
  change_time: DateTime!
  serial_number: CupCreateOneWithoutCup_data_user_removesInput
  user: UsersCreateOneWithoutCup_data_user_removesInput
}

input Cup_data_user_removeCreateWithoutSerial_numberInput {
  change_time: DateTime!
  explain: Cup_data_user_remove_explainCreateOneWithoutCup_data_user_removesInput
  user: UsersCreateOneWithoutCup_data_user_removesInput
}

input Cup_data_user_removeCreateWithoutUserInput {
  change_time: DateTime!
  explain: Cup_data_user_remove_explainCreateOneWithoutCup_data_user_removesInput
  serial_number: CupCreateOneWithoutCup_data_user_removesInput
}

"""
An edge in a connection.
"""
type Cup_data_user_removeEdge {
  """
  The item at the end of the edge.
  """
  node: Cup_data_user_remove!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Cup_data_user_removeOrderByInput {
  id_ASC
  id_DESC
  change_time_ASC
  change_time_DESC
}

type Cup_data_user_removePreviousValues {
  id: Int!
  change_time: DateTime!
}

input Cup_data_user_removeScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_user_removeScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_user_removeScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_user_removeScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  change_time: DateTime

  """
  All values that are not equal to given value.
  """
  change_time_not: DateTime

  """
  All values that are contained in given list.
  """
  change_time_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  change_time_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  change_time_lt: DateTime

  """
  All values less than or equal the given value.
  """
  change_time_lte: DateTime

  """
  All values greater than the given value.
  """
  change_time_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  change_time_gte: DateTime
}

type Cup_data_user_removeSubscriptionPayload {
  mutation: MutationType!
  node: Cup_data_user_remove
  updatedFields: [String!]
  previousValues: Cup_data_user_removePreviousValues
}

input Cup_data_user_removeSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_user_removeSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_user_removeSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_user_removeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Cup_data_user_removeWhereInput
}

input Cup_data_user_removeUpdateInput {
  change_time: DateTime
  explain: Cup_data_user_remove_explainUpdateOneWithoutCup_data_user_removesInput
  serial_number: CupUpdateOneWithoutCup_data_user_removesInput
  user: UsersUpdateOneWithoutCup_data_user_removesInput
}

input Cup_data_user_removeUpdateManyDataInput {
  change_time: DateTime
}

input Cup_data_user_removeUpdateManyMutationInput {
  change_time: DateTime
}

input Cup_data_user_removeUpdateManyWithoutExplainInput {
  create: [Cup_data_user_removeCreateWithoutExplainInput!]
  connect: [Cup_data_user_removeWhereUniqueInput!]
  set: [Cup_data_user_removeWhereUniqueInput!]
  disconnect: [Cup_data_user_removeWhereUniqueInput!]
  delete: [Cup_data_user_removeWhereUniqueInput!]
  update: [Cup_data_user_removeUpdateWithWhereUniqueWithoutExplainInput!]
  updateMany: [Cup_data_user_removeUpdateManyWithWhereNestedInput!]
  deleteMany: [Cup_data_user_removeScalarWhereInput!]
  upsert: [Cup_data_user_removeUpsertWithWhereUniqueWithoutExplainInput!]
}

input Cup_data_user_removeUpdateManyWithoutSerial_numberInput {
  create: [Cup_data_user_removeCreateWithoutSerial_numberInput!]
  connect: [Cup_data_user_removeWhereUniqueInput!]
  set: [Cup_data_user_removeWhereUniqueInput!]
  disconnect: [Cup_data_user_removeWhereUniqueInput!]
  delete: [Cup_data_user_removeWhereUniqueInput!]
  update: [Cup_data_user_removeUpdateWithWhereUniqueWithoutSerial_numberInput!]
  updateMany: [Cup_data_user_removeUpdateManyWithWhereNestedInput!]
  deleteMany: [Cup_data_user_removeScalarWhereInput!]
  upsert: [Cup_data_user_removeUpsertWithWhereUniqueWithoutSerial_numberInput!]
}

input Cup_data_user_removeUpdateManyWithoutUserInput {
  create: [Cup_data_user_removeCreateWithoutUserInput!]
  connect: [Cup_data_user_removeWhereUniqueInput!]
  set: [Cup_data_user_removeWhereUniqueInput!]
  disconnect: [Cup_data_user_removeWhereUniqueInput!]
  delete: [Cup_data_user_removeWhereUniqueInput!]
  update: [Cup_data_user_removeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [Cup_data_user_removeUpdateManyWithWhereNestedInput!]
  deleteMany: [Cup_data_user_removeScalarWhereInput!]
  upsert: [Cup_data_user_removeUpsertWithWhereUniqueWithoutUserInput!]
}

input Cup_data_user_removeUpdateManyWithWhereNestedInput {
  where: Cup_data_user_removeScalarWhereInput!
  data: Cup_data_user_removeUpdateManyDataInput!
}

input Cup_data_user_removeUpdateWithoutExplainDataInput {
  change_time: DateTime
  serial_number: CupUpdateOneWithoutCup_data_user_removesInput
  user: UsersUpdateOneWithoutCup_data_user_removesInput
}

input Cup_data_user_removeUpdateWithoutSerial_numberDataInput {
  change_time: DateTime
  explain: Cup_data_user_remove_explainUpdateOneWithoutCup_data_user_removesInput
  user: UsersUpdateOneWithoutCup_data_user_removesInput
}

input Cup_data_user_removeUpdateWithoutUserDataInput {
  change_time: DateTime
  explain: Cup_data_user_remove_explainUpdateOneWithoutCup_data_user_removesInput
  serial_number: CupUpdateOneWithoutCup_data_user_removesInput
}

input Cup_data_user_removeUpdateWithWhereUniqueWithoutExplainInput {
  where: Cup_data_user_removeWhereUniqueInput!
  data: Cup_data_user_removeUpdateWithoutExplainDataInput!
}

input Cup_data_user_removeUpdateWithWhereUniqueWithoutSerial_numberInput {
  where: Cup_data_user_removeWhereUniqueInput!
  data: Cup_data_user_removeUpdateWithoutSerial_numberDataInput!
}

input Cup_data_user_removeUpdateWithWhereUniqueWithoutUserInput {
  where: Cup_data_user_removeWhereUniqueInput!
  data: Cup_data_user_removeUpdateWithoutUserDataInput!
}

input Cup_data_user_removeUpsertWithWhereUniqueWithoutExplainInput {
  where: Cup_data_user_removeWhereUniqueInput!
  update: Cup_data_user_removeUpdateWithoutExplainDataInput!
  create: Cup_data_user_removeCreateWithoutExplainInput!
}

input Cup_data_user_removeUpsertWithWhereUniqueWithoutSerial_numberInput {
  where: Cup_data_user_removeWhereUniqueInput!
  update: Cup_data_user_removeUpdateWithoutSerial_numberDataInput!
  create: Cup_data_user_removeCreateWithoutSerial_numberInput!
}

input Cup_data_user_removeUpsertWithWhereUniqueWithoutUserInput {
  where: Cup_data_user_removeWhereUniqueInput!
  update: Cup_data_user_removeUpdateWithoutUserDataInput!
  create: Cup_data_user_removeCreateWithoutUserInput!
}

input Cup_data_user_removeWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_data_user_removeWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_data_user_removeWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_data_user_removeWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  change_time: DateTime

  """
  All values that are not equal to given value.
  """
  change_time_not: DateTime

  """
  All values that are contained in given list.
  """
  change_time_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  change_time_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  change_time_lt: DateTime

  """
  All values less than or equal the given value.
  """
  change_time_lte: DateTime

  """
  All values greater than the given value.
  """
  change_time_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  change_time_gte: DateTime
  explain: Cup_data_user_remove_explainWhereInput
  serial_number: CupWhereInput
  user: UsersWhereInput
}

input Cup_data_user_removeWhereUniqueInput {
  id: Int
}

"""
A connection to a list of items.
"""
type Cup_dataConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [Cup_dataEdge]!
  aggregate: AggregateCup_data!
}

input Cup_dataCreateInput {
  battery: Int!
  calib_flag: Boolean!
  ch1: Int!
  ch10: Int!
  ch11: Int!
  ch12: Int!
  ch13: Int!
  ch14: Int!
  ch2: Int!
  ch3: Int!
  ch4: Int!
  ch5: Int!
  ch6: Int!
  ch7: Int!
  ch8: Int!
  ch9: Int!
  colour_b: Int!
  colour_c: Int!
  colour_g: Int!
  colour_r: Int!
  date: DateTime!
  day: Int!
  hour: Int!
  line: Int!
  minute: Int!
  month: Int!
  page: Int!
  raw_total_volume: Int
  raw_volume_l: Int
  raw_volume_r: Int
  temperature: Int!
  x: Int!
  y: Int!
  year: Int!
  z: Int!
  cup_data_colour_calcs: Cup_data_colour_calcCreateManyWithoutRowInput
  cup_data_proc_volumes: Cup_data_proc_volumeCreateManyWithoutRowInput
  serial_number: CupCreateOneWithoutCup_dataInput
}

input Cup_dataCreateManyWithoutSerial_numberInput {
  create: [Cup_dataCreateWithoutSerial_numberInput!]
  connect: [Cup_dataWhereUniqueInput!]
}

input Cup_dataCreateOneWithoutCup_data_colour_calcsInput {
  create: Cup_dataCreateWithoutCup_data_colour_calcsInput
  connect: Cup_dataWhereUniqueInput
}

input Cup_dataCreateOneWithoutCup_data_proc_volumesInput {
  create: Cup_dataCreateWithoutCup_data_proc_volumesInput
  connect: Cup_dataWhereUniqueInput
}

input Cup_dataCreateWithoutCup_data_colour_calcsInput {
  battery: Int!
  calib_flag: Boolean!
  ch1: Int!
  ch10: Int!
  ch11: Int!
  ch12: Int!
  ch13: Int!
  ch14: Int!
  ch2: Int!
  ch3: Int!
  ch4: Int!
  ch5: Int!
  ch6: Int!
  ch7: Int!
  ch8: Int!
  ch9: Int!
  colour_b: Int!
  colour_c: Int!
  colour_g: Int!
  colour_r: Int!
  date: DateTime!
  day: Int!
  hour: Int!
  line: Int!
  minute: Int!
  month: Int!
  page: Int!
  raw_total_volume: Int
  raw_volume_l: Int
  raw_volume_r: Int
  temperature: Int!
  x: Int!
  y: Int!
  year: Int!
  z: Int!
  cup_data_proc_volumes: Cup_data_proc_volumeCreateManyWithoutRowInput
  serial_number: CupCreateOneWithoutCup_dataInput
}

input Cup_dataCreateWithoutCup_data_proc_volumesInput {
  battery: Int!
  calib_flag: Boolean!
  ch1: Int!
  ch10: Int!
  ch11: Int!
  ch12: Int!
  ch13: Int!
  ch14: Int!
  ch2: Int!
  ch3: Int!
  ch4: Int!
  ch5: Int!
  ch6: Int!
  ch7: Int!
  ch8: Int!
  ch9: Int!
  colour_b: Int!
  colour_c: Int!
  colour_g: Int!
  colour_r: Int!
  date: DateTime!
  day: Int!
  hour: Int!
  line: Int!
  minute: Int!
  month: Int!
  page: Int!
  raw_total_volume: Int
  raw_volume_l: Int
  raw_volume_r: Int
  temperature: Int!
  x: Int!
  y: Int!
  year: Int!
  z: Int!
  cup_data_colour_calcs: Cup_data_colour_calcCreateManyWithoutRowInput
  serial_number: CupCreateOneWithoutCup_dataInput
}

input Cup_dataCreateWithoutSerial_numberInput {
  battery: Int!
  calib_flag: Boolean!
  ch1: Int!
  ch10: Int!
  ch11: Int!
  ch12: Int!
  ch13: Int!
  ch14: Int!
  ch2: Int!
  ch3: Int!
  ch4: Int!
  ch5: Int!
  ch6: Int!
  ch7: Int!
  ch8: Int!
  ch9: Int!
  colour_b: Int!
  colour_c: Int!
  colour_g: Int!
  colour_r: Int!
  date: DateTime!
  day: Int!
  hour: Int!
  line: Int!
  minute: Int!
  month: Int!
  page: Int!
  raw_total_volume: Int
  raw_volume_l: Int
  raw_volume_r: Int
  temperature: Int!
  x: Int!
  y: Int!
  year: Int!
  z: Int!
  cup_data_colour_calcs: Cup_data_colour_calcCreateManyWithoutRowInput
  cup_data_proc_volumes: Cup_data_proc_volumeCreateManyWithoutRowInput
}

"""
An edge in a connection.
"""
type Cup_dataEdge {
  """
  The item at the end of the edge.
  """
  node: Cup_data!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Cup_dataOrderByInput {
  id_ASC
  id_DESC
  battery_ASC
  battery_DESC
  calib_flag_ASC
  calib_flag_DESC
  ch1_ASC
  ch1_DESC
  ch10_ASC
  ch10_DESC
  ch11_ASC
  ch11_DESC
  ch12_ASC
  ch12_DESC
  ch13_ASC
  ch13_DESC
  ch14_ASC
  ch14_DESC
  ch2_ASC
  ch2_DESC
  ch3_ASC
  ch3_DESC
  ch4_ASC
  ch4_DESC
  ch5_ASC
  ch5_DESC
  ch6_ASC
  ch6_DESC
  ch7_ASC
  ch7_DESC
  ch8_ASC
  ch8_DESC
  ch9_ASC
  ch9_DESC
  colour_b_ASC
  colour_b_DESC
  colour_c_ASC
  colour_c_DESC
  colour_g_ASC
  colour_g_DESC
  colour_r_ASC
  colour_r_DESC
  date_ASC
  date_DESC
  day_ASC
  day_DESC
  hour_ASC
  hour_DESC
  line_ASC
  line_DESC
  minute_ASC
  minute_DESC
  month_ASC
  month_DESC
  page_ASC
  page_DESC
  raw_total_volume_ASC
  raw_total_volume_DESC
  raw_volume_l_ASC
  raw_volume_l_DESC
  raw_volume_r_ASC
  raw_volume_r_DESC
  temperature_ASC
  temperature_DESC
  x_ASC
  x_DESC
  y_ASC
  y_DESC
  year_ASC
  year_DESC
  z_ASC
  z_DESC
}

type Cup_dataPreviousValues {
  id: Int!
  battery: Int!
  calib_flag: Boolean!
  ch1: Int!
  ch10: Int!
  ch11: Int!
  ch12: Int!
  ch13: Int!
  ch14: Int!
  ch2: Int!
  ch3: Int!
  ch4: Int!
  ch5: Int!
  ch6: Int!
  ch7: Int!
  ch8: Int!
  ch9: Int!
  colour_b: Int!
  colour_c: Int!
  colour_g: Int!
  colour_r: Int!
  date: DateTime!
  day: Int!
  hour: Int!
  line: Int!
  minute: Int!
  month: Int!
  page: Int!
  raw_total_volume: Int
  raw_volume_l: Int
  raw_volume_r: Int
  temperature: Int!
  x: Int!
  y: Int!
  year: Int!
  z: Int!
}

input Cup_dataScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_dataScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_dataScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_dataScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  battery: Int

  """
  All values that are not equal to given value.
  """
  battery_not: Int

  """
  All values that are contained in given list.
  """
  battery_in: [Int!]

  """
  All values that are not contained in given list.
  """
  battery_not_in: [Int!]

  """
  All values less than the given value.
  """
  battery_lt: Int

  """
  All values less than or equal the given value.
  """
  battery_lte: Int

  """
  All values greater than the given value.
  """
  battery_gt: Int

  """
  All values greater than or equal the given value.
  """
  battery_gte: Int
  calib_flag: Boolean

  """
  All values that are not equal to given value.
  """
  calib_flag_not: Boolean
  ch1: Int

  """
  All values that are not equal to given value.
  """
  ch1_not: Int

  """
  All values that are contained in given list.
  """
  ch1_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch1_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch1_lt: Int

  """
  All values less than or equal the given value.
  """
  ch1_lte: Int

  """
  All values greater than the given value.
  """
  ch1_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch1_gte: Int
  ch10: Int

  """
  All values that are not equal to given value.
  """
  ch10_not: Int

  """
  All values that are contained in given list.
  """
  ch10_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch10_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch10_lt: Int

  """
  All values less than or equal the given value.
  """
  ch10_lte: Int

  """
  All values greater than the given value.
  """
  ch10_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch10_gte: Int
  ch11: Int

  """
  All values that are not equal to given value.
  """
  ch11_not: Int

  """
  All values that are contained in given list.
  """
  ch11_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch11_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch11_lt: Int

  """
  All values less than or equal the given value.
  """
  ch11_lte: Int

  """
  All values greater than the given value.
  """
  ch11_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch11_gte: Int
  ch12: Int

  """
  All values that are not equal to given value.
  """
  ch12_not: Int

  """
  All values that are contained in given list.
  """
  ch12_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch12_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch12_lt: Int

  """
  All values less than or equal the given value.
  """
  ch12_lte: Int

  """
  All values greater than the given value.
  """
  ch12_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch12_gte: Int
  ch13: Int

  """
  All values that are not equal to given value.
  """
  ch13_not: Int

  """
  All values that are contained in given list.
  """
  ch13_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch13_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch13_lt: Int

  """
  All values less than or equal the given value.
  """
  ch13_lte: Int

  """
  All values greater than the given value.
  """
  ch13_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch13_gte: Int
  ch14: Int

  """
  All values that are not equal to given value.
  """
  ch14_not: Int

  """
  All values that are contained in given list.
  """
  ch14_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch14_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch14_lt: Int

  """
  All values less than or equal the given value.
  """
  ch14_lte: Int

  """
  All values greater than the given value.
  """
  ch14_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch14_gte: Int
  ch2: Int

  """
  All values that are not equal to given value.
  """
  ch2_not: Int

  """
  All values that are contained in given list.
  """
  ch2_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch2_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch2_lt: Int

  """
  All values less than or equal the given value.
  """
  ch2_lte: Int

  """
  All values greater than the given value.
  """
  ch2_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch2_gte: Int
  ch3: Int

  """
  All values that are not equal to given value.
  """
  ch3_not: Int

  """
  All values that are contained in given list.
  """
  ch3_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch3_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch3_lt: Int

  """
  All values less than or equal the given value.
  """
  ch3_lte: Int

  """
  All values greater than the given value.
  """
  ch3_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch3_gte: Int
  ch4: Int

  """
  All values that are not equal to given value.
  """
  ch4_not: Int

  """
  All values that are contained in given list.
  """
  ch4_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch4_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch4_lt: Int

  """
  All values less than or equal the given value.
  """
  ch4_lte: Int

  """
  All values greater than the given value.
  """
  ch4_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch4_gte: Int
  ch5: Int

  """
  All values that are not equal to given value.
  """
  ch5_not: Int

  """
  All values that are contained in given list.
  """
  ch5_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch5_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch5_lt: Int

  """
  All values less than or equal the given value.
  """
  ch5_lte: Int

  """
  All values greater than the given value.
  """
  ch5_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch5_gte: Int
  ch6: Int

  """
  All values that are not equal to given value.
  """
  ch6_not: Int

  """
  All values that are contained in given list.
  """
  ch6_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch6_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch6_lt: Int

  """
  All values less than or equal the given value.
  """
  ch6_lte: Int

  """
  All values greater than the given value.
  """
  ch6_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch6_gte: Int
  ch7: Int

  """
  All values that are not equal to given value.
  """
  ch7_not: Int

  """
  All values that are contained in given list.
  """
  ch7_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch7_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch7_lt: Int

  """
  All values less than or equal the given value.
  """
  ch7_lte: Int

  """
  All values greater than the given value.
  """
  ch7_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch7_gte: Int
  ch8: Int

  """
  All values that are not equal to given value.
  """
  ch8_not: Int

  """
  All values that are contained in given list.
  """
  ch8_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch8_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch8_lt: Int

  """
  All values less than or equal the given value.
  """
  ch8_lte: Int

  """
  All values greater than the given value.
  """
  ch8_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch8_gte: Int
  ch9: Int

  """
  All values that are not equal to given value.
  """
  ch9_not: Int

  """
  All values that are contained in given list.
  """
  ch9_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch9_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch9_lt: Int

  """
  All values less than or equal the given value.
  """
  ch9_lte: Int

  """
  All values greater than the given value.
  """
  ch9_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch9_gte: Int
  colour_b: Int

  """
  All values that are not equal to given value.
  """
  colour_b_not: Int

  """
  All values that are contained in given list.
  """
  colour_b_in: [Int!]

  """
  All values that are not contained in given list.
  """
  colour_b_not_in: [Int!]

  """
  All values less than the given value.
  """
  colour_b_lt: Int

  """
  All values less than or equal the given value.
  """
  colour_b_lte: Int

  """
  All values greater than the given value.
  """
  colour_b_gt: Int

  """
  All values greater than or equal the given value.
  """
  colour_b_gte: Int
  colour_c: Int

  """
  All values that are not equal to given value.
  """
  colour_c_not: Int

  """
  All values that are contained in given list.
  """
  colour_c_in: [Int!]

  """
  All values that are not contained in given list.
  """
  colour_c_not_in: [Int!]

  """
  All values less than the given value.
  """
  colour_c_lt: Int

  """
  All values less than or equal the given value.
  """
  colour_c_lte: Int

  """
  All values greater than the given value.
  """
  colour_c_gt: Int

  """
  All values greater than or equal the given value.
  """
  colour_c_gte: Int
  colour_g: Int

  """
  All values that are not equal to given value.
  """
  colour_g_not: Int

  """
  All values that are contained in given list.
  """
  colour_g_in: [Int!]

  """
  All values that are not contained in given list.
  """
  colour_g_not_in: [Int!]

  """
  All values less than the given value.
  """
  colour_g_lt: Int

  """
  All values less than or equal the given value.
  """
  colour_g_lte: Int

  """
  All values greater than the given value.
  """
  colour_g_gt: Int

  """
  All values greater than or equal the given value.
  """
  colour_g_gte: Int
  colour_r: Int

  """
  All values that are not equal to given value.
  """
  colour_r_not: Int

  """
  All values that are contained in given list.
  """
  colour_r_in: [Int!]

  """
  All values that are not contained in given list.
  """
  colour_r_not_in: [Int!]

  """
  All values less than the given value.
  """
  colour_r_lt: Int

  """
  All values less than or equal the given value.
  """
  colour_r_lte: Int

  """
  All values greater than the given value.
  """
  colour_r_gt: Int

  """
  All values greater than or equal the given value.
  """
  colour_r_gte: Int
  date: DateTime

  """
  All values that are not equal to given value.
  """
  date_not: DateTime

  """
  All values that are contained in given list.
  """
  date_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  date_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  date_lt: DateTime

  """
  All values less than or equal the given value.
  """
  date_lte: DateTime

  """
  All values greater than the given value.
  """
  date_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  date_gte: DateTime
  day: Int

  """
  All values that are not equal to given value.
  """
  day_not: Int

  """
  All values that are contained in given list.
  """
  day_in: [Int!]

  """
  All values that are not contained in given list.
  """
  day_not_in: [Int!]

  """
  All values less than the given value.
  """
  day_lt: Int

  """
  All values less than or equal the given value.
  """
  day_lte: Int

  """
  All values greater than the given value.
  """
  day_gt: Int

  """
  All values greater than or equal the given value.
  """
  day_gte: Int
  hour: Int

  """
  All values that are not equal to given value.
  """
  hour_not: Int

  """
  All values that are contained in given list.
  """
  hour_in: [Int!]

  """
  All values that are not contained in given list.
  """
  hour_not_in: [Int!]

  """
  All values less than the given value.
  """
  hour_lt: Int

  """
  All values less than or equal the given value.
  """
  hour_lte: Int

  """
  All values greater than the given value.
  """
  hour_gt: Int

  """
  All values greater than or equal the given value.
  """
  hour_gte: Int
  line: Int

  """
  All values that are not equal to given value.
  """
  line_not: Int

  """
  All values that are contained in given list.
  """
  line_in: [Int!]

  """
  All values that are not contained in given list.
  """
  line_not_in: [Int!]

  """
  All values less than the given value.
  """
  line_lt: Int

  """
  All values less than or equal the given value.
  """
  line_lte: Int

  """
  All values greater than the given value.
  """
  line_gt: Int

  """
  All values greater than or equal the given value.
  """
  line_gte: Int
  minute: Int

  """
  All values that are not equal to given value.
  """
  minute_not: Int

  """
  All values that are contained in given list.
  """
  minute_in: [Int!]

  """
  All values that are not contained in given list.
  """
  minute_not_in: [Int!]

  """
  All values less than the given value.
  """
  minute_lt: Int

  """
  All values less than or equal the given value.
  """
  minute_lte: Int

  """
  All values greater than the given value.
  """
  minute_gt: Int

  """
  All values greater than or equal the given value.
  """
  minute_gte: Int
  month: Int

  """
  All values that are not equal to given value.
  """
  month_not: Int

  """
  All values that are contained in given list.
  """
  month_in: [Int!]

  """
  All values that are not contained in given list.
  """
  month_not_in: [Int!]

  """
  All values less than the given value.
  """
  month_lt: Int

  """
  All values less than or equal the given value.
  """
  month_lte: Int

  """
  All values greater than the given value.
  """
  month_gt: Int

  """
  All values greater than or equal the given value.
  """
  month_gte: Int
  page: Int

  """
  All values that are not equal to given value.
  """
  page_not: Int

  """
  All values that are contained in given list.
  """
  page_in: [Int!]

  """
  All values that are not contained in given list.
  """
  page_not_in: [Int!]

  """
  All values less than the given value.
  """
  page_lt: Int

  """
  All values less than or equal the given value.
  """
  page_lte: Int

  """
  All values greater than the given value.
  """
  page_gt: Int

  """
  All values greater than or equal the given value.
  """
  page_gte: Int
  raw_total_volume: Int

  """
  All values that are not equal to given value.
  """
  raw_total_volume_not: Int

  """
  All values that are contained in given list.
  """
  raw_total_volume_in: [Int!]

  """
  All values that are not contained in given list.
  """
  raw_total_volume_not_in: [Int!]

  """
  All values less than the given value.
  """
  raw_total_volume_lt: Int

  """
  All values less than or equal the given value.
  """
  raw_total_volume_lte: Int

  """
  All values greater than the given value.
  """
  raw_total_volume_gt: Int

  """
  All values greater than or equal the given value.
  """
  raw_total_volume_gte: Int
  raw_volume_l: Int

  """
  All values that are not equal to given value.
  """
  raw_volume_l_not: Int

  """
  All values that are contained in given list.
  """
  raw_volume_l_in: [Int!]

  """
  All values that are not contained in given list.
  """
  raw_volume_l_not_in: [Int!]

  """
  All values less than the given value.
  """
  raw_volume_l_lt: Int

  """
  All values less than or equal the given value.
  """
  raw_volume_l_lte: Int

  """
  All values greater than the given value.
  """
  raw_volume_l_gt: Int

  """
  All values greater than or equal the given value.
  """
  raw_volume_l_gte: Int
  raw_volume_r: Int

  """
  All values that are not equal to given value.
  """
  raw_volume_r_not: Int

  """
  All values that are contained in given list.
  """
  raw_volume_r_in: [Int!]

  """
  All values that are not contained in given list.
  """
  raw_volume_r_not_in: [Int!]

  """
  All values less than the given value.
  """
  raw_volume_r_lt: Int

  """
  All values less than or equal the given value.
  """
  raw_volume_r_lte: Int

  """
  All values greater than the given value.
  """
  raw_volume_r_gt: Int

  """
  All values greater than or equal the given value.
  """
  raw_volume_r_gte: Int
  temperature: Int

  """
  All values that are not equal to given value.
  """
  temperature_not: Int

  """
  All values that are contained in given list.
  """
  temperature_in: [Int!]

  """
  All values that are not contained in given list.
  """
  temperature_not_in: [Int!]

  """
  All values less than the given value.
  """
  temperature_lt: Int

  """
  All values less than or equal the given value.
  """
  temperature_lte: Int

  """
  All values greater than the given value.
  """
  temperature_gt: Int

  """
  All values greater than or equal the given value.
  """
  temperature_gte: Int
  x: Int

  """
  All values that are not equal to given value.
  """
  x_not: Int

  """
  All values that are contained in given list.
  """
  x_in: [Int!]

  """
  All values that are not contained in given list.
  """
  x_not_in: [Int!]

  """
  All values less than the given value.
  """
  x_lt: Int

  """
  All values less than or equal the given value.
  """
  x_lte: Int

  """
  All values greater than the given value.
  """
  x_gt: Int

  """
  All values greater than or equal the given value.
  """
  x_gte: Int
  y: Int

  """
  All values that are not equal to given value.
  """
  y_not: Int

  """
  All values that are contained in given list.
  """
  y_in: [Int!]

  """
  All values that are not contained in given list.
  """
  y_not_in: [Int!]

  """
  All values less than the given value.
  """
  y_lt: Int

  """
  All values less than or equal the given value.
  """
  y_lte: Int

  """
  All values greater than the given value.
  """
  y_gt: Int

  """
  All values greater than or equal the given value.
  """
  y_gte: Int
  year: Int

  """
  All values that are not equal to given value.
  """
  year_not: Int

  """
  All values that are contained in given list.
  """
  year_in: [Int!]

  """
  All values that are not contained in given list.
  """
  year_not_in: [Int!]

  """
  All values less than the given value.
  """
  year_lt: Int

  """
  All values less than or equal the given value.
  """
  year_lte: Int

  """
  All values greater than the given value.
  """
  year_gt: Int

  """
  All values greater than or equal the given value.
  """
  year_gte: Int
  z: Int

  """
  All values that are not equal to given value.
  """
  z_not: Int

  """
  All values that are contained in given list.
  """
  z_in: [Int!]

  """
  All values that are not contained in given list.
  """
  z_not_in: [Int!]

  """
  All values less than the given value.
  """
  z_lt: Int

  """
  All values less than or equal the given value.
  """
  z_lte: Int

  """
  All values greater than the given value.
  """
  z_gt: Int

  """
  All values greater than or equal the given value.
  """
  z_gte: Int
}

type Cup_dataSubscriptionPayload {
  mutation: MutationType!
  node: Cup_data
  updatedFields: [String!]
  previousValues: Cup_dataPreviousValues
}

input Cup_dataSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_dataSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_dataSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_dataSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Cup_dataWhereInput
}

input Cup_dataUpdateInput {
  battery: Int
  calib_flag: Boolean
  ch1: Int
  ch10: Int
  ch11: Int
  ch12: Int
  ch13: Int
  ch14: Int
  ch2: Int
  ch3: Int
  ch4: Int
  ch5: Int
  ch6: Int
  ch7: Int
  ch8: Int
  ch9: Int
  colour_b: Int
  colour_c: Int
  colour_g: Int
  colour_r: Int
  date: DateTime
  day: Int
  hour: Int
  line: Int
  minute: Int
  month: Int
  page: Int
  raw_total_volume: Int
  raw_volume_l: Int
  raw_volume_r: Int
  temperature: Int
  x: Int
  y: Int
  year: Int
  z: Int
  cup_data_colour_calcs: Cup_data_colour_calcUpdateManyWithoutRowInput
  cup_data_proc_volumes: Cup_data_proc_volumeUpdateManyWithoutRowInput
  serial_number: CupUpdateOneWithoutCup_dataInput
}

input Cup_dataUpdateManyDataInput {
  battery: Int
  calib_flag: Boolean
  ch1: Int
  ch10: Int
  ch11: Int
  ch12: Int
  ch13: Int
  ch14: Int
  ch2: Int
  ch3: Int
  ch4: Int
  ch5: Int
  ch6: Int
  ch7: Int
  ch8: Int
  ch9: Int
  colour_b: Int
  colour_c: Int
  colour_g: Int
  colour_r: Int
  date: DateTime
  day: Int
  hour: Int
  line: Int
  minute: Int
  month: Int
  page: Int
  raw_total_volume: Int
  raw_volume_l: Int
  raw_volume_r: Int
  temperature: Int
  x: Int
  y: Int
  year: Int
  z: Int
}

input Cup_dataUpdateManyMutationInput {
  battery: Int
  calib_flag: Boolean
  ch1: Int
  ch10: Int
  ch11: Int
  ch12: Int
  ch13: Int
  ch14: Int
  ch2: Int
  ch3: Int
  ch4: Int
  ch5: Int
  ch6: Int
  ch7: Int
  ch8: Int
  ch9: Int
  colour_b: Int
  colour_c: Int
  colour_g: Int
  colour_r: Int
  date: DateTime
  day: Int
  hour: Int
  line: Int
  minute: Int
  month: Int
  page: Int
  raw_total_volume: Int
  raw_volume_l: Int
  raw_volume_r: Int
  temperature: Int
  x: Int
  y: Int
  year: Int
  z: Int
}

input Cup_dataUpdateManyWithoutSerial_numberInput {
  create: [Cup_dataCreateWithoutSerial_numberInput!]
  connect: [Cup_dataWhereUniqueInput!]
  set: [Cup_dataWhereUniqueInput!]
  disconnect: [Cup_dataWhereUniqueInput!]
  delete: [Cup_dataWhereUniqueInput!]
  update: [Cup_dataUpdateWithWhereUniqueWithoutSerial_numberInput!]
  updateMany: [Cup_dataUpdateManyWithWhereNestedInput!]
  deleteMany: [Cup_dataScalarWhereInput!]
  upsert: [Cup_dataUpsertWithWhereUniqueWithoutSerial_numberInput!]
}

input Cup_dataUpdateManyWithWhereNestedInput {
  where: Cup_dataScalarWhereInput!
  data: Cup_dataUpdateManyDataInput!
}

input Cup_dataUpdateOneWithoutCup_data_colour_calcsInput {
  create: Cup_dataCreateWithoutCup_data_colour_calcsInput
  connect: Cup_dataWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: Cup_dataUpdateWithoutCup_data_colour_calcsDataInput
  upsert: Cup_dataUpsertWithoutCup_data_colour_calcsInput
}

input Cup_dataUpdateOneWithoutCup_data_proc_volumesInput {
  create: Cup_dataCreateWithoutCup_data_proc_volumesInput
  connect: Cup_dataWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: Cup_dataUpdateWithoutCup_data_proc_volumesDataInput
  upsert: Cup_dataUpsertWithoutCup_data_proc_volumesInput
}

input Cup_dataUpdateWithoutCup_data_colour_calcsDataInput {
  battery: Int
  calib_flag: Boolean
  ch1: Int
  ch10: Int
  ch11: Int
  ch12: Int
  ch13: Int
  ch14: Int
  ch2: Int
  ch3: Int
  ch4: Int
  ch5: Int
  ch6: Int
  ch7: Int
  ch8: Int
  ch9: Int
  colour_b: Int
  colour_c: Int
  colour_g: Int
  colour_r: Int
  date: DateTime
  day: Int
  hour: Int
  line: Int
  minute: Int
  month: Int
  page: Int
  raw_total_volume: Int
  raw_volume_l: Int
  raw_volume_r: Int
  temperature: Int
  x: Int
  y: Int
  year: Int
  z: Int
  cup_data_proc_volumes: Cup_data_proc_volumeUpdateManyWithoutRowInput
  serial_number: CupUpdateOneWithoutCup_dataInput
}

input Cup_dataUpdateWithoutCup_data_proc_volumesDataInput {
  battery: Int
  calib_flag: Boolean
  ch1: Int
  ch10: Int
  ch11: Int
  ch12: Int
  ch13: Int
  ch14: Int
  ch2: Int
  ch3: Int
  ch4: Int
  ch5: Int
  ch6: Int
  ch7: Int
  ch8: Int
  ch9: Int
  colour_b: Int
  colour_c: Int
  colour_g: Int
  colour_r: Int
  date: DateTime
  day: Int
  hour: Int
  line: Int
  minute: Int
  month: Int
  page: Int
  raw_total_volume: Int
  raw_volume_l: Int
  raw_volume_r: Int
  temperature: Int
  x: Int
  y: Int
  year: Int
  z: Int
  cup_data_colour_calcs: Cup_data_colour_calcUpdateManyWithoutRowInput
  serial_number: CupUpdateOneWithoutCup_dataInput
}

input Cup_dataUpdateWithoutSerial_numberDataInput {
  battery: Int
  calib_flag: Boolean
  ch1: Int
  ch10: Int
  ch11: Int
  ch12: Int
  ch13: Int
  ch14: Int
  ch2: Int
  ch3: Int
  ch4: Int
  ch5: Int
  ch6: Int
  ch7: Int
  ch8: Int
  ch9: Int
  colour_b: Int
  colour_c: Int
  colour_g: Int
  colour_r: Int
  date: DateTime
  day: Int
  hour: Int
  line: Int
  minute: Int
  month: Int
  page: Int
  raw_total_volume: Int
  raw_volume_l: Int
  raw_volume_r: Int
  temperature: Int
  x: Int
  y: Int
  year: Int
  z: Int
  cup_data_colour_calcs: Cup_data_colour_calcUpdateManyWithoutRowInput
  cup_data_proc_volumes: Cup_data_proc_volumeUpdateManyWithoutRowInput
}

input Cup_dataUpdateWithWhereUniqueWithoutSerial_numberInput {
  where: Cup_dataWhereUniqueInput!
  data: Cup_dataUpdateWithoutSerial_numberDataInput!
}

input Cup_dataUpsertWithoutCup_data_colour_calcsInput {
  update: Cup_dataUpdateWithoutCup_data_colour_calcsDataInput!
  create: Cup_dataCreateWithoutCup_data_colour_calcsInput!
}

input Cup_dataUpsertWithoutCup_data_proc_volumesInput {
  update: Cup_dataUpdateWithoutCup_data_proc_volumesDataInput!
  create: Cup_dataCreateWithoutCup_data_proc_volumesInput!
}

input Cup_dataUpsertWithWhereUniqueWithoutSerial_numberInput {
  where: Cup_dataWhereUniqueInput!
  update: Cup_dataUpdateWithoutSerial_numberDataInput!
  create: Cup_dataCreateWithoutSerial_numberInput!
}

input Cup_dataWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Cup_dataWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Cup_dataWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Cup_dataWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  battery: Int

  """
  All values that are not equal to given value.
  """
  battery_not: Int

  """
  All values that are contained in given list.
  """
  battery_in: [Int!]

  """
  All values that are not contained in given list.
  """
  battery_not_in: [Int!]

  """
  All values less than the given value.
  """
  battery_lt: Int

  """
  All values less than or equal the given value.
  """
  battery_lte: Int

  """
  All values greater than the given value.
  """
  battery_gt: Int

  """
  All values greater than or equal the given value.
  """
  battery_gte: Int
  calib_flag: Boolean

  """
  All values that are not equal to given value.
  """
  calib_flag_not: Boolean
  ch1: Int

  """
  All values that are not equal to given value.
  """
  ch1_not: Int

  """
  All values that are contained in given list.
  """
  ch1_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch1_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch1_lt: Int

  """
  All values less than or equal the given value.
  """
  ch1_lte: Int

  """
  All values greater than the given value.
  """
  ch1_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch1_gte: Int
  ch10: Int

  """
  All values that are not equal to given value.
  """
  ch10_not: Int

  """
  All values that are contained in given list.
  """
  ch10_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch10_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch10_lt: Int

  """
  All values less than or equal the given value.
  """
  ch10_lte: Int

  """
  All values greater than the given value.
  """
  ch10_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch10_gte: Int
  ch11: Int

  """
  All values that are not equal to given value.
  """
  ch11_not: Int

  """
  All values that are contained in given list.
  """
  ch11_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch11_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch11_lt: Int

  """
  All values less than or equal the given value.
  """
  ch11_lte: Int

  """
  All values greater than the given value.
  """
  ch11_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch11_gte: Int
  ch12: Int

  """
  All values that are not equal to given value.
  """
  ch12_not: Int

  """
  All values that are contained in given list.
  """
  ch12_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch12_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch12_lt: Int

  """
  All values less than or equal the given value.
  """
  ch12_lte: Int

  """
  All values greater than the given value.
  """
  ch12_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch12_gte: Int
  ch13: Int

  """
  All values that are not equal to given value.
  """
  ch13_not: Int

  """
  All values that are contained in given list.
  """
  ch13_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch13_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch13_lt: Int

  """
  All values less than or equal the given value.
  """
  ch13_lte: Int

  """
  All values greater than the given value.
  """
  ch13_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch13_gte: Int
  ch14: Int

  """
  All values that are not equal to given value.
  """
  ch14_not: Int

  """
  All values that are contained in given list.
  """
  ch14_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch14_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch14_lt: Int

  """
  All values less than or equal the given value.
  """
  ch14_lte: Int

  """
  All values greater than the given value.
  """
  ch14_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch14_gte: Int
  ch2: Int

  """
  All values that are not equal to given value.
  """
  ch2_not: Int

  """
  All values that are contained in given list.
  """
  ch2_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch2_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch2_lt: Int

  """
  All values less than or equal the given value.
  """
  ch2_lte: Int

  """
  All values greater than the given value.
  """
  ch2_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch2_gte: Int
  ch3: Int

  """
  All values that are not equal to given value.
  """
  ch3_not: Int

  """
  All values that are contained in given list.
  """
  ch3_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch3_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch3_lt: Int

  """
  All values less than or equal the given value.
  """
  ch3_lte: Int

  """
  All values greater than the given value.
  """
  ch3_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch3_gte: Int
  ch4: Int

  """
  All values that are not equal to given value.
  """
  ch4_not: Int

  """
  All values that are contained in given list.
  """
  ch4_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch4_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch4_lt: Int

  """
  All values less than or equal the given value.
  """
  ch4_lte: Int

  """
  All values greater than the given value.
  """
  ch4_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch4_gte: Int
  ch5: Int

  """
  All values that are not equal to given value.
  """
  ch5_not: Int

  """
  All values that are contained in given list.
  """
  ch5_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch5_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch5_lt: Int

  """
  All values less than or equal the given value.
  """
  ch5_lte: Int

  """
  All values greater than the given value.
  """
  ch5_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch5_gte: Int
  ch6: Int

  """
  All values that are not equal to given value.
  """
  ch6_not: Int

  """
  All values that are contained in given list.
  """
  ch6_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch6_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch6_lt: Int

  """
  All values less than or equal the given value.
  """
  ch6_lte: Int

  """
  All values greater than the given value.
  """
  ch6_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch6_gte: Int
  ch7: Int

  """
  All values that are not equal to given value.
  """
  ch7_not: Int

  """
  All values that are contained in given list.
  """
  ch7_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch7_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch7_lt: Int

  """
  All values less than or equal the given value.
  """
  ch7_lte: Int

  """
  All values greater than the given value.
  """
  ch7_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch7_gte: Int
  ch8: Int

  """
  All values that are not equal to given value.
  """
  ch8_not: Int

  """
  All values that are contained in given list.
  """
  ch8_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch8_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch8_lt: Int

  """
  All values less than or equal the given value.
  """
  ch8_lte: Int

  """
  All values greater than the given value.
  """
  ch8_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch8_gte: Int
  ch9: Int

  """
  All values that are not equal to given value.
  """
  ch9_not: Int

  """
  All values that are contained in given list.
  """
  ch9_in: [Int!]

  """
  All values that are not contained in given list.
  """
  ch9_not_in: [Int!]

  """
  All values less than the given value.
  """
  ch9_lt: Int

  """
  All values less than or equal the given value.
  """
  ch9_lte: Int

  """
  All values greater than the given value.
  """
  ch9_gt: Int

  """
  All values greater than or equal the given value.
  """
  ch9_gte: Int
  colour_b: Int

  """
  All values that are not equal to given value.
  """
  colour_b_not: Int

  """
  All values that are contained in given list.
  """
  colour_b_in: [Int!]

  """
  All values that are not contained in given list.
  """
  colour_b_not_in: [Int!]

  """
  All values less than the given value.
  """
  colour_b_lt: Int

  """
  All values less than or equal the given value.
  """
  colour_b_lte: Int

  """
  All values greater than the given value.
  """
  colour_b_gt: Int

  """
  All values greater than or equal the given value.
  """
  colour_b_gte: Int
  colour_c: Int

  """
  All values that are not equal to given value.
  """
  colour_c_not: Int

  """
  All values that are contained in given list.
  """
  colour_c_in: [Int!]

  """
  All values that are not contained in given list.
  """
  colour_c_not_in: [Int!]

  """
  All values less than the given value.
  """
  colour_c_lt: Int

  """
  All values less than or equal the given value.
  """
  colour_c_lte: Int

  """
  All values greater than the given value.
  """
  colour_c_gt: Int

  """
  All values greater than or equal the given value.
  """
  colour_c_gte: Int
  colour_g: Int

  """
  All values that are not equal to given value.
  """
  colour_g_not: Int

  """
  All values that are contained in given list.
  """
  colour_g_in: [Int!]

  """
  All values that are not contained in given list.
  """
  colour_g_not_in: [Int!]

  """
  All values less than the given value.
  """
  colour_g_lt: Int

  """
  All values less than or equal the given value.
  """
  colour_g_lte: Int

  """
  All values greater than the given value.
  """
  colour_g_gt: Int

  """
  All values greater than or equal the given value.
  """
  colour_g_gte: Int
  colour_r: Int

  """
  All values that are not equal to given value.
  """
  colour_r_not: Int

  """
  All values that are contained in given list.
  """
  colour_r_in: [Int!]

  """
  All values that are not contained in given list.
  """
  colour_r_not_in: [Int!]

  """
  All values less than the given value.
  """
  colour_r_lt: Int

  """
  All values less than or equal the given value.
  """
  colour_r_lte: Int

  """
  All values greater than the given value.
  """
  colour_r_gt: Int

  """
  All values greater than or equal the given value.
  """
  colour_r_gte: Int
  date: DateTime

  """
  All values that are not equal to given value.
  """
  date_not: DateTime

  """
  All values that are contained in given list.
  """
  date_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  date_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  date_lt: DateTime

  """
  All values less than or equal the given value.
  """
  date_lte: DateTime

  """
  All values greater than the given value.
  """
  date_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  date_gte: DateTime
  day: Int

  """
  All values that are not equal to given value.
  """
  day_not: Int

  """
  All values that are contained in given list.
  """
  day_in: [Int!]

  """
  All values that are not contained in given list.
  """
  day_not_in: [Int!]

  """
  All values less than the given value.
  """
  day_lt: Int

  """
  All values less than or equal the given value.
  """
  day_lte: Int

  """
  All values greater than the given value.
  """
  day_gt: Int

  """
  All values greater than or equal the given value.
  """
  day_gte: Int
  hour: Int

  """
  All values that are not equal to given value.
  """
  hour_not: Int

  """
  All values that are contained in given list.
  """
  hour_in: [Int!]

  """
  All values that are not contained in given list.
  """
  hour_not_in: [Int!]

  """
  All values less than the given value.
  """
  hour_lt: Int

  """
  All values less than or equal the given value.
  """
  hour_lte: Int

  """
  All values greater than the given value.
  """
  hour_gt: Int

  """
  All values greater than or equal the given value.
  """
  hour_gte: Int
  line: Int

  """
  All values that are not equal to given value.
  """
  line_not: Int

  """
  All values that are contained in given list.
  """
  line_in: [Int!]

  """
  All values that are not contained in given list.
  """
  line_not_in: [Int!]

  """
  All values less than the given value.
  """
  line_lt: Int

  """
  All values less than or equal the given value.
  """
  line_lte: Int

  """
  All values greater than the given value.
  """
  line_gt: Int

  """
  All values greater than or equal the given value.
  """
  line_gte: Int
  minute: Int

  """
  All values that are not equal to given value.
  """
  minute_not: Int

  """
  All values that are contained in given list.
  """
  minute_in: [Int!]

  """
  All values that are not contained in given list.
  """
  minute_not_in: [Int!]

  """
  All values less than the given value.
  """
  minute_lt: Int

  """
  All values less than or equal the given value.
  """
  minute_lte: Int

  """
  All values greater than the given value.
  """
  minute_gt: Int

  """
  All values greater than or equal the given value.
  """
  minute_gte: Int
  month: Int

  """
  All values that are not equal to given value.
  """
  month_not: Int

  """
  All values that are contained in given list.
  """
  month_in: [Int!]

  """
  All values that are not contained in given list.
  """
  month_not_in: [Int!]

  """
  All values less than the given value.
  """
  month_lt: Int

  """
  All values less than or equal the given value.
  """
  month_lte: Int

  """
  All values greater than the given value.
  """
  month_gt: Int

  """
  All values greater than or equal the given value.
  """
  month_gte: Int
  page: Int

  """
  All values that are not equal to given value.
  """
  page_not: Int

  """
  All values that are contained in given list.
  """
  page_in: [Int!]

  """
  All values that are not contained in given list.
  """
  page_not_in: [Int!]

  """
  All values less than the given value.
  """
  page_lt: Int

  """
  All values less than or equal the given value.
  """
  page_lte: Int

  """
  All values greater than the given value.
  """
  page_gt: Int

  """
  All values greater than or equal the given value.
  """
  page_gte: Int
  raw_total_volume: Int

  """
  All values that are not equal to given value.
  """
  raw_total_volume_not: Int

  """
  All values that are contained in given list.
  """
  raw_total_volume_in: [Int!]

  """
  All values that are not contained in given list.
  """
  raw_total_volume_not_in: [Int!]

  """
  All values less than the given value.
  """
  raw_total_volume_lt: Int

  """
  All values less than or equal the given value.
  """
  raw_total_volume_lte: Int

  """
  All values greater than the given value.
  """
  raw_total_volume_gt: Int

  """
  All values greater than or equal the given value.
  """
  raw_total_volume_gte: Int
  raw_volume_l: Int

  """
  All values that are not equal to given value.
  """
  raw_volume_l_not: Int

  """
  All values that are contained in given list.
  """
  raw_volume_l_in: [Int!]

  """
  All values that are not contained in given list.
  """
  raw_volume_l_not_in: [Int!]

  """
  All values less than the given value.
  """
  raw_volume_l_lt: Int

  """
  All values less than or equal the given value.
  """
  raw_volume_l_lte: Int

  """
  All values greater than the given value.
  """
  raw_volume_l_gt: Int

  """
  All values greater than or equal the given value.
  """
  raw_volume_l_gte: Int
  raw_volume_r: Int

  """
  All values that are not equal to given value.
  """
  raw_volume_r_not: Int

  """
  All values that are contained in given list.
  """
  raw_volume_r_in: [Int!]

  """
  All values that are not contained in given list.
  """
  raw_volume_r_not_in: [Int!]

  """
  All values less than the given value.
  """
  raw_volume_r_lt: Int

  """
  All values less than or equal the given value.
  """
  raw_volume_r_lte: Int

  """
  All values greater than the given value.
  """
  raw_volume_r_gt: Int

  """
  All values greater than or equal the given value.
  """
  raw_volume_r_gte: Int
  temperature: Int

  """
  All values that are not equal to given value.
  """
  temperature_not: Int

  """
  All values that are contained in given list.
  """
  temperature_in: [Int!]

  """
  All values that are not contained in given list.
  """
  temperature_not_in: [Int!]

  """
  All values less than the given value.
  """
  temperature_lt: Int

  """
  All values less than or equal the given value.
  """
  temperature_lte: Int

  """
  All values greater than the given value.
  """
  temperature_gt: Int

  """
  All values greater than or equal the given value.
  """
  temperature_gte: Int
  x: Int

  """
  All values that are not equal to given value.
  """
  x_not: Int

  """
  All values that are contained in given list.
  """
  x_in: [Int!]

  """
  All values that are not contained in given list.
  """
  x_not_in: [Int!]

  """
  All values less than the given value.
  """
  x_lt: Int

  """
  All values less than or equal the given value.
  """
  x_lte: Int

  """
  All values greater than the given value.
  """
  x_gt: Int

  """
  All values greater than or equal the given value.
  """
  x_gte: Int
  y: Int

  """
  All values that are not equal to given value.
  """
  y_not: Int

  """
  All values that are contained in given list.
  """
  y_in: [Int!]

  """
  All values that are not contained in given list.
  """
  y_not_in: [Int!]

  """
  All values less than the given value.
  """
  y_lt: Int

  """
  All values less than or equal the given value.
  """
  y_lte: Int

  """
  All values greater than the given value.
  """
  y_gt: Int

  """
  All values greater than or equal the given value.
  """
  y_gte: Int
  year: Int

  """
  All values that are not equal to given value.
  """
  year_not: Int

  """
  All values that are contained in given list.
  """
  year_in: [Int!]

  """
  All values that are not contained in given list.
  """
  year_not_in: [Int!]

  """
  All values less than the given value.
  """
  year_lt: Int

  """
  All values less than or equal the given value.
  """
  year_lte: Int

  """
  All values greater than the given value.
  """
  year_gt: Int

  """
  All values greater than or equal the given value.
  """
  year_gte: Int
  z: Int

  """
  All values that are not equal to given value.
  """
  z_not: Int

  """
  All values that are contained in given list.
  """
  z_in: [Int!]

  """
  All values that are not contained in given list.
  """
  z_not_in: [Int!]

  """
  All values less than the given value.
  """
  z_lt: Int

  """
  All values less than or equal the given value.
  """
  z_lte: Int

  """
  All values greater than the given value.
  """
  z_gt: Int

  """
  All values greater than or equal the given value.
  """
  z_gte: Int
  cup_data_colour_calcs_every: Cup_data_colour_calcWhereInput
  cup_data_colour_calcs_some: Cup_data_colour_calcWhereInput
  cup_data_colour_calcs_none: Cup_data_colour_calcWhereInput
  cup_data_proc_volumes_every: Cup_data_proc_volumeWhereInput
  cup_data_proc_volumes_some: Cup_data_proc_volumeWhereInput
  cup_data_proc_volumes_none: Cup_data_proc_volumeWhereInput
  serial_number: CupWhereInput
}

input Cup_dataWhereUniqueInput {
  id: Int
}

"""
A connection to a list of items.
"""
type CupConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CupEdge]!
  aggregate: AggregateCup!
}

input CupCreateInput {
  anon_serial_number: Int!
  encryption_key: Int!
  calib: CalibrationCreateOneWithoutCupsInput
  company: CompanyCreateOneWithoutCupsInput
  cup_app_syncs: Cup_app_syncCreateManyWithoutSerial_numberInput
  cup_data: Cup_dataCreateManyWithoutSerial_numberInput
  cup_data_colour_calibs: Cup_data_colour_calibCreateManyWithoutSerial_numberInput
  cup_data_raws: Cup_data_rawCreateManyWithoutSerial_numberInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutSerial_numberInput
  fw: FirmwareCreateOneWithoutCupsInput
  hw: HardwareCreateOneWithoutCupsInput
  user_cups: User_cupsCreateManyWithoutSerial_numberInput
}

input CupCreateManyWithoutCalibInput {
  create: [CupCreateWithoutCalibInput!]
  connect: [CupWhereUniqueInput!]
}

input CupCreateManyWithoutCompanyInput {
  create: [CupCreateWithoutCompanyInput!]
  connect: [CupWhereUniqueInput!]
}

input CupCreateManyWithoutFwInput {
  create: [CupCreateWithoutFwInput!]
  connect: [CupWhereUniqueInput!]
}

input CupCreateManyWithoutHwInput {
  create: [CupCreateWithoutHwInput!]
  connect: [CupWhereUniqueInput!]
}

input CupCreateOneWithoutCup_app_syncsInput {
  create: CupCreateWithoutCup_app_syncsInput
  connect: CupWhereUniqueInput
}

input CupCreateOneWithoutCup_data_colour_calibsInput {
  create: CupCreateWithoutCup_data_colour_calibsInput
  connect: CupWhereUniqueInput
}

input CupCreateOneWithoutCup_data_rawsInput {
  create: CupCreateWithoutCup_data_rawsInput
  connect: CupWhereUniqueInput
}

input CupCreateOneWithoutCup_data_user_removesInput {
  create: CupCreateWithoutCup_data_user_removesInput
  connect: CupWhereUniqueInput
}

input CupCreateOneWithoutCup_dataInput {
  create: CupCreateWithoutCup_dataInput
  connect: CupWhereUniqueInput
}

input CupCreateOneWithoutUser_cupsInput {
  create: CupCreateWithoutUser_cupsInput
  connect: CupWhereUniqueInput
}

input CupCreateWithoutCalibInput {
  anon_serial_number: Int!
  encryption_key: Int!
  company: CompanyCreateOneWithoutCupsInput
  cup_app_syncs: Cup_app_syncCreateManyWithoutSerial_numberInput
  cup_data: Cup_dataCreateManyWithoutSerial_numberInput
  cup_data_colour_calibs: Cup_data_colour_calibCreateManyWithoutSerial_numberInput
  cup_data_raws: Cup_data_rawCreateManyWithoutSerial_numberInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutSerial_numberInput
  fw: FirmwareCreateOneWithoutCupsInput
  hw: HardwareCreateOneWithoutCupsInput
  user_cups: User_cupsCreateManyWithoutSerial_numberInput
}

input CupCreateWithoutCompanyInput {
  anon_serial_number: Int!
  encryption_key: Int!
  calib: CalibrationCreateOneWithoutCupsInput
  cup_app_syncs: Cup_app_syncCreateManyWithoutSerial_numberInput
  cup_data: Cup_dataCreateManyWithoutSerial_numberInput
  cup_data_colour_calibs: Cup_data_colour_calibCreateManyWithoutSerial_numberInput
  cup_data_raws: Cup_data_rawCreateManyWithoutSerial_numberInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutSerial_numberInput
  fw: FirmwareCreateOneWithoutCupsInput
  hw: HardwareCreateOneWithoutCupsInput
  user_cups: User_cupsCreateManyWithoutSerial_numberInput
}

input CupCreateWithoutCup_app_syncsInput {
  anon_serial_number: Int!
  encryption_key: Int!
  calib: CalibrationCreateOneWithoutCupsInput
  company: CompanyCreateOneWithoutCupsInput
  cup_data: Cup_dataCreateManyWithoutSerial_numberInput
  cup_data_colour_calibs: Cup_data_colour_calibCreateManyWithoutSerial_numberInput
  cup_data_raws: Cup_data_rawCreateManyWithoutSerial_numberInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutSerial_numberInput
  fw: FirmwareCreateOneWithoutCupsInput
  hw: HardwareCreateOneWithoutCupsInput
  user_cups: User_cupsCreateManyWithoutSerial_numberInput
}

input CupCreateWithoutCup_data_colour_calibsInput {
  anon_serial_number: Int!
  encryption_key: Int!
  calib: CalibrationCreateOneWithoutCupsInput
  company: CompanyCreateOneWithoutCupsInput
  cup_app_syncs: Cup_app_syncCreateManyWithoutSerial_numberInput
  cup_data: Cup_dataCreateManyWithoutSerial_numberInput
  cup_data_raws: Cup_data_rawCreateManyWithoutSerial_numberInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutSerial_numberInput
  fw: FirmwareCreateOneWithoutCupsInput
  hw: HardwareCreateOneWithoutCupsInput
  user_cups: User_cupsCreateManyWithoutSerial_numberInput
}

input CupCreateWithoutCup_data_rawsInput {
  anon_serial_number: Int!
  encryption_key: Int!
  calib: CalibrationCreateOneWithoutCupsInput
  company: CompanyCreateOneWithoutCupsInput
  cup_app_syncs: Cup_app_syncCreateManyWithoutSerial_numberInput
  cup_data: Cup_dataCreateManyWithoutSerial_numberInput
  cup_data_colour_calibs: Cup_data_colour_calibCreateManyWithoutSerial_numberInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutSerial_numberInput
  fw: FirmwareCreateOneWithoutCupsInput
  hw: HardwareCreateOneWithoutCupsInput
  user_cups: User_cupsCreateManyWithoutSerial_numberInput
}

input CupCreateWithoutCup_data_user_removesInput {
  anon_serial_number: Int!
  encryption_key: Int!
  calib: CalibrationCreateOneWithoutCupsInput
  company: CompanyCreateOneWithoutCupsInput
  cup_app_syncs: Cup_app_syncCreateManyWithoutSerial_numberInput
  cup_data: Cup_dataCreateManyWithoutSerial_numberInput
  cup_data_colour_calibs: Cup_data_colour_calibCreateManyWithoutSerial_numberInput
  cup_data_raws: Cup_data_rawCreateManyWithoutSerial_numberInput
  fw: FirmwareCreateOneWithoutCupsInput
  hw: HardwareCreateOneWithoutCupsInput
  user_cups: User_cupsCreateManyWithoutSerial_numberInput
}

input CupCreateWithoutCup_dataInput {
  anon_serial_number: Int!
  encryption_key: Int!
  calib: CalibrationCreateOneWithoutCupsInput
  company: CompanyCreateOneWithoutCupsInput
  cup_app_syncs: Cup_app_syncCreateManyWithoutSerial_numberInput
  cup_data_colour_calibs: Cup_data_colour_calibCreateManyWithoutSerial_numberInput
  cup_data_raws: Cup_data_rawCreateManyWithoutSerial_numberInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutSerial_numberInput
  fw: FirmwareCreateOneWithoutCupsInput
  hw: HardwareCreateOneWithoutCupsInput
  user_cups: User_cupsCreateManyWithoutSerial_numberInput
}

input CupCreateWithoutFwInput {
  anon_serial_number: Int!
  encryption_key: Int!
  calib: CalibrationCreateOneWithoutCupsInput
  company: CompanyCreateOneWithoutCupsInput
  cup_app_syncs: Cup_app_syncCreateManyWithoutSerial_numberInput
  cup_data: Cup_dataCreateManyWithoutSerial_numberInput
  cup_data_colour_calibs: Cup_data_colour_calibCreateManyWithoutSerial_numberInput
  cup_data_raws: Cup_data_rawCreateManyWithoutSerial_numberInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutSerial_numberInput
  hw: HardwareCreateOneWithoutCupsInput
  user_cups: User_cupsCreateManyWithoutSerial_numberInput
}

input CupCreateWithoutHwInput {
  anon_serial_number: Int!
  encryption_key: Int!
  calib: CalibrationCreateOneWithoutCupsInput
  company: CompanyCreateOneWithoutCupsInput
  cup_app_syncs: Cup_app_syncCreateManyWithoutSerial_numberInput
  cup_data: Cup_dataCreateManyWithoutSerial_numberInput
  cup_data_colour_calibs: Cup_data_colour_calibCreateManyWithoutSerial_numberInput
  cup_data_raws: Cup_data_rawCreateManyWithoutSerial_numberInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutSerial_numberInput
  fw: FirmwareCreateOneWithoutCupsInput
  user_cups: User_cupsCreateManyWithoutSerial_numberInput
}

input CupCreateWithoutUser_cupsInput {
  anon_serial_number: Int!
  encryption_key: Int!
  calib: CalibrationCreateOneWithoutCupsInput
  company: CompanyCreateOneWithoutCupsInput
  cup_app_syncs: Cup_app_syncCreateManyWithoutSerial_numberInput
  cup_data: Cup_dataCreateManyWithoutSerial_numberInput
  cup_data_colour_calibs: Cup_data_colour_calibCreateManyWithoutSerial_numberInput
  cup_data_raws: Cup_data_rawCreateManyWithoutSerial_numberInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutSerial_numberInput
  fw: FirmwareCreateOneWithoutCupsInput
  hw: HardwareCreateOneWithoutCupsInput
}

"""
An edge in a connection.
"""
type CupEdge {
  """
  The item at the end of the edge.
  """
  node: Cup!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CupOrderByInput {
  id_ASC
  id_DESC
  anon_serial_number_ASC
  anon_serial_number_DESC
  encryption_key_ASC
  encryption_key_DESC
}

type CupPreviousValues {
  id: Int!
  anon_serial_number: Int!
  encryption_key: Int!
}

input CupScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CupScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CupScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CupScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  anon_serial_number: Int

  """
  All values that are not equal to given value.
  """
  anon_serial_number_not: Int

  """
  All values that are contained in given list.
  """
  anon_serial_number_in: [Int!]

  """
  All values that are not contained in given list.
  """
  anon_serial_number_not_in: [Int!]

  """
  All values less than the given value.
  """
  anon_serial_number_lt: Int

  """
  All values less than or equal the given value.
  """
  anon_serial_number_lte: Int

  """
  All values greater than the given value.
  """
  anon_serial_number_gt: Int

  """
  All values greater than or equal the given value.
  """
  anon_serial_number_gte: Int
  encryption_key: Int

  """
  All values that are not equal to given value.
  """
  encryption_key_not: Int

  """
  All values that are contained in given list.
  """
  encryption_key_in: [Int!]

  """
  All values that are not contained in given list.
  """
  encryption_key_not_in: [Int!]

  """
  All values less than the given value.
  """
  encryption_key_lt: Int

  """
  All values less than or equal the given value.
  """
  encryption_key_lte: Int

  """
  All values greater than the given value.
  """
  encryption_key_gt: Int

  """
  All values greater than or equal the given value.
  """
  encryption_key_gte: Int
}

type CupSubscriptionPayload {
  mutation: MutationType!
  node: Cup
  updatedFields: [String!]
  previousValues: CupPreviousValues
}

input CupSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CupSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CupSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CupSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CupWhereInput
}

input CupUpdateInput {
  anon_serial_number: Int
  encryption_key: Int
  calib: CalibrationUpdateOneWithoutCupsInput
  company: CompanyUpdateOneWithoutCupsInput
  cup_app_syncs: Cup_app_syncUpdateManyWithoutSerial_numberInput
  cup_data: Cup_dataUpdateManyWithoutSerial_numberInput
  cup_data_colour_calibs: Cup_data_colour_calibUpdateManyWithoutSerial_numberInput
  cup_data_raws: Cup_data_rawUpdateManyWithoutSerial_numberInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutSerial_numberInput
  fw: FirmwareUpdateOneWithoutCupsInput
  hw: HardwareUpdateOneWithoutCupsInput
  user_cups: User_cupsUpdateManyWithoutSerial_numberInput
}

input CupUpdateManyDataInput {
  anon_serial_number: Int
  encryption_key: Int
}

input CupUpdateManyMutationInput {
  anon_serial_number: Int
  encryption_key: Int
}

input CupUpdateManyWithoutCalibInput {
  create: [CupCreateWithoutCalibInput!]
  connect: [CupWhereUniqueInput!]
  set: [CupWhereUniqueInput!]
  disconnect: [CupWhereUniqueInput!]
  delete: [CupWhereUniqueInput!]
  update: [CupUpdateWithWhereUniqueWithoutCalibInput!]
  updateMany: [CupUpdateManyWithWhereNestedInput!]
  deleteMany: [CupScalarWhereInput!]
  upsert: [CupUpsertWithWhereUniqueWithoutCalibInput!]
}

input CupUpdateManyWithoutCompanyInput {
  create: [CupCreateWithoutCompanyInput!]
  connect: [CupWhereUniqueInput!]
  set: [CupWhereUniqueInput!]
  disconnect: [CupWhereUniqueInput!]
  delete: [CupWhereUniqueInput!]
  update: [CupUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [CupUpdateManyWithWhereNestedInput!]
  deleteMany: [CupScalarWhereInput!]
  upsert: [CupUpsertWithWhereUniqueWithoutCompanyInput!]
}

input CupUpdateManyWithoutFwInput {
  create: [CupCreateWithoutFwInput!]
  connect: [CupWhereUniqueInput!]
  set: [CupWhereUniqueInput!]
  disconnect: [CupWhereUniqueInput!]
  delete: [CupWhereUniqueInput!]
  update: [CupUpdateWithWhereUniqueWithoutFwInput!]
  updateMany: [CupUpdateManyWithWhereNestedInput!]
  deleteMany: [CupScalarWhereInput!]
  upsert: [CupUpsertWithWhereUniqueWithoutFwInput!]
}

input CupUpdateManyWithoutHwInput {
  create: [CupCreateWithoutHwInput!]
  connect: [CupWhereUniqueInput!]
  set: [CupWhereUniqueInput!]
  disconnect: [CupWhereUniqueInput!]
  delete: [CupWhereUniqueInput!]
  update: [CupUpdateWithWhereUniqueWithoutHwInput!]
  updateMany: [CupUpdateManyWithWhereNestedInput!]
  deleteMany: [CupScalarWhereInput!]
  upsert: [CupUpsertWithWhereUniqueWithoutHwInput!]
}

input CupUpdateManyWithWhereNestedInput {
  where: CupScalarWhereInput!
  data: CupUpdateManyDataInput!
}

input CupUpdateOneWithoutCup_app_syncsInput {
  create: CupCreateWithoutCup_app_syncsInput
  connect: CupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CupUpdateWithoutCup_app_syncsDataInput
  upsert: CupUpsertWithoutCup_app_syncsInput
}

input CupUpdateOneWithoutCup_data_colour_calibsInput {
  create: CupCreateWithoutCup_data_colour_calibsInput
  connect: CupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CupUpdateWithoutCup_data_colour_calibsDataInput
  upsert: CupUpsertWithoutCup_data_colour_calibsInput
}

input CupUpdateOneWithoutCup_data_rawsInput {
  create: CupCreateWithoutCup_data_rawsInput
  connect: CupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CupUpdateWithoutCup_data_rawsDataInput
  upsert: CupUpsertWithoutCup_data_rawsInput
}

input CupUpdateOneWithoutCup_data_user_removesInput {
  create: CupCreateWithoutCup_data_user_removesInput
  connect: CupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CupUpdateWithoutCup_data_user_removesDataInput
  upsert: CupUpsertWithoutCup_data_user_removesInput
}

input CupUpdateOneWithoutCup_dataInput {
  create: CupCreateWithoutCup_dataInput
  connect: CupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CupUpdateWithoutCup_dataDataInput
  upsert: CupUpsertWithoutCup_dataInput
}

input CupUpdateOneWithoutUser_cupsInput {
  create: CupCreateWithoutUser_cupsInput
  connect: CupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CupUpdateWithoutUser_cupsDataInput
  upsert: CupUpsertWithoutUser_cupsInput
}

input CupUpdateWithoutCalibDataInput {
  anon_serial_number: Int
  encryption_key: Int
  company: CompanyUpdateOneWithoutCupsInput
  cup_app_syncs: Cup_app_syncUpdateManyWithoutSerial_numberInput
  cup_data: Cup_dataUpdateManyWithoutSerial_numberInput
  cup_data_colour_calibs: Cup_data_colour_calibUpdateManyWithoutSerial_numberInput
  cup_data_raws: Cup_data_rawUpdateManyWithoutSerial_numberInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutSerial_numberInput
  fw: FirmwareUpdateOneWithoutCupsInput
  hw: HardwareUpdateOneWithoutCupsInput
  user_cups: User_cupsUpdateManyWithoutSerial_numberInput
}

input CupUpdateWithoutCompanyDataInput {
  anon_serial_number: Int
  encryption_key: Int
  calib: CalibrationUpdateOneWithoutCupsInput
  cup_app_syncs: Cup_app_syncUpdateManyWithoutSerial_numberInput
  cup_data: Cup_dataUpdateManyWithoutSerial_numberInput
  cup_data_colour_calibs: Cup_data_colour_calibUpdateManyWithoutSerial_numberInput
  cup_data_raws: Cup_data_rawUpdateManyWithoutSerial_numberInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutSerial_numberInput
  fw: FirmwareUpdateOneWithoutCupsInput
  hw: HardwareUpdateOneWithoutCupsInput
  user_cups: User_cupsUpdateManyWithoutSerial_numberInput
}

input CupUpdateWithoutCup_app_syncsDataInput {
  anon_serial_number: Int
  encryption_key: Int
  calib: CalibrationUpdateOneWithoutCupsInput
  company: CompanyUpdateOneWithoutCupsInput
  cup_data: Cup_dataUpdateManyWithoutSerial_numberInput
  cup_data_colour_calibs: Cup_data_colour_calibUpdateManyWithoutSerial_numberInput
  cup_data_raws: Cup_data_rawUpdateManyWithoutSerial_numberInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutSerial_numberInput
  fw: FirmwareUpdateOneWithoutCupsInput
  hw: HardwareUpdateOneWithoutCupsInput
  user_cups: User_cupsUpdateManyWithoutSerial_numberInput
}

input CupUpdateWithoutCup_data_colour_calibsDataInput {
  anon_serial_number: Int
  encryption_key: Int
  calib: CalibrationUpdateOneWithoutCupsInput
  company: CompanyUpdateOneWithoutCupsInput
  cup_app_syncs: Cup_app_syncUpdateManyWithoutSerial_numberInput
  cup_data: Cup_dataUpdateManyWithoutSerial_numberInput
  cup_data_raws: Cup_data_rawUpdateManyWithoutSerial_numberInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutSerial_numberInput
  fw: FirmwareUpdateOneWithoutCupsInput
  hw: HardwareUpdateOneWithoutCupsInput
  user_cups: User_cupsUpdateManyWithoutSerial_numberInput
}

input CupUpdateWithoutCup_data_rawsDataInput {
  anon_serial_number: Int
  encryption_key: Int
  calib: CalibrationUpdateOneWithoutCupsInput
  company: CompanyUpdateOneWithoutCupsInput
  cup_app_syncs: Cup_app_syncUpdateManyWithoutSerial_numberInput
  cup_data: Cup_dataUpdateManyWithoutSerial_numberInput
  cup_data_colour_calibs: Cup_data_colour_calibUpdateManyWithoutSerial_numberInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutSerial_numberInput
  fw: FirmwareUpdateOneWithoutCupsInput
  hw: HardwareUpdateOneWithoutCupsInput
  user_cups: User_cupsUpdateManyWithoutSerial_numberInput
}

input CupUpdateWithoutCup_data_user_removesDataInput {
  anon_serial_number: Int
  encryption_key: Int
  calib: CalibrationUpdateOneWithoutCupsInput
  company: CompanyUpdateOneWithoutCupsInput
  cup_app_syncs: Cup_app_syncUpdateManyWithoutSerial_numberInput
  cup_data: Cup_dataUpdateManyWithoutSerial_numberInput
  cup_data_colour_calibs: Cup_data_colour_calibUpdateManyWithoutSerial_numberInput
  cup_data_raws: Cup_data_rawUpdateManyWithoutSerial_numberInput
  fw: FirmwareUpdateOneWithoutCupsInput
  hw: HardwareUpdateOneWithoutCupsInput
  user_cups: User_cupsUpdateManyWithoutSerial_numberInput
}

input CupUpdateWithoutCup_dataDataInput {
  anon_serial_number: Int
  encryption_key: Int
  calib: CalibrationUpdateOneWithoutCupsInput
  company: CompanyUpdateOneWithoutCupsInput
  cup_app_syncs: Cup_app_syncUpdateManyWithoutSerial_numberInput
  cup_data_colour_calibs: Cup_data_colour_calibUpdateManyWithoutSerial_numberInput
  cup_data_raws: Cup_data_rawUpdateManyWithoutSerial_numberInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutSerial_numberInput
  fw: FirmwareUpdateOneWithoutCupsInput
  hw: HardwareUpdateOneWithoutCupsInput
  user_cups: User_cupsUpdateManyWithoutSerial_numberInput
}

input CupUpdateWithoutFwDataInput {
  anon_serial_number: Int
  encryption_key: Int
  calib: CalibrationUpdateOneWithoutCupsInput
  company: CompanyUpdateOneWithoutCupsInput
  cup_app_syncs: Cup_app_syncUpdateManyWithoutSerial_numberInput
  cup_data: Cup_dataUpdateManyWithoutSerial_numberInput
  cup_data_colour_calibs: Cup_data_colour_calibUpdateManyWithoutSerial_numberInput
  cup_data_raws: Cup_data_rawUpdateManyWithoutSerial_numberInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutSerial_numberInput
  hw: HardwareUpdateOneWithoutCupsInput
  user_cups: User_cupsUpdateManyWithoutSerial_numberInput
}

input CupUpdateWithoutHwDataInput {
  anon_serial_number: Int
  encryption_key: Int
  calib: CalibrationUpdateOneWithoutCupsInput
  company: CompanyUpdateOneWithoutCupsInput
  cup_app_syncs: Cup_app_syncUpdateManyWithoutSerial_numberInput
  cup_data: Cup_dataUpdateManyWithoutSerial_numberInput
  cup_data_colour_calibs: Cup_data_colour_calibUpdateManyWithoutSerial_numberInput
  cup_data_raws: Cup_data_rawUpdateManyWithoutSerial_numberInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutSerial_numberInput
  fw: FirmwareUpdateOneWithoutCupsInput
  user_cups: User_cupsUpdateManyWithoutSerial_numberInput
}

input CupUpdateWithoutUser_cupsDataInput {
  anon_serial_number: Int
  encryption_key: Int
  calib: CalibrationUpdateOneWithoutCupsInput
  company: CompanyUpdateOneWithoutCupsInput
  cup_app_syncs: Cup_app_syncUpdateManyWithoutSerial_numberInput
  cup_data: Cup_dataUpdateManyWithoutSerial_numberInput
  cup_data_colour_calibs: Cup_data_colour_calibUpdateManyWithoutSerial_numberInput
  cup_data_raws: Cup_data_rawUpdateManyWithoutSerial_numberInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutSerial_numberInput
  fw: FirmwareUpdateOneWithoutCupsInput
  hw: HardwareUpdateOneWithoutCupsInput
}

input CupUpdateWithWhereUniqueWithoutCalibInput {
  where: CupWhereUniqueInput!
  data: CupUpdateWithoutCalibDataInput!
}

input CupUpdateWithWhereUniqueWithoutCompanyInput {
  where: CupWhereUniqueInput!
  data: CupUpdateWithoutCompanyDataInput!
}

input CupUpdateWithWhereUniqueWithoutFwInput {
  where: CupWhereUniqueInput!
  data: CupUpdateWithoutFwDataInput!
}

input CupUpdateWithWhereUniqueWithoutHwInput {
  where: CupWhereUniqueInput!
  data: CupUpdateWithoutHwDataInput!
}

input CupUpsertWithoutCup_app_syncsInput {
  update: CupUpdateWithoutCup_app_syncsDataInput!
  create: CupCreateWithoutCup_app_syncsInput!
}

input CupUpsertWithoutCup_data_colour_calibsInput {
  update: CupUpdateWithoutCup_data_colour_calibsDataInput!
  create: CupCreateWithoutCup_data_colour_calibsInput!
}

input CupUpsertWithoutCup_data_rawsInput {
  update: CupUpdateWithoutCup_data_rawsDataInput!
  create: CupCreateWithoutCup_data_rawsInput!
}

input CupUpsertWithoutCup_data_user_removesInput {
  update: CupUpdateWithoutCup_data_user_removesDataInput!
  create: CupCreateWithoutCup_data_user_removesInput!
}

input CupUpsertWithoutCup_dataInput {
  update: CupUpdateWithoutCup_dataDataInput!
  create: CupCreateWithoutCup_dataInput!
}

input CupUpsertWithoutUser_cupsInput {
  update: CupUpdateWithoutUser_cupsDataInput!
  create: CupCreateWithoutUser_cupsInput!
}

input CupUpsertWithWhereUniqueWithoutCalibInput {
  where: CupWhereUniqueInput!
  update: CupUpdateWithoutCalibDataInput!
  create: CupCreateWithoutCalibInput!
}

input CupUpsertWithWhereUniqueWithoutCompanyInput {
  where: CupWhereUniqueInput!
  update: CupUpdateWithoutCompanyDataInput!
  create: CupCreateWithoutCompanyInput!
}

input CupUpsertWithWhereUniqueWithoutFwInput {
  where: CupWhereUniqueInput!
  update: CupUpdateWithoutFwDataInput!
  create: CupCreateWithoutFwInput!
}

input CupUpsertWithWhereUniqueWithoutHwInput {
  where: CupWhereUniqueInput!
  update: CupUpdateWithoutHwDataInput!
  create: CupCreateWithoutHwInput!
}

input CupWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CupWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [CupWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [CupWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  anon_serial_number: Int

  """
  All values that are not equal to given value.
  """
  anon_serial_number_not: Int

  """
  All values that are contained in given list.
  """
  anon_serial_number_in: [Int!]

  """
  All values that are not contained in given list.
  """
  anon_serial_number_not_in: [Int!]

  """
  All values less than the given value.
  """
  anon_serial_number_lt: Int

  """
  All values less than or equal the given value.
  """
  anon_serial_number_lte: Int

  """
  All values greater than the given value.
  """
  anon_serial_number_gt: Int

  """
  All values greater than or equal the given value.
  """
  anon_serial_number_gte: Int
  encryption_key: Int

  """
  All values that are not equal to given value.
  """
  encryption_key_not: Int

  """
  All values that are contained in given list.
  """
  encryption_key_in: [Int!]

  """
  All values that are not contained in given list.
  """
  encryption_key_not_in: [Int!]

  """
  All values less than the given value.
  """
  encryption_key_lt: Int

  """
  All values less than or equal the given value.
  """
  encryption_key_lte: Int

  """
  All values greater than the given value.
  """
  encryption_key_gt: Int

  """
  All values greater than or equal the given value.
  """
  encryption_key_gte: Int
  calib: CalibrationWhereInput
  company: CompanyWhereInput
  cup_app_syncs_every: Cup_app_syncWhereInput
  cup_app_syncs_some: Cup_app_syncWhereInput
  cup_app_syncs_none: Cup_app_syncWhereInput
  cup_data_every: Cup_dataWhereInput
  cup_data_some: Cup_dataWhereInput
  cup_data_none: Cup_dataWhereInput
  cup_data_colour_calibs_every: Cup_data_colour_calibWhereInput
  cup_data_colour_calibs_some: Cup_data_colour_calibWhereInput
  cup_data_colour_calibs_none: Cup_data_colour_calibWhereInput
  cup_data_raws_every: Cup_data_rawWhereInput
  cup_data_raws_some: Cup_data_rawWhereInput
  cup_data_raws_none: Cup_data_rawWhereInput
  cup_data_user_removes_every: Cup_data_user_removeWhereInput
  cup_data_user_removes_some: Cup_data_user_removeWhereInput
  cup_data_user_removes_none: Cup_data_user_removeWhereInput
  fw: FirmwareWhereInput
  hw: HardwareWhereInput
  user_cups_every: User_cupsWhereInput
  user_cups_some: User_cupsWhereInput
  user_cups_none: User_cupsWhereInput
}

input CupWhereUniqueInput {
  id: Int
}

scalar DateTime

type Ethnicity {
  id: Int!
  ethnicity: String!
  users(
    where: UsersWhereInput
    orderBy: UsersOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Users!]
}

"""
A connection to a list of items.
"""
type EthnicityConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [EthnicityEdge]!
  aggregate: AggregateEthnicity!
}

input EthnicityCreateInput {
  ethnicity: String!
  users: UsersCreateManyWithoutEthnicityInput
}

input EthnicityCreateOneWithoutUsersInput {
  create: EthnicityCreateWithoutUsersInput
  connect: EthnicityWhereUniqueInput
}

input EthnicityCreateWithoutUsersInput {
  ethnicity: String!
}

"""
An edge in a connection.
"""
type EthnicityEdge {
  """
  The item at the end of the edge.
  """
  node: Ethnicity!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum EthnicityOrderByInput {
  id_ASC
  id_DESC
  ethnicity_ASC
  ethnicity_DESC
}

type EthnicityPreviousValues {
  id: Int!
  ethnicity: String!
}

type EthnicitySubscriptionPayload {
  mutation: MutationType!
  node: Ethnicity
  updatedFields: [String!]
  previousValues: EthnicityPreviousValues
}

input EthnicitySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [EthnicitySubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [EthnicitySubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [EthnicitySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EthnicityWhereInput
}

input EthnicityUpdateInput {
  ethnicity: String
  users: UsersUpdateManyWithoutEthnicityInput
}

input EthnicityUpdateManyMutationInput {
  ethnicity: String
}

input EthnicityUpdateOneWithoutUsersInput {
  create: EthnicityCreateWithoutUsersInput
  connect: EthnicityWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EthnicityUpdateWithoutUsersDataInput
  upsert: EthnicityUpsertWithoutUsersInput
}

input EthnicityUpdateWithoutUsersDataInput {
  ethnicity: String
}

input EthnicityUpsertWithoutUsersInput {
  update: EthnicityUpdateWithoutUsersDataInput!
  create: EthnicityCreateWithoutUsersInput!
}

input EthnicityWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [EthnicityWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [EthnicityWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [EthnicityWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  ethnicity: String

  """
  All values that are not equal to given value.
  """
  ethnicity_not: String

  """
  All values that are contained in given list.
  """
  ethnicity_in: [String!]

  """
  All values that are not contained in given list.
  """
  ethnicity_not_in: [String!]

  """
  All values less than the given value.
  """
  ethnicity_lt: String

  """
  All values less than or equal the given value.
  """
  ethnicity_lte: String

  """
  All values greater than the given value.
  """
  ethnicity_gt: String

  """
  All values greater than or equal the given value.
  """
  ethnicity_gte: String

  """
  All values containing the given string.
  """
  ethnicity_contains: String

  """
  All values not containing the given string.
  """
  ethnicity_not_contains: String

  """
  All values starting with the given string.
  """
  ethnicity_starts_with: String

  """
  All values not starting with the given string.
  """
  ethnicity_not_starts_with: String

  """
  All values ending with the given string.
  """
  ethnicity_ends_with: String

  """
  All values not ending with the given string.
  """
  ethnicity_not_ends_with: String
  users_every: UsersWhereInput
  users_some: UsersWhereInput
  users_none: UsersWhereInput
}

input EthnicityWhereUniqueInput {
  id: Int
  ethnicity: String
}

type Firmware {
  id: Int!
  cups(
    where: CupWhereInput
    orderBy: CupOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup!]
  fw_version: String!
}

"""
A connection to a list of items.
"""
type FirmwareConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [FirmwareEdge]!
  aggregate: AggregateFirmware!
}

input FirmwareCreateInput {
  fw_version: String!
  cups: CupCreateManyWithoutFwInput
}

input FirmwareCreateOneWithoutCupsInput {
  create: FirmwareCreateWithoutCupsInput
  connect: FirmwareWhereUniqueInput
}

input FirmwareCreateWithoutCupsInput {
  fw_version: String!
}

"""
An edge in a connection.
"""
type FirmwareEdge {
  """
  The item at the end of the edge.
  """
  node: Firmware!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum FirmwareOrderByInput {
  id_ASC
  id_DESC
  fw_version_ASC
  fw_version_DESC
}

type FirmwarePreviousValues {
  id: Int!
  fw_version: String!
}

type FirmwareSubscriptionPayload {
  mutation: MutationType!
  node: Firmware
  updatedFields: [String!]
  previousValues: FirmwarePreviousValues
}

input FirmwareSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FirmwareSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [FirmwareSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [FirmwareSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FirmwareWhereInput
}

input FirmwareUpdateInput {
  fw_version: String
  cups: CupUpdateManyWithoutFwInput
}

input FirmwareUpdateManyMutationInput {
  fw_version: String
}

input FirmwareUpdateOneWithoutCupsInput {
  create: FirmwareCreateWithoutCupsInput
  connect: FirmwareWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FirmwareUpdateWithoutCupsDataInput
  upsert: FirmwareUpsertWithoutCupsInput
}

input FirmwareUpdateWithoutCupsDataInput {
  fw_version: String
}

input FirmwareUpsertWithoutCupsInput {
  update: FirmwareUpdateWithoutCupsDataInput!
  create: FirmwareCreateWithoutCupsInput!
}

input FirmwareWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [FirmwareWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [FirmwareWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [FirmwareWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  fw_version: String

  """
  All values that are not equal to given value.
  """
  fw_version_not: String

  """
  All values that are contained in given list.
  """
  fw_version_in: [String!]

  """
  All values that are not contained in given list.
  """
  fw_version_not_in: [String!]

  """
  All values less than the given value.
  """
  fw_version_lt: String

  """
  All values less than or equal the given value.
  """
  fw_version_lte: String

  """
  All values greater than the given value.
  """
  fw_version_gt: String

  """
  All values greater than or equal the given value.
  """
  fw_version_gte: String

  """
  All values containing the given string.
  """
  fw_version_contains: String

  """
  All values not containing the given string.
  """
  fw_version_not_contains: String

  """
  All values starting with the given string.
  """
  fw_version_starts_with: String

  """
  All values not starting with the given string.
  """
  fw_version_not_starts_with: String

  """
  All values ending with the given string.
  """
  fw_version_ends_with: String

  """
  All values not ending with the given string.
  """
  fw_version_not_ends_with: String
  cups_every: CupWhereInput
  cups_some: CupWhereInput
  cups_none: CupWhereInput
}

input FirmwareWhereUniqueInput {
  id: Int
  fw_version: String
}

type Hardware {
  id: Int!
  cups(
    where: CupWhereInput
    orderBy: CupOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup!]
  hw_version: String!
}

"""
A connection to a list of items.
"""
type HardwareConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [HardwareEdge]!
  aggregate: AggregateHardware!
}

input HardwareCreateInput {
  hw_version: String!
  cups: CupCreateManyWithoutHwInput
}

input HardwareCreateOneWithoutCupsInput {
  create: HardwareCreateWithoutCupsInput
  connect: HardwareWhereUniqueInput
}

input HardwareCreateWithoutCupsInput {
  hw_version: String!
}

"""
An edge in a connection.
"""
type HardwareEdge {
  """
  The item at the end of the edge.
  """
  node: Hardware!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum HardwareOrderByInput {
  id_ASC
  id_DESC
  hw_version_ASC
  hw_version_DESC
}

type HardwarePreviousValues {
  id: Int!
  hw_version: String!
}

type HardwareSubscriptionPayload {
  mutation: MutationType!
  node: Hardware
  updatedFields: [String!]
  previousValues: HardwarePreviousValues
}

input HardwareSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [HardwareSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [HardwareSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [HardwareSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HardwareWhereInput
}

input HardwareUpdateInput {
  hw_version: String
  cups: CupUpdateManyWithoutHwInput
}

input HardwareUpdateManyMutationInput {
  hw_version: String
}

input HardwareUpdateOneWithoutCupsInput {
  create: HardwareCreateWithoutCupsInput
  connect: HardwareWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: HardwareUpdateWithoutCupsDataInput
  upsert: HardwareUpsertWithoutCupsInput
}

input HardwareUpdateWithoutCupsDataInput {
  hw_version: String
}

input HardwareUpsertWithoutCupsInput {
  update: HardwareUpdateWithoutCupsDataInput!
  create: HardwareCreateWithoutCupsInput!
}

input HardwareWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [HardwareWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [HardwareWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [HardwareWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  hw_version: String

  """
  All values that are not equal to given value.
  """
  hw_version_not: String

  """
  All values that are contained in given list.
  """
  hw_version_in: [String!]

  """
  All values that are not contained in given list.
  """
  hw_version_not_in: [String!]

  """
  All values less than the given value.
  """
  hw_version_lt: String

  """
  All values less than or equal the given value.
  """
  hw_version_lte: String

  """
  All values greater than the given value.
  """
  hw_version_gt: String

  """
  All values greater than or equal the given value.
  """
  hw_version_gte: String

  """
  All values containing the given string.
  """
  hw_version_contains: String

  """
  All values not containing the given string.
  """
  hw_version_not_contains: String

  """
  All values starting with the given string.
  """
  hw_version_starts_with: String

  """
  All values not starting with the given string.
  """
  hw_version_not_starts_with: String

  """
  All values ending with the given string.
  """
  hw_version_ends_with: String

  """
  All values not ending with the given string.
  """
  hw_version_not_ends_with: String
  cups_every: CupWhereInput
  cups_some: CupWhereInput
  cups_none: CupWhereInput
}

input HardwareWhereUniqueInput {
  id: Int
  hw_version: String
}

"""
Raw JSON value
"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createAnswer_types(data: Answer_typesCreateInput!): Answer_types!
  createApp_server_sync(data: App_server_syncCreateInput!): App_server_sync!
  createAuth_token(data: Auth_tokenCreateInput!): Auth_token!
  createCalibration(data: CalibrationCreateInput!): Calibration!
  createCompany(data: CompanyCreateInput!): Company!
  createCountry(data: CountryCreateInput!): Country!
  createCup(data: CupCreateInput!): Cup!
  createCup_app_sync(data: Cup_app_syncCreateInput!): Cup_app_sync!
  createCup_data(data: Cup_dataCreateInput!): Cup_data!
  createCup_data_answer(data: Cup_data_answerCreateInput!): Cup_data_answer!
  createCup_data_colour_calc(
    data: Cup_data_colour_calcCreateInput!
  ): Cup_data_colour_calc!
  createCup_data_colour_calib(
    data: Cup_data_colour_calibCreateInput!
  ): Cup_data_colour_calib!
  createCup_data_man_mdates(
    data: Cup_data_man_mdatesCreateInput!
  ): Cup_data_man_mdates!
  createCup_data_proc_flow(
    data: Cup_data_proc_flowCreateInput!
  ): Cup_data_proc_flow!
  createCup_data_proc_mdates(
    data: Cup_data_proc_mdatesCreateInput!
  ): Cup_data_proc_mdates!
  createCup_data_proc_volume(
    data: Cup_data_proc_volumeCreateInput!
  ): Cup_data_proc_volume!
  createCup_data_qa_response(
    data: Cup_data_qa_responseCreateInput!
  ): Cup_data_qa_response!
  createCup_data_question(
    data: Cup_data_questionCreateInput!
  ): Cup_data_question!
  createCup_data_raw(data: Cup_data_rawCreateInput!): Cup_data_raw!
  createCup_data_rejection(
    data: Cup_data_rejectionCreateInput!
  ): Cup_data_rejection!
  createCup_data_user_remove(
    data: Cup_data_user_removeCreateInput!
  ): Cup_data_user_remove!
  createCup_data_user_remove_explain(
    data: Cup_data_user_remove_explainCreateInput!
  ): Cup_data_user_remove_explain!
  createEthnicity(data: EthnicityCreateInput!): Ethnicity!
  createFirmware(data: FirmwareCreateInput!): Firmware!
  createHardware(data: HardwareCreateInput!): Hardware!
  createPlatform_comp(data: Platform_compCreateInput!): Platform_comp!
  createUser_coin_history(
    data: User_coin_historyCreateInput!
  ): User_coin_history!
  createUser_cups(data: User_cupsCreateInput!): User_cups!
  createUser_interview_data(
    data: User_interview_dataCreateInput!
  ): User_interview_data!
  createUser_interview_questions(
    data: User_interview_questionsCreateInput!
  ): User_interview_questions!
  createUser_record_data_by_day(
    data: User_record_data_by_dayCreateInput!
  ): User_record_data_by_day!
  createUser_record_data_by_period(
    data: User_record_data_by_periodCreateInput!
  ): User_record_data_by_period!
  createUser_record_data_by_time(
    data: User_record_data_by_timeCreateInput!
  ): User_record_data_by_time!
  createUsers(data: UsersCreateInput!): Users!
  createUsers_data_analysis(
    data: Users_data_analysisCreateInput!
  ): Users_data_analysis!
  updateAnswer_types(
    data: Answer_typesUpdateInput!
    where: Answer_typesWhereUniqueInput!
  ): Answer_types
  updateApp_server_sync(
    data: App_server_syncUpdateInput!
    where: App_server_syncWhereUniqueInput!
  ): App_server_sync
  updateAuth_token(
    data: Auth_tokenUpdateInput!
    where: Auth_tokenWhereUniqueInput!
  ): Auth_token
  updateCalibration(
    data: CalibrationUpdateInput!
    where: CalibrationWhereUniqueInput!
  ): Calibration
  updateCompany(
    data: CompanyUpdateInput!
    where: CompanyWhereUniqueInput!
  ): Company
  updateCountry(
    data: CountryUpdateInput!
    where: CountryWhereUniqueInput!
  ): Country
  updateCup(data: CupUpdateInput!, where: CupWhereUniqueInput!): Cup
  updateCup_app_sync(
    data: Cup_app_syncUpdateInput!
    where: Cup_app_syncWhereUniqueInput!
  ): Cup_app_sync
  updateCup_data(
    data: Cup_dataUpdateInput!
    where: Cup_dataWhereUniqueInput!
  ): Cup_data
  updateCup_data_answer(
    data: Cup_data_answerUpdateInput!
    where: Cup_data_answerWhereUniqueInput!
  ): Cup_data_answer
  updateCup_data_colour_calc(
    data: Cup_data_colour_calcUpdateInput!
    where: Cup_data_colour_calcWhereUniqueInput!
  ): Cup_data_colour_calc
  updateCup_data_colour_calib(
    data: Cup_data_colour_calibUpdateInput!
    where: Cup_data_colour_calibWhereUniqueInput!
  ): Cup_data_colour_calib
  updateCup_data_man_mdates(
    data: Cup_data_man_mdatesUpdateInput!
    where: Cup_data_man_mdatesWhereUniqueInput!
  ): Cup_data_man_mdates
  updateCup_data_proc_flow(
    data: Cup_data_proc_flowUpdateInput!
    where: Cup_data_proc_flowWhereUniqueInput!
  ): Cup_data_proc_flow
  updateCup_data_proc_mdates(
    data: Cup_data_proc_mdatesUpdateInput!
    where: Cup_data_proc_mdatesWhereUniqueInput!
  ): Cup_data_proc_mdates
  updateCup_data_proc_volume(
    data: Cup_data_proc_volumeUpdateInput!
    where: Cup_data_proc_volumeWhereUniqueInput!
  ): Cup_data_proc_volume
  updateCup_data_qa_response(
    data: Cup_data_qa_responseUpdateInput!
    where: Cup_data_qa_responseWhereUniqueInput!
  ): Cup_data_qa_response
  updateCup_data_question(
    data: Cup_data_questionUpdateInput!
    where: Cup_data_questionWhereUniqueInput!
  ): Cup_data_question
  updateCup_data_raw(
    data: Cup_data_rawUpdateInput!
    where: Cup_data_rawWhereUniqueInput!
  ): Cup_data_raw
  updateCup_data_rejection(
    data: Cup_data_rejectionUpdateInput!
    where: Cup_data_rejectionWhereUniqueInput!
  ): Cup_data_rejection
  updateCup_data_user_remove(
    data: Cup_data_user_removeUpdateInput!
    where: Cup_data_user_removeWhereUniqueInput!
  ): Cup_data_user_remove
  updateCup_data_user_remove_explain(
    data: Cup_data_user_remove_explainUpdateInput!
    where: Cup_data_user_remove_explainWhereUniqueInput!
  ): Cup_data_user_remove_explain
  updateEthnicity(
    data: EthnicityUpdateInput!
    where: EthnicityWhereUniqueInput!
  ): Ethnicity
  updateFirmware(
    data: FirmwareUpdateInput!
    where: FirmwareWhereUniqueInput!
  ): Firmware
  updateHardware(
    data: HardwareUpdateInput!
    where: HardwareWhereUniqueInput!
  ): Hardware
  updatePlatform_comp(
    data: Platform_compUpdateInput!
    where: Platform_compWhereUniqueInput!
  ): Platform_comp
  updateUser_coin_history(
    data: User_coin_historyUpdateInput!
    where: User_coin_historyWhereUniqueInput!
  ): User_coin_history
  updateUser_cups(
    data: User_cupsUpdateInput!
    where: User_cupsWhereUniqueInput!
  ): User_cups
  updateUser_interview_data(
    data: User_interview_dataUpdateInput!
    where: User_interview_dataWhereUniqueInput!
  ): User_interview_data
  updateUser_interview_questions(
    data: User_interview_questionsUpdateInput!
    where: User_interview_questionsWhereUniqueInput!
  ): User_interview_questions
  updateUser_record_data_by_day(
    data: User_record_data_by_dayUpdateInput!
    where: User_record_data_by_dayWhereUniqueInput!
  ): User_record_data_by_day
  updateUser_record_data_by_period(
    data: User_record_data_by_periodUpdateInput!
    where: User_record_data_by_periodWhereUniqueInput!
  ): User_record_data_by_period
  updateUser_record_data_by_time(
    data: User_record_data_by_timeUpdateInput!
    where: User_record_data_by_timeWhereUniqueInput!
  ): User_record_data_by_time
  updateUsers(data: UsersUpdateInput!, where: UsersWhereUniqueInput!): Users
  updateUsers_data_analysis(
    data: Users_data_analysisUpdateInput!
    where: Users_data_analysisWhereUniqueInput!
  ): Users_data_analysis
  deleteAnswer_types(where: Answer_typesWhereUniqueInput!): Answer_types
  deleteApp_server_sync(
    where: App_server_syncWhereUniqueInput!
  ): App_server_sync
  deleteAuth_token(where: Auth_tokenWhereUniqueInput!): Auth_token
  deleteCalibration(where: CalibrationWhereUniqueInput!): Calibration
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteCup(where: CupWhereUniqueInput!): Cup
  deleteCup_app_sync(where: Cup_app_syncWhereUniqueInput!): Cup_app_sync
  deleteCup_data(where: Cup_dataWhereUniqueInput!): Cup_data
  deleteCup_data_answer(
    where: Cup_data_answerWhereUniqueInput!
  ): Cup_data_answer
  deleteCup_data_colour_calc(
    where: Cup_data_colour_calcWhereUniqueInput!
  ): Cup_data_colour_calc
  deleteCup_data_colour_calib(
    where: Cup_data_colour_calibWhereUniqueInput!
  ): Cup_data_colour_calib
  deleteCup_data_man_mdates(
    where: Cup_data_man_mdatesWhereUniqueInput!
  ): Cup_data_man_mdates
  deleteCup_data_proc_flow(
    where: Cup_data_proc_flowWhereUniqueInput!
  ): Cup_data_proc_flow
  deleteCup_data_proc_mdates(
    where: Cup_data_proc_mdatesWhereUniqueInput!
  ): Cup_data_proc_mdates
  deleteCup_data_proc_volume(
    where: Cup_data_proc_volumeWhereUniqueInput!
  ): Cup_data_proc_volume
  deleteCup_data_qa_response(
    where: Cup_data_qa_responseWhereUniqueInput!
  ): Cup_data_qa_response
  deleteCup_data_question(
    where: Cup_data_questionWhereUniqueInput!
  ): Cup_data_question
  deleteCup_data_raw(where: Cup_data_rawWhereUniqueInput!): Cup_data_raw
  deleteCup_data_rejection(
    where: Cup_data_rejectionWhereUniqueInput!
  ): Cup_data_rejection
  deleteCup_data_user_remove(
    where: Cup_data_user_removeWhereUniqueInput!
  ): Cup_data_user_remove
  deleteCup_data_user_remove_explain(
    where: Cup_data_user_remove_explainWhereUniqueInput!
  ): Cup_data_user_remove_explain
  deleteEthnicity(where: EthnicityWhereUniqueInput!): Ethnicity
  deleteFirmware(where: FirmwareWhereUniqueInput!): Firmware
  deleteHardware(where: HardwareWhereUniqueInput!): Hardware
  deletePlatform_comp(where: Platform_compWhereUniqueInput!): Platform_comp
  deleteUser_coin_history(
    where: User_coin_historyWhereUniqueInput!
  ): User_coin_history
  deleteUser_cups(where: User_cupsWhereUniqueInput!): User_cups
  deleteUser_interview_data(
    where: User_interview_dataWhereUniqueInput!
  ): User_interview_data
  deleteUser_interview_questions(
    where: User_interview_questionsWhereUniqueInput!
  ): User_interview_questions
  deleteUser_record_data_by_day(
    where: User_record_data_by_dayWhereUniqueInput!
  ): User_record_data_by_day
  deleteUser_record_data_by_period(
    where: User_record_data_by_periodWhereUniqueInput!
  ): User_record_data_by_period
  deleteUser_record_data_by_time(
    where: User_record_data_by_timeWhereUniqueInput!
  ): User_record_data_by_time
  deleteUsers(where: UsersWhereUniqueInput!): Users
  deleteUsers_data_analysis(
    where: Users_data_analysisWhereUniqueInput!
  ): Users_data_analysis
  upsertAnswer_types(
    where: Answer_typesWhereUniqueInput!
    create: Answer_typesCreateInput!
    update: Answer_typesUpdateInput!
  ): Answer_types!
  upsertApp_server_sync(
    where: App_server_syncWhereUniqueInput!
    create: App_server_syncCreateInput!
    update: App_server_syncUpdateInput!
  ): App_server_sync!
  upsertAuth_token(
    where: Auth_tokenWhereUniqueInput!
    create: Auth_tokenCreateInput!
    update: Auth_tokenUpdateInput!
  ): Auth_token!
  upsertCalibration(
    where: CalibrationWhereUniqueInput!
    create: CalibrationCreateInput!
    update: CalibrationUpdateInput!
  ): Calibration!
  upsertCompany(
    where: CompanyWhereUniqueInput!
    create: CompanyCreateInput!
    update: CompanyUpdateInput!
  ): Company!
  upsertCountry(
    where: CountryWhereUniqueInput!
    create: CountryCreateInput!
    update: CountryUpdateInput!
  ): Country!
  upsertCup(
    where: CupWhereUniqueInput!
    create: CupCreateInput!
    update: CupUpdateInput!
  ): Cup!
  upsertCup_app_sync(
    where: Cup_app_syncWhereUniqueInput!
    create: Cup_app_syncCreateInput!
    update: Cup_app_syncUpdateInput!
  ): Cup_app_sync!
  upsertCup_data(
    where: Cup_dataWhereUniqueInput!
    create: Cup_dataCreateInput!
    update: Cup_dataUpdateInput!
  ): Cup_data!
  upsertCup_data_answer(
    where: Cup_data_answerWhereUniqueInput!
    create: Cup_data_answerCreateInput!
    update: Cup_data_answerUpdateInput!
  ): Cup_data_answer!
  upsertCup_data_colour_calc(
    where: Cup_data_colour_calcWhereUniqueInput!
    create: Cup_data_colour_calcCreateInput!
    update: Cup_data_colour_calcUpdateInput!
  ): Cup_data_colour_calc!
  upsertCup_data_colour_calib(
    where: Cup_data_colour_calibWhereUniqueInput!
    create: Cup_data_colour_calibCreateInput!
    update: Cup_data_colour_calibUpdateInput!
  ): Cup_data_colour_calib!
  upsertCup_data_man_mdates(
    where: Cup_data_man_mdatesWhereUniqueInput!
    create: Cup_data_man_mdatesCreateInput!
    update: Cup_data_man_mdatesUpdateInput!
  ): Cup_data_man_mdates!
  upsertCup_data_proc_flow(
    where: Cup_data_proc_flowWhereUniqueInput!
    create: Cup_data_proc_flowCreateInput!
    update: Cup_data_proc_flowUpdateInput!
  ): Cup_data_proc_flow!
  upsertCup_data_proc_mdates(
    where: Cup_data_proc_mdatesWhereUniqueInput!
    create: Cup_data_proc_mdatesCreateInput!
    update: Cup_data_proc_mdatesUpdateInput!
  ): Cup_data_proc_mdates!
  upsertCup_data_proc_volume(
    where: Cup_data_proc_volumeWhereUniqueInput!
    create: Cup_data_proc_volumeCreateInput!
    update: Cup_data_proc_volumeUpdateInput!
  ): Cup_data_proc_volume!
  upsertCup_data_qa_response(
    where: Cup_data_qa_responseWhereUniqueInput!
    create: Cup_data_qa_responseCreateInput!
    update: Cup_data_qa_responseUpdateInput!
  ): Cup_data_qa_response!
  upsertCup_data_question(
    where: Cup_data_questionWhereUniqueInput!
    create: Cup_data_questionCreateInput!
    update: Cup_data_questionUpdateInput!
  ): Cup_data_question!
  upsertCup_data_raw(
    where: Cup_data_rawWhereUniqueInput!
    create: Cup_data_rawCreateInput!
    update: Cup_data_rawUpdateInput!
  ): Cup_data_raw!
  upsertCup_data_rejection(
    where: Cup_data_rejectionWhereUniqueInput!
    create: Cup_data_rejectionCreateInput!
    update: Cup_data_rejectionUpdateInput!
  ): Cup_data_rejection!
  upsertCup_data_user_remove(
    where: Cup_data_user_removeWhereUniqueInput!
    create: Cup_data_user_removeCreateInput!
    update: Cup_data_user_removeUpdateInput!
  ): Cup_data_user_remove!
  upsertCup_data_user_remove_explain(
    where: Cup_data_user_remove_explainWhereUniqueInput!
    create: Cup_data_user_remove_explainCreateInput!
    update: Cup_data_user_remove_explainUpdateInput!
  ): Cup_data_user_remove_explain!
  upsertEthnicity(
    where: EthnicityWhereUniqueInput!
    create: EthnicityCreateInput!
    update: EthnicityUpdateInput!
  ): Ethnicity!
  upsertFirmware(
    where: FirmwareWhereUniqueInput!
    create: FirmwareCreateInput!
    update: FirmwareUpdateInput!
  ): Firmware!
  upsertHardware(
    where: HardwareWhereUniqueInput!
    create: HardwareCreateInput!
    update: HardwareUpdateInput!
  ): Hardware!
  upsertPlatform_comp(
    where: Platform_compWhereUniqueInput!
    create: Platform_compCreateInput!
    update: Platform_compUpdateInput!
  ): Platform_comp!
  upsertUser_coin_history(
    where: User_coin_historyWhereUniqueInput!
    create: User_coin_historyCreateInput!
    update: User_coin_historyUpdateInput!
  ): User_coin_history!
  upsertUser_cups(
    where: User_cupsWhereUniqueInput!
    create: User_cupsCreateInput!
    update: User_cupsUpdateInput!
  ): User_cups!
  upsertUser_interview_data(
    where: User_interview_dataWhereUniqueInput!
    create: User_interview_dataCreateInput!
    update: User_interview_dataUpdateInput!
  ): User_interview_data!
  upsertUser_interview_questions(
    where: User_interview_questionsWhereUniqueInput!
    create: User_interview_questionsCreateInput!
    update: User_interview_questionsUpdateInput!
  ): User_interview_questions!
  upsertUser_record_data_by_day(
    where: User_record_data_by_dayWhereUniqueInput!
    create: User_record_data_by_dayCreateInput!
    update: User_record_data_by_dayUpdateInput!
  ): User_record_data_by_day!
  upsertUser_record_data_by_period(
    where: User_record_data_by_periodWhereUniqueInput!
    create: User_record_data_by_periodCreateInput!
    update: User_record_data_by_periodUpdateInput!
  ): User_record_data_by_period!
  upsertUser_record_data_by_time(
    where: User_record_data_by_timeWhereUniqueInput!
    create: User_record_data_by_timeCreateInput!
    update: User_record_data_by_timeUpdateInput!
  ): User_record_data_by_time!
  upsertUsers(
    where: UsersWhereUniqueInput!
    create: UsersCreateInput!
    update: UsersUpdateInput!
  ): Users!
  upsertUsers_data_analysis(
    where: Users_data_analysisWhereUniqueInput!
    create: Users_data_analysisCreateInput!
    update: Users_data_analysisUpdateInput!
  ): Users_data_analysis!
  updateManyAnswer_typeses(
    data: Answer_typesUpdateManyMutationInput!
    where: Answer_typesWhereInput
  ): BatchPayload!
  updateManyApp_server_syncs(
    data: App_server_syncUpdateManyMutationInput!
    where: App_server_syncWhereInput
  ): BatchPayload!
  updateManyAuth_tokens(
    data: Auth_tokenUpdateManyMutationInput!
    where: Auth_tokenWhereInput
  ): BatchPayload!
  updateManyCalibrations(
    data: CalibrationUpdateManyMutationInput!
    where: CalibrationWhereInput
  ): BatchPayload!
  updateManyCompanies(
    data: CompanyUpdateManyMutationInput!
    where: CompanyWhereInput
  ): BatchPayload!
  updateManyCountries(
    data: CountryUpdateManyMutationInput!
    where: CountryWhereInput
  ): BatchPayload!
  updateManyCups(
    data: CupUpdateManyMutationInput!
    where: CupWhereInput
  ): BatchPayload!
  updateManyCup_app_syncs(
    data: Cup_app_syncUpdateManyMutationInput!
    where: Cup_app_syncWhereInput
  ): BatchPayload!
  updateManyCup_datas(
    data: Cup_dataUpdateManyMutationInput!
    where: Cup_dataWhereInput
  ): BatchPayload!
  updateManyCup_data_answers(
    data: Cup_data_answerUpdateManyMutationInput!
    where: Cup_data_answerWhereInput
  ): BatchPayload!
  updateManyCup_data_colour_calcs(
    data: Cup_data_colour_calcUpdateManyMutationInput!
    where: Cup_data_colour_calcWhereInput
  ): BatchPayload!
  updateManyCup_data_colour_calibs(
    data: Cup_data_colour_calibUpdateManyMutationInput!
    where: Cup_data_colour_calibWhereInput
  ): BatchPayload!
  updateManyCup_data_man_mdateses(
    data: Cup_data_man_mdatesUpdateManyMutationInput!
    where: Cup_data_man_mdatesWhereInput
  ): BatchPayload!
  updateManyCup_data_proc_flows(
    data: Cup_data_proc_flowUpdateManyMutationInput!
    where: Cup_data_proc_flowWhereInput
  ): BatchPayload!
  updateManyCup_data_proc_mdateses(
    data: Cup_data_proc_mdatesUpdateManyMutationInput!
    where: Cup_data_proc_mdatesWhereInput
  ): BatchPayload!
  updateManyCup_data_proc_volumes(
    data: Cup_data_proc_volumeUpdateManyMutationInput!
    where: Cup_data_proc_volumeWhereInput
  ): BatchPayload!
  updateManyCup_data_qa_responses(
    data: Cup_data_qa_responseUpdateManyMutationInput!
    where: Cup_data_qa_responseWhereInput
  ): BatchPayload!
  updateManyCup_data_questions(
    data: Cup_data_questionUpdateManyMutationInput!
    where: Cup_data_questionWhereInput
  ): BatchPayload!
  updateManyCup_data_raws(
    data: Cup_data_rawUpdateManyMutationInput!
    where: Cup_data_rawWhereInput
  ): BatchPayload!
  updateManyCup_data_rejections(
    data: Cup_data_rejectionUpdateManyMutationInput!
    where: Cup_data_rejectionWhereInput
  ): BatchPayload!
  updateManyCup_data_user_removes(
    data: Cup_data_user_removeUpdateManyMutationInput!
    where: Cup_data_user_removeWhereInput
  ): BatchPayload!
  updateManyCup_data_user_remove_explains(
    data: Cup_data_user_remove_explainUpdateManyMutationInput!
    where: Cup_data_user_remove_explainWhereInput
  ): BatchPayload!
  updateManyEthnicities(
    data: EthnicityUpdateManyMutationInput!
    where: EthnicityWhereInput
  ): BatchPayload!
  updateManyFirmwares(
    data: FirmwareUpdateManyMutationInput!
    where: FirmwareWhereInput
  ): BatchPayload!
  updateManyHardwares(
    data: HardwareUpdateManyMutationInput!
    where: HardwareWhereInput
  ): BatchPayload!
  updateManyPlatform_comps(
    data: Platform_compUpdateManyMutationInput!
    where: Platform_compWhereInput
  ): BatchPayload!
  updateManyUser_coin_histories(
    data: User_coin_historyUpdateManyMutationInput!
    where: User_coin_historyWhereInput
  ): BatchPayload!
  updateManyUser_interview_datas(
    data: User_interview_dataUpdateManyMutationInput!
    where: User_interview_dataWhereInput
  ): BatchPayload!
  updateManyUser_interview_questionses(
    data: User_interview_questionsUpdateManyMutationInput!
    where: User_interview_questionsWhereInput
  ): BatchPayload!
  updateManyUser_record_data_by_days(
    data: User_record_data_by_dayUpdateManyMutationInput!
    where: User_record_data_by_dayWhereInput
  ): BatchPayload!
  updateManyUser_record_data_by_periods(
    data: User_record_data_by_periodUpdateManyMutationInput!
    where: User_record_data_by_periodWhereInput
  ): BatchPayload!
  updateManyUser_record_data_by_times(
    data: User_record_data_by_timeUpdateManyMutationInput!
    where: User_record_data_by_timeWhereInput
  ): BatchPayload!
  updateManyUserses(
    data: UsersUpdateManyMutationInput!
    where: UsersWhereInput
  ): BatchPayload!
  updateManyUsers_data_analyses(
    data: Users_data_analysisUpdateManyMutationInput!
    where: Users_data_analysisWhereInput
  ): BatchPayload!
  deleteManyAnswer_typeses(where: Answer_typesWhereInput): BatchPayload!
  deleteManyApp_server_syncs(where: App_server_syncWhereInput): BatchPayload!
  deleteManyAuth_tokens(where: Auth_tokenWhereInput): BatchPayload!
  deleteManyCalibrations(where: CalibrationWhereInput): BatchPayload!
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  deleteManyCountries(where: CountryWhereInput): BatchPayload!
  deleteManyCups(where: CupWhereInput): BatchPayload!
  deleteManyCup_app_syncs(where: Cup_app_syncWhereInput): BatchPayload!
  deleteManyCup_datas(where: Cup_dataWhereInput): BatchPayload!
  deleteManyCup_data_answers(where: Cup_data_answerWhereInput): BatchPayload!
  deleteManyCup_data_colour_calcs(
    where: Cup_data_colour_calcWhereInput
  ): BatchPayload!
  deleteManyCup_data_colour_calibs(
    where: Cup_data_colour_calibWhereInput
  ): BatchPayload!
  deleteManyCup_data_man_mdateses(
    where: Cup_data_man_mdatesWhereInput
  ): BatchPayload!
  deleteManyCup_data_proc_flows(
    where: Cup_data_proc_flowWhereInput
  ): BatchPayload!
  deleteManyCup_data_proc_mdateses(
    where: Cup_data_proc_mdatesWhereInput
  ): BatchPayload!
  deleteManyCup_data_proc_volumes(
    where: Cup_data_proc_volumeWhereInput
  ): BatchPayload!
  deleteManyCup_data_qa_responses(
    where: Cup_data_qa_responseWhereInput
  ): BatchPayload!
  deleteManyCup_data_questions(
    where: Cup_data_questionWhereInput
  ): BatchPayload!
  deleteManyCup_data_raws(where: Cup_data_rawWhereInput): BatchPayload!
  deleteManyCup_data_rejections(
    where: Cup_data_rejectionWhereInput
  ): BatchPayload!
  deleteManyCup_data_user_removes(
    where: Cup_data_user_removeWhereInput
  ): BatchPayload!
  deleteManyCup_data_user_remove_explains(
    where: Cup_data_user_remove_explainWhereInput
  ): BatchPayload!
  deleteManyEthnicities(where: EthnicityWhereInput): BatchPayload!
  deleteManyFirmwares(where: FirmwareWhereInput): BatchPayload!
  deleteManyHardwares(where: HardwareWhereInput): BatchPayload!
  deleteManyPlatform_comps(where: Platform_compWhereInput): BatchPayload!
  deleteManyUser_coin_histories(
    where: User_coin_historyWhereInput
  ): BatchPayload!
  deleteManyUser_cupses(where: User_cupsWhereInput): BatchPayload!
  deleteManyUser_interview_datas(
    where: User_interview_dataWhereInput
  ): BatchPayload!
  deleteManyUser_interview_questionses(
    where: User_interview_questionsWhereInput
  ): BatchPayload!
  deleteManyUser_record_data_by_days(
    where: User_record_data_by_dayWhereInput
  ): BatchPayload!
  deleteManyUser_record_data_by_periods(
    where: User_record_data_by_periodWhereInput
  ): BatchPayload!
  deleteManyUser_record_data_by_times(
    where: User_record_data_by_timeWhereInput
  ): BatchPayload!
  deleteManyUserses(where: UsersWhereInput): BatchPayload!
  deleteManyUsers_data_analyses(
    where: Users_data_analysisWhereInput
  ): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Platform_comp {
  id: Int!
  phone_id: Int!
  platform_id: Int!
  problem_history: Boolean
  software_id: Int!
  success_history: Boolean
}

"""
A connection to a list of items.
"""
type Platform_compConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [Platform_compEdge]!
  aggregate: AggregatePlatform_comp!
}

input Platform_compCreateInput {
  phone_id: Int!
  platform_id: Int!
  problem_history: Boolean
  software_id: Int!
  success_history: Boolean
}

"""
An edge in a connection.
"""
type Platform_compEdge {
  """
  The item at the end of the edge.
  """
  node: Platform_comp!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Platform_compOrderByInput {
  id_ASC
  id_DESC
  phone_id_ASC
  phone_id_DESC
  platform_id_ASC
  platform_id_DESC
  problem_history_ASC
  problem_history_DESC
  software_id_ASC
  software_id_DESC
  success_history_ASC
  success_history_DESC
}

type Platform_compPreviousValues {
  id: Int!
  phone_id: Int!
  platform_id: Int!
  problem_history: Boolean
  software_id: Int!
  success_history: Boolean
}

type Platform_compSubscriptionPayload {
  mutation: MutationType!
  node: Platform_comp
  updatedFields: [String!]
  previousValues: Platform_compPreviousValues
}

input Platform_compSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Platform_compSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Platform_compSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Platform_compSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Platform_compWhereInput
}

input Platform_compUpdateInput {
  phone_id: Int
  platform_id: Int
  problem_history: Boolean
  software_id: Int
  success_history: Boolean
}

input Platform_compUpdateManyMutationInput {
  phone_id: Int
  platform_id: Int
  problem_history: Boolean
  software_id: Int
  success_history: Boolean
}

input Platform_compWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Platform_compWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Platform_compWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Platform_compWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  phone_id: Int

  """
  All values that are not equal to given value.
  """
  phone_id_not: Int

  """
  All values that are contained in given list.
  """
  phone_id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  phone_id_not_in: [Int!]

  """
  All values less than the given value.
  """
  phone_id_lt: Int

  """
  All values less than or equal the given value.
  """
  phone_id_lte: Int

  """
  All values greater than the given value.
  """
  phone_id_gt: Int

  """
  All values greater than or equal the given value.
  """
  phone_id_gte: Int
  platform_id: Int

  """
  All values that are not equal to given value.
  """
  platform_id_not: Int

  """
  All values that are contained in given list.
  """
  platform_id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  platform_id_not_in: [Int!]

  """
  All values less than the given value.
  """
  platform_id_lt: Int

  """
  All values less than or equal the given value.
  """
  platform_id_lte: Int

  """
  All values greater than the given value.
  """
  platform_id_gt: Int

  """
  All values greater than or equal the given value.
  """
  platform_id_gte: Int
  problem_history: Boolean

  """
  All values that are not equal to given value.
  """
  problem_history_not: Boolean
  software_id: Int

  """
  All values that are not equal to given value.
  """
  software_id_not: Int

  """
  All values that are contained in given list.
  """
  software_id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  software_id_not_in: [Int!]

  """
  All values less than the given value.
  """
  software_id_lt: Int

  """
  All values less than or equal the given value.
  """
  software_id_lte: Int

  """
  All values greater than the given value.
  """
  software_id_gt: Int

  """
  All values greater than or equal the given value.
  """
  software_id_gte: Int
  success_history: Boolean

  """
  All values that are not equal to given value.
  """
  success_history_not: Boolean
}

input Platform_compWhereUniqueInput {
  id: Int
}

enum PrismaDatabase {
  default
}

type Query {
  answer_typeses(
    where: Answer_typesWhereInput
    orderBy: Answer_typesOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Answer_types]!
  app_server_syncs(
    where: App_server_syncWhereInput
    orderBy: App_server_syncOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [App_server_sync]!
  auth_tokens(
    where: Auth_tokenWhereInput
    orderBy: Auth_tokenOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Auth_token]!
  calibrations(
    where: CalibrationWhereInput
    orderBy: CalibrationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Calibration]!
  companies(
    where: CompanyWhereInput
    orderBy: CompanyOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Company]!
  countries(
    where: CountryWhereInput
    orderBy: CountryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Country]!
  cups(
    where: CupWhereInput
    orderBy: CupOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup]!
  cup_app_syncs(
    where: Cup_app_syncWhereInput
    orderBy: Cup_app_syncOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_app_sync]!
  cup_datas(
    where: Cup_dataWhereInput
    orderBy: Cup_dataOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data]!
  cup_data_answers(
    where: Cup_data_answerWhereInput
    orderBy: Cup_data_answerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_answer]!
  cup_data_colour_calcs(
    where: Cup_data_colour_calcWhereInput
    orderBy: Cup_data_colour_calcOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_colour_calc]!
  cup_data_colour_calibs(
    where: Cup_data_colour_calibWhereInput
    orderBy: Cup_data_colour_calibOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_colour_calib]!
  cup_data_man_mdateses(
    where: Cup_data_man_mdatesWhereInput
    orderBy: Cup_data_man_mdatesOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_man_mdates]!
  cup_data_proc_flows(
    where: Cup_data_proc_flowWhereInput
    orderBy: Cup_data_proc_flowOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_proc_flow]!
  cup_data_proc_mdateses(
    where: Cup_data_proc_mdatesWhereInput
    orderBy: Cup_data_proc_mdatesOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_proc_mdates]!
  cup_data_proc_volumes(
    where: Cup_data_proc_volumeWhereInput
    orderBy: Cup_data_proc_volumeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_proc_volume]!
  cup_data_qa_responses(
    where: Cup_data_qa_responseWhereInput
    orderBy: Cup_data_qa_responseOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_qa_response]!
  cup_data_questions(
    where: Cup_data_questionWhereInput
    orderBy: Cup_data_questionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_question]!
  cup_data_raws(
    where: Cup_data_rawWhereInput
    orderBy: Cup_data_rawOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_raw]!
  cup_data_rejections(
    where: Cup_data_rejectionWhereInput
    orderBy: Cup_data_rejectionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_rejection]!
  cup_data_user_removes(
    where: Cup_data_user_removeWhereInput
    orderBy: Cup_data_user_removeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_user_remove]!
  cup_data_user_remove_explains(
    where: Cup_data_user_remove_explainWhereInput
    orderBy: Cup_data_user_remove_explainOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_user_remove_explain]!
  ethnicities(
    where: EthnicityWhereInput
    orderBy: EthnicityOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Ethnicity]!
  firmwares(
    where: FirmwareWhereInput
    orderBy: FirmwareOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Firmware]!
  hardwares(
    where: HardwareWhereInput
    orderBy: HardwareOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Hardware]!
  platform_comps(
    where: Platform_compWhereInput
    orderBy: Platform_compOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Platform_comp]!
  user_coin_histories(
    where: User_coin_historyWhereInput
    orderBy: User_coin_historyOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User_coin_history]!
  user_cupses(
    where: User_cupsWhereInput
    orderBy: User_cupsOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User_cups]!
  user_interview_datas(
    where: User_interview_dataWhereInput
    orderBy: User_interview_dataOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User_interview_data]!
  user_interview_questionses(
    where: User_interview_questionsWhereInput
    orderBy: User_interview_questionsOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User_interview_questions]!
  user_record_data_by_days(
    where: User_record_data_by_dayWhereInput
    orderBy: User_record_data_by_dayOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User_record_data_by_day]!
  user_record_data_by_periods(
    where: User_record_data_by_periodWhereInput
    orderBy: User_record_data_by_periodOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User_record_data_by_period]!
  user_record_data_by_times(
    where: User_record_data_by_timeWhereInput
    orderBy: User_record_data_by_timeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User_record_data_by_time]!
  userses(
    where: UsersWhereInput
    orderBy: UsersOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Users]!
  users_data_analyses(
    where: Users_data_analysisWhereInput
    orderBy: Users_data_analysisOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Users_data_analysis]!
  answer_types(where: Answer_typesWhereUniqueInput!): Answer_types
  app_server_sync(where: App_server_syncWhereUniqueInput!): App_server_sync
  auth_token(where: Auth_tokenWhereUniqueInput!): Auth_token
  calibration(where: CalibrationWhereUniqueInput!): Calibration
  company(where: CompanyWhereUniqueInput!): Company
  country(where: CountryWhereUniqueInput!): Country
  cup(where: CupWhereUniqueInput!): Cup
  cup_app_sync(where: Cup_app_syncWhereUniqueInput!): Cup_app_sync
  cup_data(where: Cup_dataWhereUniqueInput!): Cup_data
  cup_data_answer(where: Cup_data_answerWhereUniqueInput!): Cup_data_answer
  cup_data_colour_calc(
    where: Cup_data_colour_calcWhereUniqueInput!
  ): Cup_data_colour_calc
  cup_data_colour_calib(
    where: Cup_data_colour_calibWhereUniqueInput!
  ): Cup_data_colour_calib
  cup_data_man_mdates(
    where: Cup_data_man_mdatesWhereUniqueInput!
  ): Cup_data_man_mdates
  cup_data_proc_flow(
    where: Cup_data_proc_flowWhereUniqueInput!
  ): Cup_data_proc_flow
  cup_data_proc_mdates(
    where: Cup_data_proc_mdatesWhereUniqueInput!
  ): Cup_data_proc_mdates
  cup_data_proc_volume(
    where: Cup_data_proc_volumeWhereUniqueInput!
  ): Cup_data_proc_volume
  cup_data_qa_response(
    where: Cup_data_qa_responseWhereUniqueInput!
  ): Cup_data_qa_response
  cup_data_question(
    where: Cup_data_questionWhereUniqueInput!
  ): Cup_data_question
  cup_data_raw(where: Cup_data_rawWhereUniqueInput!): Cup_data_raw
  cup_data_rejection(
    where: Cup_data_rejectionWhereUniqueInput!
  ): Cup_data_rejection
  cup_data_user_remove(
    where: Cup_data_user_removeWhereUniqueInput!
  ): Cup_data_user_remove
  cup_data_user_remove_explain(
    where: Cup_data_user_remove_explainWhereUniqueInput!
  ): Cup_data_user_remove_explain
  ethnicity(where: EthnicityWhereUniqueInput!): Ethnicity
  firmware(where: FirmwareWhereUniqueInput!): Firmware
  hardware(where: HardwareWhereUniqueInput!): Hardware
  platform_comp(where: Platform_compWhereUniqueInput!): Platform_comp
  user_coin_history(
    where: User_coin_historyWhereUniqueInput!
  ): User_coin_history
  user_cups(where: User_cupsWhereUniqueInput!): User_cups
  user_interview_data(
    where: User_interview_dataWhereUniqueInput!
  ): User_interview_data
  user_interview_questions(
    where: User_interview_questionsWhereUniqueInput!
  ): User_interview_questions
  user_record_data_by_day(
    where: User_record_data_by_dayWhereUniqueInput!
  ): User_record_data_by_day
  user_record_data_by_period(
    where: User_record_data_by_periodWhereUniqueInput!
  ): User_record_data_by_period
  user_record_data_by_time(
    where: User_record_data_by_timeWhereUniqueInput!
  ): User_record_data_by_time
  users(where: UsersWhereUniqueInput!): Users
  users_data_analysis(
    where: Users_data_analysisWhereUniqueInput!
  ): Users_data_analysis
  answer_typesesConnection(
    where: Answer_typesWhereInput
    orderBy: Answer_typesOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Answer_typesConnection!
  app_server_syncsConnection(
    where: App_server_syncWhereInput
    orderBy: App_server_syncOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): App_server_syncConnection!
  auth_tokensConnection(
    where: Auth_tokenWhereInput
    orderBy: Auth_tokenOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Auth_tokenConnection!
  calibrationsConnection(
    where: CalibrationWhereInput
    orderBy: CalibrationOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CalibrationConnection!
  companiesConnection(
    where: CompanyWhereInput
    orderBy: CompanyOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CompanyConnection!
  countriesConnection(
    where: CountryWhereInput
    orderBy: CountryOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CountryConnection!
  cupsConnection(
    where: CupWhereInput
    orderBy: CupOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): CupConnection!
  cup_app_syncsConnection(
    where: Cup_app_syncWhereInput
    orderBy: Cup_app_syncOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Cup_app_syncConnection!
  cup_datasConnection(
    where: Cup_dataWhereInput
    orderBy: Cup_dataOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Cup_dataConnection!
  cup_data_answersConnection(
    where: Cup_data_answerWhereInput
    orderBy: Cup_data_answerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Cup_data_answerConnection!
  cup_data_colour_calcsConnection(
    where: Cup_data_colour_calcWhereInput
    orderBy: Cup_data_colour_calcOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Cup_data_colour_calcConnection!
  cup_data_colour_calibsConnection(
    where: Cup_data_colour_calibWhereInput
    orderBy: Cup_data_colour_calibOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Cup_data_colour_calibConnection!
  cup_data_man_mdatesesConnection(
    where: Cup_data_man_mdatesWhereInput
    orderBy: Cup_data_man_mdatesOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Cup_data_man_mdatesConnection!
  cup_data_proc_flowsConnection(
    where: Cup_data_proc_flowWhereInput
    orderBy: Cup_data_proc_flowOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Cup_data_proc_flowConnection!
  cup_data_proc_mdatesesConnection(
    where: Cup_data_proc_mdatesWhereInput
    orderBy: Cup_data_proc_mdatesOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Cup_data_proc_mdatesConnection!
  cup_data_proc_volumesConnection(
    where: Cup_data_proc_volumeWhereInput
    orderBy: Cup_data_proc_volumeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Cup_data_proc_volumeConnection!
  cup_data_qa_responsesConnection(
    where: Cup_data_qa_responseWhereInput
    orderBy: Cup_data_qa_responseOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Cup_data_qa_responseConnection!
  cup_data_questionsConnection(
    where: Cup_data_questionWhereInput
    orderBy: Cup_data_questionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Cup_data_questionConnection!
  cup_data_rawsConnection(
    where: Cup_data_rawWhereInput
    orderBy: Cup_data_rawOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Cup_data_rawConnection!
  cup_data_rejectionsConnection(
    where: Cup_data_rejectionWhereInput
    orderBy: Cup_data_rejectionOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Cup_data_rejectionConnection!
  cup_data_user_removesConnection(
    where: Cup_data_user_removeWhereInput
    orderBy: Cup_data_user_removeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Cup_data_user_removeConnection!
  cup_data_user_remove_explainsConnection(
    where: Cup_data_user_remove_explainWhereInput
    orderBy: Cup_data_user_remove_explainOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Cup_data_user_remove_explainConnection!
  ethnicitiesConnection(
    where: EthnicityWhereInput
    orderBy: EthnicityOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): EthnicityConnection!
  firmwaresConnection(
    where: FirmwareWhereInput
    orderBy: FirmwareOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): FirmwareConnection!
  hardwaresConnection(
    where: HardwareWhereInput
    orderBy: HardwareOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): HardwareConnection!
  platform_compsConnection(
    where: Platform_compWhereInput
    orderBy: Platform_compOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Platform_compConnection!
  user_coin_historiesConnection(
    where: User_coin_historyWhereInput
    orderBy: User_coin_historyOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): User_coin_historyConnection!
  user_cupsesConnection(
    where: User_cupsWhereInput
    orderBy: User_cupsOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): User_cupsConnection!
  user_interview_datasConnection(
    where: User_interview_dataWhereInput
    orderBy: User_interview_dataOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): User_interview_dataConnection!
  user_interview_questionsesConnection(
    where: User_interview_questionsWhereInput
    orderBy: User_interview_questionsOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): User_interview_questionsConnection!
  user_record_data_by_daysConnection(
    where: User_record_data_by_dayWhereInput
    orderBy: User_record_data_by_dayOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): User_record_data_by_dayConnection!
  user_record_data_by_periodsConnection(
    where: User_record_data_by_periodWhereInput
    orderBy: User_record_data_by_periodOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): User_record_data_by_periodConnection!
  user_record_data_by_timesConnection(
    where: User_record_data_by_timeWhereInput
    orderBy: User_record_data_by_timeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): User_record_data_by_timeConnection!
  usersesConnection(
    where: UsersWhereInput
    orderBy: UsersOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): UsersConnection!
  users_data_analysesConnection(
    where: Users_data_analysisWhereInput
    orderBy: Users_data_analysisOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): Users_data_analysisConnection!

  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node
}

type Subscription {
  answer_types(
    where: Answer_typesSubscriptionWhereInput
  ): Answer_typesSubscriptionPayload
  app_server_sync(
    where: App_server_syncSubscriptionWhereInput
  ): App_server_syncSubscriptionPayload
  auth_token(
    where: Auth_tokenSubscriptionWhereInput
  ): Auth_tokenSubscriptionPayload
  calibration(
    where: CalibrationSubscriptionWhereInput
  ): CalibrationSubscriptionPayload
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  country(where: CountrySubscriptionWhereInput): CountrySubscriptionPayload
  cup(where: CupSubscriptionWhereInput): CupSubscriptionPayload
  cup_app_sync(
    where: Cup_app_syncSubscriptionWhereInput
  ): Cup_app_syncSubscriptionPayload
  cup_data(where: Cup_dataSubscriptionWhereInput): Cup_dataSubscriptionPayload
  cup_data_answer(
    where: Cup_data_answerSubscriptionWhereInput
  ): Cup_data_answerSubscriptionPayload
  cup_data_colour_calc(
    where: Cup_data_colour_calcSubscriptionWhereInput
  ): Cup_data_colour_calcSubscriptionPayload
  cup_data_colour_calib(
    where: Cup_data_colour_calibSubscriptionWhereInput
  ): Cup_data_colour_calibSubscriptionPayload
  cup_data_man_mdates(
    where: Cup_data_man_mdatesSubscriptionWhereInput
  ): Cup_data_man_mdatesSubscriptionPayload
  cup_data_proc_flow(
    where: Cup_data_proc_flowSubscriptionWhereInput
  ): Cup_data_proc_flowSubscriptionPayload
  cup_data_proc_mdates(
    where: Cup_data_proc_mdatesSubscriptionWhereInput
  ): Cup_data_proc_mdatesSubscriptionPayload
  cup_data_proc_volume(
    where: Cup_data_proc_volumeSubscriptionWhereInput
  ): Cup_data_proc_volumeSubscriptionPayload
  cup_data_qa_response(
    where: Cup_data_qa_responseSubscriptionWhereInput
  ): Cup_data_qa_responseSubscriptionPayload
  cup_data_question(
    where: Cup_data_questionSubscriptionWhereInput
  ): Cup_data_questionSubscriptionPayload
  cup_data_raw(
    where: Cup_data_rawSubscriptionWhereInput
  ): Cup_data_rawSubscriptionPayload
  cup_data_rejection(
    where: Cup_data_rejectionSubscriptionWhereInput
  ): Cup_data_rejectionSubscriptionPayload
  cup_data_user_remove(
    where: Cup_data_user_removeSubscriptionWhereInput
  ): Cup_data_user_removeSubscriptionPayload
  cup_data_user_remove_explain(
    where: Cup_data_user_remove_explainSubscriptionWhereInput
  ): Cup_data_user_remove_explainSubscriptionPayload
  ethnicity(
    where: EthnicitySubscriptionWhereInput
  ): EthnicitySubscriptionPayload
  firmware(where: FirmwareSubscriptionWhereInput): FirmwareSubscriptionPayload
  hardware(where: HardwareSubscriptionWhereInput): HardwareSubscriptionPayload
  platform_comp(
    where: Platform_compSubscriptionWhereInput
  ): Platform_compSubscriptionPayload
  user_coin_history(
    where: User_coin_historySubscriptionWhereInput
  ): User_coin_historySubscriptionPayload
  user_cups(
    where: User_cupsSubscriptionWhereInput
  ): User_cupsSubscriptionPayload
  user_interview_data(
    where: User_interview_dataSubscriptionWhereInput
  ): User_interview_dataSubscriptionPayload
  user_interview_questions(
    where: User_interview_questionsSubscriptionWhereInput
  ): User_interview_questionsSubscriptionPayload
  user_record_data_by_day(
    where: User_record_data_by_daySubscriptionWhereInput
  ): User_record_data_by_daySubscriptionPayload
  user_record_data_by_period(
    where: User_record_data_by_periodSubscriptionWhereInput
  ): User_record_data_by_periodSubscriptionPayload
  user_record_data_by_time(
    where: User_record_data_by_timeSubscriptionWhereInput
  ): User_record_data_by_timeSubscriptionPayload
  users(where: UsersSubscriptionWhereInput): UsersSubscriptionPayload
  users_data_analysis(
    where: Users_data_analysisSubscriptionWhereInput
  ): Users_data_analysisSubscriptionPayload
}

type User_coin_history {
  id: Int!
  category: String!
  coin: Int!
  contents: String!
  date: DateTime!
  user: Users
  # txhash: String!
  user_record_data_by_periods(
    where: User_record_data_by_periodWhereInput
    orderBy: User_record_data_by_periodOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User_record_data_by_period!]
}

"""
A connection to a list of items.
"""
type User_coin_historyConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [User_coin_historyEdge]!
  aggregate: AggregateUser_coin_history!
}

input User_coin_historyCreateInput {
  category: String!
  coin: Int!
  contents: String!
  date: DateTime!
  user: UsersCreateOneWithoutUser_coin_historiesInput
  user_record_data_by_periods: User_record_data_by_periodCreateManyWithoutCoin_history_rowInput
}

input User_coin_historyCreateManyWithoutUserInput {
  create: [User_coin_historyCreateWithoutUserInput!]
  connect: [User_coin_historyWhereUniqueInput!]
}

input User_coin_historyCreateOneWithoutUser_record_data_by_periodsInput {
  create: User_coin_historyCreateWithoutUser_record_data_by_periodsInput
  connect: User_coin_historyWhereUniqueInput
}

input User_coin_historyCreateWithoutUser_record_data_by_periodsInput {
  category: String!
  coin: Int!
  contents: String!
  date: DateTime!
  user: UsersCreateOneWithoutUser_coin_historiesInput
}

input User_coin_historyCreateWithoutUserInput {
  category: String!
  coin: Int!
  contents: String!
  date: DateTime!
  user_record_data_by_periods: User_record_data_by_periodCreateManyWithoutCoin_history_rowInput
}

"""
An edge in a connection.
"""
type User_coin_historyEdge {
  """
  The item at the end of the edge.
  """
  node: User_coin_history!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum User_coin_historyOrderByInput {
  id_ASC
  id_DESC
  category_ASC
  category_DESC
  coin_ASC
  coin_DESC
  contents_ASC
  contents_DESC
  date_ASC
  date_DESC
}

type User_coin_historyPreviousValues {
  id: Int!
  category: String!
  coin: Int!
  contents: String!
  date: DateTime!
}

input User_coin_historyScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_coin_historyScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_coin_historyScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_coin_historyScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  category: String

  """
  All values that are not equal to given value.
  """
  category_not: String

  """
  All values that are contained in given list.
  """
  category_in: [String!]

  """
  All values that are not contained in given list.
  """
  category_not_in: [String!]

  """
  All values less than the given value.
  """
  category_lt: String

  """
  All values less than or equal the given value.
  """
  category_lte: String

  """
  All values greater than the given value.
  """
  category_gt: String

  """
  All values greater than or equal the given value.
  """
  category_gte: String

  """
  All values containing the given string.
  """
  category_contains: String

  """
  All values not containing the given string.
  """
  category_not_contains: String

  """
  All values starting with the given string.
  """
  category_starts_with: String

  """
  All values not starting with the given string.
  """
  category_not_starts_with: String

  """
  All values ending with the given string.
  """
  category_ends_with: String

  """
  All values not ending with the given string.
  """
  category_not_ends_with: String
  coin: Int

  """
  All values that are not equal to given value.
  """
  coin_not: Int

  """
  All values that are contained in given list.
  """
  coin_in: [Int!]

  """
  All values that are not contained in given list.
  """
  coin_not_in: [Int!]

  """
  All values less than the given value.
  """
  coin_lt: Int

  """
  All values less than or equal the given value.
  """
  coin_lte: Int

  """
  All values greater than the given value.
  """
  coin_gt: Int

  """
  All values greater than or equal the given value.
  """
  coin_gte: Int
  contents: String

  """
  All values that are not equal to given value.
  """
  contents_not: String

  """
  All values that are contained in given list.
  """
  contents_in: [String!]

  """
  All values that are not contained in given list.
  """
  contents_not_in: [String!]

  """
  All values less than the given value.
  """
  contents_lt: String

  """
  All values less than or equal the given value.
  """
  contents_lte: String

  """
  All values greater than the given value.
  """
  contents_gt: String

  """
  All values greater than or equal the given value.
  """
  contents_gte: String

  """
  All values containing the given string.
  """
  contents_contains: String

  """
  All values not containing the given string.
  """
  contents_not_contains: String

  """
  All values starting with the given string.
  """
  contents_starts_with: String

  """
  All values not starting with the given string.
  """
  contents_not_starts_with: String

  """
  All values ending with the given string.
  """
  contents_ends_with: String

  """
  All values not ending with the given string.
  """
  contents_not_ends_with: String
  date: DateTime

  """
  All values that are not equal to given value.
  """
  date_not: DateTime

  """
  All values that are contained in given list.
  """
  date_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  date_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  date_lt: DateTime

  """
  All values less than or equal the given value.
  """
  date_lte: DateTime

  """
  All values greater than the given value.
  """
  date_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  date_gte: DateTime
}

type User_coin_historySubscriptionPayload {
  mutation: MutationType!
  node: User_coin_history
  updatedFields: [String!]
  previousValues: User_coin_historyPreviousValues
}

input User_coin_historySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_coin_historySubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_coin_historySubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_coin_historySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: User_coin_historyWhereInput
}

input User_coin_historyUpdateInput {
  category: String
  coin: Int
  contents: String
  date: DateTime
  user: UsersUpdateOneWithoutUser_coin_historiesInput
  user_record_data_by_periods: User_record_data_by_periodUpdateManyWithoutCoin_history_rowInput
}

input User_coin_historyUpdateManyDataInput {
  category: String
  coin: Int
  contents: String
  date: DateTime
}

input User_coin_historyUpdateManyMutationInput {
  category: String
  coin: Int
  contents: String
  date: DateTime
}

input User_coin_historyUpdateManyWithoutUserInput {
  create: [User_coin_historyCreateWithoutUserInput!]
  connect: [User_coin_historyWhereUniqueInput!]
  set: [User_coin_historyWhereUniqueInput!]
  disconnect: [User_coin_historyWhereUniqueInput!]
  delete: [User_coin_historyWhereUniqueInput!]
  update: [User_coin_historyUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [User_coin_historyUpdateManyWithWhereNestedInput!]
  deleteMany: [User_coin_historyScalarWhereInput!]
  upsert: [User_coin_historyUpsertWithWhereUniqueWithoutUserInput!]
}

input User_coin_historyUpdateManyWithWhereNestedInput {
  where: User_coin_historyScalarWhereInput!
  data: User_coin_historyUpdateManyDataInput!
}

input User_coin_historyUpdateOneWithoutUser_record_data_by_periodsInput {
  create: User_coin_historyCreateWithoutUser_record_data_by_periodsInput
  connect: User_coin_historyWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: User_coin_historyUpdateWithoutUser_record_data_by_periodsDataInput
  upsert: User_coin_historyUpsertWithoutUser_record_data_by_periodsInput
}

input User_coin_historyUpdateWithoutUser_record_data_by_periodsDataInput {
  category: String
  coin: Int
  contents: String
  date: DateTime
  user: UsersUpdateOneWithoutUser_coin_historiesInput
}

input User_coin_historyUpdateWithoutUserDataInput {
  category: String
  coin: Int
  contents: String
  date: DateTime
  user_record_data_by_periods: User_record_data_by_periodUpdateManyWithoutCoin_history_rowInput
}

input User_coin_historyUpdateWithWhereUniqueWithoutUserInput {
  where: User_coin_historyWhereUniqueInput!
  data: User_coin_historyUpdateWithoutUserDataInput!
}

input User_coin_historyUpsertWithoutUser_record_data_by_periodsInput {
  update: User_coin_historyUpdateWithoutUser_record_data_by_periodsDataInput!
  create: User_coin_historyCreateWithoutUser_record_data_by_periodsInput!
}

input User_coin_historyUpsertWithWhereUniqueWithoutUserInput {
  where: User_coin_historyWhereUniqueInput!
  update: User_coin_historyUpdateWithoutUserDataInput!
  create: User_coin_historyCreateWithoutUserInput!
}

input User_coin_historyWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_coin_historyWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_coin_historyWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_coin_historyWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  category: String

  """
  All values that are not equal to given value.
  """
  category_not: String

  """
  All values that are contained in given list.
  """
  category_in: [String!]

  """
  All values that are not contained in given list.
  """
  category_not_in: [String!]

  """
  All values less than the given value.
  """
  category_lt: String

  """
  All values less than or equal the given value.
  """
  category_lte: String

  """
  All values greater than the given value.
  """
  category_gt: String

  """
  All values greater than or equal the given value.
  """
  category_gte: String

  """
  All values containing the given string.
  """
  category_contains: String

  """
  All values not containing the given string.
  """
  category_not_contains: String

  """
  All values starting with the given string.
  """
  category_starts_with: String

  """
  All values not starting with the given string.
  """
  category_not_starts_with: String

  """
  All values ending with the given string.
  """
  category_ends_with: String

  """
  All values not ending with the given string.
  """
  category_not_ends_with: String
  coin: Int

  """
  All values that are not equal to given value.
  """
  coin_not: Int

  """
  All values that are contained in given list.
  """
  coin_in: [Int!]

  """
  All values that are not contained in given list.
  """
  coin_not_in: [Int!]

  """
  All values less than the given value.
  """
  coin_lt: Int

  """
  All values less than or equal the given value.
  """
  coin_lte: Int

  """
  All values greater than the given value.
  """
  coin_gt: Int

  """
  All values greater than or equal the given value.
  """
  coin_gte: Int
  contents: String

  """
  All values that are not equal to given value.
  """
  contents_not: String

  """
  All values that are contained in given list.
  """
  contents_in: [String!]

  """
  All values that are not contained in given list.
  """
  contents_not_in: [String!]

  """
  All values less than the given value.
  """
  contents_lt: String

  """
  All values less than or equal the given value.
  """
  contents_lte: String

  """
  All values greater than the given value.
  """
  contents_gt: String

  """
  All values greater than or equal the given value.
  """
  contents_gte: String

  """
  All values containing the given string.
  """
  contents_contains: String

  """
  All values not containing the given string.
  """
  contents_not_contains: String

  """
  All values starting with the given string.
  """
  contents_starts_with: String

  """
  All values not starting with the given string.
  """
  contents_not_starts_with: String

  """
  All values ending with the given string.
  """
  contents_ends_with: String

  """
  All values not ending with the given string.
  """
  contents_not_ends_with: String
  date: DateTime

  """
  All values that are not equal to given value.
  """
  date_not: DateTime

  """
  All values that are contained in given list.
  """
  date_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  date_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  date_lt: DateTime

  """
  All values less than or equal the given value.
  """
  date_lte: DateTime

  """
  All values greater than the given value.
  """
  date_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  date_gte: DateTime
  user: UsersWhereInput
  user_record_data_by_periods_every: User_record_data_by_periodWhereInput
  user_record_data_by_periods_some: User_record_data_by_periodWhereInput
  user_record_data_by_periods_none: User_record_data_by_periodWhereInput
}

input User_coin_historyWhereUniqueInput {
  id: Int
}

type User_cups {
  id: Int!
  serial_number: Cup
  user: Users
}

"""
A connection to a list of items.
"""
type User_cupsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [User_cupsEdge]!
  aggregate: AggregateUser_cups!
}

input User_cupsCreateInput {
  serial_number: CupCreateOneWithoutUser_cupsInput
  user: UsersCreateOneWithoutUser_cupsInput
}

input User_cupsCreateManyWithoutSerial_numberInput {
  create: [User_cupsCreateWithoutSerial_numberInput!]
  connect: [User_cupsWhereUniqueInput!]
}

input User_cupsCreateManyWithoutUserInput {
  create: [User_cupsCreateWithoutUserInput!]
  connect: [User_cupsWhereUniqueInput!]
}

input User_cupsCreateWithoutSerial_numberInput {
  user: UsersCreateOneWithoutUser_cupsInput
}

input User_cupsCreateWithoutUserInput {
  serial_number: CupCreateOneWithoutUser_cupsInput
}

"""
An edge in a connection.
"""
type User_cupsEdge {
  """
  The item at the end of the edge.
  """
  node: User_cups!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum User_cupsOrderByInput {
  id_ASC
  id_DESC
}

type User_cupsPreviousValues {
  id: Int!
}

input User_cupsScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_cupsScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_cupsScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_cupsScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
}

type User_cupsSubscriptionPayload {
  mutation: MutationType!
  node: User_cups
  updatedFields: [String!]
  previousValues: User_cupsPreviousValues
}

input User_cupsSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_cupsSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_cupsSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_cupsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: User_cupsWhereInput
}

input User_cupsUpdateInput {
  serial_number: CupUpdateOneWithoutUser_cupsInput
  user: UsersUpdateOneWithoutUser_cupsInput
}

input User_cupsUpdateManyWithoutSerial_numberInput {
  create: [User_cupsCreateWithoutSerial_numberInput!]
  connect: [User_cupsWhereUniqueInput!]
  set: [User_cupsWhereUniqueInput!]
  disconnect: [User_cupsWhereUniqueInput!]
  delete: [User_cupsWhereUniqueInput!]
  update: [User_cupsUpdateWithWhereUniqueWithoutSerial_numberInput!]
  deleteMany: [User_cupsScalarWhereInput!]
  upsert: [User_cupsUpsertWithWhereUniqueWithoutSerial_numberInput!]
}

input User_cupsUpdateManyWithoutUserInput {
  create: [User_cupsCreateWithoutUserInput!]
  connect: [User_cupsWhereUniqueInput!]
  set: [User_cupsWhereUniqueInput!]
  disconnect: [User_cupsWhereUniqueInput!]
  delete: [User_cupsWhereUniqueInput!]
  update: [User_cupsUpdateWithWhereUniqueWithoutUserInput!]
  deleteMany: [User_cupsScalarWhereInput!]
  upsert: [User_cupsUpsertWithWhereUniqueWithoutUserInput!]
}

input User_cupsUpdateWithoutSerial_numberDataInput {
  user: UsersUpdateOneWithoutUser_cupsInput
}

input User_cupsUpdateWithoutUserDataInput {
  serial_number: CupUpdateOneWithoutUser_cupsInput
}

input User_cupsUpdateWithWhereUniqueWithoutSerial_numberInput {
  where: User_cupsWhereUniqueInput!
  data: User_cupsUpdateWithoutSerial_numberDataInput!
}

input User_cupsUpdateWithWhereUniqueWithoutUserInput {
  where: User_cupsWhereUniqueInput!
  data: User_cupsUpdateWithoutUserDataInput!
}

input User_cupsUpsertWithWhereUniqueWithoutSerial_numberInput {
  where: User_cupsWhereUniqueInput!
  update: User_cupsUpdateWithoutSerial_numberDataInput!
  create: User_cupsCreateWithoutSerial_numberInput!
}

input User_cupsUpsertWithWhereUniqueWithoutUserInput {
  where: User_cupsWhereUniqueInput!
  update: User_cupsUpdateWithoutUserDataInput!
  create: User_cupsCreateWithoutUserInput!
}

input User_cupsWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_cupsWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_cupsWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_cupsWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  serial_number: CupWhereInput
  user: UsersWhereInput
}

input User_cupsWhereUniqueInput {
  id: Int
}

type User_interview_data {
  id: Int!
  answer_range: Int
  answer_text: String
  answer_yn: Boolean
  date: DateTime!
  question: User_interview_questions
  user: Users
}

"""
A connection to a list of items.
"""
type User_interview_dataConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [User_interview_dataEdge]!
  aggregate: AggregateUser_interview_data!
}

input User_interview_dataCreateInput {
  answer_range: Int
  answer_text: String
  answer_yn: Boolean
  date: DateTime!
  question: User_interview_questionsCreateOneWithoutUser_interview_dataInput
  user: UsersCreateOneWithoutUser_interview_dataInput
}

input User_interview_dataCreateManyWithoutQuestionInput {
  create: [User_interview_dataCreateWithoutQuestionInput!]
  connect: [User_interview_dataWhereUniqueInput!]
}

input User_interview_dataCreateManyWithoutUserInput {
  create: [User_interview_dataCreateWithoutUserInput!]
  connect: [User_interview_dataWhereUniqueInput!]
}

input User_interview_dataCreateWithoutQuestionInput {
  answer_range: Int
  answer_text: String
  answer_yn: Boolean
  date: DateTime!
  user: UsersCreateOneWithoutUser_interview_dataInput
}

input User_interview_dataCreateWithoutUserInput {
  answer_range: Int
  answer_text: String
  answer_yn: Boolean
  date: DateTime!
  question: User_interview_questionsCreateOneWithoutUser_interview_dataInput
}

"""
An edge in a connection.
"""
type User_interview_dataEdge {
  """
  The item at the end of the edge.
  """
  node: User_interview_data!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum User_interview_dataOrderByInput {
  id_ASC
  id_DESC
  answer_range_ASC
  answer_range_DESC
  answer_text_ASC
  answer_text_DESC
  answer_yn_ASC
  answer_yn_DESC
  date_ASC
  date_DESC
}

type User_interview_dataPreviousValues {
  id: Int!
  answer_range: Int
  answer_text: String
  answer_yn: Boolean
  date: DateTime!
}

input User_interview_dataScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_interview_dataScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_interview_dataScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_interview_dataScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  answer_range: Int

  """
  All values that are not equal to given value.
  """
  answer_range_not: Int

  """
  All values that are contained in given list.
  """
  answer_range_in: [Int!]

  """
  All values that are not contained in given list.
  """
  answer_range_not_in: [Int!]

  """
  All values less than the given value.
  """
  answer_range_lt: Int

  """
  All values less than or equal the given value.
  """
  answer_range_lte: Int

  """
  All values greater than the given value.
  """
  answer_range_gt: Int

  """
  All values greater than or equal the given value.
  """
  answer_range_gte: Int
  answer_text: String

  """
  All values that are not equal to given value.
  """
  answer_text_not: String

  """
  All values that are contained in given list.
  """
  answer_text_in: [String!]

  """
  All values that are not contained in given list.
  """
  answer_text_not_in: [String!]

  """
  All values less than the given value.
  """
  answer_text_lt: String

  """
  All values less than or equal the given value.
  """
  answer_text_lte: String

  """
  All values greater than the given value.
  """
  answer_text_gt: String

  """
  All values greater than or equal the given value.
  """
  answer_text_gte: String

  """
  All values containing the given string.
  """
  answer_text_contains: String

  """
  All values not containing the given string.
  """
  answer_text_not_contains: String

  """
  All values starting with the given string.
  """
  answer_text_starts_with: String

  """
  All values not starting with the given string.
  """
  answer_text_not_starts_with: String

  """
  All values ending with the given string.
  """
  answer_text_ends_with: String

  """
  All values not ending with the given string.
  """
  answer_text_not_ends_with: String
  answer_yn: Boolean

  """
  All values that are not equal to given value.
  """
  answer_yn_not: Boolean
  date: DateTime

  """
  All values that are not equal to given value.
  """
  date_not: DateTime

  """
  All values that are contained in given list.
  """
  date_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  date_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  date_lt: DateTime

  """
  All values less than or equal the given value.
  """
  date_lte: DateTime

  """
  All values greater than the given value.
  """
  date_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  date_gte: DateTime
}

type User_interview_dataSubscriptionPayload {
  mutation: MutationType!
  node: User_interview_data
  updatedFields: [String!]
  previousValues: User_interview_dataPreviousValues
}

input User_interview_dataSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_interview_dataSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_interview_dataSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_interview_dataSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: User_interview_dataWhereInput
}

input User_interview_dataUpdateInput {
  answer_range: Int
  answer_text: String
  answer_yn: Boolean
  date: DateTime
  question: User_interview_questionsUpdateOneWithoutUser_interview_dataInput
  user: UsersUpdateOneWithoutUser_interview_dataInput
}

input User_interview_dataUpdateManyDataInput {
  answer_range: Int
  answer_text: String
  answer_yn: Boolean
  date: DateTime
}

input User_interview_dataUpdateManyMutationInput {
  answer_range: Int
  answer_text: String
  answer_yn: Boolean
  date: DateTime
}

input User_interview_dataUpdateManyWithoutQuestionInput {
  create: [User_interview_dataCreateWithoutQuestionInput!]
  connect: [User_interview_dataWhereUniqueInput!]
  set: [User_interview_dataWhereUniqueInput!]
  disconnect: [User_interview_dataWhereUniqueInput!]
  delete: [User_interview_dataWhereUniqueInput!]
  update: [User_interview_dataUpdateWithWhereUniqueWithoutQuestionInput!]
  updateMany: [User_interview_dataUpdateManyWithWhereNestedInput!]
  deleteMany: [User_interview_dataScalarWhereInput!]
  upsert: [User_interview_dataUpsertWithWhereUniqueWithoutQuestionInput!]
}

input User_interview_dataUpdateManyWithoutUserInput {
  create: [User_interview_dataCreateWithoutUserInput!]
  connect: [User_interview_dataWhereUniqueInput!]
  set: [User_interview_dataWhereUniqueInput!]
  disconnect: [User_interview_dataWhereUniqueInput!]
  delete: [User_interview_dataWhereUniqueInput!]
  update: [User_interview_dataUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [User_interview_dataUpdateManyWithWhereNestedInput!]
  deleteMany: [User_interview_dataScalarWhereInput!]
  upsert: [User_interview_dataUpsertWithWhereUniqueWithoutUserInput!]
}

input User_interview_dataUpdateManyWithWhereNestedInput {
  where: User_interview_dataScalarWhereInput!
  data: User_interview_dataUpdateManyDataInput!
}

input User_interview_dataUpdateWithoutQuestionDataInput {
  answer_range: Int
  answer_text: String
  answer_yn: Boolean
  date: DateTime
  user: UsersUpdateOneWithoutUser_interview_dataInput
}

input User_interview_dataUpdateWithoutUserDataInput {
  answer_range: Int
  answer_text: String
  answer_yn: Boolean
  date: DateTime
  question: User_interview_questionsUpdateOneWithoutUser_interview_dataInput
}

input User_interview_dataUpdateWithWhereUniqueWithoutQuestionInput {
  where: User_interview_dataWhereUniqueInput!
  data: User_interview_dataUpdateWithoutQuestionDataInput!
}

input User_interview_dataUpdateWithWhereUniqueWithoutUserInput {
  where: User_interview_dataWhereUniqueInput!
  data: User_interview_dataUpdateWithoutUserDataInput!
}

input User_interview_dataUpsertWithWhereUniqueWithoutQuestionInput {
  where: User_interview_dataWhereUniqueInput!
  update: User_interview_dataUpdateWithoutQuestionDataInput!
  create: User_interview_dataCreateWithoutQuestionInput!
}

input User_interview_dataUpsertWithWhereUniqueWithoutUserInput {
  where: User_interview_dataWhereUniqueInput!
  update: User_interview_dataUpdateWithoutUserDataInput!
  create: User_interview_dataCreateWithoutUserInput!
}

input User_interview_dataWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_interview_dataWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_interview_dataWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_interview_dataWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  answer_range: Int

  """
  All values that are not equal to given value.
  """
  answer_range_not: Int

  """
  All values that are contained in given list.
  """
  answer_range_in: [Int!]

  """
  All values that are not contained in given list.
  """
  answer_range_not_in: [Int!]

  """
  All values less than the given value.
  """
  answer_range_lt: Int

  """
  All values less than or equal the given value.
  """
  answer_range_lte: Int

  """
  All values greater than the given value.
  """
  answer_range_gt: Int

  """
  All values greater than or equal the given value.
  """
  answer_range_gte: Int
  answer_text: String

  """
  All values that are not equal to given value.
  """
  answer_text_not: String

  """
  All values that are contained in given list.
  """
  answer_text_in: [String!]

  """
  All values that are not contained in given list.
  """
  answer_text_not_in: [String!]

  """
  All values less than the given value.
  """
  answer_text_lt: String

  """
  All values less than or equal the given value.
  """
  answer_text_lte: String

  """
  All values greater than the given value.
  """
  answer_text_gt: String

  """
  All values greater than or equal the given value.
  """
  answer_text_gte: String

  """
  All values containing the given string.
  """
  answer_text_contains: String

  """
  All values not containing the given string.
  """
  answer_text_not_contains: String

  """
  All values starting with the given string.
  """
  answer_text_starts_with: String

  """
  All values not starting with the given string.
  """
  answer_text_not_starts_with: String

  """
  All values ending with the given string.
  """
  answer_text_ends_with: String

  """
  All values not ending with the given string.
  """
  answer_text_not_ends_with: String
  answer_yn: Boolean

  """
  All values that are not equal to given value.
  """
  answer_yn_not: Boolean
  date: DateTime

  """
  All values that are not equal to given value.
  """
  date_not: DateTime

  """
  All values that are contained in given list.
  """
  date_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  date_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  date_lt: DateTime

  """
  All values less than or equal the given value.
  """
  date_lte: DateTime

  """
  All values greater than the given value.
  """
  date_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  date_gte: DateTime
  question: User_interview_questionsWhereInput
  user: UsersWhereInput
}

input User_interview_dataWhereUniqueInput {
  id: Int
}

type User_interview_questions {
  id: Int!
  answer_type: Answer_types
  question: String!
  user_interview_data(
    where: User_interview_dataWhereInput
    orderBy: User_interview_dataOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User_interview_data!]
}

"""
A connection to a list of items.
"""
type User_interview_questionsConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [User_interview_questionsEdge]!
  aggregate: AggregateUser_interview_questions!
}

input User_interview_questionsCreateInput {
  question: String!
  answer_type: Answer_typesCreateOneWithoutUser_interview_questionsInput
  user_interview_data: User_interview_dataCreateManyWithoutQuestionInput
}

input User_interview_questionsCreateManyWithoutAnswer_typeInput {
  create: [User_interview_questionsCreateWithoutAnswer_typeInput!]
  connect: [User_interview_questionsWhereUniqueInput!]
}

input User_interview_questionsCreateOneWithoutUser_interview_dataInput {
  create: User_interview_questionsCreateWithoutUser_interview_dataInput
  connect: User_interview_questionsWhereUniqueInput
}

input User_interview_questionsCreateWithoutAnswer_typeInput {
  question: String!
  user_interview_data: User_interview_dataCreateManyWithoutQuestionInput
}

input User_interview_questionsCreateWithoutUser_interview_dataInput {
  question: String!
  answer_type: Answer_typesCreateOneWithoutUser_interview_questionsInput
}

"""
An edge in a connection.
"""
type User_interview_questionsEdge {
  """
  The item at the end of the edge.
  """
  node: User_interview_questions!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum User_interview_questionsOrderByInput {
  id_ASC
  id_DESC
  question_ASC
  question_DESC
}

type User_interview_questionsPreviousValues {
  id: Int!
  question: String!
}

input User_interview_questionsScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_interview_questionsScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_interview_questionsScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_interview_questionsScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  question: String

  """
  All values that are not equal to given value.
  """
  question_not: String

  """
  All values that are contained in given list.
  """
  question_in: [String!]

  """
  All values that are not contained in given list.
  """
  question_not_in: [String!]

  """
  All values less than the given value.
  """
  question_lt: String

  """
  All values less than or equal the given value.
  """
  question_lte: String

  """
  All values greater than the given value.
  """
  question_gt: String

  """
  All values greater than or equal the given value.
  """
  question_gte: String

  """
  All values containing the given string.
  """
  question_contains: String

  """
  All values not containing the given string.
  """
  question_not_contains: String

  """
  All values starting with the given string.
  """
  question_starts_with: String

  """
  All values not starting with the given string.
  """
  question_not_starts_with: String

  """
  All values ending with the given string.
  """
  question_ends_with: String

  """
  All values not ending with the given string.
  """
  question_not_ends_with: String
}

type User_interview_questionsSubscriptionPayload {
  mutation: MutationType!
  node: User_interview_questions
  updatedFields: [String!]
  previousValues: User_interview_questionsPreviousValues
}

input User_interview_questionsSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_interview_questionsSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_interview_questionsSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_interview_questionsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: User_interview_questionsWhereInput
}

input User_interview_questionsUpdateInput {
  question: String
  answer_type: Answer_typesUpdateOneWithoutUser_interview_questionsInput
  user_interview_data: User_interview_dataUpdateManyWithoutQuestionInput
}

input User_interview_questionsUpdateManyDataInput {
  question: String
}

input User_interview_questionsUpdateManyMutationInput {
  question: String
}

input User_interview_questionsUpdateManyWithoutAnswer_typeInput {
  create: [User_interview_questionsCreateWithoutAnswer_typeInput!]
  connect: [User_interview_questionsWhereUniqueInput!]
  set: [User_interview_questionsWhereUniqueInput!]
  disconnect: [User_interview_questionsWhereUniqueInput!]
  delete: [User_interview_questionsWhereUniqueInput!]
  update: [User_interview_questionsUpdateWithWhereUniqueWithoutAnswer_typeInput!]
  updateMany: [User_interview_questionsUpdateManyWithWhereNestedInput!]
  deleteMany: [User_interview_questionsScalarWhereInput!]
  upsert: [User_interview_questionsUpsertWithWhereUniqueWithoutAnswer_typeInput!]
}

input User_interview_questionsUpdateManyWithWhereNestedInput {
  where: User_interview_questionsScalarWhereInput!
  data: User_interview_questionsUpdateManyDataInput!
}

input User_interview_questionsUpdateOneWithoutUser_interview_dataInput {
  create: User_interview_questionsCreateWithoutUser_interview_dataInput
  connect: User_interview_questionsWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: User_interview_questionsUpdateWithoutUser_interview_dataDataInput
  upsert: User_interview_questionsUpsertWithoutUser_interview_dataInput
}

input User_interview_questionsUpdateWithoutAnswer_typeDataInput {
  question: String
  user_interview_data: User_interview_dataUpdateManyWithoutQuestionInput
}

input User_interview_questionsUpdateWithoutUser_interview_dataDataInput {
  question: String
  answer_type: Answer_typesUpdateOneWithoutUser_interview_questionsInput
}

input User_interview_questionsUpdateWithWhereUniqueWithoutAnswer_typeInput {
  where: User_interview_questionsWhereUniqueInput!
  data: User_interview_questionsUpdateWithoutAnswer_typeDataInput!
}

input User_interview_questionsUpsertWithoutUser_interview_dataInput {
  update: User_interview_questionsUpdateWithoutUser_interview_dataDataInput!
  create: User_interview_questionsCreateWithoutUser_interview_dataInput!
}

input User_interview_questionsUpsertWithWhereUniqueWithoutAnswer_typeInput {
  where: User_interview_questionsWhereUniqueInput!
  update: User_interview_questionsUpdateWithoutAnswer_typeDataInput!
  create: User_interview_questionsCreateWithoutAnswer_typeInput!
}

input User_interview_questionsWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_interview_questionsWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_interview_questionsWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_interview_questionsWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  question: String

  """
  All values that are not equal to given value.
  """
  question_not: String

  """
  All values that are contained in given list.
  """
  question_in: [String!]

  """
  All values that are not contained in given list.
  """
  question_not_in: [String!]

  """
  All values less than the given value.
  """
  question_lt: String

  """
  All values less than or equal the given value.
  """
  question_lte: String

  """
  All values greater than the given value.
  """
  question_gt: String

  """
  All values greater than or equal the given value.
  """
  question_gte: String

  """
  All values containing the given string.
  """
  question_contains: String

  """
  All values not containing the given string.
  """
  question_not_contains: String

  """
  All values starting with the given string.
  """
  question_starts_with: String

  """
  All values not starting with the given string.
  """
  question_not_starts_with: String

  """
  All values ending with the given string.
  """
  question_ends_with: String

  """
  All values not ending with the given string.
  """
  question_not_ends_with: String
  answer_type: Answer_typesWhereInput
  user_interview_data_every: User_interview_dataWhereInput
  user_interview_data_some: User_interview_dataWhereInput
  user_interview_data_none: User_interview_dataWhereInput
}

input User_interview_questionsWhereUniqueInput {
  id: Int
  question: String
}

type User_record_data_by_day {
  id: Int!
  cramps_level: Int
  record_date: DateTime!
  record_period_row: User_record_data_by_period
  user_record_data_by_times(
    where: User_record_data_by_timeWhereInput
    orderBy: User_record_data_by_timeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User_record_data_by_time!]
}

"""
A connection to a list of items.
"""
type User_record_data_by_dayConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [User_record_data_by_dayEdge]!
  aggregate: AggregateUser_record_data_by_day!
}

input User_record_data_by_dayCreateInput {
  cramps_level: Int
  record_date: DateTime!
  record_period_row: User_record_data_by_periodCreateOneWithoutUser_record_data_by_daysInput
  user_record_data_by_times: User_record_data_by_timeCreateManyWithoutRecord_day_rowInput
}

input User_record_data_by_dayCreateManyWithoutRecord_period_rowInput {
  create: [User_record_data_by_dayCreateWithoutRecord_period_rowInput!]
  connect: [User_record_data_by_dayWhereUniqueInput!]
}

input User_record_data_by_dayCreateOneWithoutUser_record_data_by_timesInput {
  create: User_record_data_by_dayCreateWithoutUser_record_data_by_timesInput
  connect: User_record_data_by_dayWhereUniqueInput
}

input User_record_data_by_dayCreateWithoutRecord_period_rowInput {
  cramps_level: Int
  record_date: DateTime!
  user_record_data_by_times: User_record_data_by_timeCreateManyWithoutRecord_day_rowInput
}

input User_record_data_by_dayCreateWithoutUser_record_data_by_timesInput {
  cramps_level: Int
  record_date: DateTime!
  record_period_row: User_record_data_by_periodCreateOneWithoutUser_record_data_by_daysInput
}

"""
An edge in a connection.
"""
type User_record_data_by_dayEdge {
  """
  The item at the end of the edge.
  """
  node: User_record_data_by_day!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum User_record_data_by_dayOrderByInput {
  id_ASC
  id_DESC
  cramps_level_ASC
  cramps_level_DESC
  record_date_ASC
  record_date_DESC
}

type User_record_data_by_dayPreviousValues {
  id: Int!
  cramps_level: Int
  record_date: DateTime!
}

input User_record_data_by_dayScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_record_data_by_dayScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_record_data_by_dayScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_record_data_by_dayScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  cramps_level: Int

  """
  All values that are not equal to given value.
  """
  cramps_level_not: Int

  """
  All values that are contained in given list.
  """
  cramps_level_in: [Int!]

  """
  All values that are not contained in given list.
  """
  cramps_level_not_in: [Int!]

  """
  All values less than the given value.
  """
  cramps_level_lt: Int

  """
  All values less than or equal the given value.
  """
  cramps_level_lte: Int

  """
  All values greater than the given value.
  """
  cramps_level_gt: Int

  """
  All values greater than or equal the given value.
  """
  cramps_level_gte: Int
  record_date: DateTime

  """
  All values that are not equal to given value.
  """
  record_date_not: DateTime

  """
  All values that are contained in given list.
  """
  record_date_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  record_date_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  record_date_lt: DateTime

  """
  All values less than or equal the given value.
  """
  record_date_lte: DateTime

  """
  All values greater than the given value.
  """
  record_date_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  record_date_gte: DateTime
}

type User_record_data_by_daySubscriptionPayload {
  mutation: MutationType!
  node: User_record_data_by_day
  updatedFields: [String!]
  previousValues: User_record_data_by_dayPreviousValues
}

input User_record_data_by_daySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_record_data_by_daySubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_record_data_by_daySubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_record_data_by_daySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: User_record_data_by_dayWhereInput
}

input User_record_data_by_dayUpdateInput {
  cramps_level: Int
  record_date: DateTime
  record_period_row: User_record_data_by_periodUpdateOneWithoutUser_record_data_by_daysInput
  user_record_data_by_times: User_record_data_by_timeUpdateManyWithoutRecord_day_rowInput
}

input User_record_data_by_dayUpdateManyDataInput {
  cramps_level: Int
  record_date: DateTime
}

input User_record_data_by_dayUpdateManyMutationInput {
  cramps_level: Int
  record_date: DateTime
}

input User_record_data_by_dayUpdateManyWithoutRecord_period_rowInput {
  create: [User_record_data_by_dayCreateWithoutRecord_period_rowInput!]
  connect: [User_record_data_by_dayWhereUniqueInput!]
  set: [User_record_data_by_dayWhereUniqueInput!]
  disconnect: [User_record_data_by_dayWhereUniqueInput!]
  delete: [User_record_data_by_dayWhereUniqueInput!]
  update: [User_record_data_by_dayUpdateWithWhereUniqueWithoutRecord_period_rowInput!]
  updateMany: [User_record_data_by_dayUpdateManyWithWhereNestedInput!]
  deleteMany: [User_record_data_by_dayScalarWhereInput!]
  upsert: [User_record_data_by_dayUpsertWithWhereUniqueWithoutRecord_period_rowInput!]
}

input User_record_data_by_dayUpdateManyWithWhereNestedInput {
  where: User_record_data_by_dayScalarWhereInput!
  data: User_record_data_by_dayUpdateManyDataInput!
}

input User_record_data_by_dayUpdateOneWithoutUser_record_data_by_timesInput {
  create: User_record_data_by_dayCreateWithoutUser_record_data_by_timesInput
  connect: User_record_data_by_dayWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: User_record_data_by_dayUpdateWithoutUser_record_data_by_timesDataInput
  upsert: User_record_data_by_dayUpsertWithoutUser_record_data_by_timesInput
}

input User_record_data_by_dayUpdateWithoutRecord_period_rowDataInput {
  cramps_level: Int
  record_date: DateTime
  user_record_data_by_times: User_record_data_by_timeUpdateManyWithoutRecord_day_rowInput
}

input User_record_data_by_dayUpdateWithoutUser_record_data_by_timesDataInput {
  cramps_level: Int
  record_date: DateTime
  record_period_row: User_record_data_by_periodUpdateOneWithoutUser_record_data_by_daysInput
}

input User_record_data_by_dayUpdateWithWhereUniqueWithoutRecord_period_rowInput {
  where: User_record_data_by_dayWhereUniqueInput!
  data: User_record_data_by_dayUpdateWithoutRecord_period_rowDataInput!
}

input User_record_data_by_dayUpsertWithoutUser_record_data_by_timesInput {
  update: User_record_data_by_dayUpdateWithoutUser_record_data_by_timesDataInput!
  create: User_record_data_by_dayCreateWithoutUser_record_data_by_timesInput!
}

input User_record_data_by_dayUpsertWithWhereUniqueWithoutRecord_period_rowInput {
  where: User_record_data_by_dayWhereUniqueInput!
  update: User_record_data_by_dayUpdateWithoutRecord_period_rowDataInput!
  create: User_record_data_by_dayCreateWithoutRecord_period_rowInput!
}

input User_record_data_by_dayWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_record_data_by_dayWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_record_data_by_dayWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_record_data_by_dayWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  cramps_level: Int

  """
  All values that are not equal to given value.
  """
  cramps_level_not: Int

  """
  All values that are contained in given list.
  """
  cramps_level_in: [Int!]

  """
  All values that are not contained in given list.
  """
  cramps_level_not_in: [Int!]

  """
  All values less than the given value.
  """
  cramps_level_lt: Int

  """
  All values less than or equal the given value.
  """
  cramps_level_lte: Int

  """
  All values greater than the given value.
  """
  cramps_level_gt: Int

  """
  All values greater than or equal the given value.
  """
  cramps_level_gte: Int
  record_date: DateTime

  """
  All values that are not equal to given value.
  """
  record_date_not: DateTime

  """
  All values that are contained in given list.
  """
  record_date_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  record_date_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  record_date_lt: DateTime

  """
  All values less than or equal the given value.
  """
  record_date_lte: DateTime

  """
  All values greater than the given value.
  """
  record_date_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  record_date_gte: DateTime
  record_period_row: User_record_data_by_periodWhereInput
  user_record_data_by_times_every: User_record_data_by_timeWhereInput
  user_record_data_by_times_some: User_record_data_by_timeWhereInput
  user_record_data_by_times_none: User_record_data_by_timeWhereInput
}

input User_record_data_by_dayWhereUniqueInput {
  id: Int
}

type User_record_data_by_period {
  id: Int!
  coin_history_row: User_coin_history
  is_take_pill: Boolean
  mens_finish: DateTime!
  mens_start: DateTime!
  user: Users
  user_record_data_by_days(
    where: User_record_data_by_dayWhereInput
    orderBy: User_record_data_by_dayOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User_record_data_by_day!]
}

"""
A connection to a list of items.
"""
type User_record_data_by_periodConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [User_record_data_by_periodEdge]!
  aggregate: AggregateUser_record_data_by_period!
}

input User_record_data_by_periodCreateInput {
  is_take_pill: Boolean
  mens_finish: DateTime!
  mens_start: DateTime!
  coin_history_row: User_coin_historyCreateOneWithoutUser_record_data_by_periodsInput
  user: UsersCreateOneWithoutUser_record_data_by_periodsInput
  user_record_data_by_days: User_record_data_by_dayCreateManyWithoutRecord_period_rowInput
}

input User_record_data_by_periodCreateManyWithoutCoin_history_rowInput {
  create: [User_record_data_by_periodCreateWithoutCoin_history_rowInput!]
  connect: [User_record_data_by_periodWhereUniqueInput!]
}

input User_record_data_by_periodCreateManyWithoutUserInput {
  create: [User_record_data_by_periodCreateWithoutUserInput!]
  connect: [User_record_data_by_periodWhereUniqueInput!]
}

input User_record_data_by_periodCreateOneWithoutUser_record_data_by_daysInput {
  create: User_record_data_by_periodCreateWithoutUser_record_data_by_daysInput
  connect: User_record_data_by_periodWhereUniqueInput
}

input User_record_data_by_periodCreateWithoutCoin_history_rowInput {
  is_take_pill: Boolean
  mens_finish: DateTime!
  mens_start: DateTime!
  user: UsersCreateOneWithoutUser_record_data_by_periodsInput
  user_record_data_by_days: User_record_data_by_dayCreateManyWithoutRecord_period_rowInput
}

input User_record_data_by_periodCreateWithoutUser_record_data_by_daysInput {
  is_take_pill: Boolean
  mens_finish: DateTime!
  mens_start: DateTime!
  coin_history_row: User_coin_historyCreateOneWithoutUser_record_data_by_periodsInput
  user: UsersCreateOneWithoutUser_record_data_by_periodsInput
}

input User_record_data_by_periodCreateWithoutUserInput {
  is_take_pill: Boolean
  mens_finish: DateTime!
  mens_start: DateTime!
  coin_history_row: User_coin_historyCreateOneWithoutUser_record_data_by_periodsInput
  user_record_data_by_days: User_record_data_by_dayCreateManyWithoutRecord_period_rowInput
}

"""
An edge in a connection.
"""
type User_record_data_by_periodEdge {
  """
  The item at the end of the edge.
  """
  node: User_record_data_by_period!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum User_record_data_by_periodOrderByInput {
  id_ASC
  id_DESC
  is_take_pill_ASC
  is_take_pill_DESC
  mens_finish_ASC
  mens_finish_DESC
  mens_start_ASC
  mens_start_DESC
}

type User_record_data_by_periodPreviousValues {
  id: Int!
  is_take_pill: Boolean
  mens_finish: DateTime!
  mens_start: DateTime!
}

input User_record_data_by_periodScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_record_data_by_periodScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_record_data_by_periodScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_record_data_by_periodScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  is_take_pill: Boolean

  """
  All values that are not equal to given value.
  """
  is_take_pill_not: Boolean
  mens_finish: DateTime

  """
  All values that are not equal to given value.
  """
  mens_finish_not: DateTime

  """
  All values that are contained in given list.
  """
  mens_finish_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  mens_finish_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  mens_finish_lt: DateTime

  """
  All values less than or equal the given value.
  """
  mens_finish_lte: DateTime

  """
  All values greater than the given value.
  """
  mens_finish_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  mens_finish_gte: DateTime
  mens_start: DateTime

  """
  All values that are not equal to given value.
  """
  mens_start_not: DateTime

  """
  All values that are contained in given list.
  """
  mens_start_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  mens_start_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  mens_start_lt: DateTime

  """
  All values less than or equal the given value.
  """
  mens_start_lte: DateTime

  """
  All values greater than the given value.
  """
  mens_start_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  mens_start_gte: DateTime
}

type User_record_data_by_periodSubscriptionPayload {
  mutation: MutationType!
  node: User_record_data_by_period
  updatedFields: [String!]
  previousValues: User_record_data_by_periodPreviousValues
}

input User_record_data_by_periodSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_record_data_by_periodSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_record_data_by_periodSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_record_data_by_periodSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: User_record_data_by_periodWhereInput
}

input User_record_data_by_periodUpdateInput {
  is_take_pill: Boolean
  mens_finish: DateTime
  mens_start: DateTime
  coin_history_row: User_coin_historyUpdateOneWithoutUser_record_data_by_periodsInput
  user: UsersUpdateOneWithoutUser_record_data_by_periodsInput
  user_record_data_by_days: User_record_data_by_dayUpdateManyWithoutRecord_period_rowInput
}

input User_record_data_by_periodUpdateManyDataInput {
  is_take_pill: Boolean
  mens_finish: DateTime
  mens_start: DateTime
}

input User_record_data_by_periodUpdateManyMutationInput {
  is_take_pill: Boolean
  mens_finish: DateTime
  mens_start: DateTime
}

input User_record_data_by_periodUpdateManyWithoutCoin_history_rowInput {
  create: [User_record_data_by_periodCreateWithoutCoin_history_rowInput!]
  connect: [User_record_data_by_periodWhereUniqueInput!]
  set: [User_record_data_by_periodWhereUniqueInput!]
  disconnect: [User_record_data_by_periodWhereUniqueInput!]
  delete: [User_record_data_by_periodWhereUniqueInput!]
  update: [User_record_data_by_periodUpdateWithWhereUniqueWithoutCoin_history_rowInput!]
  updateMany: [User_record_data_by_periodUpdateManyWithWhereNestedInput!]
  deleteMany: [User_record_data_by_periodScalarWhereInput!]
  upsert: [User_record_data_by_periodUpsertWithWhereUniqueWithoutCoin_history_rowInput!]
}

input User_record_data_by_periodUpdateManyWithoutUserInput {
  create: [User_record_data_by_periodCreateWithoutUserInput!]
  connect: [User_record_data_by_periodWhereUniqueInput!]
  set: [User_record_data_by_periodWhereUniqueInput!]
  disconnect: [User_record_data_by_periodWhereUniqueInput!]
  delete: [User_record_data_by_periodWhereUniqueInput!]
  update: [User_record_data_by_periodUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [User_record_data_by_periodUpdateManyWithWhereNestedInput!]
  deleteMany: [User_record_data_by_periodScalarWhereInput!]
  upsert: [User_record_data_by_periodUpsertWithWhereUniqueWithoutUserInput!]
}

input User_record_data_by_periodUpdateManyWithWhereNestedInput {
  where: User_record_data_by_periodScalarWhereInput!
  data: User_record_data_by_periodUpdateManyDataInput!
}

input User_record_data_by_periodUpdateOneWithoutUser_record_data_by_daysInput {
  create: User_record_data_by_periodCreateWithoutUser_record_data_by_daysInput
  connect: User_record_data_by_periodWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: User_record_data_by_periodUpdateWithoutUser_record_data_by_daysDataInput
  upsert: User_record_data_by_periodUpsertWithoutUser_record_data_by_daysInput
}

input User_record_data_by_periodUpdateWithoutCoin_history_rowDataInput {
  is_take_pill: Boolean
  mens_finish: DateTime
  mens_start: DateTime
  user: UsersUpdateOneWithoutUser_record_data_by_periodsInput
  user_record_data_by_days: User_record_data_by_dayUpdateManyWithoutRecord_period_rowInput
}

input User_record_data_by_periodUpdateWithoutUser_record_data_by_daysDataInput {
  is_take_pill: Boolean
  mens_finish: DateTime
  mens_start: DateTime
  coin_history_row: User_coin_historyUpdateOneWithoutUser_record_data_by_periodsInput
  user: UsersUpdateOneWithoutUser_record_data_by_periodsInput
}

input User_record_data_by_periodUpdateWithoutUserDataInput {
  is_take_pill: Boolean
  mens_finish: DateTime
  mens_start: DateTime
  coin_history_row: User_coin_historyUpdateOneWithoutUser_record_data_by_periodsInput
  user_record_data_by_days: User_record_data_by_dayUpdateManyWithoutRecord_period_rowInput
}

input User_record_data_by_periodUpdateWithWhereUniqueWithoutCoin_history_rowInput {
  where: User_record_data_by_periodWhereUniqueInput!
  data: User_record_data_by_periodUpdateWithoutCoin_history_rowDataInput!
}

input User_record_data_by_periodUpdateWithWhereUniqueWithoutUserInput {
  where: User_record_data_by_periodWhereUniqueInput!
  data: User_record_data_by_periodUpdateWithoutUserDataInput!
}

input User_record_data_by_periodUpsertWithoutUser_record_data_by_daysInput {
  update: User_record_data_by_periodUpdateWithoutUser_record_data_by_daysDataInput!
  create: User_record_data_by_periodCreateWithoutUser_record_data_by_daysInput!
}

input User_record_data_by_periodUpsertWithWhereUniqueWithoutCoin_history_rowInput {
  where: User_record_data_by_periodWhereUniqueInput!
  update: User_record_data_by_periodUpdateWithoutCoin_history_rowDataInput!
  create: User_record_data_by_periodCreateWithoutCoin_history_rowInput!
}

input User_record_data_by_periodUpsertWithWhereUniqueWithoutUserInput {
  where: User_record_data_by_periodWhereUniqueInput!
  update: User_record_data_by_periodUpdateWithoutUserDataInput!
  create: User_record_data_by_periodCreateWithoutUserInput!
}

input User_record_data_by_periodWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_record_data_by_periodWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_record_data_by_periodWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_record_data_by_periodWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  is_take_pill: Boolean

  """
  All values that are not equal to given value.
  """
  is_take_pill_not: Boolean
  mens_finish: DateTime

  """
  All values that are not equal to given value.
  """
  mens_finish_not: DateTime

  """
  All values that are contained in given list.
  """
  mens_finish_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  mens_finish_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  mens_finish_lt: DateTime

  """
  All values less than or equal the given value.
  """
  mens_finish_lte: DateTime

  """
  All values greater than the given value.
  """
  mens_finish_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  mens_finish_gte: DateTime
  mens_start: DateTime

  """
  All values that are not equal to given value.
  """
  mens_start_not: DateTime

  """
  All values that are contained in given list.
  """
  mens_start_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  mens_start_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  mens_start_lt: DateTime

  """
  All values less than or equal the given value.
  """
  mens_start_lte: DateTime

  """
  All values greater than the given value.
  """
  mens_start_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  mens_start_gte: DateTime
  coin_history_row: User_coin_historyWhereInput
  user: UsersWhereInput
  user_record_data_by_days_every: User_record_data_by_dayWhereInput
  user_record_data_by_days_some: User_record_data_by_dayWhereInput
  user_record_data_by_days_none: User_record_data_by_dayWhereInput
}

input User_record_data_by_periodWhereUniqueInput {
  id: Int
}

type User_record_data_by_time {
  id: Int!
  change_time: DateTime!
  color_b: Int
  color_g: Int
  color_r: Int
  leakage: String
  record_day_row: User_record_data_by_day
  volume: Float
}

"""
A connection to a list of items.
"""
type User_record_data_by_timeConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [User_record_data_by_timeEdge]!
  aggregate: AggregateUser_record_data_by_time!
}

input User_record_data_by_timeCreateInput {
  change_time: DateTime!
  color_b: Int
  color_g: Int
  color_r: Int
  leakage: String
  volume: Float
  record_day_row: User_record_data_by_dayCreateOneWithoutUser_record_data_by_timesInput
}

input User_record_data_by_timeCreateManyWithoutRecord_day_rowInput {
  create: [User_record_data_by_timeCreateWithoutRecord_day_rowInput!]
  connect: [User_record_data_by_timeWhereUniqueInput!]
}

input User_record_data_by_timeCreateWithoutRecord_day_rowInput {
  change_time: DateTime!
  color_b: Int
  color_g: Int
  color_r: Int
  leakage: String
  volume: Float
}

"""
An edge in a connection.
"""
type User_record_data_by_timeEdge {
  """
  The item at the end of the edge.
  """
  node: User_record_data_by_time!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum User_record_data_by_timeOrderByInput {
  id_ASC
  id_DESC
  change_time_ASC
  change_time_DESC
  color_b_ASC
  color_b_DESC
  color_g_ASC
  color_g_DESC
  color_r_ASC
  color_r_DESC
  leakage_ASC
  leakage_DESC
  volume_ASC
  volume_DESC
}

type User_record_data_by_timePreviousValues {
  id: Int!
  change_time: DateTime!
  color_b: Int
  color_g: Int
  color_r: Int
  leakage: String
  volume: Float
}

input User_record_data_by_timeScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_record_data_by_timeScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_record_data_by_timeScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_record_data_by_timeScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  change_time: DateTime

  """
  All values that are not equal to given value.
  """
  change_time_not: DateTime

  """
  All values that are contained in given list.
  """
  change_time_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  change_time_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  change_time_lt: DateTime

  """
  All values less than or equal the given value.
  """
  change_time_lte: DateTime

  """
  All values greater than the given value.
  """
  change_time_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  change_time_gte: DateTime
  color_b: Int

  """
  All values that are not equal to given value.
  """
  color_b_not: Int

  """
  All values that are contained in given list.
  """
  color_b_in: [Int!]

  """
  All values that are not contained in given list.
  """
  color_b_not_in: [Int!]

  """
  All values less than the given value.
  """
  color_b_lt: Int

  """
  All values less than or equal the given value.
  """
  color_b_lte: Int

  """
  All values greater than the given value.
  """
  color_b_gt: Int

  """
  All values greater than or equal the given value.
  """
  color_b_gte: Int
  color_g: Int

  """
  All values that are not equal to given value.
  """
  color_g_not: Int

  """
  All values that are contained in given list.
  """
  color_g_in: [Int!]

  """
  All values that are not contained in given list.
  """
  color_g_not_in: [Int!]

  """
  All values less than the given value.
  """
  color_g_lt: Int

  """
  All values less than or equal the given value.
  """
  color_g_lte: Int

  """
  All values greater than the given value.
  """
  color_g_gt: Int

  """
  All values greater than or equal the given value.
  """
  color_g_gte: Int
  color_r: Int

  """
  All values that are not equal to given value.
  """
  color_r_not: Int

  """
  All values that are contained in given list.
  """
  color_r_in: [Int!]

  """
  All values that are not contained in given list.
  """
  color_r_not_in: [Int!]

  """
  All values less than the given value.
  """
  color_r_lt: Int

  """
  All values less than or equal the given value.
  """
  color_r_lte: Int

  """
  All values greater than the given value.
  """
  color_r_gt: Int

  """
  All values greater than or equal the given value.
  """
  color_r_gte: Int
  leakage: String

  """
  All values that are not equal to given value.
  """
  leakage_not: String

  """
  All values that are contained in given list.
  """
  leakage_in: [String!]

  """
  All values that are not contained in given list.
  """
  leakage_not_in: [String!]

  """
  All values less than the given value.
  """
  leakage_lt: String

  """
  All values less than or equal the given value.
  """
  leakage_lte: String

  """
  All values greater than the given value.
  """
  leakage_gt: String

  """
  All values greater than or equal the given value.
  """
  leakage_gte: String

  """
  All values containing the given string.
  """
  leakage_contains: String

  """
  All values not containing the given string.
  """
  leakage_not_contains: String

  """
  All values starting with the given string.
  """
  leakage_starts_with: String

  """
  All values not starting with the given string.
  """
  leakage_not_starts_with: String

  """
  All values ending with the given string.
  """
  leakage_ends_with: String

  """
  All values not ending with the given string.
  """
  leakage_not_ends_with: String
  volume: Float

  """
  All values that are not equal to given value.
  """
  volume_not: Float

  """
  All values that are contained in given list.
  """
  volume_in: [Float!]

  """
  All values that are not contained in given list.
  """
  volume_not_in: [Float!]

  """
  All values less than the given value.
  """
  volume_lt: Float

  """
  All values less than or equal the given value.
  """
  volume_lte: Float

  """
  All values greater than the given value.
  """
  volume_gt: Float

  """
  All values greater than or equal the given value.
  """
  volume_gte: Float
}

type User_record_data_by_timeSubscriptionPayload {
  mutation: MutationType!
  node: User_record_data_by_time
  updatedFields: [String!]
  previousValues: User_record_data_by_timePreviousValues
}

input User_record_data_by_timeSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_record_data_by_timeSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_record_data_by_timeSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_record_data_by_timeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: User_record_data_by_timeWhereInput
}

input User_record_data_by_timeUpdateInput {
  change_time: DateTime
  color_b: Int
  color_g: Int
  color_r: Int
  leakage: String
  volume: Float
  record_day_row: User_record_data_by_dayUpdateOneWithoutUser_record_data_by_timesInput
}

input User_record_data_by_timeUpdateManyDataInput {
  change_time: DateTime
  color_b: Int
  color_g: Int
  color_r: Int
  leakage: String
  volume: Float
}

input User_record_data_by_timeUpdateManyMutationInput {
  change_time: DateTime
  color_b: Int
  color_g: Int
  color_r: Int
  leakage: String
  volume: Float
}

input User_record_data_by_timeUpdateManyWithoutRecord_day_rowInput {
  create: [User_record_data_by_timeCreateWithoutRecord_day_rowInput!]
  connect: [User_record_data_by_timeWhereUniqueInput!]
  set: [User_record_data_by_timeWhereUniqueInput!]
  disconnect: [User_record_data_by_timeWhereUniqueInput!]
  delete: [User_record_data_by_timeWhereUniqueInput!]
  update: [User_record_data_by_timeUpdateWithWhereUniqueWithoutRecord_day_rowInput!]
  updateMany: [User_record_data_by_timeUpdateManyWithWhereNestedInput!]
  deleteMany: [User_record_data_by_timeScalarWhereInput!]
  upsert: [User_record_data_by_timeUpsertWithWhereUniqueWithoutRecord_day_rowInput!]
}

input User_record_data_by_timeUpdateManyWithWhereNestedInput {
  where: User_record_data_by_timeScalarWhereInput!
  data: User_record_data_by_timeUpdateManyDataInput!
}

input User_record_data_by_timeUpdateWithoutRecord_day_rowDataInput {
  change_time: DateTime
  color_b: Int
  color_g: Int
  color_r: Int
  leakage: String
  volume: Float
}

input User_record_data_by_timeUpdateWithWhereUniqueWithoutRecord_day_rowInput {
  where: User_record_data_by_timeWhereUniqueInput!
  data: User_record_data_by_timeUpdateWithoutRecord_day_rowDataInput!
}

input User_record_data_by_timeUpsertWithWhereUniqueWithoutRecord_day_rowInput {
  where: User_record_data_by_timeWhereUniqueInput!
  update: User_record_data_by_timeUpdateWithoutRecord_day_rowDataInput!
  create: User_record_data_by_timeCreateWithoutRecord_day_rowInput!
}

input User_record_data_by_timeWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [User_record_data_by_timeWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [User_record_data_by_timeWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [User_record_data_by_timeWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  change_time: DateTime

  """
  All values that are not equal to given value.
  """
  change_time_not: DateTime

  """
  All values that are contained in given list.
  """
  change_time_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  change_time_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  change_time_lt: DateTime

  """
  All values less than or equal the given value.
  """
  change_time_lte: DateTime

  """
  All values greater than the given value.
  """
  change_time_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  change_time_gte: DateTime
  color_b: Int

  """
  All values that are not equal to given value.
  """
  color_b_not: Int

  """
  All values that are contained in given list.
  """
  color_b_in: [Int!]

  """
  All values that are not contained in given list.
  """
  color_b_not_in: [Int!]

  """
  All values less than the given value.
  """
  color_b_lt: Int

  """
  All values less than or equal the given value.
  """
  color_b_lte: Int

  """
  All values greater than the given value.
  """
  color_b_gt: Int

  """
  All values greater than or equal the given value.
  """
  color_b_gte: Int
  color_g: Int

  """
  All values that are not equal to given value.
  """
  color_g_not: Int

  """
  All values that are contained in given list.
  """
  color_g_in: [Int!]

  """
  All values that are not contained in given list.
  """
  color_g_not_in: [Int!]

  """
  All values less than the given value.
  """
  color_g_lt: Int

  """
  All values less than or equal the given value.
  """
  color_g_lte: Int

  """
  All values greater than the given value.
  """
  color_g_gt: Int

  """
  All values greater than or equal the given value.
  """
  color_g_gte: Int
  color_r: Int

  """
  All values that are not equal to given value.
  """
  color_r_not: Int

  """
  All values that are contained in given list.
  """
  color_r_in: [Int!]

  """
  All values that are not contained in given list.
  """
  color_r_not_in: [Int!]

  """
  All values less than the given value.
  """
  color_r_lt: Int

  """
  All values less than or equal the given value.
  """
  color_r_lte: Int

  """
  All values greater than the given value.
  """
  color_r_gt: Int

  """
  All values greater than or equal the given value.
  """
  color_r_gte: Int
  leakage: String

  """
  All values that are not equal to given value.
  """
  leakage_not: String

  """
  All values that are contained in given list.
  """
  leakage_in: [String!]

  """
  All values that are not contained in given list.
  """
  leakage_not_in: [String!]

  """
  All values less than the given value.
  """
  leakage_lt: String

  """
  All values less than or equal the given value.
  """
  leakage_lte: String

  """
  All values greater than the given value.
  """
  leakage_gt: String

  """
  All values greater than or equal the given value.
  """
  leakage_gte: String

  """
  All values containing the given string.
  """
  leakage_contains: String

  """
  All values not containing the given string.
  """
  leakage_not_contains: String

  """
  All values starting with the given string.
  """
  leakage_starts_with: String

  """
  All values not starting with the given string.
  """
  leakage_not_starts_with: String

  """
  All values ending with the given string.
  """
  leakage_ends_with: String

  """
  All values not ending with the given string.
  """
  leakage_not_ends_with: String
  volume: Float

  """
  All values that are not equal to given value.
  """
  volume_not: Float

  """
  All values that are contained in given list.
  """
  volume_in: [Float!]

  """
  All values that are not contained in given list.
  """
  volume_not_in: [Float!]

  """
  All values less than the given value.
  """
  volume_lt: Float

  """
  All values less than or equal the given value.
  """
  volume_lte: Float

  """
  All values greater than the given value.
  """
  volume_gt: Float

  """
  All values greater than or equal the given value.
  """
  volume_gte: Float
  record_day_row: User_record_data_by_dayWhereInput
}

input User_record_data_by_timeWhereUniqueInput {
  id: Int
}

type Users {
  id: Int!
  anon_user_id: Int
  app_server_syncs(
    where: App_server_syncWhereInput
    orderBy: App_server_syncOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [App_server_sync!]
  auth_tokens(
    where: Auth_tokenWhereInput
    orderBy: Auth_tokenOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Auth_token!]
  country: Country
  cup_data_proc_flows(
    where: Cup_data_proc_flowWhereInput
    orderBy: Cup_data_proc_flowOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_proc_flow!]
  cup_data_proc_mdates(
    where: Cup_data_proc_mdatesWhereInput
    orderBy: Cup_data_proc_mdatesOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_proc_mdates!]
  cup_data_qa_responses(
    where: Cup_data_qa_responseWhereInput
    orderBy: Cup_data_qa_responseOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_qa_response!]
  cup_data_user_removes(
    where: Cup_data_user_removeWhereInput
    orderBy: Cup_data_user_removeOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Cup_data_user_remove!]
  deleted: Boolean!
  dob: DateTime!
  email: String!
  encrypt_salt_string: String
  ethnicity: Ethnicity
  first_name: String!
  given_birth: Boolean!
  last_name: String!
  password: String!
  user_coin_histories(
    where: User_coin_historyWhereInput
    orderBy: User_coin_historyOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User_coin_history!]
  user_cups(
    where: User_cupsWhereInput
    orderBy: User_cupsOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User_cups!]
  user_interview_data(
    where: User_interview_dataWhereInput
    orderBy: User_interview_dataOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User_interview_data!]
  user_record_data_by_periods(
    where: User_record_data_by_periodWhereInput
    orderBy: User_record_data_by_periodOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User_record_data_by_period!]
}

type Users_data_analysis {
  id: Int!
  email: String!
  first_name: String!
  last_name: String!
  password: String!
  user_id: String!
}

"""
A connection to a list of items.
"""
type Users_data_analysisConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [Users_data_analysisEdge]!
  aggregate: AggregateUsers_data_analysis!
}

input Users_data_analysisCreateInput {
  email: String!
  first_name: String!
  last_name: String!
  password: String!
  user_id: String!
}

"""
An edge in a connection.
"""
type Users_data_analysisEdge {
  """
  The item at the end of the edge.
  """
  node: Users_data_analysis!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum Users_data_analysisOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  first_name_ASC
  first_name_DESC
  last_name_ASC
  last_name_DESC
  password_ASC
  password_DESC
  user_id_ASC
  user_id_DESC
}

type Users_data_analysisPreviousValues {
  id: Int!
  email: String!
  first_name: String!
  last_name: String!
  password: String!
  user_id: String!
}

type Users_data_analysisSubscriptionPayload {
  mutation: MutationType!
  node: Users_data_analysis
  updatedFields: [String!]
  previousValues: Users_data_analysisPreviousValues
}

input Users_data_analysisSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Users_data_analysisSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Users_data_analysisSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Users_data_analysisSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: Users_data_analysisWhereInput
}

input Users_data_analysisUpdateInput {
  email: String
  first_name: String
  last_name: String
  password: String
  user_id: String
}

input Users_data_analysisUpdateManyMutationInput {
  email: String
  first_name: String
  last_name: String
  password: String
  user_id: String
}

input Users_data_analysisWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [Users_data_analysisWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [Users_data_analysisWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [Users_data_analysisWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  email: String

  """
  All values that are not equal to given value.
  """
  email_not: String

  """
  All values that are contained in given list.
  """
  email_in: [String!]

  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]

  """
  All values less than the given value.
  """
  email_lt: String

  """
  All values less than or equal the given value.
  """
  email_lte: String

  """
  All values greater than the given value.
  """
  email_gt: String

  """
  All values greater than or equal the given value.
  """
  email_gte: String

  """
  All values containing the given string.
  """
  email_contains: String

  """
  All values not containing the given string.
  """
  email_not_contains: String

  """
  All values starting with the given string.
  """
  email_starts_with: String

  """
  All values not starting with the given string.
  """
  email_not_starts_with: String

  """
  All values ending with the given string.
  """
  email_ends_with: String

  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  first_name: String

  """
  All values that are not equal to given value.
  """
  first_name_not: String

  """
  All values that are contained in given list.
  """
  first_name_in: [String!]

  """
  All values that are not contained in given list.
  """
  first_name_not_in: [String!]

  """
  All values less than the given value.
  """
  first_name_lt: String

  """
  All values less than or equal the given value.
  """
  first_name_lte: String

  """
  All values greater than the given value.
  """
  first_name_gt: String

  """
  All values greater than or equal the given value.
  """
  first_name_gte: String

  """
  All values containing the given string.
  """
  first_name_contains: String

  """
  All values not containing the given string.
  """
  first_name_not_contains: String

  """
  All values starting with the given string.
  """
  first_name_starts_with: String

  """
  All values not starting with the given string.
  """
  first_name_not_starts_with: String

  """
  All values ending with the given string.
  """
  first_name_ends_with: String

  """
  All values not ending with the given string.
  """
  first_name_not_ends_with: String
  last_name: String

  """
  All values that are not equal to given value.
  """
  last_name_not: String

  """
  All values that are contained in given list.
  """
  last_name_in: [String!]

  """
  All values that are not contained in given list.
  """
  last_name_not_in: [String!]

  """
  All values less than the given value.
  """
  last_name_lt: String

  """
  All values less than or equal the given value.
  """
  last_name_lte: String

  """
  All values greater than the given value.
  """
  last_name_gt: String

  """
  All values greater than or equal the given value.
  """
  last_name_gte: String

  """
  All values containing the given string.
  """
  last_name_contains: String

  """
  All values not containing the given string.
  """
  last_name_not_contains: String

  """
  All values starting with the given string.
  """
  last_name_starts_with: String

  """
  All values not starting with the given string.
  """
  last_name_not_starts_with: String

  """
  All values ending with the given string.
  """
  last_name_ends_with: String

  """
  All values not ending with the given string.
  """
  last_name_not_ends_with: String
  password: String

  """
  All values that are not equal to given value.
  """
  password_not: String

  """
  All values that are contained in given list.
  """
  password_in: [String!]

  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]

  """
  All values less than the given value.
  """
  password_lt: String

  """
  All values less than or equal the given value.
  """
  password_lte: String

  """
  All values greater than the given value.
  """
  password_gt: String

  """
  All values greater than or equal the given value.
  """
  password_gte: String

  """
  All values containing the given string.
  """
  password_contains: String

  """
  All values not containing the given string.
  """
  password_not_contains: String

  """
  All values starting with the given string.
  """
  password_starts_with: String

  """
  All values not starting with the given string.
  """
  password_not_starts_with: String

  """
  All values ending with the given string.
  """
  password_ends_with: String

  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  user_id: String

  """
  All values that are not equal to given value.
  """
  user_id_not: String

  """
  All values that are contained in given list.
  """
  user_id_in: [String!]

  """
  All values that are not contained in given list.
  """
  user_id_not_in: [String!]

  """
  All values less than the given value.
  """
  user_id_lt: String

  """
  All values less than or equal the given value.
  """
  user_id_lte: String

  """
  All values greater than the given value.
  """
  user_id_gt: String

  """
  All values greater than or equal the given value.
  """
  user_id_gte: String

  """
  All values containing the given string.
  """
  user_id_contains: String

  """
  All values not containing the given string.
  """
  user_id_not_contains: String

  """
  All values starting with the given string.
  """
  user_id_starts_with: String

  """
  All values not starting with the given string.
  """
  user_id_not_starts_with: String

  """
  All values ending with the given string.
  """
  user_id_ends_with: String

  """
  All values not ending with the given string.
  """
  user_id_not_ends_with: String
}

input Users_data_analysisWhereUniqueInput {
  id: Int
}

"""
A connection to a list of items.
"""
type UsersConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [UsersEdge]!
  aggregate: AggregateUsers!
}

input UsersCreateInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime!
  email: String!
  encrypt_salt_string: String
  first_name: String!
  given_birth: Boolean!
  last_name: String!
  password: String!
  app_server_syncs: App_server_syncCreateManyWithoutUserInput
  auth_tokens: Auth_tokenCreateManyWithoutUserInput
  country: CountryCreateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowCreateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesCreateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseCreateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutUserInput
  ethnicity: EthnicityCreateOneWithoutUsersInput
  user_coin_histories: User_coin_historyCreateManyWithoutUserInput
  user_cups: User_cupsCreateManyWithoutUserInput
  user_interview_data: User_interview_dataCreateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodCreateManyWithoutUserInput
}

input UsersCreateManyWithoutCountryInput {
  create: [UsersCreateWithoutCountryInput!]
  connect: [UsersWhereUniqueInput!]
}

input UsersCreateManyWithoutEthnicityInput {
  create: [UsersCreateWithoutEthnicityInput!]
  connect: [UsersWhereUniqueInput!]
}

input UsersCreateOneWithoutApp_server_syncsInput {
  create: UsersCreateWithoutApp_server_syncsInput
  connect: UsersWhereUniqueInput
}

input UsersCreateOneWithoutAuth_tokensInput {
  create: UsersCreateWithoutAuth_tokensInput
  connect: UsersWhereUniqueInput
}

input UsersCreateOneWithoutCup_data_proc_flowsInput {
  create: UsersCreateWithoutCup_data_proc_flowsInput
  connect: UsersWhereUniqueInput
}

input UsersCreateOneWithoutCup_data_proc_mdatesInput {
  create: UsersCreateWithoutCup_data_proc_mdatesInput
  connect: UsersWhereUniqueInput
}

input UsersCreateOneWithoutCup_data_qa_responsesInput {
  create: UsersCreateWithoutCup_data_qa_responsesInput
  connect: UsersWhereUniqueInput
}

input UsersCreateOneWithoutCup_data_user_removesInput {
  create: UsersCreateWithoutCup_data_user_removesInput
  connect: UsersWhereUniqueInput
}

input UsersCreateOneWithoutUser_coin_historiesInput {
  create: UsersCreateWithoutUser_coin_historiesInput
  connect: UsersWhereUniqueInput
}

input UsersCreateOneWithoutUser_cupsInput {
  create: UsersCreateWithoutUser_cupsInput
  connect: UsersWhereUniqueInput
}

input UsersCreateOneWithoutUser_interview_dataInput {
  create: UsersCreateWithoutUser_interview_dataInput
  connect: UsersWhereUniqueInput
}

input UsersCreateOneWithoutUser_record_data_by_periodsInput {
  create: UsersCreateWithoutUser_record_data_by_periodsInput
  connect: UsersWhereUniqueInput
}

input UsersCreateWithoutApp_server_syncsInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime!
  email: String!
  encrypt_salt_string: String
  first_name: String!
  given_birth: Boolean!
  last_name: String!
  password: String!
  auth_tokens: Auth_tokenCreateManyWithoutUserInput
  country: CountryCreateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowCreateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesCreateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseCreateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutUserInput
  ethnicity: EthnicityCreateOneWithoutUsersInput
  user_coin_histories: User_coin_historyCreateManyWithoutUserInput
  user_cups: User_cupsCreateManyWithoutUserInput
  user_interview_data: User_interview_dataCreateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodCreateManyWithoutUserInput
}

input UsersCreateWithoutAuth_tokensInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime!
  email: String!
  encrypt_salt_string: String
  first_name: String!
  given_birth: Boolean!
  last_name: String!
  password: String!
  app_server_syncs: App_server_syncCreateManyWithoutUserInput
  country: CountryCreateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowCreateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesCreateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseCreateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutUserInput
  ethnicity: EthnicityCreateOneWithoutUsersInput
  user_coin_histories: User_coin_historyCreateManyWithoutUserInput
  user_cups: User_cupsCreateManyWithoutUserInput
  user_interview_data: User_interview_dataCreateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodCreateManyWithoutUserInput
}

input UsersCreateWithoutCountryInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime!
  email: String!
  encrypt_salt_string: String
  first_name: String!
  given_birth: Boolean!
  last_name: String!
  password: String!
  app_server_syncs: App_server_syncCreateManyWithoutUserInput
  auth_tokens: Auth_tokenCreateManyWithoutUserInput
  cup_data_proc_flows: Cup_data_proc_flowCreateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesCreateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseCreateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutUserInput
  ethnicity: EthnicityCreateOneWithoutUsersInput
  user_coin_histories: User_coin_historyCreateManyWithoutUserInput
  user_cups: User_cupsCreateManyWithoutUserInput
  user_interview_data: User_interview_dataCreateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodCreateManyWithoutUserInput
}

input UsersCreateWithoutCup_data_proc_flowsInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime!
  email: String!
  encrypt_salt_string: String
  first_name: String!
  given_birth: Boolean!
  last_name: String!
  password: String!
  app_server_syncs: App_server_syncCreateManyWithoutUserInput
  auth_tokens: Auth_tokenCreateManyWithoutUserInput
  country: CountryCreateOneWithoutUsersInput
  cup_data_proc_mdates: Cup_data_proc_mdatesCreateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseCreateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutUserInput
  ethnicity: EthnicityCreateOneWithoutUsersInput
  user_coin_histories: User_coin_historyCreateManyWithoutUserInput
  user_cups: User_cupsCreateManyWithoutUserInput
  user_interview_data: User_interview_dataCreateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodCreateManyWithoutUserInput
}

input UsersCreateWithoutCup_data_proc_mdatesInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime!
  email: String!
  encrypt_salt_string: String
  first_name: String!
  given_birth: Boolean!
  last_name: String!
  password: String!
  app_server_syncs: App_server_syncCreateManyWithoutUserInput
  auth_tokens: Auth_tokenCreateManyWithoutUserInput
  country: CountryCreateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowCreateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseCreateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutUserInput
  ethnicity: EthnicityCreateOneWithoutUsersInput
  user_coin_histories: User_coin_historyCreateManyWithoutUserInput
  user_cups: User_cupsCreateManyWithoutUserInput
  user_interview_data: User_interview_dataCreateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodCreateManyWithoutUserInput
}

input UsersCreateWithoutCup_data_qa_responsesInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime!
  email: String!
  encrypt_salt_string: String
  first_name: String!
  given_birth: Boolean!
  last_name: String!
  password: String!
  app_server_syncs: App_server_syncCreateManyWithoutUserInput
  auth_tokens: Auth_tokenCreateManyWithoutUserInput
  country: CountryCreateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowCreateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesCreateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutUserInput
  ethnicity: EthnicityCreateOneWithoutUsersInput
  user_coin_histories: User_coin_historyCreateManyWithoutUserInput
  user_cups: User_cupsCreateManyWithoutUserInput
  user_interview_data: User_interview_dataCreateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodCreateManyWithoutUserInput
}

input UsersCreateWithoutCup_data_user_removesInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime!
  email: String!
  encrypt_salt_string: String
  first_name: String!
  given_birth: Boolean!
  last_name: String!
  password: String!
  app_server_syncs: App_server_syncCreateManyWithoutUserInput
  auth_tokens: Auth_tokenCreateManyWithoutUserInput
  country: CountryCreateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowCreateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesCreateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseCreateManyWithoutUserInput
  ethnicity: EthnicityCreateOneWithoutUsersInput
  user_coin_histories: User_coin_historyCreateManyWithoutUserInput
  user_cups: User_cupsCreateManyWithoutUserInput
  user_interview_data: User_interview_dataCreateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodCreateManyWithoutUserInput
}

input UsersCreateWithoutEthnicityInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime!
  email: String!
  encrypt_salt_string: String
  first_name: String!
  given_birth: Boolean!
  last_name: String!
  password: String!
  app_server_syncs: App_server_syncCreateManyWithoutUserInput
  auth_tokens: Auth_tokenCreateManyWithoutUserInput
  country: CountryCreateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowCreateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesCreateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseCreateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutUserInput
  user_coin_histories: User_coin_historyCreateManyWithoutUserInput
  user_cups: User_cupsCreateManyWithoutUserInput
  user_interview_data: User_interview_dataCreateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodCreateManyWithoutUserInput
}

input UsersCreateWithoutUser_coin_historiesInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime!
  email: String!
  encrypt_salt_string: String
  first_name: String!
  given_birth: Boolean!
  last_name: String!
  password: String!
  app_server_syncs: App_server_syncCreateManyWithoutUserInput
  auth_tokens: Auth_tokenCreateManyWithoutUserInput
  country: CountryCreateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowCreateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesCreateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseCreateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutUserInput
  ethnicity: EthnicityCreateOneWithoutUsersInput
  user_cups: User_cupsCreateManyWithoutUserInput
  user_interview_data: User_interview_dataCreateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodCreateManyWithoutUserInput
}

input UsersCreateWithoutUser_cupsInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime!
  email: String!
  encrypt_salt_string: String
  first_name: String!
  given_birth: Boolean!
  last_name: String!
  password: String!
  app_server_syncs: App_server_syncCreateManyWithoutUserInput
  auth_tokens: Auth_tokenCreateManyWithoutUserInput
  country: CountryCreateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowCreateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesCreateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseCreateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutUserInput
  ethnicity: EthnicityCreateOneWithoutUsersInput
  user_coin_histories: User_coin_historyCreateManyWithoutUserInput
  user_interview_data: User_interview_dataCreateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodCreateManyWithoutUserInput
}

input UsersCreateWithoutUser_interview_dataInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime!
  email: String!
  encrypt_salt_string: String
  first_name: String!
  given_birth: Boolean!
  last_name: String!
  password: String!
  app_server_syncs: App_server_syncCreateManyWithoutUserInput
  auth_tokens: Auth_tokenCreateManyWithoutUserInput
  country: CountryCreateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowCreateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesCreateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseCreateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutUserInput
  ethnicity: EthnicityCreateOneWithoutUsersInput
  user_coin_histories: User_coin_historyCreateManyWithoutUserInput
  user_cups: User_cupsCreateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodCreateManyWithoutUserInput
}

input UsersCreateWithoutUser_record_data_by_periodsInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime!
  email: String!
  encrypt_salt_string: String
  first_name: String!
  given_birth: Boolean!
  last_name: String!
  password: String!
  app_server_syncs: App_server_syncCreateManyWithoutUserInput
  auth_tokens: Auth_tokenCreateManyWithoutUserInput
  country: CountryCreateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowCreateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesCreateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseCreateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeCreateManyWithoutUserInput
  ethnicity: EthnicityCreateOneWithoutUsersInput
  user_coin_histories: User_coin_historyCreateManyWithoutUserInput
  user_cups: User_cupsCreateManyWithoutUserInput
  user_interview_data: User_interview_dataCreateManyWithoutUserInput
}

"""
An edge in a connection.
"""
type UsersEdge {
  """
  The item at the end of the edge.
  """
  node: Users!

  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UsersOrderByInput {
  id_ASC
  id_DESC
  anon_user_id_ASC
  anon_user_id_DESC
  deleted_ASC
  deleted_DESC
  dob_ASC
  dob_DESC
  email_ASC
  email_DESC
  encrypt_salt_string_ASC
  encrypt_salt_string_DESC
  first_name_ASC
  first_name_DESC
  given_birth_ASC
  given_birth_DESC
  last_name_ASC
  last_name_DESC
  password_ASC
  password_DESC
}

type UsersPreviousValues {
  id: Int!
  anon_user_id: Int
  deleted: Boolean!
  dob: DateTime!
  email: String!
  encrypt_salt_string: String
  first_name: String!
  given_birth: Boolean!
  last_name: String!
  password: String!
}

input UsersScalarWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UsersScalarWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UsersScalarWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UsersScalarWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  anon_user_id: Int

  """
  All values that are not equal to given value.
  """
  anon_user_id_not: Int

  """
  All values that are contained in given list.
  """
  anon_user_id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  anon_user_id_not_in: [Int!]

  """
  All values less than the given value.
  """
  anon_user_id_lt: Int

  """
  All values less than or equal the given value.
  """
  anon_user_id_lte: Int

  """
  All values greater than the given value.
  """
  anon_user_id_gt: Int

  """
  All values greater than or equal the given value.
  """
  anon_user_id_gte: Int
  deleted: Boolean

  """
  All values that are not equal to given value.
  """
  deleted_not: Boolean
  dob: DateTime

  """
  All values that are not equal to given value.
  """
  dob_not: DateTime

  """
  All values that are contained in given list.
  """
  dob_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  dob_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  dob_lt: DateTime

  """
  All values less than or equal the given value.
  """
  dob_lte: DateTime

  """
  All values greater than the given value.
  """
  dob_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  dob_gte: DateTime
  email: String

  """
  All values that are not equal to given value.
  """
  email_not: String

  """
  All values that are contained in given list.
  """
  email_in: [String!]

  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]

  """
  All values less than the given value.
  """
  email_lt: String

  """
  All values less than or equal the given value.
  """
  email_lte: String

  """
  All values greater than the given value.
  """
  email_gt: String

  """
  All values greater than or equal the given value.
  """
  email_gte: String

  """
  All values containing the given string.
  """
  email_contains: String

  """
  All values not containing the given string.
  """
  email_not_contains: String

  """
  All values starting with the given string.
  """
  email_starts_with: String

  """
  All values not starting with the given string.
  """
  email_not_starts_with: String

  """
  All values ending with the given string.
  """
  email_ends_with: String

  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  encrypt_salt_string: String

  """
  All values that are not equal to given value.
  """
  encrypt_salt_string_not: String

  """
  All values that are contained in given list.
  """
  encrypt_salt_string_in: [String!]

  """
  All values that are not contained in given list.
  """
  encrypt_salt_string_not_in: [String!]

  """
  All values less than the given value.
  """
  encrypt_salt_string_lt: String

  """
  All values less than or equal the given value.
  """
  encrypt_salt_string_lte: String

  """
  All values greater than the given value.
  """
  encrypt_salt_string_gt: String

  """
  All values greater than or equal the given value.
  """
  encrypt_salt_string_gte: String

  """
  All values containing the given string.
  """
  encrypt_salt_string_contains: String

  """
  All values not containing the given string.
  """
  encrypt_salt_string_not_contains: String

  """
  All values starting with the given string.
  """
  encrypt_salt_string_starts_with: String

  """
  All values not starting with the given string.
  """
  encrypt_salt_string_not_starts_with: String

  """
  All values ending with the given string.
  """
  encrypt_salt_string_ends_with: String

  """
  All values not ending with the given string.
  """
  encrypt_salt_string_not_ends_with: String
  first_name: String

  """
  All values that are not equal to given value.
  """
  first_name_not: String

  """
  All values that are contained in given list.
  """
  first_name_in: [String!]

  """
  All values that are not contained in given list.
  """
  first_name_not_in: [String!]

  """
  All values less than the given value.
  """
  first_name_lt: String

  """
  All values less than or equal the given value.
  """
  first_name_lte: String

  """
  All values greater than the given value.
  """
  first_name_gt: String

  """
  All values greater than or equal the given value.
  """
  first_name_gte: String

  """
  All values containing the given string.
  """
  first_name_contains: String

  """
  All values not containing the given string.
  """
  first_name_not_contains: String

  """
  All values starting with the given string.
  """
  first_name_starts_with: String

  """
  All values not starting with the given string.
  """
  first_name_not_starts_with: String

  """
  All values ending with the given string.
  """
  first_name_ends_with: String

  """
  All values not ending with the given string.
  """
  first_name_not_ends_with: String
  given_birth: Boolean

  """
  All values that are not equal to given value.
  """
  given_birth_not: Boolean
  last_name: String

  """
  All values that are not equal to given value.
  """
  last_name_not: String

  """
  All values that are contained in given list.
  """
  last_name_in: [String!]

  """
  All values that are not contained in given list.
  """
  last_name_not_in: [String!]

  """
  All values less than the given value.
  """
  last_name_lt: String

  """
  All values less than or equal the given value.
  """
  last_name_lte: String

  """
  All values greater than the given value.
  """
  last_name_gt: String

  """
  All values greater than or equal the given value.
  """
  last_name_gte: String

  """
  All values containing the given string.
  """
  last_name_contains: String

  """
  All values not containing the given string.
  """
  last_name_not_contains: String

  """
  All values starting with the given string.
  """
  last_name_starts_with: String

  """
  All values not starting with the given string.
  """
  last_name_not_starts_with: String

  """
  All values ending with the given string.
  """
  last_name_ends_with: String

  """
  All values not ending with the given string.
  """
  last_name_not_ends_with: String
  password: String

  """
  All values that are not equal to given value.
  """
  password_not: String

  """
  All values that are contained in given list.
  """
  password_in: [String!]

  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]

  """
  All values less than the given value.
  """
  password_lt: String

  """
  All values less than or equal the given value.
  """
  password_lte: String

  """
  All values greater than the given value.
  """
  password_gt: String

  """
  All values greater than or equal the given value.
  """
  password_gte: String

  """
  All values containing the given string.
  """
  password_contains: String

  """
  All values not containing the given string.
  """
  password_not_contains: String

  """
  All values starting with the given string.
  """
  password_starts_with: String

  """
  All values not starting with the given string.
  """
  password_not_starts_with: String

  """
  All values ending with the given string.
  """
  password_ends_with: String

  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
}

type UsersSubscriptionPayload {
  mutation: MutationType!
  node: Users
  updatedFields: [String!]
  previousValues: UsersPreviousValues
}

input UsersSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UsersSubscriptionWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UsersSubscriptionWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UsersSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UsersWhereInput
}

input UsersUpdateInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime
  email: String
  encrypt_salt_string: String
  first_name: String
  given_birth: Boolean
  last_name: String
  password: String
  app_server_syncs: App_server_syncUpdateManyWithoutUserInput
  auth_tokens: Auth_tokenUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowUpdateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesUpdateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseUpdateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutUserInput
  ethnicity: EthnicityUpdateOneWithoutUsersInput
  user_coin_histories: User_coin_historyUpdateManyWithoutUserInput
  user_cups: User_cupsUpdateManyWithoutUserInput
  user_interview_data: User_interview_dataUpdateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodUpdateManyWithoutUserInput
}

input UsersUpdateManyDataInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime
  email: String
  encrypt_salt_string: String
  first_name: String
  given_birth: Boolean
  last_name: String
  password: String
}

input UsersUpdateManyMutationInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime
  email: String
  encrypt_salt_string: String
  first_name: String
  given_birth: Boolean
  last_name: String
  password: String
}

input UsersUpdateManyWithoutCountryInput {
  create: [UsersCreateWithoutCountryInput!]
  connect: [UsersWhereUniqueInput!]
  set: [UsersWhereUniqueInput!]
  disconnect: [UsersWhereUniqueInput!]
  delete: [UsersWhereUniqueInput!]
  update: [UsersUpdateWithWhereUniqueWithoutCountryInput!]
  updateMany: [UsersUpdateManyWithWhereNestedInput!]
  deleteMany: [UsersScalarWhereInput!]
  upsert: [UsersUpsertWithWhereUniqueWithoutCountryInput!]
}

input UsersUpdateManyWithoutEthnicityInput {
  create: [UsersCreateWithoutEthnicityInput!]
  connect: [UsersWhereUniqueInput!]
  set: [UsersWhereUniqueInput!]
  disconnect: [UsersWhereUniqueInput!]
  delete: [UsersWhereUniqueInput!]
  update: [UsersUpdateWithWhereUniqueWithoutEthnicityInput!]
  updateMany: [UsersUpdateManyWithWhereNestedInput!]
  deleteMany: [UsersScalarWhereInput!]
  upsert: [UsersUpsertWithWhereUniqueWithoutEthnicityInput!]
}

input UsersUpdateManyWithWhereNestedInput {
  where: UsersScalarWhereInput!
  data: UsersUpdateManyDataInput!
}

input UsersUpdateOneWithoutApp_server_syncsInput {
  create: UsersCreateWithoutApp_server_syncsInput
  connect: UsersWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UsersUpdateWithoutApp_server_syncsDataInput
  upsert: UsersUpsertWithoutApp_server_syncsInput
}

input UsersUpdateOneWithoutAuth_tokensInput {
  create: UsersCreateWithoutAuth_tokensInput
  connect: UsersWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UsersUpdateWithoutAuth_tokensDataInput
  upsert: UsersUpsertWithoutAuth_tokensInput
}

input UsersUpdateOneWithoutCup_data_proc_flowsInput {
  create: UsersCreateWithoutCup_data_proc_flowsInput
  connect: UsersWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UsersUpdateWithoutCup_data_proc_flowsDataInput
  upsert: UsersUpsertWithoutCup_data_proc_flowsInput
}

input UsersUpdateOneWithoutCup_data_proc_mdatesInput {
  create: UsersCreateWithoutCup_data_proc_mdatesInput
  connect: UsersWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UsersUpdateWithoutCup_data_proc_mdatesDataInput
  upsert: UsersUpsertWithoutCup_data_proc_mdatesInput
}

input UsersUpdateOneWithoutCup_data_qa_responsesInput {
  create: UsersCreateWithoutCup_data_qa_responsesInput
  connect: UsersWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UsersUpdateWithoutCup_data_qa_responsesDataInput
  upsert: UsersUpsertWithoutCup_data_qa_responsesInput
}

input UsersUpdateOneWithoutCup_data_user_removesInput {
  create: UsersCreateWithoutCup_data_user_removesInput
  connect: UsersWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UsersUpdateWithoutCup_data_user_removesDataInput
  upsert: UsersUpsertWithoutCup_data_user_removesInput
}

input UsersUpdateOneWithoutUser_coin_historiesInput {
  create: UsersCreateWithoutUser_coin_historiesInput
  connect: UsersWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UsersUpdateWithoutUser_coin_historiesDataInput
  upsert: UsersUpsertWithoutUser_coin_historiesInput
}

input UsersUpdateOneWithoutUser_cupsInput {
  create: UsersCreateWithoutUser_cupsInput
  connect: UsersWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UsersUpdateWithoutUser_cupsDataInput
  upsert: UsersUpsertWithoutUser_cupsInput
}

input UsersUpdateOneWithoutUser_interview_dataInput {
  create: UsersCreateWithoutUser_interview_dataInput
  connect: UsersWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UsersUpdateWithoutUser_interview_dataDataInput
  upsert: UsersUpsertWithoutUser_interview_dataInput
}

input UsersUpdateOneWithoutUser_record_data_by_periodsInput {
  create: UsersCreateWithoutUser_record_data_by_periodsInput
  connect: UsersWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UsersUpdateWithoutUser_record_data_by_periodsDataInput
  upsert: UsersUpsertWithoutUser_record_data_by_periodsInput
}

input UsersUpdateWithoutApp_server_syncsDataInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime
  email: String
  encrypt_salt_string: String
  first_name: String
  given_birth: Boolean
  last_name: String
  password: String
  auth_tokens: Auth_tokenUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowUpdateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesUpdateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseUpdateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutUserInput
  ethnicity: EthnicityUpdateOneWithoutUsersInput
  user_coin_histories: User_coin_historyUpdateManyWithoutUserInput
  user_cups: User_cupsUpdateManyWithoutUserInput
  user_interview_data: User_interview_dataUpdateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodUpdateManyWithoutUserInput
}

input UsersUpdateWithoutAuth_tokensDataInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime
  email: String
  encrypt_salt_string: String
  first_name: String
  given_birth: Boolean
  last_name: String
  password: String
  app_server_syncs: App_server_syncUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowUpdateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesUpdateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseUpdateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutUserInput
  ethnicity: EthnicityUpdateOneWithoutUsersInput
  user_coin_histories: User_coin_historyUpdateManyWithoutUserInput
  user_cups: User_cupsUpdateManyWithoutUserInput
  user_interview_data: User_interview_dataUpdateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodUpdateManyWithoutUserInput
}

input UsersUpdateWithoutCountryDataInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime
  email: String
  encrypt_salt_string: String
  first_name: String
  given_birth: Boolean
  last_name: String
  password: String
  app_server_syncs: App_server_syncUpdateManyWithoutUserInput
  auth_tokens: Auth_tokenUpdateManyWithoutUserInput
  cup_data_proc_flows: Cup_data_proc_flowUpdateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesUpdateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseUpdateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutUserInput
  ethnicity: EthnicityUpdateOneWithoutUsersInput
  user_coin_histories: User_coin_historyUpdateManyWithoutUserInput
  user_cups: User_cupsUpdateManyWithoutUserInput
  user_interview_data: User_interview_dataUpdateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodUpdateManyWithoutUserInput
}

input UsersUpdateWithoutCup_data_proc_flowsDataInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime
  email: String
  encrypt_salt_string: String
  first_name: String
  given_birth: Boolean
  last_name: String
  password: String
  app_server_syncs: App_server_syncUpdateManyWithoutUserInput
  auth_tokens: Auth_tokenUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  cup_data_proc_mdates: Cup_data_proc_mdatesUpdateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseUpdateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutUserInput
  ethnicity: EthnicityUpdateOneWithoutUsersInput
  user_coin_histories: User_coin_historyUpdateManyWithoutUserInput
  user_cups: User_cupsUpdateManyWithoutUserInput
  user_interview_data: User_interview_dataUpdateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodUpdateManyWithoutUserInput
}

input UsersUpdateWithoutCup_data_proc_mdatesDataInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime
  email: String
  encrypt_salt_string: String
  first_name: String
  given_birth: Boolean
  last_name: String
  password: String
  app_server_syncs: App_server_syncUpdateManyWithoutUserInput
  auth_tokens: Auth_tokenUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowUpdateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseUpdateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutUserInput
  ethnicity: EthnicityUpdateOneWithoutUsersInput
  user_coin_histories: User_coin_historyUpdateManyWithoutUserInput
  user_cups: User_cupsUpdateManyWithoutUserInput
  user_interview_data: User_interview_dataUpdateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodUpdateManyWithoutUserInput
}

input UsersUpdateWithoutCup_data_qa_responsesDataInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime
  email: String
  encrypt_salt_string: String
  first_name: String
  given_birth: Boolean
  last_name: String
  password: String
  app_server_syncs: App_server_syncUpdateManyWithoutUserInput
  auth_tokens: Auth_tokenUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowUpdateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesUpdateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutUserInput
  ethnicity: EthnicityUpdateOneWithoutUsersInput
  user_coin_histories: User_coin_historyUpdateManyWithoutUserInput
  user_cups: User_cupsUpdateManyWithoutUserInput
  user_interview_data: User_interview_dataUpdateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodUpdateManyWithoutUserInput
}

input UsersUpdateWithoutCup_data_user_removesDataInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime
  email: String
  encrypt_salt_string: String
  first_name: String
  given_birth: Boolean
  last_name: String
  password: String
  app_server_syncs: App_server_syncUpdateManyWithoutUserInput
  auth_tokens: Auth_tokenUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowUpdateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesUpdateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseUpdateManyWithoutUserInput
  ethnicity: EthnicityUpdateOneWithoutUsersInput
  user_coin_histories: User_coin_historyUpdateManyWithoutUserInput
  user_cups: User_cupsUpdateManyWithoutUserInput
  user_interview_data: User_interview_dataUpdateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodUpdateManyWithoutUserInput
}

input UsersUpdateWithoutEthnicityDataInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime
  email: String
  encrypt_salt_string: String
  first_name: String
  given_birth: Boolean
  last_name: String
  password: String
  app_server_syncs: App_server_syncUpdateManyWithoutUserInput
  auth_tokens: Auth_tokenUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowUpdateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesUpdateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseUpdateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutUserInput
  user_coin_histories: User_coin_historyUpdateManyWithoutUserInput
  user_cups: User_cupsUpdateManyWithoutUserInput
  user_interview_data: User_interview_dataUpdateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodUpdateManyWithoutUserInput
}

input UsersUpdateWithoutUser_coin_historiesDataInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime
  email: String
  encrypt_salt_string: String
  first_name: String
  given_birth: Boolean
  last_name: String
  password: String
  app_server_syncs: App_server_syncUpdateManyWithoutUserInput
  auth_tokens: Auth_tokenUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowUpdateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesUpdateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseUpdateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutUserInput
  ethnicity: EthnicityUpdateOneWithoutUsersInput
  user_cups: User_cupsUpdateManyWithoutUserInput
  user_interview_data: User_interview_dataUpdateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodUpdateManyWithoutUserInput
}

input UsersUpdateWithoutUser_cupsDataInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime
  email: String
  encrypt_salt_string: String
  first_name: String
  given_birth: Boolean
  last_name: String
  password: String
  app_server_syncs: App_server_syncUpdateManyWithoutUserInput
  auth_tokens: Auth_tokenUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowUpdateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesUpdateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseUpdateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutUserInput
  ethnicity: EthnicityUpdateOneWithoutUsersInput
  user_coin_histories: User_coin_historyUpdateManyWithoutUserInput
  user_interview_data: User_interview_dataUpdateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodUpdateManyWithoutUserInput
}

input UsersUpdateWithoutUser_interview_dataDataInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime
  email: String
  encrypt_salt_string: String
  first_name: String
  given_birth: Boolean
  last_name: String
  password: String
  app_server_syncs: App_server_syncUpdateManyWithoutUserInput
  auth_tokens: Auth_tokenUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowUpdateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesUpdateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseUpdateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutUserInput
  ethnicity: EthnicityUpdateOneWithoutUsersInput
  user_coin_histories: User_coin_historyUpdateManyWithoutUserInput
  user_cups: User_cupsUpdateManyWithoutUserInput
  user_record_data_by_periods: User_record_data_by_periodUpdateManyWithoutUserInput
}

input UsersUpdateWithoutUser_record_data_by_periodsDataInput {
  anon_user_id: Int
  deleted: Boolean
  dob: DateTime
  email: String
  encrypt_salt_string: String
  first_name: String
  given_birth: Boolean
  last_name: String
  password: String
  app_server_syncs: App_server_syncUpdateManyWithoutUserInput
  auth_tokens: Auth_tokenUpdateManyWithoutUserInput
  country: CountryUpdateOneWithoutUsersInput
  cup_data_proc_flows: Cup_data_proc_flowUpdateManyWithoutUserInput
  cup_data_proc_mdates: Cup_data_proc_mdatesUpdateManyWithoutUserInput
  cup_data_qa_responses: Cup_data_qa_responseUpdateManyWithoutUserInput
  cup_data_user_removes: Cup_data_user_removeUpdateManyWithoutUserInput
  ethnicity: EthnicityUpdateOneWithoutUsersInput
  user_coin_histories: User_coin_historyUpdateManyWithoutUserInput
  user_cups: User_cupsUpdateManyWithoutUserInput
  user_interview_data: User_interview_dataUpdateManyWithoutUserInput
}

input UsersUpdateWithWhereUniqueWithoutCountryInput {
  where: UsersWhereUniqueInput!
  data: UsersUpdateWithoutCountryDataInput!
}

input UsersUpdateWithWhereUniqueWithoutEthnicityInput {
  where: UsersWhereUniqueInput!
  data: UsersUpdateWithoutEthnicityDataInput!
}

input UsersUpsertWithoutApp_server_syncsInput {
  update: UsersUpdateWithoutApp_server_syncsDataInput!
  create: UsersCreateWithoutApp_server_syncsInput!
}

input UsersUpsertWithoutAuth_tokensInput {
  update: UsersUpdateWithoutAuth_tokensDataInput!
  create: UsersCreateWithoutAuth_tokensInput!
}

input UsersUpsertWithoutCup_data_proc_flowsInput {
  update: UsersUpdateWithoutCup_data_proc_flowsDataInput!
  create: UsersCreateWithoutCup_data_proc_flowsInput!
}

input UsersUpsertWithoutCup_data_proc_mdatesInput {
  update: UsersUpdateWithoutCup_data_proc_mdatesDataInput!
  create: UsersCreateWithoutCup_data_proc_mdatesInput!
}

input UsersUpsertWithoutCup_data_qa_responsesInput {
  update: UsersUpdateWithoutCup_data_qa_responsesDataInput!
  create: UsersCreateWithoutCup_data_qa_responsesInput!
}

input UsersUpsertWithoutCup_data_user_removesInput {
  update: UsersUpdateWithoutCup_data_user_removesDataInput!
  create: UsersCreateWithoutCup_data_user_removesInput!
}

input UsersUpsertWithoutUser_coin_historiesInput {
  update: UsersUpdateWithoutUser_coin_historiesDataInput!
  create: UsersCreateWithoutUser_coin_historiesInput!
}

input UsersUpsertWithoutUser_cupsInput {
  update: UsersUpdateWithoutUser_cupsDataInput!
  create: UsersCreateWithoutUser_cupsInput!
}

input UsersUpsertWithoutUser_interview_dataInput {
  update: UsersUpdateWithoutUser_interview_dataDataInput!
  create: UsersCreateWithoutUser_interview_dataInput!
}

input UsersUpsertWithoutUser_record_data_by_periodsInput {
  update: UsersUpdateWithoutUser_record_data_by_periodsDataInput!
  create: UsersCreateWithoutUser_record_data_by_periodsInput!
}

input UsersUpsertWithWhereUniqueWithoutCountryInput {
  where: UsersWhereUniqueInput!
  update: UsersUpdateWithoutCountryDataInput!
  create: UsersCreateWithoutCountryInput!
}

input UsersUpsertWithWhereUniqueWithoutEthnicityInput {
  where: UsersWhereUniqueInput!
  update: UsersUpdateWithoutEthnicityDataInput!
  create: UsersCreateWithoutEthnicityInput!
}

input UsersWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UsersWhereInput!]

  """
  Logical OR on all given filters.
  """
  OR: [UsersWhereInput!]

  """
  Logical NOT on all given filters combined by AND.
  """
  NOT: [UsersWhereInput!]
  id: Int

  """
  All values that are not equal to given value.
  """
  id_not: Int

  """
  All values that are contained in given list.
  """
  id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  id_not_in: [Int!]

  """
  All values less than the given value.
  """
  id_lt: Int

  """
  All values less than or equal the given value.
  """
  id_lte: Int

  """
  All values greater than the given value.
  """
  id_gt: Int

  """
  All values greater than or equal the given value.
  """
  id_gte: Int
  anon_user_id: Int

  """
  All values that are not equal to given value.
  """
  anon_user_id_not: Int

  """
  All values that are contained in given list.
  """
  anon_user_id_in: [Int!]

  """
  All values that are not contained in given list.
  """
  anon_user_id_not_in: [Int!]

  """
  All values less than the given value.
  """
  anon_user_id_lt: Int

  """
  All values less than or equal the given value.
  """
  anon_user_id_lte: Int

  """
  All values greater than the given value.
  """
  anon_user_id_gt: Int

  """
  All values greater than or equal the given value.
  """
  anon_user_id_gte: Int
  deleted: Boolean

  """
  All values that are not equal to given value.
  """
  deleted_not: Boolean
  dob: DateTime

  """
  All values that are not equal to given value.
  """
  dob_not: DateTime

  """
  All values that are contained in given list.
  """
  dob_in: [DateTime!]

  """
  All values that are not contained in given list.
  """
  dob_not_in: [DateTime!]

  """
  All values less than the given value.
  """
  dob_lt: DateTime

  """
  All values less than or equal the given value.
  """
  dob_lte: DateTime

  """
  All values greater than the given value.
  """
  dob_gt: DateTime

  """
  All values greater than or equal the given value.
  """
  dob_gte: DateTime
  email: String

  """
  All values that are not equal to given value.
  """
  email_not: String

  """
  All values that are contained in given list.
  """
  email_in: [String!]

  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]

  """
  All values less than the given value.
  """
  email_lt: String

  """
  All values less than or equal the given value.
  """
  email_lte: String

  """
  All values greater than the given value.
  """
  email_gt: String

  """
  All values greater than or equal the given value.
  """
  email_gte: String

  """
  All values containing the given string.
  """
  email_contains: String

  """
  All values not containing the given string.
  """
  email_not_contains: String

  """
  All values starting with the given string.
  """
  email_starts_with: String

  """
  All values not starting with the given string.
  """
  email_not_starts_with: String

  """
  All values ending with the given string.
  """
  email_ends_with: String

  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  encrypt_salt_string: String

  """
  All values that are not equal to given value.
  """
  encrypt_salt_string_not: String

  """
  All values that are contained in given list.
  """
  encrypt_salt_string_in: [String!]

  """
  All values that are not contained in given list.
  """
  encrypt_salt_string_not_in: [String!]

  """
  All values less than the given value.
  """
  encrypt_salt_string_lt: String

  """
  All values less than or equal the given value.
  """
  encrypt_salt_string_lte: String

  """
  All values greater than the given value.
  """
  encrypt_salt_string_gt: String

  """
  All values greater than or equal the given value.
  """
  encrypt_salt_string_gte: String

  """
  All values containing the given string.
  """
  encrypt_salt_string_contains: String

  """
  All values not containing the given string.
  """
  encrypt_salt_string_not_contains: String

  """
  All values starting with the given string.
  """
  encrypt_salt_string_starts_with: String

  """
  All values not starting with the given string.
  """
  encrypt_salt_string_not_starts_with: String

  """
  All values ending with the given string.
  """
  encrypt_salt_string_ends_with: String

  """
  All values not ending with the given string.
  """
  encrypt_salt_string_not_ends_with: String
  first_name: String

  """
  All values that are not equal to given value.
  """
  first_name_not: String

  """
  All values that are contained in given list.
  """
  first_name_in: [String!]

  """
  All values that are not contained in given list.
  """
  first_name_not_in: [String!]

  """
  All values less than the given value.
  """
  first_name_lt: String

  """
  All values less than or equal the given value.
  """
  first_name_lte: String

  """
  All values greater than the given value.
  """
  first_name_gt: String

  """
  All values greater than or equal the given value.
  """
  first_name_gte: String

  """
  All values containing the given string.
  """
  first_name_contains: String

  """
  All values not containing the given string.
  """
  first_name_not_contains: String

  """
  All values starting with the given string.
  """
  first_name_starts_with: String

  """
  All values not starting with the given string.
  """
  first_name_not_starts_with: String

  """
  All values ending with the given string.
  """
  first_name_ends_with: String

  """
  All values not ending with the given string.
  """
  first_name_not_ends_with: String
  given_birth: Boolean

  """
  All values that are not equal to given value.
  """
  given_birth_not: Boolean
  last_name: String

  """
  All values that are not equal to given value.
  """
  last_name_not: String

  """
  All values that are contained in given list.
  """
  last_name_in: [String!]

  """
  All values that are not contained in given list.
  """
  last_name_not_in: [String!]

  """
  All values less than the given value.
  """
  last_name_lt: String

  """
  All values less than or equal the given value.
  """
  last_name_lte: String

  """
  All values greater than the given value.
  """
  last_name_gt: String

  """
  All values greater than or equal the given value.
  """
  last_name_gte: String

  """
  All values containing the given string.
  """
  last_name_contains: String

  """
  All values not containing the given string.
  """
  last_name_not_contains: String

  """
  All values starting with the given string.
  """
  last_name_starts_with: String

  """
  All values not starting with the given string.
  """
  last_name_not_starts_with: String

  """
  All values ending with the given string.
  """
  last_name_ends_with: String

  """
  All values not ending with the given string.
  """
  last_name_not_ends_with: String
  password: String

  """
  All values that are not equal to given value.
  """
  password_not: String

  """
  All values that are contained in given list.
  """
  password_in: [String!]

  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]

  """
  All values less than the given value.
  """
  password_lt: String

  """
  All values less than or equal the given value.
  """
  password_lte: String

  """
  All values greater than the given value.
  """
  password_gt: String

  """
  All values greater than or equal the given value.
  """
  password_gte: String

  """
  All values containing the given string.
  """
  password_contains: String

  """
  All values not containing the given string.
  """
  password_not_contains: String

  """
  All values starting with the given string.
  """
  password_starts_with: String

  """
  All values not starting with the given string.
  """
  password_not_starts_with: String

  """
  All values ending with the given string.
  """
  password_ends_with: String

  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  app_server_syncs_every: App_server_syncWhereInput
  app_server_syncs_some: App_server_syncWhereInput
  app_server_syncs_none: App_server_syncWhereInput
  auth_tokens_every: Auth_tokenWhereInput
  auth_tokens_some: Auth_tokenWhereInput
  auth_tokens_none: Auth_tokenWhereInput
  country: CountryWhereInput
  cup_data_proc_flows_every: Cup_data_proc_flowWhereInput
  cup_data_proc_flows_some: Cup_data_proc_flowWhereInput
  cup_data_proc_flows_none: Cup_data_proc_flowWhereInput
  cup_data_proc_mdates_every: Cup_data_proc_mdatesWhereInput
  cup_data_proc_mdates_some: Cup_data_proc_mdatesWhereInput
  cup_data_proc_mdates_none: Cup_data_proc_mdatesWhereInput
  cup_data_qa_responses_every: Cup_data_qa_responseWhereInput
  cup_data_qa_responses_some: Cup_data_qa_responseWhereInput
  cup_data_qa_responses_none: Cup_data_qa_responseWhereInput
  cup_data_user_removes_every: Cup_data_user_removeWhereInput
  cup_data_user_removes_some: Cup_data_user_removeWhereInput
  cup_data_user_removes_none: Cup_data_user_removeWhereInput
  ethnicity: EthnicityWhereInput
  user_coin_histories_every: User_coin_historyWhereInput
  user_coin_histories_some: User_coin_historyWhereInput
  user_coin_histories_none: User_coin_historyWhereInput
  user_cups_every: User_cupsWhereInput
  user_cups_some: User_cupsWhereInput
  user_cups_none: User_cupsWhereInput
  user_interview_data_every: User_interview_dataWhereInput
  user_interview_data_some: User_interview_dataWhereInput
  user_interview_data_none: User_interview_dataWhereInput
  user_record_data_by_periods_every: User_record_data_by_periodWhereInput
  user_record_data_by_periods_some: User_record_data_by_periodWhereInput
  user_record_data_by_periods_none: User_record_data_by_periodWhereInput
}

input UsersWhereUniqueInput {
  id: Int
  anon_user_id: Int
  email: String
}
