# import Query.*, Mutation.* from "../generated/prisma.graphql"

type Mutation {
    signin(email: String!, password: String!): getNewTokenPayload
    signup(
        email: String!
        password: String!
        deleted: Boolean
        dob: DateTime!
        given_birth: Boolean!
        first_name: String!
        last_name: String!
        country_id: Int!
        ethnicity_id: Int!
        user_cups: UserCupCreateManyWithoutUserIdInput
        emailVerify: Boolean!
    ): AuthPayload
    getNewToken(email: String!): getNewTokenPayload
    gettesttoken(email: String!, password: String!): Tokens
    registerCup(anon_serial_number: Int!): CupInfo
    runPerlScript(userId: Int!): scriptResult
    getCupData(userId: Int!, mdateRowIdArray: String!): scriptResult
    signinDataAnalysis(userId: String!, password: String!): userResult
    createTxUserCoinHistory(
        userId: Int!
        address: String
        category: String!
        contents: String!
        coin: Int!
        date: DateTime!
        fromAddress: String
        fromPkey: String
    ): UserCoinHistory!
    createTxMarketBuyHistory(
        userId: Int!
        address: String!
        pKey: String!
        marketListId: Int!,
        category: String,
    ): TxMarketBuyHistory!
    changeCouponCount(
        marketListId: Int!
        plusYn: Boolean
    ): MarketBuyHistory!
    # changePassword(
    #     email: String!
    #     password: String!
    # ): User!
}

type TxMarketBuyHistory {
    id: Int!
    cancelYn: Boolean
    category: String
    coinHistoryRowId: UserCoinHistory
    createTime: DateTime!
    orderNumber: String
    productId: Int
    coupon: MarketAmazonCoupon
    status: Boolean!
    updateTime: DateTime!
    userId: Int
}
type getNewTokenPayload {
    accessToken: String
    refreshToken: String
    user: User
    country: Country
    wallet: UserWallet
}
type AuthPayload {
    accessToken: String
    refreshToken: String
    user: User
    country: Country
}
type Tokens {
    accessToken: String
    refreshToken: String
}
type CupInfo {
    user_cup: UserCup
}
type scriptResult {
    result: String
}
type userResult {
    result: Boolean
}
