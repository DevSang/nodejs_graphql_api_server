# import Query.*, Mutation.* from "../generated/prisma.graphql"

type Mutation {
    signin(email: String!, password: String!): getNewTokenPayload
    signup(
        email: String!
        password: String!
        deleted: Boolean
        dob: DateTime!
        given_birth: Boolean!
        first_name: String!
        last_name: String!
        country_id: Int!
        ethnicity_id: Int!
        user_cups: UserCupCreateManyWithoutUserIdInput
        emailVerify: Boolean!
    ): AuthPayload
    getNewToken(email: String!): getNewTokenPayload
    gettesttoken(email: String!, password: String!): Tokens
    registerCup(anon_serial_number: Int!): CupInfo
    runPerlScript(userId: Int!): scriptResult
    getCupData(userId: Int!, mdateRowIdArray: String!): scriptResult
    signinDataAnalysis(userId: String!, password: String!): userResult
    createTxUserCoinHistory(
        userId: Int!
        address: String
        category: String!
        contents: String!
        date: DateTime!
        price: Int
        recordedDayCount: Int
        isImageColorCount: Int
        fromAddress: String
        fromPkey: String
    ): UserCoinHistory
    buyMarketCoupon(
        userId: Int!
        address: String!
        pKey: String!
        marketListId: Int!,
        category: String,
    ): TxMarketBuyHistory
    changeCouponCount(
        marketListId: Int!
        plusYn: Boolean
    ): MarketBuyHistory!
    changePasswordSignIn(
        email: String!
        password: String!
    ): getNewTokenPayload
    removeUserRecordCameraData(id: Int! deleteYn: Boolean): UserRecordCameraDataByTime
    registerUserWallet(
        email: String!
        userId: String!
        address: String!
    ): UserWallet
    recoverUserWallet(
        email: String!
        userId: Int
        address: String!
    ): UserWallet
    createCameraCoinHistory(
        cameraId: Int!
        userId: Int!
        periodCoinHistoryRowId: Int!
    ): UserCoinHistory
    getCameraDatas(
        changeTime: DateTime!
    ): [ CameraData ]
    getMenstualCups(
        id: Int
        cupName: String
        cupSize: String
        rimDiameter: Int
        bodyLength: Int
        stemLength: Int
        totalLength: Int
        stemType: String
        quarterVolume: Int
        halfVolume: Int
        threeFourthVolume: Int
        totalVolume: Int
    ): [MenstualCup]
    getUserMenstualCupInfo(
        userId: Int!
    ): UserMenstualCupInfo
    getUserData(
        userId: Int!
    ): UserContryData
    buyCustomCup(
        userId: Int
        address: String
        pKey: String
        marketListId: Int
        rimDiameter: Float
        bodyLength: Float
        stemType: String
        firmness: String
        airHoles: String
        lettering: String
        letteringText: String
        userName: String
        email:String
        address1: String
        address2: String
        city: String
        country: String
        postalCode: String
        phoneCountry: String
        phoneNumber: String
        addtionalSuggestion: String
    ) : MarketCustomize
}

type UserContryData {
    user: User
    country: Country
}

type UserMenstualCupInfo {
    name: String
    size: String
    cupData: [MenstualCupData]
}
type MenstualCupData {
    size: String
    rim: Float
    body: Float
}

type CameraData {
    periodDataId: Int
    user: User
    coinHistoryRowId: Int
    cameraCoinHistoryId: Int
    timeDataId: Int
    changeTime: DateTime
    color: String
    cameraDataId: Int
    id: Int
    confirmYn: Boolean
    deleteYn: Boolean
    height: Int
    imagePath: String
    locationX: Float
    locationY: Float
    size: Int
    width: Int
}

type TxMarketBuyHistory {
    id: Int!
    cancelYn: Boolean
    category: String
    coinHistoryRowId: UserCoinHistory
    createTime: DateTime!
    orderNumber: String
    productId: Int
    coupon: MarketAmazonCoupon
    status: Boolean!
    updateTime: DateTime!
    userId: Int
}
type getNewTokenPayload {
    accessToken: String
    refreshToken: String
    user: User
    country: Country
    wallet: UserWallet
}
type AuthPayload {
    accessToken: String
    refreshToken: String
    user: User
    country: Country
}
type Tokens {
    accessToken: String
    refreshToken: String
}
type CupInfo {
    user_cup: UserCup
}
type scriptResult {
    result: String
}
type userResult {
    result: Boolean
}
