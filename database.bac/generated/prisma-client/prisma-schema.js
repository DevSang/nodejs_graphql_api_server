module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.30.5). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAnswerType {
  count: Int!
}

type AggregateAppServerSync {
  count: Int!
}

type AggregateAuthToken {
  count: Int!
}

type AggregateCalibration {
  count: Int!
}

type AggregateCompany {
  count: Int!
}

type AggregateCountry {
  count: Int!
}

type AggregateCup {
  count: Int!
}

type AggregateCupAppSync {
  count: Int!
}

type AggregateCupDataAnswer {
  count: Int!
}

type AggregateCupDataColourCalc {
  count: Int!
}

type AggregateCupDataColourCalib {
  count: Int!
}

type AggregateCupDataManMdate {
  count: Int!
}

type AggregateCupDataProcFlow {
  count: Int!
}

type AggregateCupDataProcMdate {
  count: Int!
}

type AggregateCupDataProcVolume {
  count: Int!
}

type AggregateCupDataQaResponse {
  count: Int!
}

type AggregateCupDataQuestion {
  count: Int!
}

type AggregateCupDataRaw {
  count: Int!
}

type AggregateCupDataRejection {
  count: Int!
}

type AggregateCupDataUserRemove {
  count: Int!
}

type AggregateCupDataUserRemoveExplain {
  count: Int!
}

type AggregateCupDatum {
  count: Int!
}

type AggregateEthnicity {
  count: Int!
}

type AggregateFirmware {
  count: Int!
}

type AggregateHardware {
  count: Int!
}

type AggregatePlatformComp {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserCoinHistory {
  count: Int!
}

type AggregateUserCup {
  count: Int!
}

type AggregateUserInterviewDatum {
  count: Int!
}

type AggregateUserInterviewQuestion {
  count: Int!
}

type AggregateUserRecordDataByDay {
  count: Int!
}

type AggregateUserRecordDataByPeriod {
  count: Int!
}

type AggregateUserRecordDataByTime {
  count: Int!
}

type AggregateUsersDataAnalysis {
  count: Int!
}

type AnswerType {
  id: Int!
  answerType: String!
  userInterviewQuestions(where: UserInterviewQuestionWhereInput, orderBy: UserInterviewQuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserInterviewQuestion!]
}

type AnswerTypeConnection {
  pageInfo: PageInfo!
  edges: [AnswerTypeEdge]!
  aggregate: AggregateAnswerType!
}

input AnswerTypeCreateInput {
  answerType: String!
  userInterviewQuestions: UserInterviewQuestionCreateManyWithoutAnswerTypeIdInput
}

input AnswerTypeCreateOneWithoutUserInterviewQuestionsInput {
  create: AnswerTypeCreateWithoutUserInterviewQuestionsInput
  connect: AnswerTypeWhereUniqueInput
}

input AnswerTypeCreateWithoutUserInterviewQuestionsInput {
  answerType: String!
}

type AnswerTypeEdge {
  node: AnswerType!
  cursor: String!
}

enum AnswerTypeOrderByInput {
  id_ASC
  id_DESC
  answerType_ASC
  answerType_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AnswerTypePreviousValues {
  id: Int!
  answerType: String!
}

type AnswerTypeSubscriptionPayload {
  mutation: MutationType!
  node: AnswerType
  updatedFields: [String!]
  previousValues: AnswerTypePreviousValues
}

input AnswerTypeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AnswerTypeWhereInput
  AND: [AnswerTypeSubscriptionWhereInput!]
  OR: [AnswerTypeSubscriptionWhereInput!]
  NOT: [AnswerTypeSubscriptionWhereInput!]
}

input AnswerTypeUpdateInput {
  answerType: String
  userInterviewQuestions: UserInterviewQuestionUpdateManyWithoutAnswerTypeIdInput
}

input AnswerTypeUpdateManyMutationInput {
  answerType: String
}

input AnswerTypeUpdateOneRequiredWithoutUserInterviewQuestionsInput {
  create: AnswerTypeCreateWithoutUserInterviewQuestionsInput
  update: AnswerTypeUpdateWithoutUserInterviewQuestionsDataInput
  upsert: AnswerTypeUpsertWithoutUserInterviewQuestionsInput
  connect: AnswerTypeWhereUniqueInput
}

input AnswerTypeUpdateWithoutUserInterviewQuestionsDataInput {
  answerType: String
}

input AnswerTypeUpsertWithoutUserInterviewQuestionsInput {
  update: AnswerTypeUpdateWithoutUserInterviewQuestionsDataInput!
  create: AnswerTypeCreateWithoutUserInterviewQuestionsInput!
}

input AnswerTypeWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  answerType: String
  answerType_not: String
  answerType_in: [String!]
  answerType_not_in: [String!]
  answerType_lt: String
  answerType_lte: String
  answerType_gt: String
  answerType_gte: String
  answerType_contains: String
  answerType_not_contains: String
  answerType_starts_with: String
  answerType_not_starts_with: String
  answerType_ends_with: String
  answerType_not_ends_with: String
  userInterviewQuestions_every: UserInterviewQuestionWhereInput
  userInterviewQuestions_some: UserInterviewQuestionWhereInput
  userInterviewQuestions_none: UserInterviewQuestionWhereInput
  AND: [AnswerTypeWhereInput!]
  OR: [AnswerTypeWhereInput!]
  NOT: [AnswerTypeWhereInput!]
}

input AnswerTypeWhereUniqueInput {
  id: Int
  answerType: String
}

type AppServerSync {
  id: Int!
  serverSynchTime: DateTime!
  userId: User!
}

type AppServerSyncConnection {
  pageInfo: PageInfo!
  edges: [AppServerSyncEdge]!
  aggregate: AggregateAppServerSync!
}

input AppServerSyncCreateInput {
  serverSynchTime: DateTime!
  userId: UserCreateOneWithoutAppServerSyncInput!
}

input AppServerSyncCreateManyWithoutUserIdInput {
  create: [AppServerSyncCreateWithoutUserIdInput!]
  connect: [AppServerSyncWhereUniqueInput!]
}

input AppServerSyncCreateWithoutUserIdInput {
  serverSynchTime: DateTime!
}

type AppServerSyncEdge {
  node: AppServerSync!
  cursor: String!
}

enum AppServerSyncOrderByInput {
  id_ASC
  id_DESC
  serverSynchTime_ASC
  serverSynchTime_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AppServerSyncPreviousValues {
  id: Int!
  serverSynchTime: DateTime!
}

input AppServerSyncScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  serverSynchTime: DateTime
  serverSynchTime_not: DateTime
  serverSynchTime_in: [DateTime!]
  serverSynchTime_not_in: [DateTime!]
  serverSynchTime_lt: DateTime
  serverSynchTime_lte: DateTime
  serverSynchTime_gt: DateTime
  serverSynchTime_gte: DateTime
  AND: [AppServerSyncScalarWhereInput!]
  OR: [AppServerSyncScalarWhereInput!]
  NOT: [AppServerSyncScalarWhereInput!]
}

type AppServerSyncSubscriptionPayload {
  mutation: MutationType!
  node: AppServerSync
  updatedFields: [String!]
  previousValues: AppServerSyncPreviousValues
}

input AppServerSyncSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AppServerSyncWhereInput
  AND: [AppServerSyncSubscriptionWhereInput!]
  OR: [AppServerSyncSubscriptionWhereInput!]
  NOT: [AppServerSyncSubscriptionWhereInput!]
}

input AppServerSyncUpdateInput {
  serverSynchTime: DateTime
  userId: UserUpdateOneRequiredWithoutAppServerSyncInput
}

input AppServerSyncUpdateManyDataInput {
  serverSynchTime: DateTime
}

input AppServerSyncUpdateManyMutationInput {
  serverSynchTime: DateTime
}

input AppServerSyncUpdateManyWithoutUserIdInput {
  create: [AppServerSyncCreateWithoutUserIdInput!]
  delete: [AppServerSyncWhereUniqueInput!]
  connect: [AppServerSyncWhereUniqueInput!]
  set: [AppServerSyncWhereUniqueInput!]
  disconnect: [AppServerSyncWhereUniqueInput!]
  update: [AppServerSyncUpdateWithWhereUniqueWithoutUserIdInput!]
  upsert: [AppServerSyncUpsertWithWhereUniqueWithoutUserIdInput!]
  deleteMany: [AppServerSyncScalarWhereInput!]
  updateMany: [AppServerSyncUpdateManyWithWhereNestedInput!]
}

input AppServerSyncUpdateManyWithWhereNestedInput {
  where: AppServerSyncScalarWhereInput!
  data: AppServerSyncUpdateManyDataInput!
}

input AppServerSyncUpdateWithoutUserIdDataInput {
  serverSynchTime: DateTime
}

input AppServerSyncUpdateWithWhereUniqueWithoutUserIdInput {
  where: AppServerSyncWhereUniqueInput!
  data: AppServerSyncUpdateWithoutUserIdDataInput!
}

input AppServerSyncUpsertWithWhereUniqueWithoutUserIdInput {
  where: AppServerSyncWhereUniqueInput!
  update: AppServerSyncUpdateWithoutUserIdDataInput!
  create: AppServerSyncCreateWithoutUserIdInput!
}

input AppServerSyncWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  serverSynchTime: DateTime
  serverSynchTime_not: DateTime
  serverSynchTime_in: [DateTime!]
  serverSynchTime_not_in: [DateTime!]
  serverSynchTime_lt: DateTime
  serverSynchTime_lte: DateTime
  serverSynchTime_gt: DateTime
  serverSynchTime_gte: DateTime
  userId: UserWhereInput
  AND: [AppServerSyncWhereInput!]
  OR: [AppServerSyncWhereInput!]
  NOT: [AppServerSyncWhereInput!]
}

input AppServerSyncWhereUniqueInput {
  id: Int
}

type AuthToken {
  id: Int!
}

type AuthTokenConnection {
  pageInfo: PageInfo!
  edges: [AuthTokenEdge]!
  aggregate: AggregateAuthToken!
}

type AuthTokenEdge {
  node: AuthToken!
  cursor: String!
}

enum AuthTokenOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AuthTokenPreviousValues {
  id: Int!
}

type AuthTokenSubscriptionPayload {
  mutation: MutationType!
  node: AuthToken
  updatedFields: [String!]
  previousValues: AuthTokenPreviousValues
}

input AuthTokenSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AuthTokenWhereInput
  AND: [AuthTokenSubscriptionWhereInput!]
  OR: [AuthTokenSubscriptionWhereInput!]
  NOT: [AuthTokenSubscriptionWhereInput!]
}

input AuthTokenWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  AND: [AuthTokenWhereInput!]
  OR: [AuthTokenWhereInput!]
  NOT: [AuthTokenWhereInput!]
}

input AuthTokenWhereUniqueInput {
  id: Int
}

type BatchPayload {
  count: Long!
}

type Calibration {
  id: Int!
  calibVersion: String!
  cup(where: CupWhereInput, orderBy: CupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cup!]
}

type CalibrationConnection {
  pageInfo: PageInfo!
  edges: [CalibrationEdge]!
  aggregate: AggregateCalibration!
}

input CalibrationCreateInput {
  calibVersion: String!
  cup: CupCreateManyWithoutCalibIdInput
}

input CalibrationCreateOneWithoutCupInput {
  create: CalibrationCreateWithoutCupInput
  connect: CalibrationWhereUniqueInput
}

input CalibrationCreateWithoutCupInput {
  calibVersion: String!
}

type CalibrationEdge {
  node: Calibration!
  cursor: String!
}

enum CalibrationOrderByInput {
  id_ASC
  id_DESC
  calibVersion_ASC
  calibVersion_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CalibrationPreviousValues {
  id: Int!
  calibVersion: String!
}

type CalibrationSubscriptionPayload {
  mutation: MutationType!
  node: Calibration
  updatedFields: [String!]
  previousValues: CalibrationPreviousValues
}

input CalibrationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CalibrationWhereInput
  AND: [CalibrationSubscriptionWhereInput!]
  OR: [CalibrationSubscriptionWhereInput!]
  NOT: [CalibrationSubscriptionWhereInput!]
}

input CalibrationUpdateInput {
  calibVersion: String
  cup: CupUpdateManyWithoutCalibIdInput
}

input CalibrationUpdateManyMutationInput {
  calibVersion: String
}

input CalibrationUpdateOneWithoutCupInput {
  create: CalibrationCreateWithoutCupInput
  update: CalibrationUpdateWithoutCupDataInput
  upsert: CalibrationUpsertWithoutCupInput
  delete: Boolean
  disconnect: Boolean
  connect: CalibrationWhereUniqueInput
}

input CalibrationUpdateWithoutCupDataInput {
  calibVersion: String
}

input CalibrationUpsertWithoutCupInput {
  update: CalibrationUpdateWithoutCupDataInput!
  create: CalibrationCreateWithoutCupInput!
}

input CalibrationWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  calibVersion: String
  calibVersion_not: String
  calibVersion_in: [String!]
  calibVersion_not_in: [String!]
  calibVersion_lt: String
  calibVersion_lte: String
  calibVersion_gt: String
  calibVersion_gte: String
  calibVersion_contains: String
  calibVersion_not_contains: String
  calibVersion_starts_with: String
  calibVersion_not_starts_with: String
  calibVersion_ends_with: String
  calibVersion_not_ends_with: String
  cup_every: CupWhereInput
  cup_some: CupWhereInput
  cup_none: CupWhereInput
  AND: [CalibrationWhereInput!]
  OR: [CalibrationWhereInput!]
  NOT: [CalibrationWhereInput!]
}

input CalibrationWhereUniqueInput {
  id: Int
  calibVersion: String
}

type Company {
  id: Int!
  companyName: String!
  cup(where: CupWhereInput, orderBy: CupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cup!]
}

type CompanyConnection {
  pageInfo: PageInfo!
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  companyName: String!
  cup: CupCreateManyWithoutCompanyIdInput
}

input CompanyCreateOneWithoutCupInput {
  create: CompanyCreateWithoutCupInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutCupInput {
  companyName: String!
}

type CompanyEdge {
  node: Company!
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  companyName_ASC
  companyName_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CompanyPreviousValues {
  id: Int!
  companyName: String!
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
  AND: [CompanySubscriptionWhereInput!]
  OR: [CompanySubscriptionWhereInput!]
  NOT: [CompanySubscriptionWhereInput!]
}

input CompanyUpdateInput {
  companyName: String
  cup: CupUpdateManyWithoutCompanyIdInput
}

input CompanyUpdateManyMutationInput {
  companyName: String
}

input CompanyUpdateOneWithoutCupInput {
  create: CompanyCreateWithoutCupInput
  update: CompanyUpdateWithoutCupDataInput
  upsert: CompanyUpsertWithoutCupInput
  delete: Boolean
  disconnect: Boolean
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateWithoutCupDataInput {
  companyName: String
}

input CompanyUpsertWithoutCupInput {
  update: CompanyUpdateWithoutCupDataInput!
  create: CompanyCreateWithoutCupInput!
}

input CompanyWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  companyName: String
  companyName_not: String
  companyName_in: [String!]
  companyName_not_in: [String!]
  companyName_lt: String
  companyName_lte: String
  companyName_gt: String
  companyName_gte: String
  companyName_contains: String
  companyName_not_contains: String
  companyName_starts_with: String
  companyName_not_starts_with: String
  companyName_ends_with: String
  companyName_not_ends_with: String
  cup_every: CupWhereInput
  cup_some: CupWhereInput
  cup_none: CupWhereInput
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
}

input CompanyWhereUniqueInput {
  id: Int
  companyName: String
}

type Country {
  id: Int!
  countryName: String!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type CountryConnection {
  pageInfo: PageInfo!
  edges: [CountryEdge]!
  aggregate: AggregateCountry!
}

input CountryCreateInput {
  countryName: String!
  users: UserCreateManyWithoutCountryIdInput
}

input CountryCreateOneWithoutUsersInput {
  create: CountryCreateWithoutUsersInput
  connect: CountryWhereUniqueInput
}

input CountryCreateWithoutUsersInput {
  countryName: String!
}

type CountryEdge {
  node: Country!
  cursor: String!
}

enum CountryOrderByInput {
  id_ASC
  id_DESC
  countryName_ASC
  countryName_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CountryPreviousValues {
  id: Int!
  countryName: String!
}

type CountrySubscriptionPayload {
  mutation: MutationType!
  node: Country
  updatedFields: [String!]
  previousValues: CountryPreviousValues
}

input CountrySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CountryWhereInput
  AND: [CountrySubscriptionWhereInput!]
  OR: [CountrySubscriptionWhereInput!]
  NOT: [CountrySubscriptionWhereInput!]
}

input CountryUpdateInput {
  countryName: String
  users: UserUpdateManyWithoutCountryIdInput
}

input CountryUpdateManyMutationInput {
  countryName: String
}

input CountryUpdateOneWithoutUsersInput {
  create: CountryCreateWithoutUsersInput
  update: CountryUpdateWithoutUsersDataInput
  upsert: CountryUpsertWithoutUsersInput
  delete: Boolean
  disconnect: Boolean
  connect: CountryWhereUniqueInput
}

input CountryUpdateWithoutUsersDataInput {
  countryName: String
}

input CountryUpsertWithoutUsersInput {
  update: CountryUpdateWithoutUsersDataInput!
  create: CountryCreateWithoutUsersInput!
}

input CountryWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  countryName: String
  countryName_not: String
  countryName_in: [String!]
  countryName_not_in: [String!]
  countryName_lt: String
  countryName_lte: String
  countryName_gt: String
  countryName_gte: String
  countryName_contains: String
  countryName_not_contains: String
  countryName_starts_with: String
  countryName_not_starts_with: String
  countryName_ends_with: String
  countryName_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  AND: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
}

input CountryWhereUniqueInput {
  id: Int
  countryName: String
}

type Cup {
  id: Int!
  anonSerialNumber: Int!
  calibId: Calibration
  companyId: Company
  cupAppSync(where: CupAppSyncWhereInput, orderBy: CupAppSyncOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupAppSync!]
  cupData(where: CupDatumWhereInput, orderBy: CupDatumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDatum!]
  cupDataColourCalib(where: CupDataColourCalibWhereInput, orderBy: CupDataColourCalibOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataColourCalib!]
  cupDataRaw(where: CupDataRawWhereInput, orderBy: CupDataRawOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataRaw!]
  cupDataUserRemove(where: CupDataUserRemoveWhereInput, orderBy: CupDataUserRemoveOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataUserRemove!]
  encryptionKey: Int!
  fwId: Firmware
  hwId: Hardware
  userCups(where: UserCupWhereInput, orderBy: UserCupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserCup!]
}

type CupAppSync {
  id: Int!
  appSynchTime: DateTime!
  serialNumber: Cup!
}

type CupAppSyncConnection {
  pageInfo: PageInfo!
  edges: [CupAppSyncEdge]!
  aggregate: AggregateCupAppSync!
}

input CupAppSyncCreateInput {
  appSynchTime: DateTime!
  serialNumber: CupCreateOneWithoutCupAppSyncInput!
}

input CupAppSyncCreateManyWithoutSerialNumberInput {
  create: [CupAppSyncCreateWithoutSerialNumberInput!]
  connect: [CupAppSyncWhereUniqueInput!]
}

input CupAppSyncCreateWithoutSerialNumberInput {
  appSynchTime: DateTime!
}

type CupAppSyncEdge {
  node: CupAppSync!
  cursor: String!
}

enum CupAppSyncOrderByInput {
  id_ASC
  id_DESC
  appSynchTime_ASC
  appSynchTime_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CupAppSyncPreviousValues {
  id: Int!
  appSynchTime: DateTime!
}

input CupAppSyncScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  appSynchTime: DateTime
  appSynchTime_not: DateTime
  appSynchTime_in: [DateTime!]
  appSynchTime_not_in: [DateTime!]
  appSynchTime_lt: DateTime
  appSynchTime_lte: DateTime
  appSynchTime_gt: DateTime
  appSynchTime_gte: DateTime
  AND: [CupAppSyncScalarWhereInput!]
  OR: [CupAppSyncScalarWhereInput!]
  NOT: [CupAppSyncScalarWhereInput!]
}

type CupAppSyncSubscriptionPayload {
  mutation: MutationType!
  node: CupAppSync
  updatedFields: [String!]
  previousValues: CupAppSyncPreviousValues
}

input CupAppSyncSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CupAppSyncWhereInput
  AND: [CupAppSyncSubscriptionWhereInput!]
  OR: [CupAppSyncSubscriptionWhereInput!]
  NOT: [CupAppSyncSubscriptionWhereInput!]
}

input CupAppSyncUpdateInput {
  appSynchTime: DateTime
  serialNumber: CupUpdateOneRequiredWithoutCupAppSyncInput
}

input CupAppSyncUpdateManyDataInput {
  appSynchTime: DateTime
}

input CupAppSyncUpdateManyMutationInput {
  appSynchTime: DateTime
}

input CupAppSyncUpdateManyWithoutSerialNumberInput {
  create: [CupAppSyncCreateWithoutSerialNumberInput!]
  delete: [CupAppSyncWhereUniqueInput!]
  connect: [CupAppSyncWhereUniqueInput!]
  set: [CupAppSyncWhereUniqueInput!]
  disconnect: [CupAppSyncWhereUniqueInput!]
  update: [CupAppSyncUpdateWithWhereUniqueWithoutSerialNumberInput!]
  upsert: [CupAppSyncUpsertWithWhereUniqueWithoutSerialNumberInput!]
  deleteMany: [CupAppSyncScalarWhereInput!]
  updateMany: [CupAppSyncUpdateManyWithWhereNestedInput!]
}

input CupAppSyncUpdateManyWithWhereNestedInput {
  where: CupAppSyncScalarWhereInput!
  data: CupAppSyncUpdateManyDataInput!
}

input CupAppSyncUpdateWithoutSerialNumberDataInput {
  appSynchTime: DateTime
}

input CupAppSyncUpdateWithWhereUniqueWithoutSerialNumberInput {
  where: CupAppSyncWhereUniqueInput!
  data: CupAppSyncUpdateWithoutSerialNumberDataInput!
}

input CupAppSyncUpsertWithWhereUniqueWithoutSerialNumberInput {
  where: CupAppSyncWhereUniqueInput!
  update: CupAppSyncUpdateWithoutSerialNumberDataInput!
  create: CupAppSyncCreateWithoutSerialNumberInput!
}

input CupAppSyncWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  appSynchTime: DateTime
  appSynchTime_not: DateTime
  appSynchTime_in: [DateTime!]
  appSynchTime_not_in: [DateTime!]
  appSynchTime_lt: DateTime
  appSynchTime_lte: DateTime
  appSynchTime_gt: DateTime
  appSynchTime_gte: DateTime
  serialNumber: CupWhereInput
  AND: [CupAppSyncWhereInput!]
  OR: [CupAppSyncWhereInput!]
  NOT: [CupAppSyncWhereInput!]
}

input CupAppSyncWhereUniqueInput {
  id: Int
}

type CupConnection {
  pageInfo: PageInfo!
  edges: [CupEdge]!
  aggregate: AggregateCup!
}

input CupCreateInput {
  anonSerialNumber: Int!
  calibId: CalibrationCreateOneWithoutCupInput
  companyId: CompanyCreateOneWithoutCupInput
  cupAppSync: CupAppSyncCreateManyWithoutSerialNumberInput
  cupData: CupDatumCreateManyWithoutSerialNumberInput
  cupDataColourCalib: CupDataColourCalibCreateManyWithoutSerialNumberInput
  cupDataRaw: CupDataRawCreateManyWithoutSerialNumberInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutSerialNumberInput
  encryptionKey: Int!
  fwId: FirmwareCreateOneWithoutCupInput
  hwId: HardwareCreateOneWithoutCupInput
  userCups: UserCupCreateManyWithoutSerialNumberInput
}

input CupCreateManyWithoutCalibIdInput {
  create: [CupCreateWithoutCalibIdInput!]
  connect: [CupWhereUniqueInput!]
}

input CupCreateManyWithoutCompanyIdInput {
  create: [CupCreateWithoutCompanyIdInput!]
  connect: [CupWhereUniqueInput!]
}

input CupCreateManyWithoutFwIdInput {
  create: [CupCreateWithoutFwIdInput!]
  connect: [CupWhereUniqueInput!]
}

input CupCreateManyWithoutHwIdInput {
  create: [CupCreateWithoutHwIdInput!]
  connect: [CupWhereUniqueInput!]
}

input CupCreateOneWithoutCupAppSyncInput {
  create: CupCreateWithoutCupAppSyncInput
  connect: CupWhereUniqueInput
}

input CupCreateOneWithoutCupDataColourCalibInput {
  create: CupCreateWithoutCupDataColourCalibInput
  connect: CupWhereUniqueInput
}

input CupCreateOneWithoutCupDataInput {
  create: CupCreateWithoutCupDataInput
  connect: CupWhereUniqueInput
}

input CupCreateOneWithoutCupDataRawInput {
  create: CupCreateWithoutCupDataRawInput
  connect: CupWhereUniqueInput
}

input CupCreateOneWithoutCupDataUserRemoveInput {
  create: CupCreateWithoutCupDataUserRemoveInput
  connect: CupWhereUniqueInput
}

input CupCreateOneWithoutUserCupsInput {
  create: CupCreateWithoutUserCupsInput
  connect: CupWhereUniqueInput
}

input CupCreateWithoutCalibIdInput {
  anonSerialNumber: Int!
  companyId: CompanyCreateOneWithoutCupInput
  cupAppSync: CupAppSyncCreateManyWithoutSerialNumberInput
  cupData: CupDatumCreateManyWithoutSerialNumberInput
  cupDataColourCalib: CupDataColourCalibCreateManyWithoutSerialNumberInput
  cupDataRaw: CupDataRawCreateManyWithoutSerialNumberInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutSerialNumberInput
  encryptionKey: Int!
  fwId: FirmwareCreateOneWithoutCupInput
  hwId: HardwareCreateOneWithoutCupInput
  userCups: UserCupCreateManyWithoutSerialNumberInput
}

input CupCreateWithoutCompanyIdInput {
  anonSerialNumber: Int!
  calibId: CalibrationCreateOneWithoutCupInput
  cupAppSync: CupAppSyncCreateManyWithoutSerialNumberInput
  cupData: CupDatumCreateManyWithoutSerialNumberInput
  cupDataColourCalib: CupDataColourCalibCreateManyWithoutSerialNumberInput
  cupDataRaw: CupDataRawCreateManyWithoutSerialNumberInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutSerialNumberInput
  encryptionKey: Int!
  fwId: FirmwareCreateOneWithoutCupInput
  hwId: HardwareCreateOneWithoutCupInput
  userCups: UserCupCreateManyWithoutSerialNumberInput
}

input CupCreateWithoutCupAppSyncInput {
  anonSerialNumber: Int!
  calibId: CalibrationCreateOneWithoutCupInput
  companyId: CompanyCreateOneWithoutCupInput
  cupData: CupDatumCreateManyWithoutSerialNumberInput
  cupDataColourCalib: CupDataColourCalibCreateManyWithoutSerialNumberInput
  cupDataRaw: CupDataRawCreateManyWithoutSerialNumberInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutSerialNumberInput
  encryptionKey: Int!
  fwId: FirmwareCreateOneWithoutCupInput
  hwId: HardwareCreateOneWithoutCupInput
  userCups: UserCupCreateManyWithoutSerialNumberInput
}

input CupCreateWithoutCupDataColourCalibInput {
  anonSerialNumber: Int!
  calibId: CalibrationCreateOneWithoutCupInput
  companyId: CompanyCreateOneWithoutCupInput
  cupAppSync: CupAppSyncCreateManyWithoutSerialNumberInput
  cupData: CupDatumCreateManyWithoutSerialNumberInput
  cupDataRaw: CupDataRawCreateManyWithoutSerialNumberInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutSerialNumberInput
  encryptionKey: Int!
  fwId: FirmwareCreateOneWithoutCupInput
  hwId: HardwareCreateOneWithoutCupInput
  userCups: UserCupCreateManyWithoutSerialNumberInput
}

input CupCreateWithoutCupDataInput {
  anonSerialNumber: Int!
  calibId: CalibrationCreateOneWithoutCupInput
  companyId: CompanyCreateOneWithoutCupInput
  cupAppSync: CupAppSyncCreateManyWithoutSerialNumberInput
  cupDataColourCalib: CupDataColourCalibCreateManyWithoutSerialNumberInput
  cupDataRaw: CupDataRawCreateManyWithoutSerialNumberInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutSerialNumberInput
  encryptionKey: Int!
  fwId: FirmwareCreateOneWithoutCupInput
  hwId: HardwareCreateOneWithoutCupInput
  userCups: UserCupCreateManyWithoutSerialNumberInput
}

input CupCreateWithoutCupDataRawInput {
  anonSerialNumber: Int!
  calibId: CalibrationCreateOneWithoutCupInput
  companyId: CompanyCreateOneWithoutCupInput
  cupAppSync: CupAppSyncCreateManyWithoutSerialNumberInput
  cupData: CupDatumCreateManyWithoutSerialNumberInput
  cupDataColourCalib: CupDataColourCalibCreateManyWithoutSerialNumberInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutSerialNumberInput
  encryptionKey: Int!
  fwId: FirmwareCreateOneWithoutCupInput
  hwId: HardwareCreateOneWithoutCupInput
  userCups: UserCupCreateManyWithoutSerialNumberInput
}

input CupCreateWithoutCupDataUserRemoveInput {
  anonSerialNumber: Int!
  calibId: CalibrationCreateOneWithoutCupInput
  companyId: CompanyCreateOneWithoutCupInput
  cupAppSync: CupAppSyncCreateManyWithoutSerialNumberInput
  cupData: CupDatumCreateManyWithoutSerialNumberInput
  cupDataColourCalib: CupDataColourCalibCreateManyWithoutSerialNumberInput
  cupDataRaw: CupDataRawCreateManyWithoutSerialNumberInput
  encryptionKey: Int!
  fwId: FirmwareCreateOneWithoutCupInput
  hwId: HardwareCreateOneWithoutCupInput
  userCups: UserCupCreateManyWithoutSerialNumberInput
}

input CupCreateWithoutFwIdInput {
  anonSerialNumber: Int!
  calibId: CalibrationCreateOneWithoutCupInput
  companyId: CompanyCreateOneWithoutCupInput
  cupAppSync: CupAppSyncCreateManyWithoutSerialNumberInput
  cupData: CupDatumCreateManyWithoutSerialNumberInput
  cupDataColourCalib: CupDataColourCalibCreateManyWithoutSerialNumberInput
  cupDataRaw: CupDataRawCreateManyWithoutSerialNumberInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutSerialNumberInput
  encryptionKey: Int!
  hwId: HardwareCreateOneWithoutCupInput
  userCups: UserCupCreateManyWithoutSerialNumberInput
}

input CupCreateWithoutHwIdInput {
  anonSerialNumber: Int!
  calibId: CalibrationCreateOneWithoutCupInput
  companyId: CompanyCreateOneWithoutCupInput
  cupAppSync: CupAppSyncCreateManyWithoutSerialNumberInput
  cupData: CupDatumCreateManyWithoutSerialNumberInput
  cupDataColourCalib: CupDataColourCalibCreateManyWithoutSerialNumberInput
  cupDataRaw: CupDataRawCreateManyWithoutSerialNumberInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutSerialNumberInput
  encryptionKey: Int!
  fwId: FirmwareCreateOneWithoutCupInput
  userCups: UserCupCreateManyWithoutSerialNumberInput
}

input CupCreateWithoutUserCupsInput {
  anonSerialNumber: Int!
  calibId: CalibrationCreateOneWithoutCupInput
  companyId: CompanyCreateOneWithoutCupInput
  cupAppSync: CupAppSyncCreateManyWithoutSerialNumberInput
  cupData: CupDatumCreateManyWithoutSerialNumberInput
  cupDataColourCalib: CupDataColourCalibCreateManyWithoutSerialNumberInput
  cupDataRaw: CupDataRawCreateManyWithoutSerialNumberInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutSerialNumberInput
  encryptionKey: Int!
  fwId: FirmwareCreateOneWithoutCupInput
  hwId: HardwareCreateOneWithoutCupInput
}

type CupDataAnswer {
  id: Int!
  answerText: String!
  cupDataQaResponse(where: CupDataQaResponseWhereInput, orderBy: CupDataQaResponseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataQaResponse!]
  questionId: CupDataQuestion!
}

type CupDataAnswerConnection {
  pageInfo: PageInfo!
  edges: [CupDataAnswerEdge]!
  aggregate: AggregateCupDataAnswer!
}

input CupDataAnswerCreateInput {
  answerText: String!
  cupDataQaResponse: CupDataQaResponseCreateManyWithoutAnswerIdInput
  questionId: CupDataQuestionCreateOneWithoutCupDataAnswerInput!
}

input CupDataAnswerCreateManyWithoutQuestionIdInput {
  create: [CupDataAnswerCreateWithoutQuestionIdInput!]
  connect: [CupDataAnswerWhereUniqueInput!]
}

input CupDataAnswerCreateOneWithoutCupDataQaResponseInput {
  create: CupDataAnswerCreateWithoutCupDataQaResponseInput
  connect: CupDataAnswerWhereUniqueInput
}

input CupDataAnswerCreateWithoutCupDataQaResponseInput {
  answerText: String!
  questionId: CupDataQuestionCreateOneWithoutCupDataAnswerInput!
}

input CupDataAnswerCreateWithoutQuestionIdInput {
  answerText: String!
  cupDataQaResponse: CupDataQaResponseCreateManyWithoutAnswerIdInput
}

type CupDataAnswerEdge {
  node: CupDataAnswer!
  cursor: String!
}

enum CupDataAnswerOrderByInput {
  id_ASC
  id_DESC
  answerText_ASC
  answerText_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CupDataAnswerPreviousValues {
  id: Int!
  answerText: String!
}

input CupDataAnswerScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  answerText: String
  answerText_not: String
  answerText_in: [String!]
  answerText_not_in: [String!]
  answerText_lt: String
  answerText_lte: String
  answerText_gt: String
  answerText_gte: String
  answerText_contains: String
  answerText_not_contains: String
  answerText_starts_with: String
  answerText_not_starts_with: String
  answerText_ends_with: String
  answerText_not_ends_with: String
  AND: [CupDataAnswerScalarWhereInput!]
  OR: [CupDataAnswerScalarWhereInput!]
  NOT: [CupDataAnswerScalarWhereInput!]
}

type CupDataAnswerSubscriptionPayload {
  mutation: MutationType!
  node: CupDataAnswer
  updatedFields: [String!]
  previousValues: CupDataAnswerPreviousValues
}

input CupDataAnswerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CupDataAnswerWhereInput
  AND: [CupDataAnswerSubscriptionWhereInput!]
  OR: [CupDataAnswerSubscriptionWhereInput!]
  NOT: [CupDataAnswerSubscriptionWhereInput!]
}

input CupDataAnswerUpdateInput {
  answerText: String
  cupDataQaResponse: CupDataQaResponseUpdateManyWithoutAnswerIdInput
  questionId: CupDataQuestionUpdateOneRequiredWithoutCupDataAnswerInput
}

input CupDataAnswerUpdateManyDataInput {
  answerText: String
}

input CupDataAnswerUpdateManyMutationInput {
  answerText: String
}

input CupDataAnswerUpdateManyWithoutQuestionIdInput {
  create: [CupDataAnswerCreateWithoutQuestionIdInput!]
  delete: [CupDataAnswerWhereUniqueInput!]
  connect: [CupDataAnswerWhereUniqueInput!]
  set: [CupDataAnswerWhereUniqueInput!]
  disconnect: [CupDataAnswerWhereUniqueInput!]
  update: [CupDataAnswerUpdateWithWhereUniqueWithoutQuestionIdInput!]
  upsert: [CupDataAnswerUpsertWithWhereUniqueWithoutQuestionIdInput!]
  deleteMany: [CupDataAnswerScalarWhereInput!]
  updateMany: [CupDataAnswerUpdateManyWithWhereNestedInput!]
}

input CupDataAnswerUpdateManyWithWhereNestedInput {
  where: CupDataAnswerScalarWhereInput!
  data: CupDataAnswerUpdateManyDataInput!
}

input CupDataAnswerUpdateOneRequiredWithoutCupDataQaResponseInput {
  create: CupDataAnswerCreateWithoutCupDataQaResponseInput
  update: CupDataAnswerUpdateWithoutCupDataQaResponseDataInput
  upsert: CupDataAnswerUpsertWithoutCupDataQaResponseInput
  connect: CupDataAnswerWhereUniqueInput
}

input CupDataAnswerUpdateWithoutCupDataQaResponseDataInput {
  answerText: String
  questionId: CupDataQuestionUpdateOneRequiredWithoutCupDataAnswerInput
}

input CupDataAnswerUpdateWithoutQuestionIdDataInput {
  answerText: String
  cupDataQaResponse: CupDataQaResponseUpdateManyWithoutAnswerIdInput
}

input CupDataAnswerUpdateWithWhereUniqueWithoutQuestionIdInput {
  where: CupDataAnswerWhereUniqueInput!
  data: CupDataAnswerUpdateWithoutQuestionIdDataInput!
}

input CupDataAnswerUpsertWithoutCupDataQaResponseInput {
  update: CupDataAnswerUpdateWithoutCupDataQaResponseDataInput!
  create: CupDataAnswerCreateWithoutCupDataQaResponseInput!
}

input CupDataAnswerUpsertWithWhereUniqueWithoutQuestionIdInput {
  where: CupDataAnswerWhereUniqueInput!
  update: CupDataAnswerUpdateWithoutQuestionIdDataInput!
  create: CupDataAnswerCreateWithoutQuestionIdInput!
}

input CupDataAnswerWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  answerText: String
  answerText_not: String
  answerText_in: [String!]
  answerText_not_in: [String!]
  answerText_lt: String
  answerText_lte: String
  answerText_gt: String
  answerText_gte: String
  answerText_contains: String
  answerText_not_contains: String
  answerText_starts_with: String
  answerText_not_starts_with: String
  answerText_ends_with: String
  answerText_not_ends_with: String
  cupDataQaResponse_every: CupDataQaResponseWhereInput
  cupDataQaResponse_some: CupDataQaResponseWhereInput
  cupDataQaResponse_none: CupDataQaResponseWhereInput
  questionId: CupDataQuestionWhereInput
  AND: [CupDataAnswerWhereInput!]
  OR: [CupDataAnswerWhereInput!]
  NOT: [CupDataAnswerWhereInput!]
}

input CupDataAnswerWhereUniqueInput {
  id: Int
}

type CupDataColourCalc {
  id: Int!
  blue: Int!
  cupDataRowId: CupDatum!
  green: Int!
  red: Int!
}

type CupDataColourCalcConnection {
  pageInfo: PageInfo!
  edges: [CupDataColourCalcEdge]!
  aggregate: AggregateCupDataColourCalc!
}

input CupDataColourCalcCreateInput {
  blue: Int!
  cupDataRowId: CupDatumCreateOneWithoutCupDataColourCalcInput!
  green: Int!
  red: Int!
}

input CupDataColourCalcCreateManyWithoutCupDataRowIdInput {
  create: [CupDataColourCalcCreateWithoutCupDataRowIdInput!]
  connect: [CupDataColourCalcWhereUniqueInput!]
}

input CupDataColourCalcCreateWithoutCupDataRowIdInput {
  blue: Int!
  green: Int!
  red: Int!
}

type CupDataColourCalcEdge {
  node: CupDataColourCalc!
  cursor: String!
}

enum CupDataColourCalcOrderByInput {
  id_ASC
  id_DESC
  blue_ASC
  blue_DESC
  green_ASC
  green_DESC
  red_ASC
  red_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CupDataColourCalcPreviousValues {
  id: Int!
  blue: Int!
  green: Int!
  red: Int!
}

input CupDataColourCalcScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  blue: Int
  blue_not: Int
  blue_in: [Int!]
  blue_not_in: [Int!]
  blue_lt: Int
  blue_lte: Int
  blue_gt: Int
  blue_gte: Int
  green: Int
  green_not: Int
  green_in: [Int!]
  green_not_in: [Int!]
  green_lt: Int
  green_lte: Int
  green_gt: Int
  green_gte: Int
  red: Int
  red_not: Int
  red_in: [Int!]
  red_not_in: [Int!]
  red_lt: Int
  red_lte: Int
  red_gt: Int
  red_gte: Int
  AND: [CupDataColourCalcScalarWhereInput!]
  OR: [CupDataColourCalcScalarWhereInput!]
  NOT: [CupDataColourCalcScalarWhereInput!]
}

type CupDataColourCalcSubscriptionPayload {
  mutation: MutationType!
  node: CupDataColourCalc
  updatedFields: [String!]
  previousValues: CupDataColourCalcPreviousValues
}

input CupDataColourCalcSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CupDataColourCalcWhereInput
  AND: [CupDataColourCalcSubscriptionWhereInput!]
  OR: [CupDataColourCalcSubscriptionWhereInput!]
  NOT: [CupDataColourCalcSubscriptionWhereInput!]
}

input CupDataColourCalcUpdateInput {
  blue: Int
  cupDataRowId: CupDatumUpdateOneRequiredWithoutCupDataColourCalcInput
  green: Int
  red: Int
}

input CupDataColourCalcUpdateManyDataInput {
  blue: Int
  green: Int
  red: Int
}

input CupDataColourCalcUpdateManyMutationInput {
  blue: Int
  green: Int
  red: Int
}

input CupDataColourCalcUpdateManyWithoutCupDataRowIdInput {
  create: [CupDataColourCalcCreateWithoutCupDataRowIdInput!]
  delete: [CupDataColourCalcWhereUniqueInput!]
  connect: [CupDataColourCalcWhereUniqueInput!]
  set: [CupDataColourCalcWhereUniqueInput!]
  disconnect: [CupDataColourCalcWhereUniqueInput!]
  update: [CupDataColourCalcUpdateWithWhereUniqueWithoutCupDataRowIdInput!]
  upsert: [CupDataColourCalcUpsertWithWhereUniqueWithoutCupDataRowIdInput!]
  deleteMany: [CupDataColourCalcScalarWhereInput!]
  updateMany: [CupDataColourCalcUpdateManyWithWhereNestedInput!]
}

input CupDataColourCalcUpdateManyWithWhereNestedInput {
  where: CupDataColourCalcScalarWhereInput!
  data: CupDataColourCalcUpdateManyDataInput!
}

input CupDataColourCalcUpdateWithoutCupDataRowIdDataInput {
  blue: Int
  green: Int
  red: Int
}

input CupDataColourCalcUpdateWithWhereUniqueWithoutCupDataRowIdInput {
  where: CupDataColourCalcWhereUniqueInput!
  data: CupDataColourCalcUpdateWithoutCupDataRowIdDataInput!
}

input CupDataColourCalcUpsertWithWhereUniqueWithoutCupDataRowIdInput {
  where: CupDataColourCalcWhereUniqueInput!
  update: CupDataColourCalcUpdateWithoutCupDataRowIdDataInput!
  create: CupDataColourCalcCreateWithoutCupDataRowIdInput!
}

input CupDataColourCalcWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  blue: Int
  blue_not: Int
  blue_in: [Int!]
  blue_not_in: [Int!]
  blue_lt: Int
  blue_lte: Int
  blue_gt: Int
  blue_gte: Int
  cupDataRowId: CupDatumWhereInput
  green: Int
  green_not: Int
  green_in: [Int!]
  green_not_in: [Int!]
  green_lt: Int
  green_lte: Int
  green_gt: Int
  green_gte: Int
  red: Int
  red_not: Int
  red_in: [Int!]
  red_not_in: [Int!]
  red_lt: Int
  red_lte: Int
  red_gt: Int
  red_gte: Int
  AND: [CupDataColourCalcWhereInput!]
  OR: [CupDataColourCalcWhereInput!]
  NOT: [CupDataColourCalcWhereInput!]
}

input CupDataColourCalcWhereUniqueInput {
  id: Int
}

type CupDataColourCalib {
  id: Int!
  blue: Int!
  c: Int!
  green: Int!
  red: Int!
  serialNumber: Cup!
}

type CupDataColourCalibConnection {
  pageInfo: PageInfo!
  edges: [CupDataColourCalibEdge]!
  aggregate: AggregateCupDataColourCalib!
}

input CupDataColourCalibCreateInput {
  blue: Int!
  c: Int!
  green: Int!
  red: Int!
  serialNumber: CupCreateOneWithoutCupDataColourCalibInput!
}

input CupDataColourCalibCreateManyWithoutSerialNumberInput {
  create: [CupDataColourCalibCreateWithoutSerialNumberInput!]
  connect: [CupDataColourCalibWhereUniqueInput!]
}

input CupDataColourCalibCreateWithoutSerialNumberInput {
  blue: Int!
  c: Int!
  green: Int!
  red: Int!
}

type CupDataColourCalibEdge {
  node: CupDataColourCalib!
  cursor: String!
}

enum CupDataColourCalibOrderByInput {
  id_ASC
  id_DESC
  blue_ASC
  blue_DESC
  c_ASC
  c_DESC
  green_ASC
  green_DESC
  red_ASC
  red_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CupDataColourCalibPreviousValues {
  id: Int!
  blue: Int!
  c: Int!
  green: Int!
  red: Int!
}

input CupDataColourCalibScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  blue: Int
  blue_not: Int
  blue_in: [Int!]
  blue_not_in: [Int!]
  blue_lt: Int
  blue_lte: Int
  blue_gt: Int
  blue_gte: Int
  c: Int
  c_not: Int
  c_in: [Int!]
  c_not_in: [Int!]
  c_lt: Int
  c_lte: Int
  c_gt: Int
  c_gte: Int
  green: Int
  green_not: Int
  green_in: [Int!]
  green_not_in: [Int!]
  green_lt: Int
  green_lte: Int
  green_gt: Int
  green_gte: Int
  red: Int
  red_not: Int
  red_in: [Int!]
  red_not_in: [Int!]
  red_lt: Int
  red_lte: Int
  red_gt: Int
  red_gte: Int
  AND: [CupDataColourCalibScalarWhereInput!]
  OR: [CupDataColourCalibScalarWhereInput!]
  NOT: [CupDataColourCalibScalarWhereInput!]
}

type CupDataColourCalibSubscriptionPayload {
  mutation: MutationType!
  node: CupDataColourCalib
  updatedFields: [String!]
  previousValues: CupDataColourCalibPreviousValues
}

input CupDataColourCalibSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CupDataColourCalibWhereInput
  AND: [CupDataColourCalibSubscriptionWhereInput!]
  OR: [CupDataColourCalibSubscriptionWhereInput!]
  NOT: [CupDataColourCalibSubscriptionWhereInput!]
}

input CupDataColourCalibUpdateInput {
  blue: Int
  c: Int
  green: Int
  red: Int
  serialNumber: CupUpdateOneRequiredWithoutCupDataColourCalibInput
}

input CupDataColourCalibUpdateManyDataInput {
  blue: Int
  c: Int
  green: Int
  red: Int
}

input CupDataColourCalibUpdateManyMutationInput {
  blue: Int
  c: Int
  green: Int
  red: Int
}

input CupDataColourCalibUpdateManyWithoutSerialNumberInput {
  create: [CupDataColourCalibCreateWithoutSerialNumberInput!]
  delete: [CupDataColourCalibWhereUniqueInput!]
  connect: [CupDataColourCalibWhereUniqueInput!]
  set: [CupDataColourCalibWhereUniqueInput!]
  disconnect: [CupDataColourCalibWhereUniqueInput!]
  update: [CupDataColourCalibUpdateWithWhereUniqueWithoutSerialNumberInput!]
  upsert: [CupDataColourCalibUpsertWithWhereUniqueWithoutSerialNumberInput!]
  deleteMany: [CupDataColourCalibScalarWhereInput!]
  updateMany: [CupDataColourCalibUpdateManyWithWhereNestedInput!]
}

input CupDataColourCalibUpdateManyWithWhereNestedInput {
  where: CupDataColourCalibScalarWhereInput!
  data: CupDataColourCalibUpdateManyDataInput!
}

input CupDataColourCalibUpdateWithoutSerialNumberDataInput {
  blue: Int
  c: Int
  green: Int
  red: Int
}

input CupDataColourCalibUpdateWithWhereUniqueWithoutSerialNumberInput {
  where: CupDataColourCalibWhereUniqueInput!
  data: CupDataColourCalibUpdateWithoutSerialNumberDataInput!
}

input CupDataColourCalibUpsertWithWhereUniqueWithoutSerialNumberInput {
  where: CupDataColourCalibWhereUniqueInput!
  update: CupDataColourCalibUpdateWithoutSerialNumberDataInput!
  create: CupDataColourCalibCreateWithoutSerialNumberInput!
}

input CupDataColourCalibWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  blue: Int
  blue_not: Int
  blue_in: [Int!]
  blue_not_in: [Int!]
  blue_lt: Int
  blue_lte: Int
  blue_gt: Int
  blue_gte: Int
  c: Int
  c_not: Int
  c_in: [Int!]
  c_not_in: [Int!]
  c_lt: Int
  c_lte: Int
  c_gt: Int
  c_gte: Int
  green: Int
  green_not: Int
  green_in: [Int!]
  green_not_in: [Int!]
  green_lt: Int
  green_lte: Int
  green_gt: Int
  green_gte: Int
  red: Int
  red_not: Int
  red_in: [Int!]
  red_not_in: [Int!]
  red_lt: Int
  red_lte: Int
  red_gt: Int
  red_gte: Int
  serialNumber: CupWhereInput
  AND: [CupDataColourCalibWhereInput!]
  OR: [CupDataColourCalibWhereInput!]
  NOT: [CupDataColourCalibWhereInput!]
}

input CupDataColourCalibWhereUniqueInput {
  id: Int
}

type CupDataManMdate {
  id: Int!
  mdateRowId: CupDataProcMdate!
  menFinish: DateTime
  menStart: DateTime
}

type CupDataManMdateConnection {
  pageInfo: PageInfo!
  edges: [CupDataManMdateEdge]!
  aggregate: AggregateCupDataManMdate!
}

input CupDataManMdateCreateInput {
  mdateRowId: CupDataProcMdateCreateOneWithoutCupDataManMdatesInput!
  menFinish: DateTime
  menStart: DateTime
}

input CupDataManMdateCreateManyWithoutMdateRowIdInput {
  create: [CupDataManMdateCreateWithoutMdateRowIdInput!]
  connect: [CupDataManMdateWhereUniqueInput!]
}

input CupDataManMdateCreateWithoutMdateRowIdInput {
  menFinish: DateTime
  menStart: DateTime
}

type CupDataManMdateEdge {
  node: CupDataManMdate!
  cursor: String!
}

enum CupDataManMdateOrderByInput {
  id_ASC
  id_DESC
  menFinish_ASC
  menFinish_DESC
  menStart_ASC
  menStart_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CupDataManMdatePreviousValues {
  id: Int!
  menFinish: DateTime
  menStart: DateTime
}

input CupDataManMdateScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  menFinish: DateTime
  menFinish_not: DateTime
  menFinish_in: [DateTime!]
  menFinish_not_in: [DateTime!]
  menFinish_lt: DateTime
  menFinish_lte: DateTime
  menFinish_gt: DateTime
  menFinish_gte: DateTime
  menStart: DateTime
  menStart_not: DateTime
  menStart_in: [DateTime!]
  menStart_not_in: [DateTime!]
  menStart_lt: DateTime
  menStart_lte: DateTime
  menStart_gt: DateTime
  menStart_gte: DateTime
  AND: [CupDataManMdateScalarWhereInput!]
  OR: [CupDataManMdateScalarWhereInput!]
  NOT: [CupDataManMdateScalarWhereInput!]
}

type CupDataManMdateSubscriptionPayload {
  mutation: MutationType!
  node: CupDataManMdate
  updatedFields: [String!]
  previousValues: CupDataManMdatePreviousValues
}

input CupDataManMdateSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CupDataManMdateWhereInput
  AND: [CupDataManMdateSubscriptionWhereInput!]
  OR: [CupDataManMdateSubscriptionWhereInput!]
  NOT: [CupDataManMdateSubscriptionWhereInput!]
}

input CupDataManMdateUpdateInput {
  mdateRowId: CupDataProcMdateUpdateOneRequiredWithoutCupDataManMdatesInput
  menFinish: DateTime
  menStart: DateTime
}

input CupDataManMdateUpdateManyDataInput {
  menFinish: DateTime
  menStart: DateTime
}

input CupDataManMdateUpdateManyMutationInput {
  menFinish: DateTime
  menStart: DateTime
}

input CupDataManMdateUpdateManyWithoutMdateRowIdInput {
  create: [CupDataManMdateCreateWithoutMdateRowIdInput!]
  delete: [CupDataManMdateWhereUniqueInput!]
  connect: [CupDataManMdateWhereUniqueInput!]
  set: [CupDataManMdateWhereUniqueInput!]
  disconnect: [CupDataManMdateWhereUniqueInput!]
  update: [CupDataManMdateUpdateWithWhereUniqueWithoutMdateRowIdInput!]
  upsert: [CupDataManMdateUpsertWithWhereUniqueWithoutMdateRowIdInput!]
  deleteMany: [CupDataManMdateScalarWhereInput!]
  updateMany: [CupDataManMdateUpdateManyWithWhereNestedInput!]
}

input CupDataManMdateUpdateManyWithWhereNestedInput {
  where: CupDataManMdateScalarWhereInput!
  data: CupDataManMdateUpdateManyDataInput!
}

input CupDataManMdateUpdateWithoutMdateRowIdDataInput {
  menFinish: DateTime
  menStart: DateTime
}

input CupDataManMdateUpdateWithWhereUniqueWithoutMdateRowIdInput {
  where: CupDataManMdateWhereUniqueInput!
  data: CupDataManMdateUpdateWithoutMdateRowIdDataInput!
}

input CupDataManMdateUpsertWithWhereUniqueWithoutMdateRowIdInput {
  where: CupDataManMdateWhereUniqueInput!
  update: CupDataManMdateUpdateWithoutMdateRowIdDataInput!
  create: CupDataManMdateCreateWithoutMdateRowIdInput!
}

input CupDataManMdateWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  mdateRowId: CupDataProcMdateWhereInput
  menFinish: DateTime
  menFinish_not: DateTime
  menFinish_in: [DateTime!]
  menFinish_not_in: [DateTime!]
  menFinish_lt: DateTime
  menFinish_lte: DateTime
  menFinish_gt: DateTime
  menFinish_gte: DateTime
  menStart: DateTime
  menStart_not: DateTime
  menStart_in: [DateTime!]
  menStart_not_in: [DateTime!]
  menStart_lt: DateTime
  menStart_lte: DateTime
  menStart_gt: DateTime
  menStart_gte: DateTime
  AND: [CupDataManMdateWhereInput!]
  OR: [CupDataManMdateWhereInput!]
  NOT: [CupDataManMdateWhereInput!]
}

input CupDataManMdateWhereUniqueInput {
  id: Int
}

type CupDataProcFlow {
  id: Int!
  date: DateTime!
  hourlyFlow: Int!
  mdateRowId: CupDataProcMdate!
  userId: User!
}

type CupDataProcFlowConnection {
  pageInfo: PageInfo!
  edges: [CupDataProcFlowEdge]!
  aggregate: AggregateCupDataProcFlow!
}

input CupDataProcFlowCreateInput {
  date: DateTime!
  hourlyFlow: Int!
  mdateRowId: CupDataProcMdateCreateOneWithoutCupDataProcFlowInput!
  userId: UserCreateOneWithoutCupDataProcFlowInput!
}

input CupDataProcFlowCreateManyWithoutMdateRowIdInput {
  create: [CupDataProcFlowCreateWithoutMdateRowIdInput!]
  connect: [CupDataProcFlowWhereUniqueInput!]
}

input CupDataProcFlowCreateManyWithoutUserIdInput {
  create: [CupDataProcFlowCreateWithoutUserIdInput!]
  connect: [CupDataProcFlowWhereUniqueInput!]
}

input CupDataProcFlowCreateWithoutMdateRowIdInput {
  date: DateTime!
  hourlyFlow: Int!
  userId: UserCreateOneWithoutCupDataProcFlowInput!
}

input CupDataProcFlowCreateWithoutUserIdInput {
  date: DateTime!
  hourlyFlow: Int!
  mdateRowId: CupDataProcMdateCreateOneWithoutCupDataProcFlowInput!
}

type CupDataProcFlowEdge {
  node: CupDataProcFlow!
  cursor: String!
}

enum CupDataProcFlowOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  hourlyFlow_ASC
  hourlyFlow_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CupDataProcFlowPreviousValues {
  id: Int!
  date: DateTime!
  hourlyFlow: Int!
}

input CupDataProcFlowScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  hourlyFlow: Int
  hourlyFlow_not: Int
  hourlyFlow_in: [Int!]
  hourlyFlow_not_in: [Int!]
  hourlyFlow_lt: Int
  hourlyFlow_lte: Int
  hourlyFlow_gt: Int
  hourlyFlow_gte: Int
  AND: [CupDataProcFlowScalarWhereInput!]
  OR: [CupDataProcFlowScalarWhereInput!]
  NOT: [CupDataProcFlowScalarWhereInput!]
}

type CupDataProcFlowSubscriptionPayload {
  mutation: MutationType!
  node: CupDataProcFlow
  updatedFields: [String!]
  previousValues: CupDataProcFlowPreviousValues
}

input CupDataProcFlowSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CupDataProcFlowWhereInput
  AND: [CupDataProcFlowSubscriptionWhereInput!]
  OR: [CupDataProcFlowSubscriptionWhereInput!]
  NOT: [CupDataProcFlowSubscriptionWhereInput!]
}

input CupDataProcFlowUpdateInput {
  date: DateTime
  hourlyFlow: Int
  mdateRowId: CupDataProcMdateUpdateOneRequiredWithoutCupDataProcFlowInput
  userId: UserUpdateOneRequiredWithoutCupDataProcFlowInput
}

input CupDataProcFlowUpdateManyDataInput {
  date: DateTime
  hourlyFlow: Int
}

input CupDataProcFlowUpdateManyMutationInput {
  date: DateTime
  hourlyFlow: Int
}

input CupDataProcFlowUpdateManyWithoutMdateRowIdInput {
  create: [CupDataProcFlowCreateWithoutMdateRowIdInput!]
  delete: [CupDataProcFlowWhereUniqueInput!]
  connect: [CupDataProcFlowWhereUniqueInput!]
  set: [CupDataProcFlowWhereUniqueInput!]
  disconnect: [CupDataProcFlowWhereUniqueInput!]
  update: [CupDataProcFlowUpdateWithWhereUniqueWithoutMdateRowIdInput!]
  upsert: [CupDataProcFlowUpsertWithWhereUniqueWithoutMdateRowIdInput!]
  deleteMany: [CupDataProcFlowScalarWhereInput!]
  updateMany: [CupDataProcFlowUpdateManyWithWhereNestedInput!]
}

input CupDataProcFlowUpdateManyWithoutUserIdInput {
  create: [CupDataProcFlowCreateWithoutUserIdInput!]
  delete: [CupDataProcFlowWhereUniqueInput!]
  connect: [CupDataProcFlowWhereUniqueInput!]
  set: [CupDataProcFlowWhereUniqueInput!]
  disconnect: [CupDataProcFlowWhereUniqueInput!]
  update: [CupDataProcFlowUpdateWithWhereUniqueWithoutUserIdInput!]
  upsert: [CupDataProcFlowUpsertWithWhereUniqueWithoutUserIdInput!]
  deleteMany: [CupDataProcFlowScalarWhereInput!]
  updateMany: [CupDataProcFlowUpdateManyWithWhereNestedInput!]
}

input CupDataProcFlowUpdateManyWithWhereNestedInput {
  where: CupDataProcFlowScalarWhereInput!
  data: CupDataProcFlowUpdateManyDataInput!
}

input CupDataProcFlowUpdateWithoutMdateRowIdDataInput {
  date: DateTime
  hourlyFlow: Int
  userId: UserUpdateOneRequiredWithoutCupDataProcFlowInput
}

input CupDataProcFlowUpdateWithoutUserIdDataInput {
  date: DateTime
  hourlyFlow: Int
  mdateRowId: CupDataProcMdateUpdateOneRequiredWithoutCupDataProcFlowInput
}

input CupDataProcFlowUpdateWithWhereUniqueWithoutMdateRowIdInput {
  where: CupDataProcFlowWhereUniqueInput!
  data: CupDataProcFlowUpdateWithoutMdateRowIdDataInput!
}

input CupDataProcFlowUpdateWithWhereUniqueWithoutUserIdInput {
  where: CupDataProcFlowWhereUniqueInput!
  data: CupDataProcFlowUpdateWithoutUserIdDataInput!
}

input CupDataProcFlowUpsertWithWhereUniqueWithoutMdateRowIdInput {
  where: CupDataProcFlowWhereUniqueInput!
  update: CupDataProcFlowUpdateWithoutMdateRowIdDataInput!
  create: CupDataProcFlowCreateWithoutMdateRowIdInput!
}

input CupDataProcFlowUpsertWithWhereUniqueWithoutUserIdInput {
  where: CupDataProcFlowWhereUniqueInput!
  update: CupDataProcFlowUpdateWithoutUserIdDataInput!
  create: CupDataProcFlowCreateWithoutUserIdInput!
}

input CupDataProcFlowWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  hourlyFlow: Int
  hourlyFlow_not: Int
  hourlyFlow_in: [Int!]
  hourlyFlow_not_in: [Int!]
  hourlyFlow_lt: Int
  hourlyFlow_lte: Int
  hourlyFlow_gt: Int
  hourlyFlow_gte: Int
  mdateRowId: CupDataProcMdateWhereInput
  userId: UserWhereInput
  AND: [CupDataProcFlowWhereInput!]
  OR: [CupDataProcFlowWhereInput!]
  NOT: [CupDataProcFlowWhereInput!]
}

input CupDataProcFlowWhereUniqueInput {
  id: Int
}

type CupDataProcMdate {
  id: Int!
  cupDataManMdates(where: CupDataManMdateWhereInput, orderBy: CupDataManMdateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataManMdate!]
  cupDataProcFlow(where: CupDataProcFlowWhereInput, orderBy: CupDataProcFlowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataProcFlow!]
  dataRejected: Boolean
  dataVerified: Boolean!
  menFinish: DateTime!
  menStart: DateTime!
  rejectId: CupDataRejection
  rewardAmount: Int
  userId: User!
}

type CupDataProcMdateConnection {
  pageInfo: PageInfo!
  edges: [CupDataProcMdateEdge]!
  aggregate: AggregateCupDataProcMdate!
}

input CupDataProcMdateCreateInput {
  cupDataManMdates: CupDataManMdateCreateManyWithoutMdateRowIdInput
  cupDataProcFlow: CupDataProcFlowCreateManyWithoutMdateRowIdInput
  dataRejected: Boolean
  dataVerified: Boolean!
  menFinish: DateTime!
  menStart: DateTime!
  rejectId: CupDataRejectionCreateOneWithoutCupDataProcMdatesInput
  rewardAmount: Int
  userId: UserCreateOneWithoutCupDataProcMdatesInput!
}

input CupDataProcMdateCreateManyWithoutRejectIdInput {
  create: [CupDataProcMdateCreateWithoutRejectIdInput!]
  connect: [CupDataProcMdateWhereUniqueInput!]
}

input CupDataProcMdateCreateManyWithoutUserIdInput {
  create: [CupDataProcMdateCreateWithoutUserIdInput!]
  connect: [CupDataProcMdateWhereUniqueInput!]
}

input CupDataProcMdateCreateOneWithoutCupDataManMdatesInput {
  create: CupDataProcMdateCreateWithoutCupDataManMdatesInput
  connect: CupDataProcMdateWhereUniqueInput
}

input CupDataProcMdateCreateOneWithoutCupDataProcFlowInput {
  create: CupDataProcMdateCreateWithoutCupDataProcFlowInput
  connect: CupDataProcMdateWhereUniqueInput
}

input CupDataProcMdateCreateWithoutCupDataManMdatesInput {
  cupDataProcFlow: CupDataProcFlowCreateManyWithoutMdateRowIdInput
  dataRejected: Boolean
  dataVerified: Boolean!
  menFinish: DateTime!
  menStart: DateTime!
  rejectId: CupDataRejectionCreateOneWithoutCupDataProcMdatesInput
  rewardAmount: Int
  userId: UserCreateOneWithoutCupDataProcMdatesInput!
}

input CupDataProcMdateCreateWithoutCupDataProcFlowInput {
  cupDataManMdates: CupDataManMdateCreateManyWithoutMdateRowIdInput
  dataRejected: Boolean
  dataVerified: Boolean!
  menFinish: DateTime!
  menStart: DateTime!
  rejectId: CupDataRejectionCreateOneWithoutCupDataProcMdatesInput
  rewardAmount: Int
  userId: UserCreateOneWithoutCupDataProcMdatesInput!
}

input CupDataProcMdateCreateWithoutRejectIdInput {
  cupDataManMdates: CupDataManMdateCreateManyWithoutMdateRowIdInput
  cupDataProcFlow: CupDataProcFlowCreateManyWithoutMdateRowIdInput
  dataRejected: Boolean
  dataVerified: Boolean!
  menFinish: DateTime!
  menStart: DateTime!
  rewardAmount: Int
  userId: UserCreateOneWithoutCupDataProcMdatesInput!
}

input CupDataProcMdateCreateWithoutUserIdInput {
  cupDataManMdates: CupDataManMdateCreateManyWithoutMdateRowIdInput
  cupDataProcFlow: CupDataProcFlowCreateManyWithoutMdateRowIdInput
  dataRejected: Boolean
  dataVerified: Boolean!
  menFinish: DateTime!
  menStart: DateTime!
  rejectId: CupDataRejectionCreateOneWithoutCupDataProcMdatesInput
  rewardAmount: Int
}

type CupDataProcMdateEdge {
  node: CupDataProcMdate!
  cursor: String!
}

enum CupDataProcMdateOrderByInput {
  id_ASC
  id_DESC
  dataRejected_ASC
  dataRejected_DESC
  dataVerified_ASC
  dataVerified_DESC
  menFinish_ASC
  menFinish_DESC
  menStart_ASC
  menStart_DESC
  rewardAmount_ASC
  rewardAmount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CupDataProcMdatePreviousValues {
  id: Int!
  dataRejected: Boolean
  dataVerified: Boolean!
  menFinish: DateTime!
  menStart: DateTime!
  rewardAmount: Int
}

input CupDataProcMdateScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  dataRejected: Boolean
  dataRejected_not: Boolean
  dataVerified: Boolean
  dataVerified_not: Boolean
  menFinish: DateTime
  menFinish_not: DateTime
  menFinish_in: [DateTime!]
  menFinish_not_in: [DateTime!]
  menFinish_lt: DateTime
  menFinish_lte: DateTime
  menFinish_gt: DateTime
  menFinish_gte: DateTime
  menStart: DateTime
  menStart_not: DateTime
  menStart_in: [DateTime!]
  menStart_not_in: [DateTime!]
  menStart_lt: DateTime
  menStart_lte: DateTime
  menStart_gt: DateTime
  menStart_gte: DateTime
  rewardAmount: Int
  rewardAmount_not: Int
  rewardAmount_in: [Int!]
  rewardAmount_not_in: [Int!]
  rewardAmount_lt: Int
  rewardAmount_lte: Int
  rewardAmount_gt: Int
  rewardAmount_gte: Int
  AND: [CupDataProcMdateScalarWhereInput!]
  OR: [CupDataProcMdateScalarWhereInput!]
  NOT: [CupDataProcMdateScalarWhereInput!]
}

type CupDataProcMdateSubscriptionPayload {
  mutation: MutationType!
  node: CupDataProcMdate
  updatedFields: [String!]
  previousValues: CupDataProcMdatePreviousValues
}

input CupDataProcMdateSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CupDataProcMdateWhereInput
  AND: [CupDataProcMdateSubscriptionWhereInput!]
  OR: [CupDataProcMdateSubscriptionWhereInput!]
  NOT: [CupDataProcMdateSubscriptionWhereInput!]
}

input CupDataProcMdateUpdateInput {
  cupDataManMdates: CupDataManMdateUpdateManyWithoutMdateRowIdInput
  cupDataProcFlow: CupDataProcFlowUpdateManyWithoutMdateRowIdInput
  dataRejected: Boolean
  dataVerified: Boolean
  menFinish: DateTime
  menStart: DateTime
  rejectId: CupDataRejectionUpdateOneWithoutCupDataProcMdatesInput
  rewardAmount: Int
  userId: UserUpdateOneRequiredWithoutCupDataProcMdatesInput
}

input CupDataProcMdateUpdateManyDataInput {
  dataRejected: Boolean
  dataVerified: Boolean
  menFinish: DateTime
  menStart: DateTime
  rewardAmount: Int
}

input CupDataProcMdateUpdateManyMutationInput {
  dataRejected: Boolean
  dataVerified: Boolean
  menFinish: DateTime
  menStart: DateTime
  rewardAmount: Int
}

input CupDataProcMdateUpdateManyWithoutRejectIdInput {
  create: [CupDataProcMdateCreateWithoutRejectIdInput!]
  delete: [CupDataProcMdateWhereUniqueInput!]
  connect: [CupDataProcMdateWhereUniqueInput!]
  set: [CupDataProcMdateWhereUniqueInput!]
  disconnect: [CupDataProcMdateWhereUniqueInput!]
  update: [CupDataProcMdateUpdateWithWhereUniqueWithoutRejectIdInput!]
  upsert: [CupDataProcMdateUpsertWithWhereUniqueWithoutRejectIdInput!]
  deleteMany: [CupDataProcMdateScalarWhereInput!]
  updateMany: [CupDataProcMdateUpdateManyWithWhereNestedInput!]
}

input CupDataProcMdateUpdateManyWithoutUserIdInput {
  create: [CupDataProcMdateCreateWithoutUserIdInput!]
  delete: [CupDataProcMdateWhereUniqueInput!]
  connect: [CupDataProcMdateWhereUniqueInput!]
  set: [CupDataProcMdateWhereUniqueInput!]
  disconnect: [CupDataProcMdateWhereUniqueInput!]
  update: [CupDataProcMdateUpdateWithWhereUniqueWithoutUserIdInput!]
  upsert: [CupDataProcMdateUpsertWithWhereUniqueWithoutUserIdInput!]
  deleteMany: [CupDataProcMdateScalarWhereInput!]
  updateMany: [CupDataProcMdateUpdateManyWithWhereNestedInput!]
}

input CupDataProcMdateUpdateManyWithWhereNestedInput {
  where: CupDataProcMdateScalarWhereInput!
  data: CupDataProcMdateUpdateManyDataInput!
}

input CupDataProcMdateUpdateOneRequiredWithoutCupDataManMdatesInput {
  create: CupDataProcMdateCreateWithoutCupDataManMdatesInput
  update: CupDataProcMdateUpdateWithoutCupDataManMdatesDataInput
  upsert: CupDataProcMdateUpsertWithoutCupDataManMdatesInput
  connect: CupDataProcMdateWhereUniqueInput
}

input CupDataProcMdateUpdateOneRequiredWithoutCupDataProcFlowInput {
  create: CupDataProcMdateCreateWithoutCupDataProcFlowInput
  update: CupDataProcMdateUpdateWithoutCupDataProcFlowDataInput
  upsert: CupDataProcMdateUpsertWithoutCupDataProcFlowInput
  connect: CupDataProcMdateWhereUniqueInput
}

input CupDataProcMdateUpdateWithoutCupDataManMdatesDataInput {
  cupDataProcFlow: CupDataProcFlowUpdateManyWithoutMdateRowIdInput
  dataRejected: Boolean
  dataVerified: Boolean
  menFinish: DateTime
  menStart: DateTime
  rejectId: CupDataRejectionUpdateOneWithoutCupDataProcMdatesInput
  rewardAmount: Int
  userId: UserUpdateOneRequiredWithoutCupDataProcMdatesInput
}

input CupDataProcMdateUpdateWithoutCupDataProcFlowDataInput {
  cupDataManMdates: CupDataManMdateUpdateManyWithoutMdateRowIdInput
  dataRejected: Boolean
  dataVerified: Boolean
  menFinish: DateTime
  menStart: DateTime
  rejectId: CupDataRejectionUpdateOneWithoutCupDataProcMdatesInput
  rewardAmount: Int
  userId: UserUpdateOneRequiredWithoutCupDataProcMdatesInput
}

input CupDataProcMdateUpdateWithoutRejectIdDataInput {
  cupDataManMdates: CupDataManMdateUpdateManyWithoutMdateRowIdInput
  cupDataProcFlow: CupDataProcFlowUpdateManyWithoutMdateRowIdInput
  dataRejected: Boolean
  dataVerified: Boolean
  menFinish: DateTime
  menStart: DateTime
  rewardAmount: Int
  userId: UserUpdateOneRequiredWithoutCupDataProcMdatesInput
}

input CupDataProcMdateUpdateWithoutUserIdDataInput {
  cupDataManMdates: CupDataManMdateUpdateManyWithoutMdateRowIdInput
  cupDataProcFlow: CupDataProcFlowUpdateManyWithoutMdateRowIdInput
  dataRejected: Boolean
  dataVerified: Boolean
  menFinish: DateTime
  menStart: DateTime
  rejectId: CupDataRejectionUpdateOneWithoutCupDataProcMdatesInput
  rewardAmount: Int
}

input CupDataProcMdateUpdateWithWhereUniqueWithoutRejectIdInput {
  where: CupDataProcMdateWhereUniqueInput!
  data: CupDataProcMdateUpdateWithoutRejectIdDataInput!
}

input CupDataProcMdateUpdateWithWhereUniqueWithoutUserIdInput {
  where: CupDataProcMdateWhereUniqueInput!
  data: CupDataProcMdateUpdateWithoutUserIdDataInput!
}

input CupDataProcMdateUpsertWithoutCupDataManMdatesInput {
  update: CupDataProcMdateUpdateWithoutCupDataManMdatesDataInput!
  create: CupDataProcMdateCreateWithoutCupDataManMdatesInput!
}

input CupDataProcMdateUpsertWithoutCupDataProcFlowInput {
  update: CupDataProcMdateUpdateWithoutCupDataProcFlowDataInput!
  create: CupDataProcMdateCreateWithoutCupDataProcFlowInput!
}

input CupDataProcMdateUpsertWithWhereUniqueWithoutRejectIdInput {
  where: CupDataProcMdateWhereUniqueInput!
  update: CupDataProcMdateUpdateWithoutRejectIdDataInput!
  create: CupDataProcMdateCreateWithoutRejectIdInput!
}

input CupDataProcMdateUpsertWithWhereUniqueWithoutUserIdInput {
  where: CupDataProcMdateWhereUniqueInput!
  update: CupDataProcMdateUpdateWithoutUserIdDataInput!
  create: CupDataProcMdateCreateWithoutUserIdInput!
}

input CupDataProcMdateWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  cupDataManMdates_every: CupDataManMdateWhereInput
  cupDataManMdates_some: CupDataManMdateWhereInput
  cupDataManMdates_none: CupDataManMdateWhereInput
  cupDataProcFlow_every: CupDataProcFlowWhereInput
  cupDataProcFlow_some: CupDataProcFlowWhereInput
  cupDataProcFlow_none: CupDataProcFlowWhereInput
  dataRejected: Boolean
  dataRejected_not: Boolean
  dataVerified: Boolean
  dataVerified_not: Boolean
  menFinish: DateTime
  menFinish_not: DateTime
  menFinish_in: [DateTime!]
  menFinish_not_in: [DateTime!]
  menFinish_lt: DateTime
  menFinish_lte: DateTime
  menFinish_gt: DateTime
  menFinish_gte: DateTime
  menStart: DateTime
  menStart_not: DateTime
  menStart_in: [DateTime!]
  menStart_not_in: [DateTime!]
  menStart_lt: DateTime
  menStart_lte: DateTime
  menStart_gt: DateTime
  menStart_gte: DateTime
  rejectId: CupDataRejectionWhereInput
  rewardAmount: Int
  rewardAmount_not: Int
  rewardAmount_in: [Int!]
  rewardAmount_not_in: [Int!]
  rewardAmount_lt: Int
  rewardAmount_lte: Int
  rewardAmount_gt: Int
  rewardAmount_gte: Int
  userId: UserWhereInput
  AND: [CupDataProcMdateWhereInput!]
  OR: [CupDataProcMdateWhereInput!]
  NOT: [CupDataProcMdateWhereInput!]
}

input CupDataProcMdateWhereUniqueInput {
  id: Int
}

type CupDataProcVolume {
  id: Int!
  confidenceL: Int
  confidenceR: Int
  cupDataRowId: CupDatum!
  inVitro: Boolean!
  volume: Int
  volumeAdj: Int
  volumeL: Int
  volumeR: Int
}

type CupDataProcVolumeConnection {
  pageInfo: PageInfo!
  edges: [CupDataProcVolumeEdge]!
  aggregate: AggregateCupDataProcVolume!
}

input CupDataProcVolumeCreateInput {
  confidenceL: Int
  confidenceR: Int
  cupDataRowId: CupDatumCreateOneWithoutCupDataProcVolumeInput!
  inVitro: Boolean
  volume: Int
  volumeAdj: Int
  volumeL: Int
  volumeR: Int
}

input CupDataProcVolumeCreateManyWithoutCupDataRowIdInput {
  create: [CupDataProcVolumeCreateWithoutCupDataRowIdInput!]
  connect: [CupDataProcVolumeWhereUniqueInput!]
}

input CupDataProcVolumeCreateWithoutCupDataRowIdInput {
  confidenceL: Int
  confidenceR: Int
  inVitro: Boolean
  volume: Int
  volumeAdj: Int
  volumeL: Int
  volumeR: Int
}

type CupDataProcVolumeEdge {
  node: CupDataProcVolume!
  cursor: String!
}

enum CupDataProcVolumeOrderByInput {
  id_ASC
  id_DESC
  confidenceL_ASC
  confidenceL_DESC
  confidenceR_ASC
  confidenceR_DESC
  inVitro_ASC
  inVitro_DESC
  volume_ASC
  volume_DESC
  volumeAdj_ASC
  volumeAdj_DESC
  volumeL_ASC
  volumeL_DESC
  volumeR_ASC
  volumeR_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CupDataProcVolumePreviousValues {
  id: Int!
  confidenceL: Int
  confidenceR: Int
  inVitro: Boolean!
  volume: Int
  volumeAdj: Int
  volumeL: Int
  volumeR: Int
}

input CupDataProcVolumeScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  confidenceL: Int
  confidenceL_not: Int
  confidenceL_in: [Int!]
  confidenceL_not_in: [Int!]
  confidenceL_lt: Int
  confidenceL_lte: Int
  confidenceL_gt: Int
  confidenceL_gte: Int
  confidenceR: Int
  confidenceR_not: Int
  confidenceR_in: [Int!]
  confidenceR_not_in: [Int!]
  confidenceR_lt: Int
  confidenceR_lte: Int
  confidenceR_gt: Int
  confidenceR_gte: Int
  inVitro: Boolean
  inVitro_not: Boolean
  volume: Int
  volume_not: Int
  volume_in: [Int!]
  volume_not_in: [Int!]
  volume_lt: Int
  volume_lte: Int
  volume_gt: Int
  volume_gte: Int
  volumeAdj: Int
  volumeAdj_not: Int
  volumeAdj_in: [Int!]
  volumeAdj_not_in: [Int!]
  volumeAdj_lt: Int
  volumeAdj_lte: Int
  volumeAdj_gt: Int
  volumeAdj_gte: Int
  volumeL: Int
  volumeL_not: Int
  volumeL_in: [Int!]
  volumeL_not_in: [Int!]
  volumeL_lt: Int
  volumeL_lte: Int
  volumeL_gt: Int
  volumeL_gte: Int
  volumeR: Int
  volumeR_not: Int
  volumeR_in: [Int!]
  volumeR_not_in: [Int!]
  volumeR_lt: Int
  volumeR_lte: Int
  volumeR_gt: Int
  volumeR_gte: Int
  AND: [CupDataProcVolumeScalarWhereInput!]
  OR: [CupDataProcVolumeScalarWhereInput!]
  NOT: [CupDataProcVolumeScalarWhereInput!]
}

type CupDataProcVolumeSubscriptionPayload {
  mutation: MutationType!
  node: CupDataProcVolume
  updatedFields: [String!]
  previousValues: CupDataProcVolumePreviousValues
}

input CupDataProcVolumeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CupDataProcVolumeWhereInput
  AND: [CupDataProcVolumeSubscriptionWhereInput!]
  OR: [CupDataProcVolumeSubscriptionWhereInput!]
  NOT: [CupDataProcVolumeSubscriptionWhereInput!]
}

input CupDataProcVolumeUpdateInput {
  confidenceL: Int
  confidenceR: Int
  cupDataRowId: CupDatumUpdateOneRequiredWithoutCupDataProcVolumeInput
  inVitro: Boolean
  volume: Int
  volumeAdj: Int
  volumeL: Int
  volumeR: Int
}

input CupDataProcVolumeUpdateManyDataInput {
  confidenceL: Int
  confidenceR: Int
  inVitro: Boolean
  volume: Int
  volumeAdj: Int
  volumeL: Int
  volumeR: Int
}

input CupDataProcVolumeUpdateManyMutationInput {
  confidenceL: Int
  confidenceR: Int
  inVitro: Boolean
  volume: Int
  volumeAdj: Int
  volumeL: Int
  volumeR: Int
}

input CupDataProcVolumeUpdateManyWithoutCupDataRowIdInput {
  create: [CupDataProcVolumeCreateWithoutCupDataRowIdInput!]
  delete: [CupDataProcVolumeWhereUniqueInput!]
  connect: [CupDataProcVolumeWhereUniqueInput!]
  set: [CupDataProcVolumeWhereUniqueInput!]
  disconnect: [CupDataProcVolumeWhereUniqueInput!]
  update: [CupDataProcVolumeUpdateWithWhereUniqueWithoutCupDataRowIdInput!]
  upsert: [CupDataProcVolumeUpsertWithWhereUniqueWithoutCupDataRowIdInput!]
  deleteMany: [CupDataProcVolumeScalarWhereInput!]
  updateMany: [CupDataProcVolumeUpdateManyWithWhereNestedInput!]
}

input CupDataProcVolumeUpdateManyWithWhereNestedInput {
  where: CupDataProcVolumeScalarWhereInput!
  data: CupDataProcVolumeUpdateManyDataInput!
}

input CupDataProcVolumeUpdateWithoutCupDataRowIdDataInput {
  confidenceL: Int
  confidenceR: Int
  inVitro: Boolean
  volume: Int
  volumeAdj: Int
  volumeL: Int
  volumeR: Int
}

input CupDataProcVolumeUpdateWithWhereUniqueWithoutCupDataRowIdInput {
  where: CupDataProcVolumeWhereUniqueInput!
  data: CupDataProcVolumeUpdateWithoutCupDataRowIdDataInput!
}

input CupDataProcVolumeUpsertWithWhereUniqueWithoutCupDataRowIdInput {
  where: CupDataProcVolumeWhereUniqueInput!
  update: CupDataProcVolumeUpdateWithoutCupDataRowIdDataInput!
  create: CupDataProcVolumeCreateWithoutCupDataRowIdInput!
}

input CupDataProcVolumeWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  confidenceL: Int
  confidenceL_not: Int
  confidenceL_in: [Int!]
  confidenceL_not_in: [Int!]
  confidenceL_lt: Int
  confidenceL_lte: Int
  confidenceL_gt: Int
  confidenceL_gte: Int
  confidenceR: Int
  confidenceR_not: Int
  confidenceR_in: [Int!]
  confidenceR_not_in: [Int!]
  confidenceR_lt: Int
  confidenceR_lte: Int
  confidenceR_gt: Int
  confidenceR_gte: Int
  cupDataRowId: CupDatumWhereInput
  inVitro: Boolean
  inVitro_not: Boolean
  volume: Int
  volume_not: Int
  volume_in: [Int!]
  volume_not_in: [Int!]
  volume_lt: Int
  volume_lte: Int
  volume_gt: Int
  volume_gte: Int
  volumeAdj: Int
  volumeAdj_not: Int
  volumeAdj_in: [Int!]
  volumeAdj_not_in: [Int!]
  volumeAdj_lt: Int
  volumeAdj_lte: Int
  volumeAdj_gt: Int
  volumeAdj_gte: Int
  volumeL: Int
  volumeL_not: Int
  volumeL_in: [Int!]
  volumeL_not_in: [Int!]
  volumeL_lt: Int
  volumeL_lte: Int
  volumeL_gt: Int
  volumeL_gte: Int
  volumeR: Int
  volumeR_not: Int
  volumeR_in: [Int!]
  volumeR_not_in: [Int!]
  volumeR_lt: Int
  volumeR_lte: Int
  volumeR_gt: Int
  volumeR_gte: Int
  AND: [CupDataProcVolumeWhereInput!]
  OR: [CupDataProcVolumeWhereInput!]
  NOT: [CupDataProcVolumeWhereInput!]
}

input CupDataProcVolumeWhereUniqueInput {
  id: Int
}

type CupDataQaResponse {
  id: Int!
  answerId: CupDataAnswer!
  qaDate: DateTime!
  questionId: CupDataQuestion!
  userId: User!
}

type CupDataQaResponseConnection {
  pageInfo: PageInfo!
  edges: [CupDataQaResponseEdge]!
  aggregate: AggregateCupDataQaResponse!
}

input CupDataQaResponseCreateInput {
  answerId: CupDataAnswerCreateOneWithoutCupDataQaResponseInput!
  qaDate: DateTime!
  questionId: CupDataQuestionCreateOneWithoutCupDataQaResponseInput!
  userId: UserCreateOneWithoutCupDataQaResponseInput!
}

input CupDataQaResponseCreateManyWithoutAnswerIdInput {
  create: [CupDataQaResponseCreateWithoutAnswerIdInput!]
  connect: [CupDataQaResponseWhereUniqueInput!]
}

input CupDataQaResponseCreateManyWithoutQuestionIdInput {
  create: [CupDataQaResponseCreateWithoutQuestionIdInput!]
  connect: [CupDataQaResponseWhereUniqueInput!]
}

input CupDataQaResponseCreateManyWithoutUserIdInput {
  create: [CupDataQaResponseCreateWithoutUserIdInput!]
  connect: [CupDataQaResponseWhereUniqueInput!]
}

input CupDataQaResponseCreateWithoutAnswerIdInput {
  qaDate: DateTime!
  questionId: CupDataQuestionCreateOneWithoutCupDataQaResponseInput!
  userId: UserCreateOneWithoutCupDataQaResponseInput!
}

input CupDataQaResponseCreateWithoutQuestionIdInput {
  answerId: CupDataAnswerCreateOneWithoutCupDataQaResponseInput!
  qaDate: DateTime!
  userId: UserCreateOneWithoutCupDataQaResponseInput!
}

input CupDataQaResponseCreateWithoutUserIdInput {
  answerId: CupDataAnswerCreateOneWithoutCupDataQaResponseInput!
  qaDate: DateTime!
  questionId: CupDataQuestionCreateOneWithoutCupDataQaResponseInput!
}

type CupDataQaResponseEdge {
  node: CupDataQaResponse!
  cursor: String!
}

enum CupDataQaResponseOrderByInput {
  id_ASC
  id_DESC
  qaDate_ASC
  qaDate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CupDataQaResponsePreviousValues {
  id: Int!
  qaDate: DateTime!
}

input CupDataQaResponseScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  qaDate: DateTime
  qaDate_not: DateTime
  qaDate_in: [DateTime!]
  qaDate_not_in: [DateTime!]
  qaDate_lt: DateTime
  qaDate_lte: DateTime
  qaDate_gt: DateTime
  qaDate_gte: DateTime
  AND: [CupDataQaResponseScalarWhereInput!]
  OR: [CupDataQaResponseScalarWhereInput!]
  NOT: [CupDataQaResponseScalarWhereInput!]
}

type CupDataQaResponseSubscriptionPayload {
  mutation: MutationType!
  node: CupDataQaResponse
  updatedFields: [String!]
  previousValues: CupDataQaResponsePreviousValues
}

input CupDataQaResponseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CupDataQaResponseWhereInput
  AND: [CupDataQaResponseSubscriptionWhereInput!]
  OR: [CupDataQaResponseSubscriptionWhereInput!]
  NOT: [CupDataQaResponseSubscriptionWhereInput!]
}

input CupDataQaResponseUpdateInput {
  answerId: CupDataAnswerUpdateOneRequiredWithoutCupDataQaResponseInput
  qaDate: DateTime
  questionId: CupDataQuestionUpdateOneRequiredWithoutCupDataQaResponseInput
  userId: UserUpdateOneRequiredWithoutCupDataQaResponseInput
}

input CupDataQaResponseUpdateManyDataInput {
  qaDate: DateTime
}

input CupDataQaResponseUpdateManyMutationInput {
  qaDate: DateTime
}

input CupDataQaResponseUpdateManyWithoutAnswerIdInput {
  create: [CupDataQaResponseCreateWithoutAnswerIdInput!]
  delete: [CupDataQaResponseWhereUniqueInput!]
  connect: [CupDataQaResponseWhereUniqueInput!]
  set: [CupDataQaResponseWhereUniqueInput!]
  disconnect: [CupDataQaResponseWhereUniqueInput!]
  update: [CupDataQaResponseUpdateWithWhereUniqueWithoutAnswerIdInput!]
  upsert: [CupDataQaResponseUpsertWithWhereUniqueWithoutAnswerIdInput!]
  deleteMany: [CupDataQaResponseScalarWhereInput!]
  updateMany: [CupDataQaResponseUpdateManyWithWhereNestedInput!]
}

input CupDataQaResponseUpdateManyWithoutQuestionIdInput {
  create: [CupDataQaResponseCreateWithoutQuestionIdInput!]
  delete: [CupDataQaResponseWhereUniqueInput!]
  connect: [CupDataQaResponseWhereUniqueInput!]
  set: [CupDataQaResponseWhereUniqueInput!]
  disconnect: [CupDataQaResponseWhereUniqueInput!]
  update: [CupDataQaResponseUpdateWithWhereUniqueWithoutQuestionIdInput!]
  upsert: [CupDataQaResponseUpsertWithWhereUniqueWithoutQuestionIdInput!]
  deleteMany: [CupDataQaResponseScalarWhereInput!]
  updateMany: [CupDataQaResponseUpdateManyWithWhereNestedInput!]
}

input CupDataQaResponseUpdateManyWithoutUserIdInput {
  create: [CupDataQaResponseCreateWithoutUserIdInput!]
  delete: [CupDataQaResponseWhereUniqueInput!]
  connect: [CupDataQaResponseWhereUniqueInput!]
  set: [CupDataQaResponseWhereUniqueInput!]
  disconnect: [CupDataQaResponseWhereUniqueInput!]
  update: [CupDataQaResponseUpdateWithWhereUniqueWithoutUserIdInput!]
  upsert: [CupDataQaResponseUpsertWithWhereUniqueWithoutUserIdInput!]
  deleteMany: [CupDataQaResponseScalarWhereInput!]
  updateMany: [CupDataQaResponseUpdateManyWithWhereNestedInput!]
}

input CupDataQaResponseUpdateManyWithWhereNestedInput {
  where: CupDataQaResponseScalarWhereInput!
  data: CupDataQaResponseUpdateManyDataInput!
}

input CupDataQaResponseUpdateWithoutAnswerIdDataInput {
  qaDate: DateTime
  questionId: CupDataQuestionUpdateOneRequiredWithoutCupDataQaResponseInput
  userId: UserUpdateOneRequiredWithoutCupDataQaResponseInput
}

input CupDataQaResponseUpdateWithoutQuestionIdDataInput {
  answerId: CupDataAnswerUpdateOneRequiredWithoutCupDataQaResponseInput
  qaDate: DateTime
  userId: UserUpdateOneRequiredWithoutCupDataQaResponseInput
}

input CupDataQaResponseUpdateWithoutUserIdDataInput {
  answerId: CupDataAnswerUpdateOneRequiredWithoutCupDataQaResponseInput
  qaDate: DateTime
  questionId: CupDataQuestionUpdateOneRequiredWithoutCupDataQaResponseInput
}

input CupDataQaResponseUpdateWithWhereUniqueWithoutAnswerIdInput {
  where: CupDataQaResponseWhereUniqueInput!
  data: CupDataQaResponseUpdateWithoutAnswerIdDataInput!
}

input CupDataQaResponseUpdateWithWhereUniqueWithoutQuestionIdInput {
  where: CupDataQaResponseWhereUniqueInput!
  data: CupDataQaResponseUpdateWithoutQuestionIdDataInput!
}

input CupDataQaResponseUpdateWithWhereUniqueWithoutUserIdInput {
  where: CupDataQaResponseWhereUniqueInput!
  data: CupDataQaResponseUpdateWithoutUserIdDataInput!
}

input CupDataQaResponseUpsertWithWhereUniqueWithoutAnswerIdInput {
  where: CupDataQaResponseWhereUniqueInput!
  update: CupDataQaResponseUpdateWithoutAnswerIdDataInput!
  create: CupDataQaResponseCreateWithoutAnswerIdInput!
}

input CupDataQaResponseUpsertWithWhereUniqueWithoutQuestionIdInput {
  where: CupDataQaResponseWhereUniqueInput!
  update: CupDataQaResponseUpdateWithoutQuestionIdDataInput!
  create: CupDataQaResponseCreateWithoutQuestionIdInput!
}

input CupDataQaResponseUpsertWithWhereUniqueWithoutUserIdInput {
  where: CupDataQaResponseWhereUniqueInput!
  update: CupDataQaResponseUpdateWithoutUserIdDataInput!
  create: CupDataQaResponseCreateWithoutUserIdInput!
}

input CupDataQaResponseWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  answerId: CupDataAnswerWhereInput
  qaDate: DateTime
  qaDate_not: DateTime
  qaDate_in: [DateTime!]
  qaDate_not_in: [DateTime!]
  qaDate_lt: DateTime
  qaDate_lte: DateTime
  qaDate_gt: DateTime
  qaDate_gte: DateTime
  questionId: CupDataQuestionWhereInput
  userId: UserWhereInput
  AND: [CupDataQaResponseWhereInput!]
  OR: [CupDataQaResponseWhereInput!]
  NOT: [CupDataQaResponseWhereInput!]
}

input CupDataQaResponseWhereUniqueInput {
  id: Int
}

type CupDataQuestion {
  id: Int!
  cupDataAnswer(where: CupDataAnswerWhereInput, orderBy: CupDataAnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataAnswer!]
  cupDataQaResponse(where: CupDataQaResponseWhereInput, orderBy: CupDataQaResponseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataQaResponse!]
  questionText: String!
}

type CupDataQuestionConnection {
  pageInfo: PageInfo!
  edges: [CupDataQuestionEdge]!
  aggregate: AggregateCupDataQuestion!
}

input CupDataQuestionCreateInput {
  cupDataAnswer: CupDataAnswerCreateManyWithoutQuestionIdInput
  cupDataQaResponse: CupDataQaResponseCreateManyWithoutQuestionIdInput
  questionText: String!
}

input CupDataQuestionCreateOneWithoutCupDataAnswerInput {
  create: CupDataQuestionCreateWithoutCupDataAnswerInput
  connect: CupDataQuestionWhereUniqueInput
}

input CupDataQuestionCreateOneWithoutCupDataQaResponseInput {
  create: CupDataQuestionCreateWithoutCupDataQaResponseInput
  connect: CupDataQuestionWhereUniqueInput
}

input CupDataQuestionCreateWithoutCupDataAnswerInput {
  cupDataQaResponse: CupDataQaResponseCreateManyWithoutQuestionIdInput
  questionText: String!
}

input CupDataQuestionCreateWithoutCupDataQaResponseInput {
  cupDataAnswer: CupDataAnswerCreateManyWithoutQuestionIdInput
  questionText: String!
}

type CupDataQuestionEdge {
  node: CupDataQuestion!
  cursor: String!
}

enum CupDataQuestionOrderByInput {
  id_ASC
  id_DESC
  questionText_ASC
  questionText_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CupDataQuestionPreviousValues {
  id: Int!
  questionText: String!
}

type CupDataQuestionSubscriptionPayload {
  mutation: MutationType!
  node: CupDataQuestion
  updatedFields: [String!]
  previousValues: CupDataQuestionPreviousValues
}

input CupDataQuestionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CupDataQuestionWhereInput
  AND: [CupDataQuestionSubscriptionWhereInput!]
  OR: [CupDataQuestionSubscriptionWhereInput!]
  NOT: [CupDataQuestionSubscriptionWhereInput!]
}

input CupDataQuestionUpdateInput {
  cupDataAnswer: CupDataAnswerUpdateManyWithoutQuestionIdInput
  cupDataQaResponse: CupDataQaResponseUpdateManyWithoutQuestionIdInput
  questionText: String
}

input CupDataQuestionUpdateManyMutationInput {
  questionText: String
}

input CupDataQuestionUpdateOneRequiredWithoutCupDataAnswerInput {
  create: CupDataQuestionCreateWithoutCupDataAnswerInput
  update: CupDataQuestionUpdateWithoutCupDataAnswerDataInput
  upsert: CupDataQuestionUpsertWithoutCupDataAnswerInput
  connect: CupDataQuestionWhereUniqueInput
}

input CupDataQuestionUpdateOneRequiredWithoutCupDataQaResponseInput {
  create: CupDataQuestionCreateWithoutCupDataQaResponseInput
  update: CupDataQuestionUpdateWithoutCupDataQaResponseDataInput
  upsert: CupDataQuestionUpsertWithoutCupDataQaResponseInput
  connect: CupDataQuestionWhereUniqueInput
}

input CupDataQuestionUpdateWithoutCupDataAnswerDataInput {
  cupDataQaResponse: CupDataQaResponseUpdateManyWithoutQuestionIdInput
  questionText: String
}

input CupDataQuestionUpdateWithoutCupDataQaResponseDataInput {
  cupDataAnswer: CupDataAnswerUpdateManyWithoutQuestionIdInput
  questionText: String
}

input CupDataQuestionUpsertWithoutCupDataAnswerInput {
  update: CupDataQuestionUpdateWithoutCupDataAnswerDataInput!
  create: CupDataQuestionCreateWithoutCupDataAnswerInput!
}

input CupDataQuestionUpsertWithoutCupDataQaResponseInput {
  update: CupDataQuestionUpdateWithoutCupDataQaResponseDataInput!
  create: CupDataQuestionCreateWithoutCupDataQaResponseInput!
}

input CupDataQuestionWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  cupDataAnswer_every: CupDataAnswerWhereInput
  cupDataAnswer_some: CupDataAnswerWhereInput
  cupDataAnswer_none: CupDataAnswerWhereInput
  cupDataQaResponse_every: CupDataQaResponseWhereInput
  cupDataQaResponse_some: CupDataQaResponseWhereInput
  cupDataQaResponse_none: CupDataQaResponseWhereInput
  questionText: String
  questionText_not: String
  questionText_in: [String!]
  questionText_not_in: [String!]
  questionText_lt: String
  questionText_lte: String
  questionText_gt: String
  questionText_gte: String
  questionText_contains: String
  questionText_not_contains: String
  questionText_starts_with: String
  questionText_not_starts_with: String
  questionText_ends_with: String
  questionText_not_ends_with: String
  AND: [CupDataQuestionWhereInput!]
  OR: [CupDataQuestionWhereInput!]
  NOT: [CupDataQuestionWhereInput!]
}

input CupDataQuestionWhereUniqueInput {
  id: Int
}

type CupDataRaw {
  id: Int!
  pageData: String!
  serialNumber: Cup
}

type CupDataRawConnection {
  pageInfo: PageInfo!
  edges: [CupDataRawEdge]!
  aggregate: AggregateCupDataRaw!
}

input CupDataRawCreateInput {
  pageData: String!
  serialNumber: CupCreateOneWithoutCupDataRawInput
}

input CupDataRawCreateManyWithoutSerialNumberInput {
  create: [CupDataRawCreateWithoutSerialNumberInput!]
  connect: [CupDataRawWhereUniqueInput!]
}

input CupDataRawCreateWithoutSerialNumberInput {
  pageData: String!
}

type CupDataRawEdge {
  node: CupDataRaw!
  cursor: String!
}

enum CupDataRawOrderByInput {
  id_ASC
  id_DESC
  pageData_ASC
  pageData_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CupDataRawPreviousValues {
  id: Int!
  pageData: String!
}

input CupDataRawScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  pageData: String
  pageData_not: String
  pageData_in: [String!]
  pageData_not_in: [String!]
  pageData_lt: String
  pageData_lte: String
  pageData_gt: String
  pageData_gte: String
  pageData_contains: String
  pageData_not_contains: String
  pageData_starts_with: String
  pageData_not_starts_with: String
  pageData_ends_with: String
  pageData_not_ends_with: String
  AND: [CupDataRawScalarWhereInput!]
  OR: [CupDataRawScalarWhereInput!]
  NOT: [CupDataRawScalarWhereInput!]
}

type CupDataRawSubscriptionPayload {
  mutation: MutationType!
  node: CupDataRaw
  updatedFields: [String!]
  previousValues: CupDataRawPreviousValues
}

input CupDataRawSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CupDataRawWhereInput
  AND: [CupDataRawSubscriptionWhereInput!]
  OR: [CupDataRawSubscriptionWhereInput!]
  NOT: [CupDataRawSubscriptionWhereInput!]
}

input CupDataRawUpdateInput {
  pageData: String
  serialNumber: CupUpdateOneWithoutCupDataRawInput
}

input CupDataRawUpdateManyDataInput {
  pageData: String
}

input CupDataRawUpdateManyMutationInput {
  pageData: String
}

input CupDataRawUpdateManyWithoutSerialNumberInput {
  create: [CupDataRawCreateWithoutSerialNumberInput!]
  delete: [CupDataRawWhereUniqueInput!]
  connect: [CupDataRawWhereUniqueInput!]
  set: [CupDataRawWhereUniqueInput!]
  disconnect: [CupDataRawWhereUniqueInput!]
  update: [CupDataRawUpdateWithWhereUniqueWithoutSerialNumberInput!]
  upsert: [CupDataRawUpsertWithWhereUniqueWithoutSerialNumberInput!]
  deleteMany: [CupDataRawScalarWhereInput!]
  updateMany: [CupDataRawUpdateManyWithWhereNestedInput!]
}

input CupDataRawUpdateManyWithWhereNestedInput {
  where: CupDataRawScalarWhereInput!
  data: CupDataRawUpdateManyDataInput!
}

input CupDataRawUpdateWithoutSerialNumberDataInput {
  pageData: String
}

input CupDataRawUpdateWithWhereUniqueWithoutSerialNumberInput {
  where: CupDataRawWhereUniqueInput!
  data: CupDataRawUpdateWithoutSerialNumberDataInput!
}

input CupDataRawUpsertWithWhereUniqueWithoutSerialNumberInput {
  where: CupDataRawWhereUniqueInput!
  update: CupDataRawUpdateWithoutSerialNumberDataInput!
  create: CupDataRawCreateWithoutSerialNumberInput!
}

input CupDataRawWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  pageData: String
  pageData_not: String
  pageData_in: [String!]
  pageData_not_in: [String!]
  pageData_lt: String
  pageData_lte: String
  pageData_gt: String
  pageData_gte: String
  pageData_contains: String
  pageData_not_contains: String
  pageData_starts_with: String
  pageData_not_starts_with: String
  pageData_ends_with: String
  pageData_not_ends_with: String
  serialNumber: CupWhereInput
  AND: [CupDataRawWhereInput!]
  OR: [CupDataRawWhereInput!]
  NOT: [CupDataRawWhereInput!]
}

input CupDataRawWhereUniqueInput {
  id: Int
}

type CupDataRejection {
  id: Int!
  cupDataProcMdates(where: CupDataProcMdateWhereInput, orderBy: CupDataProcMdateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataProcMdate!]
  rejectionDescription: String!
}

type CupDataRejectionConnection {
  pageInfo: PageInfo!
  edges: [CupDataRejectionEdge]!
  aggregate: AggregateCupDataRejection!
}

input CupDataRejectionCreateInput {
  cupDataProcMdates: CupDataProcMdateCreateManyWithoutRejectIdInput
  rejectionDescription: String!
}

input CupDataRejectionCreateOneWithoutCupDataProcMdatesInput {
  create: CupDataRejectionCreateWithoutCupDataProcMdatesInput
  connect: CupDataRejectionWhereUniqueInput
}

input CupDataRejectionCreateWithoutCupDataProcMdatesInput {
  rejectionDescription: String!
}

type CupDataRejectionEdge {
  node: CupDataRejection!
  cursor: String!
}

enum CupDataRejectionOrderByInput {
  id_ASC
  id_DESC
  rejectionDescription_ASC
  rejectionDescription_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CupDataRejectionPreviousValues {
  id: Int!
  rejectionDescription: String!
}

type CupDataRejectionSubscriptionPayload {
  mutation: MutationType!
  node: CupDataRejection
  updatedFields: [String!]
  previousValues: CupDataRejectionPreviousValues
}

input CupDataRejectionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CupDataRejectionWhereInput
  AND: [CupDataRejectionSubscriptionWhereInput!]
  OR: [CupDataRejectionSubscriptionWhereInput!]
  NOT: [CupDataRejectionSubscriptionWhereInput!]
}

input CupDataRejectionUpdateInput {
  cupDataProcMdates: CupDataProcMdateUpdateManyWithoutRejectIdInput
  rejectionDescription: String
}

input CupDataRejectionUpdateManyMutationInput {
  rejectionDescription: String
}

input CupDataRejectionUpdateOneWithoutCupDataProcMdatesInput {
  create: CupDataRejectionCreateWithoutCupDataProcMdatesInput
  update: CupDataRejectionUpdateWithoutCupDataProcMdatesDataInput
  upsert: CupDataRejectionUpsertWithoutCupDataProcMdatesInput
  delete: Boolean
  disconnect: Boolean
  connect: CupDataRejectionWhereUniqueInput
}

input CupDataRejectionUpdateWithoutCupDataProcMdatesDataInput {
  rejectionDescription: String
}

input CupDataRejectionUpsertWithoutCupDataProcMdatesInput {
  update: CupDataRejectionUpdateWithoutCupDataProcMdatesDataInput!
  create: CupDataRejectionCreateWithoutCupDataProcMdatesInput!
}

input CupDataRejectionWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  cupDataProcMdates_every: CupDataProcMdateWhereInput
  cupDataProcMdates_some: CupDataProcMdateWhereInput
  cupDataProcMdates_none: CupDataProcMdateWhereInput
  rejectionDescription: String
  rejectionDescription_not: String
  rejectionDescription_in: [String!]
  rejectionDescription_not_in: [String!]
  rejectionDescription_lt: String
  rejectionDescription_lte: String
  rejectionDescription_gt: String
  rejectionDescription_gte: String
  rejectionDescription_contains: String
  rejectionDescription_not_contains: String
  rejectionDescription_starts_with: String
  rejectionDescription_not_starts_with: String
  rejectionDescription_ends_with: String
  rejectionDescription_not_ends_with: String
  AND: [CupDataRejectionWhereInput!]
  OR: [CupDataRejectionWhereInput!]
  NOT: [CupDataRejectionWhereInput!]
}

input CupDataRejectionWhereUniqueInput {
  id: Int
  rejectionDescription: String
}

type CupDataUserRemove {
  id: Int!
  changeTime: DateTime!
  explainId: CupDataUserRemoveExplain!
  serialNumber: Cup!
  userId: User!
}

type CupDataUserRemoveConnection {
  pageInfo: PageInfo!
  edges: [CupDataUserRemoveEdge]!
  aggregate: AggregateCupDataUserRemove!
}

input CupDataUserRemoveCreateInput {
  changeTime: DateTime!
  explainId: CupDataUserRemoveExplainCreateOneWithoutCupDataUserRemoveInput!
  serialNumber: CupCreateOneWithoutCupDataUserRemoveInput!
  userId: UserCreateOneWithoutCupDataUserRemoveInput!
}

input CupDataUserRemoveCreateManyWithoutExplainIdInput {
  create: [CupDataUserRemoveCreateWithoutExplainIdInput!]
  connect: [CupDataUserRemoveWhereUniqueInput!]
}

input CupDataUserRemoveCreateManyWithoutSerialNumberInput {
  create: [CupDataUserRemoveCreateWithoutSerialNumberInput!]
  connect: [CupDataUserRemoveWhereUniqueInput!]
}

input CupDataUserRemoveCreateManyWithoutUserIdInput {
  create: [CupDataUserRemoveCreateWithoutUserIdInput!]
  connect: [CupDataUserRemoveWhereUniqueInput!]
}

input CupDataUserRemoveCreateWithoutExplainIdInput {
  changeTime: DateTime!
  serialNumber: CupCreateOneWithoutCupDataUserRemoveInput!
  userId: UserCreateOneWithoutCupDataUserRemoveInput!
}

input CupDataUserRemoveCreateWithoutSerialNumberInput {
  changeTime: DateTime!
  explainId: CupDataUserRemoveExplainCreateOneWithoutCupDataUserRemoveInput!
  userId: UserCreateOneWithoutCupDataUserRemoveInput!
}

input CupDataUserRemoveCreateWithoutUserIdInput {
  changeTime: DateTime!
  explainId: CupDataUserRemoveExplainCreateOneWithoutCupDataUserRemoveInput!
  serialNumber: CupCreateOneWithoutCupDataUserRemoveInput!
}

type CupDataUserRemoveEdge {
  node: CupDataUserRemove!
  cursor: String!
}

type CupDataUserRemoveExplain {
  id: Int!
  cupDataUserRemove(where: CupDataUserRemoveWhereInput, orderBy: CupDataUserRemoveOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataUserRemove!]
  explain: String!
}

type CupDataUserRemoveExplainConnection {
  pageInfo: PageInfo!
  edges: [CupDataUserRemoveExplainEdge]!
  aggregate: AggregateCupDataUserRemoveExplain!
}

input CupDataUserRemoveExplainCreateInput {
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutExplainIdInput
  explain: String!
}

input CupDataUserRemoveExplainCreateOneWithoutCupDataUserRemoveInput {
  create: CupDataUserRemoveExplainCreateWithoutCupDataUserRemoveInput
  connect: CupDataUserRemoveExplainWhereUniqueInput
}

input CupDataUserRemoveExplainCreateWithoutCupDataUserRemoveInput {
  explain: String!
}

type CupDataUserRemoveExplainEdge {
  node: CupDataUserRemoveExplain!
  cursor: String!
}

enum CupDataUserRemoveExplainOrderByInput {
  id_ASC
  id_DESC
  explain_ASC
  explain_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CupDataUserRemoveExplainPreviousValues {
  id: Int!
  explain: String!
}

type CupDataUserRemoveExplainSubscriptionPayload {
  mutation: MutationType!
  node: CupDataUserRemoveExplain
  updatedFields: [String!]
  previousValues: CupDataUserRemoveExplainPreviousValues
}

input CupDataUserRemoveExplainSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CupDataUserRemoveExplainWhereInput
  AND: [CupDataUserRemoveExplainSubscriptionWhereInput!]
  OR: [CupDataUserRemoveExplainSubscriptionWhereInput!]
  NOT: [CupDataUserRemoveExplainSubscriptionWhereInput!]
}

input CupDataUserRemoveExplainUpdateInput {
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutExplainIdInput
  explain: String
}

input CupDataUserRemoveExplainUpdateManyMutationInput {
  explain: String
}

input CupDataUserRemoveExplainUpdateOneRequiredWithoutCupDataUserRemoveInput {
  create: CupDataUserRemoveExplainCreateWithoutCupDataUserRemoveInput
  update: CupDataUserRemoveExplainUpdateWithoutCupDataUserRemoveDataInput
  upsert: CupDataUserRemoveExplainUpsertWithoutCupDataUserRemoveInput
  connect: CupDataUserRemoveExplainWhereUniqueInput
}

input CupDataUserRemoveExplainUpdateWithoutCupDataUserRemoveDataInput {
  explain: String
}

input CupDataUserRemoveExplainUpsertWithoutCupDataUserRemoveInput {
  update: CupDataUserRemoveExplainUpdateWithoutCupDataUserRemoveDataInput!
  create: CupDataUserRemoveExplainCreateWithoutCupDataUserRemoveInput!
}

input CupDataUserRemoveExplainWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  cupDataUserRemove_every: CupDataUserRemoveWhereInput
  cupDataUserRemove_some: CupDataUserRemoveWhereInput
  cupDataUserRemove_none: CupDataUserRemoveWhereInput
  explain: String
  explain_not: String
  explain_in: [String!]
  explain_not_in: [String!]
  explain_lt: String
  explain_lte: String
  explain_gt: String
  explain_gte: String
  explain_contains: String
  explain_not_contains: String
  explain_starts_with: String
  explain_not_starts_with: String
  explain_ends_with: String
  explain_not_ends_with: String
  AND: [CupDataUserRemoveExplainWhereInput!]
  OR: [CupDataUserRemoveExplainWhereInput!]
  NOT: [CupDataUserRemoveExplainWhereInput!]
}

input CupDataUserRemoveExplainWhereUniqueInput {
  id: Int
}

enum CupDataUserRemoveOrderByInput {
  id_ASC
  id_DESC
  changeTime_ASC
  changeTime_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CupDataUserRemovePreviousValues {
  id: Int!
  changeTime: DateTime!
}

input CupDataUserRemoveScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  changeTime: DateTime
  changeTime_not: DateTime
  changeTime_in: [DateTime!]
  changeTime_not_in: [DateTime!]
  changeTime_lt: DateTime
  changeTime_lte: DateTime
  changeTime_gt: DateTime
  changeTime_gte: DateTime
  AND: [CupDataUserRemoveScalarWhereInput!]
  OR: [CupDataUserRemoveScalarWhereInput!]
  NOT: [CupDataUserRemoveScalarWhereInput!]
}

type CupDataUserRemoveSubscriptionPayload {
  mutation: MutationType!
  node: CupDataUserRemove
  updatedFields: [String!]
  previousValues: CupDataUserRemovePreviousValues
}

input CupDataUserRemoveSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CupDataUserRemoveWhereInput
  AND: [CupDataUserRemoveSubscriptionWhereInput!]
  OR: [CupDataUserRemoveSubscriptionWhereInput!]
  NOT: [CupDataUserRemoveSubscriptionWhereInput!]
}

input CupDataUserRemoveUpdateInput {
  changeTime: DateTime
  explainId: CupDataUserRemoveExplainUpdateOneRequiredWithoutCupDataUserRemoveInput
  serialNumber: CupUpdateOneRequiredWithoutCupDataUserRemoveInput
  userId: UserUpdateOneRequiredWithoutCupDataUserRemoveInput
}

input CupDataUserRemoveUpdateManyDataInput {
  changeTime: DateTime
}

input CupDataUserRemoveUpdateManyMutationInput {
  changeTime: DateTime
}

input CupDataUserRemoveUpdateManyWithoutExplainIdInput {
  create: [CupDataUserRemoveCreateWithoutExplainIdInput!]
  delete: [CupDataUserRemoveWhereUniqueInput!]
  connect: [CupDataUserRemoveWhereUniqueInput!]
  set: [CupDataUserRemoveWhereUniqueInput!]
  disconnect: [CupDataUserRemoveWhereUniqueInput!]
  update: [CupDataUserRemoveUpdateWithWhereUniqueWithoutExplainIdInput!]
  upsert: [CupDataUserRemoveUpsertWithWhereUniqueWithoutExplainIdInput!]
  deleteMany: [CupDataUserRemoveScalarWhereInput!]
  updateMany: [CupDataUserRemoveUpdateManyWithWhereNestedInput!]
}

input CupDataUserRemoveUpdateManyWithoutSerialNumberInput {
  create: [CupDataUserRemoveCreateWithoutSerialNumberInput!]
  delete: [CupDataUserRemoveWhereUniqueInput!]
  connect: [CupDataUserRemoveWhereUniqueInput!]
  set: [CupDataUserRemoveWhereUniqueInput!]
  disconnect: [CupDataUserRemoveWhereUniqueInput!]
  update: [CupDataUserRemoveUpdateWithWhereUniqueWithoutSerialNumberInput!]
  upsert: [CupDataUserRemoveUpsertWithWhereUniqueWithoutSerialNumberInput!]
  deleteMany: [CupDataUserRemoveScalarWhereInput!]
  updateMany: [CupDataUserRemoveUpdateManyWithWhereNestedInput!]
}

input CupDataUserRemoveUpdateManyWithoutUserIdInput {
  create: [CupDataUserRemoveCreateWithoutUserIdInput!]
  delete: [CupDataUserRemoveWhereUniqueInput!]
  connect: [CupDataUserRemoveWhereUniqueInput!]
  set: [CupDataUserRemoveWhereUniqueInput!]
  disconnect: [CupDataUserRemoveWhereUniqueInput!]
  update: [CupDataUserRemoveUpdateWithWhereUniqueWithoutUserIdInput!]
  upsert: [CupDataUserRemoveUpsertWithWhereUniqueWithoutUserIdInput!]
  deleteMany: [CupDataUserRemoveScalarWhereInput!]
  updateMany: [CupDataUserRemoveUpdateManyWithWhereNestedInput!]
}

input CupDataUserRemoveUpdateManyWithWhereNestedInput {
  where: CupDataUserRemoveScalarWhereInput!
  data: CupDataUserRemoveUpdateManyDataInput!
}

input CupDataUserRemoveUpdateWithoutExplainIdDataInput {
  changeTime: DateTime
  serialNumber: CupUpdateOneRequiredWithoutCupDataUserRemoveInput
  userId: UserUpdateOneRequiredWithoutCupDataUserRemoveInput
}

input CupDataUserRemoveUpdateWithoutSerialNumberDataInput {
  changeTime: DateTime
  explainId: CupDataUserRemoveExplainUpdateOneRequiredWithoutCupDataUserRemoveInput
  userId: UserUpdateOneRequiredWithoutCupDataUserRemoveInput
}

input CupDataUserRemoveUpdateWithoutUserIdDataInput {
  changeTime: DateTime
  explainId: CupDataUserRemoveExplainUpdateOneRequiredWithoutCupDataUserRemoveInput
  serialNumber: CupUpdateOneRequiredWithoutCupDataUserRemoveInput
}

input CupDataUserRemoveUpdateWithWhereUniqueWithoutExplainIdInput {
  where: CupDataUserRemoveWhereUniqueInput!
  data: CupDataUserRemoveUpdateWithoutExplainIdDataInput!
}

input CupDataUserRemoveUpdateWithWhereUniqueWithoutSerialNumberInput {
  where: CupDataUserRemoveWhereUniqueInput!
  data: CupDataUserRemoveUpdateWithoutSerialNumberDataInput!
}

input CupDataUserRemoveUpdateWithWhereUniqueWithoutUserIdInput {
  where: CupDataUserRemoveWhereUniqueInput!
  data: CupDataUserRemoveUpdateWithoutUserIdDataInput!
}

input CupDataUserRemoveUpsertWithWhereUniqueWithoutExplainIdInput {
  where: CupDataUserRemoveWhereUniqueInput!
  update: CupDataUserRemoveUpdateWithoutExplainIdDataInput!
  create: CupDataUserRemoveCreateWithoutExplainIdInput!
}

input CupDataUserRemoveUpsertWithWhereUniqueWithoutSerialNumberInput {
  where: CupDataUserRemoveWhereUniqueInput!
  update: CupDataUserRemoveUpdateWithoutSerialNumberDataInput!
  create: CupDataUserRemoveCreateWithoutSerialNumberInput!
}

input CupDataUserRemoveUpsertWithWhereUniqueWithoutUserIdInput {
  where: CupDataUserRemoveWhereUniqueInput!
  update: CupDataUserRemoveUpdateWithoutUserIdDataInput!
  create: CupDataUserRemoveCreateWithoutUserIdInput!
}

input CupDataUserRemoveWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  changeTime: DateTime
  changeTime_not: DateTime
  changeTime_in: [DateTime!]
  changeTime_not_in: [DateTime!]
  changeTime_lt: DateTime
  changeTime_lte: DateTime
  changeTime_gt: DateTime
  changeTime_gte: DateTime
  explainId: CupDataUserRemoveExplainWhereInput
  serialNumber: CupWhereInput
  userId: UserWhereInput
  AND: [CupDataUserRemoveWhereInput!]
  OR: [CupDataUserRemoveWhereInput!]
  NOT: [CupDataUserRemoveWhereInput!]
}

input CupDataUserRemoveWhereUniqueInput {
  id: Int
}

type CupDatum {
  id: Int!
  battery: Int!
  calibFlag: Boolean!
  ch1: Int!
  ch10: Int!
  ch11: Int!
  ch12: Int!
  ch13: Int!
  ch14: Int!
  ch2: Int!
  ch3: Int!
  ch4: Int!
  ch5: Int!
  ch6: Int!
  ch7: Int!
  ch8: Int!
  ch9: Int!
  colourB: Int!
  colourC: Int!
  colourG: Int!
  colourR: Int!
  cupDataColourCalc(where: CupDataColourCalcWhereInput, orderBy: CupDataColourCalcOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataColourCalc!]
  cupDataProcVolume(where: CupDataProcVolumeWhereInput, orderBy: CupDataProcVolumeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataProcVolume!]
  date: DateTime!
  day: Int!
  hour: Int!
  line: Int!
  minute: Int!
  month: Int!
  page: Int!
  rawTotalVolume: Int
  rawVolumeL: Int
  rawVolumeR: Int
  serialNumber: Cup
  temperature: Int!
  x: Int!
  y: Int!
  year: Int!
  z: Int!
}

type CupDatumConnection {
  pageInfo: PageInfo!
  edges: [CupDatumEdge]!
  aggregate: AggregateCupDatum!
}

input CupDatumCreateInput {
  battery: Int!
  calibFlag: Boolean!
  ch1: Int!
  ch10: Int!
  ch11: Int!
  ch12: Int!
  ch13: Int!
  ch14: Int!
  ch2: Int!
  ch3: Int!
  ch4: Int!
  ch5: Int!
  ch6: Int!
  ch7: Int!
  ch8: Int!
  ch9: Int!
  colourB: Int!
  colourC: Int!
  colourG: Int!
  colourR: Int!
  cupDataColourCalc: CupDataColourCalcCreateManyWithoutCupDataRowIdInput
  cupDataProcVolume: CupDataProcVolumeCreateManyWithoutCupDataRowIdInput
  date: DateTime!
  day: Int!
  hour: Int!
  line: Int!
  minute: Int!
  month: Int!
  page: Int!
  rawTotalVolume: Int
  rawVolumeL: Int
  rawVolumeR: Int
  serialNumber: CupCreateOneWithoutCupDataInput
  temperature: Int!
  x: Int!
  y: Int!
  year: Int!
  z: Int!
}

input CupDatumCreateManyWithoutSerialNumberInput {
  create: [CupDatumCreateWithoutSerialNumberInput!]
  connect: [CupDatumWhereUniqueInput!]
}

input CupDatumCreateOneWithoutCupDataColourCalcInput {
  create: CupDatumCreateWithoutCupDataColourCalcInput
  connect: CupDatumWhereUniqueInput
}

input CupDatumCreateOneWithoutCupDataProcVolumeInput {
  create: CupDatumCreateWithoutCupDataProcVolumeInput
  connect: CupDatumWhereUniqueInput
}

input CupDatumCreateWithoutCupDataColourCalcInput {
  battery: Int!
  calibFlag: Boolean!
  ch1: Int!
  ch10: Int!
  ch11: Int!
  ch12: Int!
  ch13: Int!
  ch14: Int!
  ch2: Int!
  ch3: Int!
  ch4: Int!
  ch5: Int!
  ch6: Int!
  ch7: Int!
  ch8: Int!
  ch9: Int!
  colourB: Int!
  colourC: Int!
  colourG: Int!
  colourR: Int!
  cupDataProcVolume: CupDataProcVolumeCreateManyWithoutCupDataRowIdInput
  date: DateTime!
  day: Int!
  hour: Int!
  line: Int!
  minute: Int!
  month: Int!
  page: Int!
  rawTotalVolume: Int
  rawVolumeL: Int
  rawVolumeR: Int
  serialNumber: CupCreateOneWithoutCupDataInput
  temperature: Int!
  x: Int!
  y: Int!
  year: Int!
  z: Int!
}

input CupDatumCreateWithoutCupDataProcVolumeInput {
  battery: Int!
  calibFlag: Boolean!
  ch1: Int!
  ch10: Int!
  ch11: Int!
  ch12: Int!
  ch13: Int!
  ch14: Int!
  ch2: Int!
  ch3: Int!
  ch4: Int!
  ch5: Int!
  ch6: Int!
  ch7: Int!
  ch8: Int!
  ch9: Int!
  colourB: Int!
  colourC: Int!
  colourG: Int!
  colourR: Int!
  cupDataColourCalc: CupDataColourCalcCreateManyWithoutCupDataRowIdInput
  date: DateTime!
  day: Int!
  hour: Int!
  line: Int!
  minute: Int!
  month: Int!
  page: Int!
  rawTotalVolume: Int
  rawVolumeL: Int
  rawVolumeR: Int
  serialNumber: CupCreateOneWithoutCupDataInput
  temperature: Int!
  x: Int!
  y: Int!
  year: Int!
  z: Int!
}

input CupDatumCreateWithoutSerialNumberInput {
  battery: Int!
  calibFlag: Boolean!
  ch1: Int!
  ch10: Int!
  ch11: Int!
  ch12: Int!
  ch13: Int!
  ch14: Int!
  ch2: Int!
  ch3: Int!
  ch4: Int!
  ch5: Int!
  ch6: Int!
  ch7: Int!
  ch8: Int!
  ch9: Int!
  colourB: Int!
  colourC: Int!
  colourG: Int!
  colourR: Int!
  cupDataColourCalc: CupDataColourCalcCreateManyWithoutCupDataRowIdInput
  cupDataProcVolume: CupDataProcVolumeCreateManyWithoutCupDataRowIdInput
  date: DateTime!
  day: Int!
  hour: Int!
  line: Int!
  minute: Int!
  month: Int!
  page: Int!
  rawTotalVolume: Int
  rawVolumeL: Int
  rawVolumeR: Int
  temperature: Int!
  x: Int!
  y: Int!
  year: Int!
  z: Int!
}

type CupDatumEdge {
  node: CupDatum!
  cursor: String!
}

enum CupDatumOrderByInput {
  id_ASC
  id_DESC
  battery_ASC
  battery_DESC
  calibFlag_ASC
  calibFlag_DESC
  ch1_ASC
  ch1_DESC
  ch10_ASC
  ch10_DESC
  ch11_ASC
  ch11_DESC
  ch12_ASC
  ch12_DESC
  ch13_ASC
  ch13_DESC
  ch14_ASC
  ch14_DESC
  ch2_ASC
  ch2_DESC
  ch3_ASC
  ch3_DESC
  ch4_ASC
  ch4_DESC
  ch5_ASC
  ch5_DESC
  ch6_ASC
  ch6_DESC
  ch7_ASC
  ch7_DESC
  ch8_ASC
  ch8_DESC
  ch9_ASC
  ch9_DESC
  colourB_ASC
  colourB_DESC
  colourC_ASC
  colourC_DESC
  colourG_ASC
  colourG_DESC
  colourR_ASC
  colourR_DESC
  date_ASC
  date_DESC
  day_ASC
  day_DESC
  hour_ASC
  hour_DESC
  line_ASC
  line_DESC
  minute_ASC
  minute_DESC
  month_ASC
  month_DESC
  page_ASC
  page_DESC
  rawTotalVolume_ASC
  rawTotalVolume_DESC
  rawVolumeL_ASC
  rawVolumeL_DESC
  rawVolumeR_ASC
  rawVolumeR_DESC
  temperature_ASC
  temperature_DESC
  x_ASC
  x_DESC
  y_ASC
  y_DESC
  year_ASC
  year_DESC
  z_ASC
  z_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CupDatumPreviousValues {
  id: Int!
  battery: Int!
  calibFlag: Boolean!
  ch1: Int!
  ch10: Int!
  ch11: Int!
  ch12: Int!
  ch13: Int!
  ch14: Int!
  ch2: Int!
  ch3: Int!
  ch4: Int!
  ch5: Int!
  ch6: Int!
  ch7: Int!
  ch8: Int!
  ch9: Int!
  colourB: Int!
  colourC: Int!
  colourG: Int!
  colourR: Int!
  date: DateTime!
  day: Int!
  hour: Int!
  line: Int!
  minute: Int!
  month: Int!
  page: Int!
  rawTotalVolume: Int
  rawVolumeL: Int
  rawVolumeR: Int
  temperature: Int!
  x: Int!
  y: Int!
  year: Int!
  z: Int!
}

input CupDatumScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  battery: Int
  battery_not: Int
  battery_in: [Int!]
  battery_not_in: [Int!]
  battery_lt: Int
  battery_lte: Int
  battery_gt: Int
  battery_gte: Int
  calibFlag: Boolean
  calibFlag_not: Boolean
  ch1: Int
  ch1_not: Int
  ch1_in: [Int!]
  ch1_not_in: [Int!]
  ch1_lt: Int
  ch1_lte: Int
  ch1_gt: Int
  ch1_gte: Int
  ch10: Int
  ch10_not: Int
  ch10_in: [Int!]
  ch10_not_in: [Int!]
  ch10_lt: Int
  ch10_lte: Int
  ch10_gt: Int
  ch10_gte: Int
  ch11: Int
  ch11_not: Int
  ch11_in: [Int!]
  ch11_not_in: [Int!]
  ch11_lt: Int
  ch11_lte: Int
  ch11_gt: Int
  ch11_gte: Int
  ch12: Int
  ch12_not: Int
  ch12_in: [Int!]
  ch12_not_in: [Int!]
  ch12_lt: Int
  ch12_lte: Int
  ch12_gt: Int
  ch12_gte: Int
  ch13: Int
  ch13_not: Int
  ch13_in: [Int!]
  ch13_not_in: [Int!]
  ch13_lt: Int
  ch13_lte: Int
  ch13_gt: Int
  ch13_gte: Int
  ch14: Int
  ch14_not: Int
  ch14_in: [Int!]
  ch14_not_in: [Int!]
  ch14_lt: Int
  ch14_lte: Int
  ch14_gt: Int
  ch14_gte: Int
  ch2: Int
  ch2_not: Int
  ch2_in: [Int!]
  ch2_not_in: [Int!]
  ch2_lt: Int
  ch2_lte: Int
  ch2_gt: Int
  ch2_gte: Int
  ch3: Int
  ch3_not: Int
  ch3_in: [Int!]
  ch3_not_in: [Int!]
  ch3_lt: Int
  ch3_lte: Int
  ch3_gt: Int
  ch3_gte: Int
  ch4: Int
  ch4_not: Int
  ch4_in: [Int!]
  ch4_not_in: [Int!]
  ch4_lt: Int
  ch4_lte: Int
  ch4_gt: Int
  ch4_gte: Int
  ch5: Int
  ch5_not: Int
  ch5_in: [Int!]
  ch5_not_in: [Int!]
  ch5_lt: Int
  ch5_lte: Int
  ch5_gt: Int
  ch5_gte: Int
  ch6: Int
  ch6_not: Int
  ch6_in: [Int!]
  ch6_not_in: [Int!]
  ch6_lt: Int
  ch6_lte: Int
  ch6_gt: Int
  ch6_gte: Int
  ch7: Int
  ch7_not: Int
  ch7_in: [Int!]
  ch7_not_in: [Int!]
  ch7_lt: Int
  ch7_lte: Int
  ch7_gt: Int
  ch7_gte: Int
  ch8: Int
  ch8_not: Int
  ch8_in: [Int!]
  ch8_not_in: [Int!]
  ch8_lt: Int
  ch8_lte: Int
  ch8_gt: Int
  ch8_gte: Int
  ch9: Int
  ch9_not: Int
  ch9_in: [Int!]
  ch9_not_in: [Int!]
  ch9_lt: Int
  ch9_lte: Int
  ch9_gt: Int
  ch9_gte: Int
  colourB: Int
  colourB_not: Int
  colourB_in: [Int!]
  colourB_not_in: [Int!]
  colourB_lt: Int
  colourB_lte: Int
  colourB_gt: Int
  colourB_gte: Int
  colourC: Int
  colourC_not: Int
  colourC_in: [Int!]
  colourC_not_in: [Int!]
  colourC_lt: Int
  colourC_lte: Int
  colourC_gt: Int
  colourC_gte: Int
  colourG: Int
  colourG_not: Int
  colourG_in: [Int!]
  colourG_not_in: [Int!]
  colourG_lt: Int
  colourG_lte: Int
  colourG_gt: Int
  colourG_gte: Int
  colourR: Int
  colourR_not: Int
  colourR_in: [Int!]
  colourR_not_in: [Int!]
  colourR_lt: Int
  colourR_lte: Int
  colourR_gt: Int
  colourR_gte: Int
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  day: Int
  day_not: Int
  day_in: [Int!]
  day_not_in: [Int!]
  day_lt: Int
  day_lte: Int
  day_gt: Int
  day_gte: Int
  hour: Int
  hour_not: Int
  hour_in: [Int!]
  hour_not_in: [Int!]
  hour_lt: Int
  hour_lte: Int
  hour_gt: Int
  hour_gte: Int
  line: Int
  line_not: Int
  line_in: [Int!]
  line_not_in: [Int!]
  line_lt: Int
  line_lte: Int
  line_gt: Int
  line_gte: Int
  minute: Int
  minute_not: Int
  minute_in: [Int!]
  minute_not_in: [Int!]
  minute_lt: Int
  minute_lte: Int
  minute_gt: Int
  minute_gte: Int
  month: Int
  month_not: Int
  month_in: [Int!]
  month_not_in: [Int!]
  month_lt: Int
  month_lte: Int
  month_gt: Int
  month_gte: Int
  page: Int
  page_not: Int
  page_in: [Int!]
  page_not_in: [Int!]
  page_lt: Int
  page_lte: Int
  page_gt: Int
  page_gte: Int
  rawTotalVolume: Int
  rawTotalVolume_not: Int
  rawTotalVolume_in: [Int!]
  rawTotalVolume_not_in: [Int!]
  rawTotalVolume_lt: Int
  rawTotalVolume_lte: Int
  rawTotalVolume_gt: Int
  rawTotalVolume_gte: Int
  rawVolumeL: Int
  rawVolumeL_not: Int
  rawVolumeL_in: [Int!]
  rawVolumeL_not_in: [Int!]
  rawVolumeL_lt: Int
  rawVolumeL_lte: Int
  rawVolumeL_gt: Int
  rawVolumeL_gte: Int
  rawVolumeR: Int
  rawVolumeR_not: Int
  rawVolumeR_in: [Int!]
  rawVolumeR_not_in: [Int!]
  rawVolumeR_lt: Int
  rawVolumeR_lte: Int
  rawVolumeR_gt: Int
  rawVolumeR_gte: Int
  temperature: Int
  temperature_not: Int
  temperature_in: [Int!]
  temperature_not_in: [Int!]
  temperature_lt: Int
  temperature_lte: Int
  temperature_gt: Int
  temperature_gte: Int
  x: Int
  x_not: Int
  x_in: [Int!]
  x_not_in: [Int!]
  x_lt: Int
  x_lte: Int
  x_gt: Int
  x_gte: Int
  y: Int
  y_not: Int
  y_in: [Int!]
  y_not_in: [Int!]
  y_lt: Int
  y_lte: Int
  y_gt: Int
  y_gte: Int
  year: Int
  year_not: Int
  year_in: [Int!]
  year_not_in: [Int!]
  year_lt: Int
  year_lte: Int
  year_gt: Int
  year_gte: Int
  z: Int
  z_not: Int
  z_in: [Int!]
  z_not_in: [Int!]
  z_lt: Int
  z_lte: Int
  z_gt: Int
  z_gte: Int
  AND: [CupDatumScalarWhereInput!]
  OR: [CupDatumScalarWhereInput!]
  NOT: [CupDatumScalarWhereInput!]
}

type CupDatumSubscriptionPayload {
  mutation: MutationType!
  node: CupDatum
  updatedFields: [String!]
  previousValues: CupDatumPreviousValues
}

input CupDatumSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CupDatumWhereInput
  AND: [CupDatumSubscriptionWhereInput!]
  OR: [CupDatumSubscriptionWhereInput!]
  NOT: [CupDatumSubscriptionWhereInput!]
}

input CupDatumUpdateInput {
  battery: Int
  calibFlag: Boolean
  ch1: Int
  ch10: Int
  ch11: Int
  ch12: Int
  ch13: Int
  ch14: Int
  ch2: Int
  ch3: Int
  ch4: Int
  ch5: Int
  ch6: Int
  ch7: Int
  ch8: Int
  ch9: Int
  colourB: Int
  colourC: Int
  colourG: Int
  colourR: Int
  cupDataColourCalc: CupDataColourCalcUpdateManyWithoutCupDataRowIdInput
  cupDataProcVolume: CupDataProcVolumeUpdateManyWithoutCupDataRowIdInput
  date: DateTime
  day: Int
  hour: Int
  line: Int
  minute: Int
  month: Int
  page: Int
  rawTotalVolume: Int
  rawVolumeL: Int
  rawVolumeR: Int
  serialNumber: CupUpdateOneWithoutCupDataInput
  temperature: Int
  x: Int
  y: Int
  year: Int
  z: Int
}

input CupDatumUpdateManyDataInput {
  battery: Int
  calibFlag: Boolean
  ch1: Int
  ch10: Int
  ch11: Int
  ch12: Int
  ch13: Int
  ch14: Int
  ch2: Int
  ch3: Int
  ch4: Int
  ch5: Int
  ch6: Int
  ch7: Int
  ch8: Int
  ch9: Int
  colourB: Int
  colourC: Int
  colourG: Int
  colourR: Int
  date: DateTime
  day: Int
  hour: Int
  line: Int
  minute: Int
  month: Int
  page: Int
  rawTotalVolume: Int
  rawVolumeL: Int
  rawVolumeR: Int
  temperature: Int
  x: Int
  y: Int
  year: Int
  z: Int
}

input CupDatumUpdateManyMutationInput {
  battery: Int
  calibFlag: Boolean
  ch1: Int
  ch10: Int
  ch11: Int
  ch12: Int
  ch13: Int
  ch14: Int
  ch2: Int
  ch3: Int
  ch4: Int
  ch5: Int
  ch6: Int
  ch7: Int
  ch8: Int
  ch9: Int
  colourB: Int
  colourC: Int
  colourG: Int
  colourR: Int
  date: DateTime
  day: Int
  hour: Int
  line: Int
  minute: Int
  month: Int
  page: Int
  rawTotalVolume: Int
  rawVolumeL: Int
  rawVolumeR: Int
  temperature: Int
  x: Int
  y: Int
  year: Int
  z: Int
}

input CupDatumUpdateManyWithoutSerialNumberInput {
  create: [CupDatumCreateWithoutSerialNumberInput!]
  delete: [CupDatumWhereUniqueInput!]
  connect: [CupDatumWhereUniqueInput!]
  set: [CupDatumWhereUniqueInput!]
  disconnect: [CupDatumWhereUniqueInput!]
  update: [CupDatumUpdateWithWhereUniqueWithoutSerialNumberInput!]
  upsert: [CupDatumUpsertWithWhereUniqueWithoutSerialNumberInput!]
  deleteMany: [CupDatumScalarWhereInput!]
  updateMany: [CupDatumUpdateManyWithWhereNestedInput!]
}

input CupDatumUpdateManyWithWhereNestedInput {
  where: CupDatumScalarWhereInput!
  data: CupDatumUpdateManyDataInput!
}

input CupDatumUpdateOneRequiredWithoutCupDataColourCalcInput {
  create: CupDatumCreateWithoutCupDataColourCalcInput
  update: CupDatumUpdateWithoutCupDataColourCalcDataInput
  upsert: CupDatumUpsertWithoutCupDataColourCalcInput
  connect: CupDatumWhereUniqueInput
}

input CupDatumUpdateOneRequiredWithoutCupDataProcVolumeInput {
  create: CupDatumCreateWithoutCupDataProcVolumeInput
  update: CupDatumUpdateWithoutCupDataProcVolumeDataInput
  upsert: CupDatumUpsertWithoutCupDataProcVolumeInput
  connect: CupDatumWhereUniqueInput
}

input CupDatumUpdateWithoutCupDataColourCalcDataInput {
  battery: Int
  calibFlag: Boolean
  ch1: Int
  ch10: Int
  ch11: Int
  ch12: Int
  ch13: Int
  ch14: Int
  ch2: Int
  ch3: Int
  ch4: Int
  ch5: Int
  ch6: Int
  ch7: Int
  ch8: Int
  ch9: Int
  colourB: Int
  colourC: Int
  colourG: Int
  colourR: Int
  cupDataProcVolume: CupDataProcVolumeUpdateManyWithoutCupDataRowIdInput
  date: DateTime
  day: Int
  hour: Int
  line: Int
  minute: Int
  month: Int
  page: Int
  rawTotalVolume: Int
  rawVolumeL: Int
  rawVolumeR: Int
  serialNumber: CupUpdateOneWithoutCupDataInput
  temperature: Int
  x: Int
  y: Int
  year: Int
  z: Int
}

input CupDatumUpdateWithoutCupDataProcVolumeDataInput {
  battery: Int
  calibFlag: Boolean
  ch1: Int
  ch10: Int
  ch11: Int
  ch12: Int
  ch13: Int
  ch14: Int
  ch2: Int
  ch3: Int
  ch4: Int
  ch5: Int
  ch6: Int
  ch7: Int
  ch8: Int
  ch9: Int
  colourB: Int
  colourC: Int
  colourG: Int
  colourR: Int
  cupDataColourCalc: CupDataColourCalcUpdateManyWithoutCupDataRowIdInput
  date: DateTime
  day: Int
  hour: Int
  line: Int
  minute: Int
  month: Int
  page: Int
  rawTotalVolume: Int
  rawVolumeL: Int
  rawVolumeR: Int
  serialNumber: CupUpdateOneWithoutCupDataInput
  temperature: Int
  x: Int
  y: Int
  year: Int
  z: Int
}

input CupDatumUpdateWithoutSerialNumberDataInput {
  battery: Int
  calibFlag: Boolean
  ch1: Int
  ch10: Int
  ch11: Int
  ch12: Int
  ch13: Int
  ch14: Int
  ch2: Int
  ch3: Int
  ch4: Int
  ch5: Int
  ch6: Int
  ch7: Int
  ch8: Int
  ch9: Int
  colourB: Int
  colourC: Int
  colourG: Int
  colourR: Int
  cupDataColourCalc: CupDataColourCalcUpdateManyWithoutCupDataRowIdInput
  cupDataProcVolume: CupDataProcVolumeUpdateManyWithoutCupDataRowIdInput
  date: DateTime
  day: Int
  hour: Int
  line: Int
  minute: Int
  month: Int
  page: Int
  rawTotalVolume: Int
  rawVolumeL: Int
  rawVolumeR: Int
  temperature: Int
  x: Int
  y: Int
  year: Int
  z: Int
}

input CupDatumUpdateWithWhereUniqueWithoutSerialNumberInput {
  where: CupDatumWhereUniqueInput!
  data: CupDatumUpdateWithoutSerialNumberDataInput!
}

input CupDatumUpsertWithoutCupDataColourCalcInput {
  update: CupDatumUpdateWithoutCupDataColourCalcDataInput!
  create: CupDatumCreateWithoutCupDataColourCalcInput!
}

input CupDatumUpsertWithoutCupDataProcVolumeInput {
  update: CupDatumUpdateWithoutCupDataProcVolumeDataInput!
  create: CupDatumCreateWithoutCupDataProcVolumeInput!
}

input CupDatumUpsertWithWhereUniqueWithoutSerialNumberInput {
  where: CupDatumWhereUniqueInput!
  update: CupDatumUpdateWithoutSerialNumberDataInput!
  create: CupDatumCreateWithoutSerialNumberInput!
}

input CupDatumWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  battery: Int
  battery_not: Int
  battery_in: [Int!]
  battery_not_in: [Int!]
  battery_lt: Int
  battery_lte: Int
  battery_gt: Int
  battery_gte: Int
  calibFlag: Boolean
  calibFlag_not: Boolean
  ch1: Int
  ch1_not: Int
  ch1_in: [Int!]
  ch1_not_in: [Int!]
  ch1_lt: Int
  ch1_lte: Int
  ch1_gt: Int
  ch1_gte: Int
  ch10: Int
  ch10_not: Int
  ch10_in: [Int!]
  ch10_not_in: [Int!]
  ch10_lt: Int
  ch10_lte: Int
  ch10_gt: Int
  ch10_gte: Int
  ch11: Int
  ch11_not: Int
  ch11_in: [Int!]
  ch11_not_in: [Int!]
  ch11_lt: Int
  ch11_lte: Int
  ch11_gt: Int
  ch11_gte: Int
  ch12: Int
  ch12_not: Int
  ch12_in: [Int!]
  ch12_not_in: [Int!]
  ch12_lt: Int
  ch12_lte: Int
  ch12_gt: Int
  ch12_gte: Int
  ch13: Int
  ch13_not: Int
  ch13_in: [Int!]
  ch13_not_in: [Int!]
  ch13_lt: Int
  ch13_lte: Int
  ch13_gt: Int
  ch13_gte: Int
  ch14: Int
  ch14_not: Int
  ch14_in: [Int!]
  ch14_not_in: [Int!]
  ch14_lt: Int
  ch14_lte: Int
  ch14_gt: Int
  ch14_gte: Int
  ch2: Int
  ch2_not: Int
  ch2_in: [Int!]
  ch2_not_in: [Int!]
  ch2_lt: Int
  ch2_lte: Int
  ch2_gt: Int
  ch2_gte: Int
  ch3: Int
  ch3_not: Int
  ch3_in: [Int!]
  ch3_not_in: [Int!]
  ch3_lt: Int
  ch3_lte: Int
  ch3_gt: Int
  ch3_gte: Int
  ch4: Int
  ch4_not: Int
  ch4_in: [Int!]
  ch4_not_in: [Int!]
  ch4_lt: Int
  ch4_lte: Int
  ch4_gt: Int
  ch4_gte: Int
  ch5: Int
  ch5_not: Int
  ch5_in: [Int!]
  ch5_not_in: [Int!]
  ch5_lt: Int
  ch5_lte: Int
  ch5_gt: Int
  ch5_gte: Int
  ch6: Int
  ch6_not: Int
  ch6_in: [Int!]
  ch6_not_in: [Int!]
  ch6_lt: Int
  ch6_lte: Int
  ch6_gt: Int
  ch6_gte: Int
  ch7: Int
  ch7_not: Int
  ch7_in: [Int!]
  ch7_not_in: [Int!]
  ch7_lt: Int
  ch7_lte: Int
  ch7_gt: Int
  ch7_gte: Int
  ch8: Int
  ch8_not: Int
  ch8_in: [Int!]
  ch8_not_in: [Int!]
  ch8_lt: Int
  ch8_lte: Int
  ch8_gt: Int
  ch8_gte: Int
  ch9: Int
  ch9_not: Int
  ch9_in: [Int!]
  ch9_not_in: [Int!]
  ch9_lt: Int
  ch9_lte: Int
  ch9_gt: Int
  ch9_gte: Int
  colourB: Int
  colourB_not: Int
  colourB_in: [Int!]
  colourB_not_in: [Int!]
  colourB_lt: Int
  colourB_lte: Int
  colourB_gt: Int
  colourB_gte: Int
  colourC: Int
  colourC_not: Int
  colourC_in: [Int!]
  colourC_not_in: [Int!]
  colourC_lt: Int
  colourC_lte: Int
  colourC_gt: Int
  colourC_gte: Int
  colourG: Int
  colourG_not: Int
  colourG_in: [Int!]
  colourG_not_in: [Int!]
  colourG_lt: Int
  colourG_lte: Int
  colourG_gt: Int
  colourG_gte: Int
  colourR: Int
  colourR_not: Int
  colourR_in: [Int!]
  colourR_not_in: [Int!]
  colourR_lt: Int
  colourR_lte: Int
  colourR_gt: Int
  colourR_gte: Int
  cupDataColourCalc_every: CupDataColourCalcWhereInput
  cupDataColourCalc_some: CupDataColourCalcWhereInput
  cupDataColourCalc_none: CupDataColourCalcWhereInput
  cupDataProcVolume_every: CupDataProcVolumeWhereInput
  cupDataProcVolume_some: CupDataProcVolumeWhereInput
  cupDataProcVolume_none: CupDataProcVolumeWhereInput
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  day: Int
  day_not: Int
  day_in: [Int!]
  day_not_in: [Int!]
  day_lt: Int
  day_lte: Int
  day_gt: Int
  day_gte: Int
  hour: Int
  hour_not: Int
  hour_in: [Int!]
  hour_not_in: [Int!]
  hour_lt: Int
  hour_lte: Int
  hour_gt: Int
  hour_gte: Int
  line: Int
  line_not: Int
  line_in: [Int!]
  line_not_in: [Int!]
  line_lt: Int
  line_lte: Int
  line_gt: Int
  line_gte: Int
  minute: Int
  minute_not: Int
  minute_in: [Int!]
  minute_not_in: [Int!]
  minute_lt: Int
  minute_lte: Int
  minute_gt: Int
  minute_gte: Int
  month: Int
  month_not: Int
  month_in: [Int!]
  month_not_in: [Int!]
  month_lt: Int
  month_lte: Int
  month_gt: Int
  month_gte: Int
  page: Int
  page_not: Int
  page_in: [Int!]
  page_not_in: [Int!]
  page_lt: Int
  page_lte: Int
  page_gt: Int
  page_gte: Int
  rawTotalVolume: Int
  rawTotalVolume_not: Int
  rawTotalVolume_in: [Int!]
  rawTotalVolume_not_in: [Int!]
  rawTotalVolume_lt: Int
  rawTotalVolume_lte: Int
  rawTotalVolume_gt: Int
  rawTotalVolume_gte: Int
  rawVolumeL: Int
  rawVolumeL_not: Int
  rawVolumeL_in: [Int!]
  rawVolumeL_not_in: [Int!]
  rawVolumeL_lt: Int
  rawVolumeL_lte: Int
  rawVolumeL_gt: Int
  rawVolumeL_gte: Int
  rawVolumeR: Int
  rawVolumeR_not: Int
  rawVolumeR_in: [Int!]
  rawVolumeR_not_in: [Int!]
  rawVolumeR_lt: Int
  rawVolumeR_lte: Int
  rawVolumeR_gt: Int
  rawVolumeR_gte: Int
  serialNumber: CupWhereInput
  temperature: Int
  temperature_not: Int
  temperature_in: [Int!]
  temperature_not_in: [Int!]
  temperature_lt: Int
  temperature_lte: Int
  temperature_gt: Int
  temperature_gte: Int
  x: Int
  x_not: Int
  x_in: [Int!]
  x_not_in: [Int!]
  x_lt: Int
  x_lte: Int
  x_gt: Int
  x_gte: Int
  y: Int
  y_not: Int
  y_in: [Int!]
  y_not_in: [Int!]
  y_lt: Int
  y_lte: Int
  y_gt: Int
  y_gte: Int
  year: Int
  year_not: Int
  year_in: [Int!]
  year_not_in: [Int!]
  year_lt: Int
  year_lte: Int
  year_gt: Int
  year_gte: Int
  z: Int
  z_not: Int
  z_in: [Int!]
  z_not_in: [Int!]
  z_lt: Int
  z_lte: Int
  z_gt: Int
  z_gte: Int
  AND: [CupDatumWhereInput!]
  OR: [CupDatumWhereInput!]
  NOT: [CupDatumWhereInput!]
}

input CupDatumWhereUniqueInput {
  id: Int
}

type CupEdge {
  node: Cup!
  cursor: String!
}

enum CupOrderByInput {
  id_ASC
  id_DESC
  anonSerialNumber_ASC
  anonSerialNumber_DESC
  encryptionKey_ASC
  encryptionKey_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CupPreviousValues {
  id: Int!
  anonSerialNumber: Int!
  encryptionKey: Int!
}

input CupScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  anonSerialNumber: Int
  anonSerialNumber_not: Int
  anonSerialNumber_in: [Int!]
  anonSerialNumber_not_in: [Int!]
  anonSerialNumber_lt: Int
  anonSerialNumber_lte: Int
  anonSerialNumber_gt: Int
  anonSerialNumber_gte: Int
  encryptionKey: Int
  encryptionKey_not: Int
  encryptionKey_in: [Int!]
  encryptionKey_not_in: [Int!]
  encryptionKey_lt: Int
  encryptionKey_lte: Int
  encryptionKey_gt: Int
  encryptionKey_gte: Int
  AND: [CupScalarWhereInput!]
  OR: [CupScalarWhereInput!]
  NOT: [CupScalarWhereInput!]
}

type CupSubscriptionPayload {
  mutation: MutationType!
  node: Cup
  updatedFields: [String!]
  previousValues: CupPreviousValues
}

input CupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CupWhereInput
  AND: [CupSubscriptionWhereInput!]
  OR: [CupSubscriptionWhereInput!]
  NOT: [CupSubscriptionWhereInput!]
}

input CupUpdateInput {
  anonSerialNumber: Int
  calibId: CalibrationUpdateOneWithoutCupInput
  companyId: CompanyUpdateOneWithoutCupInput
  cupAppSync: CupAppSyncUpdateManyWithoutSerialNumberInput
  cupData: CupDatumUpdateManyWithoutSerialNumberInput
  cupDataColourCalib: CupDataColourCalibUpdateManyWithoutSerialNumberInput
  cupDataRaw: CupDataRawUpdateManyWithoutSerialNumberInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutSerialNumberInput
  encryptionKey: Int
  fwId: FirmwareUpdateOneWithoutCupInput
  hwId: HardwareUpdateOneWithoutCupInput
  userCups: UserCupUpdateManyWithoutSerialNumberInput
}

input CupUpdateManyDataInput {
  anonSerialNumber: Int
  encryptionKey: Int
}

input CupUpdateManyMutationInput {
  anonSerialNumber: Int
  encryptionKey: Int
}

input CupUpdateManyWithoutCalibIdInput {
  create: [CupCreateWithoutCalibIdInput!]
  delete: [CupWhereUniqueInput!]
  connect: [CupWhereUniqueInput!]
  set: [CupWhereUniqueInput!]
  disconnect: [CupWhereUniqueInput!]
  update: [CupUpdateWithWhereUniqueWithoutCalibIdInput!]
  upsert: [CupUpsertWithWhereUniqueWithoutCalibIdInput!]
  deleteMany: [CupScalarWhereInput!]
  updateMany: [CupUpdateManyWithWhereNestedInput!]
}

input CupUpdateManyWithoutCompanyIdInput {
  create: [CupCreateWithoutCompanyIdInput!]
  delete: [CupWhereUniqueInput!]
  connect: [CupWhereUniqueInput!]
  set: [CupWhereUniqueInput!]
  disconnect: [CupWhereUniqueInput!]
  update: [CupUpdateWithWhereUniqueWithoutCompanyIdInput!]
  upsert: [CupUpsertWithWhereUniqueWithoutCompanyIdInput!]
  deleteMany: [CupScalarWhereInput!]
  updateMany: [CupUpdateManyWithWhereNestedInput!]
}

input CupUpdateManyWithoutFwIdInput {
  create: [CupCreateWithoutFwIdInput!]
  delete: [CupWhereUniqueInput!]
  connect: [CupWhereUniqueInput!]
  set: [CupWhereUniqueInput!]
  disconnect: [CupWhereUniqueInput!]
  update: [CupUpdateWithWhereUniqueWithoutFwIdInput!]
  upsert: [CupUpsertWithWhereUniqueWithoutFwIdInput!]
  deleteMany: [CupScalarWhereInput!]
  updateMany: [CupUpdateManyWithWhereNestedInput!]
}

input CupUpdateManyWithoutHwIdInput {
  create: [CupCreateWithoutHwIdInput!]
  delete: [CupWhereUniqueInput!]
  connect: [CupWhereUniqueInput!]
  set: [CupWhereUniqueInput!]
  disconnect: [CupWhereUniqueInput!]
  update: [CupUpdateWithWhereUniqueWithoutHwIdInput!]
  upsert: [CupUpsertWithWhereUniqueWithoutHwIdInput!]
  deleteMany: [CupScalarWhereInput!]
  updateMany: [CupUpdateManyWithWhereNestedInput!]
}

input CupUpdateManyWithWhereNestedInput {
  where: CupScalarWhereInput!
  data: CupUpdateManyDataInput!
}

input CupUpdateOneRequiredWithoutCupAppSyncInput {
  create: CupCreateWithoutCupAppSyncInput
  update: CupUpdateWithoutCupAppSyncDataInput
  upsert: CupUpsertWithoutCupAppSyncInput
  connect: CupWhereUniqueInput
}

input CupUpdateOneRequiredWithoutCupDataColourCalibInput {
  create: CupCreateWithoutCupDataColourCalibInput
  update: CupUpdateWithoutCupDataColourCalibDataInput
  upsert: CupUpsertWithoutCupDataColourCalibInput
  connect: CupWhereUniqueInput
}

input CupUpdateOneRequiredWithoutCupDataUserRemoveInput {
  create: CupCreateWithoutCupDataUserRemoveInput
  update: CupUpdateWithoutCupDataUserRemoveDataInput
  upsert: CupUpsertWithoutCupDataUserRemoveInput
  connect: CupWhereUniqueInput
}

input CupUpdateOneWithoutCupDataInput {
  create: CupCreateWithoutCupDataInput
  update: CupUpdateWithoutCupDataDataInput
  upsert: CupUpsertWithoutCupDataInput
  delete: Boolean
  disconnect: Boolean
  connect: CupWhereUniqueInput
}

input CupUpdateOneWithoutCupDataRawInput {
  create: CupCreateWithoutCupDataRawInput
  update: CupUpdateWithoutCupDataRawDataInput
  upsert: CupUpsertWithoutCupDataRawInput
  delete: Boolean
  disconnect: Boolean
  connect: CupWhereUniqueInput
}

input CupUpdateOneWithoutUserCupsInput {
  create: CupCreateWithoutUserCupsInput
  update: CupUpdateWithoutUserCupsDataInput
  upsert: CupUpsertWithoutUserCupsInput
  delete: Boolean
  disconnect: Boolean
  connect: CupWhereUniqueInput
}

input CupUpdateWithoutCalibIdDataInput {
  anonSerialNumber: Int
  companyId: CompanyUpdateOneWithoutCupInput
  cupAppSync: CupAppSyncUpdateManyWithoutSerialNumberInput
  cupData: CupDatumUpdateManyWithoutSerialNumberInput
  cupDataColourCalib: CupDataColourCalibUpdateManyWithoutSerialNumberInput
  cupDataRaw: CupDataRawUpdateManyWithoutSerialNumberInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutSerialNumberInput
  encryptionKey: Int
  fwId: FirmwareUpdateOneWithoutCupInput
  hwId: HardwareUpdateOneWithoutCupInput
  userCups: UserCupUpdateManyWithoutSerialNumberInput
}

input CupUpdateWithoutCompanyIdDataInput {
  anonSerialNumber: Int
  calibId: CalibrationUpdateOneWithoutCupInput
  cupAppSync: CupAppSyncUpdateManyWithoutSerialNumberInput
  cupData: CupDatumUpdateManyWithoutSerialNumberInput
  cupDataColourCalib: CupDataColourCalibUpdateManyWithoutSerialNumberInput
  cupDataRaw: CupDataRawUpdateManyWithoutSerialNumberInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutSerialNumberInput
  encryptionKey: Int
  fwId: FirmwareUpdateOneWithoutCupInput
  hwId: HardwareUpdateOneWithoutCupInput
  userCups: UserCupUpdateManyWithoutSerialNumberInput
}

input CupUpdateWithoutCupAppSyncDataInput {
  anonSerialNumber: Int
  calibId: CalibrationUpdateOneWithoutCupInput
  companyId: CompanyUpdateOneWithoutCupInput
  cupData: CupDatumUpdateManyWithoutSerialNumberInput
  cupDataColourCalib: CupDataColourCalibUpdateManyWithoutSerialNumberInput
  cupDataRaw: CupDataRawUpdateManyWithoutSerialNumberInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutSerialNumberInput
  encryptionKey: Int
  fwId: FirmwareUpdateOneWithoutCupInput
  hwId: HardwareUpdateOneWithoutCupInput
  userCups: UserCupUpdateManyWithoutSerialNumberInput
}

input CupUpdateWithoutCupDataColourCalibDataInput {
  anonSerialNumber: Int
  calibId: CalibrationUpdateOneWithoutCupInput
  companyId: CompanyUpdateOneWithoutCupInput
  cupAppSync: CupAppSyncUpdateManyWithoutSerialNumberInput
  cupData: CupDatumUpdateManyWithoutSerialNumberInput
  cupDataRaw: CupDataRawUpdateManyWithoutSerialNumberInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutSerialNumberInput
  encryptionKey: Int
  fwId: FirmwareUpdateOneWithoutCupInput
  hwId: HardwareUpdateOneWithoutCupInput
  userCups: UserCupUpdateManyWithoutSerialNumberInput
}

input CupUpdateWithoutCupDataDataInput {
  anonSerialNumber: Int
  calibId: CalibrationUpdateOneWithoutCupInput
  companyId: CompanyUpdateOneWithoutCupInput
  cupAppSync: CupAppSyncUpdateManyWithoutSerialNumberInput
  cupDataColourCalib: CupDataColourCalibUpdateManyWithoutSerialNumberInput
  cupDataRaw: CupDataRawUpdateManyWithoutSerialNumberInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutSerialNumberInput
  encryptionKey: Int
  fwId: FirmwareUpdateOneWithoutCupInput
  hwId: HardwareUpdateOneWithoutCupInput
  userCups: UserCupUpdateManyWithoutSerialNumberInput
}

input CupUpdateWithoutCupDataRawDataInput {
  anonSerialNumber: Int
  calibId: CalibrationUpdateOneWithoutCupInput
  companyId: CompanyUpdateOneWithoutCupInput
  cupAppSync: CupAppSyncUpdateManyWithoutSerialNumberInput
  cupData: CupDatumUpdateManyWithoutSerialNumberInput
  cupDataColourCalib: CupDataColourCalibUpdateManyWithoutSerialNumberInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutSerialNumberInput
  encryptionKey: Int
  fwId: FirmwareUpdateOneWithoutCupInput
  hwId: HardwareUpdateOneWithoutCupInput
  userCups: UserCupUpdateManyWithoutSerialNumberInput
}

input CupUpdateWithoutCupDataUserRemoveDataInput {
  anonSerialNumber: Int
  calibId: CalibrationUpdateOneWithoutCupInput
  companyId: CompanyUpdateOneWithoutCupInput
  cupAppSync: CupAppSyncUpdateManyWithoutSerialNumberInput
  cupData: CupDatumUpdateManyWithoutSerialNumberInput
  cupDataColourCalib: CupDataColourCalibUpdateManyWithoutSerialNumberInput
  cupDataRaw: CupDataRawUpdateManyWithoutSerialNumberInput
  encryptionKey: Int
  fwId: FirmwareUpdateOneWithoutCupInput
  hwId: HardwareUpdateOneWithoutCupInput
  userCups: UserCupUpdateManyWithoutSerialNumberInput
}

input CupUpdateWithoutFwIdDataInput {
  anonSerialNumber: Int
  calibId: CalibrationUpdateOneWithoutCupInput
  companyId: CompanyUpdateOneWithoutCupInput
  cupAppSync: CupAppSyncUpdateManyWithoutSerialNumberInput
  cupData: CupDatumUpdateManyWithoutSerialNumberInput
  cupDataColourCalib: CupDataColourCalibUpdateManyWithoutSerialNumberInput
  cupDataRaw: CupDataRawUpdateManyWithoutSerialNumberInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutSerialNumberInput
  encryptionKey: Int
  hwId: HardwareUpdateOneWithoutCupInput
  userCups: UserCupUpdateManyWithoutSerialNumberInput
}

input CupUpdateWithoutHwIdDataInput {
  anonSerialNumber: Int
  calibId: CalibrationUpdateOneWithoutCupInput
  companyId: CompanyUpdateOneWithoutCupInput
  cupAppSync: CupAppSyncUpdateManyWithoutSerialNumberInput
  cupData: CupDatumUpdateManyWithoutSerialNumberInput
  cupDataColourCalib: CupDataColourCalibUpdateManyWithoutSerialNumberInput
  cupDataRaw: CupDataRawUpdateManyWithoutSerialNumberInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutSerialNumberInput
  encryptionKey: Int
  fwId: FirmwareUpdateOneWithoutCupInput
  userCups: UserCupUpdateManyWithoutSerialNumberInput
}

input CupUpdateWithoutUserCupsDataInput {
  anonSerialNumber: Int
  calibId: CalibrationUpdateOneWithoutCupInput
  companyId: CompanyUpdateOneWithoutCupInput
  cupAppSync: CupAppSyncUpdateManyWithoutSerialNumberInput
  cupData: CupDatumUpdateManyWithoutSerialNumberInput
  cupDataColourCalib: CupDataColourCalibUpdateManyWithoutSerialNumberInput
  cupDataRaw: CupDataRawUpdateManyWithoutSerialNumberInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutSerialNumberInput
  encryptionKey: Int
  fwId: FirmwareUpdateOneWithoutCupInput
  hwId: HardwareUpdateOneWithoutCupInput
}

input CupUpdateWithWhereUniqueWithoutCalibIdInput {
  where: CupWhereUniqueInput!
  data: CupUpdateWithoutCalibIdDataInput!
}

input CupUpdateWithWhereUniqueWithoutCompanyIdInput {
  where: CupWhereUniqueInput!
  data: CupUpdateWithoutCompanyIdDataInput!
}

input CupUpdateWithWhereUniqueWithoutFwIdInput {
  where: CupWhereUniqueInput!
  data: CupUpdateWithoutFwIdDataInput!
}

input CupUpdateWithWhereUniqueWithoutHwIdInput {
  where: CupWhereUniqueInput!
  data: CupUpdateWithoutHwIdDataInput!
}

input CupUpsertWithoutCupAppSyncInput {
  update: CupUpdateWithoutCupAppSyncDataInput!
  create: CupCreateWithoutCupAppSyncInput!
}

input CupUpsertWithoutCupDataColourCalibInput {
  update: CupUpdateWithoutCupDataColourCalibDataInput!
  create: CupCreateWithoutCupDataColourCalibInput!
}

input CupUpsertWithoutCupDataInput {
  update: CupUpdateWithoutCupDataDataInput!
  create: CupCreateWithoutCupDataInput!
}

input CupUpsertWithoutCupDataRawInput {
  update: CupUpdateWithoutCupDataRawDataInput!
  create: CupCreateWithoutCupDataRawInput!
}

input CupUpsertWithoutCupDataUserRemoveInput {
  update: CupUpdateWithoutCupDataUserRemoveDataInput!
  create: CupCreateWithoutCupDataUserRemoveInput!
}

input CupUpsertWithoutUserCupsInput {
  update: CupUpdateWithoutUserCupsDataInput!
  create: CupCreateWithoutUserCupsInput!
}

input CupUpsertWithWhereUniqueWithoutCalibIdInput {
  where: CupWhereUniqueInput!
  update: CupUpdateWithoutCalibIdDataInput!
  create: CupCreateWithoutCalibIdInput!
}

input CupUpsertWithWhereUniqueWithoutCompanyIdInput {
  where: CupWhereUniqueInput!
  update: CupUpdateWithoutCompanyIdDataInput!
  create: CupCreateWithoutCompanyIdInput!
}

input CupUpsertWithWhereUniqueWithoutFwIdInput {
  where: CupWhereUniqueInput!
  update: CupUpdateWithoutFwIdDataInput!
  create: CupCreateWithoutFwIdInput!
}

input CupUpsertWithWhereUniqueWithoutHwIdInput {
  where: CupWhereUniqueInput!
  update: CupUpdateWithoutHwIdDataInput!
  create: CupCreateWithoutHwIdInput!
}

input CupWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  anonSerialNumber: Int
  anonSerialNumber_not: Int
  anonSerialNumber_in: [Int!]
  anonSerialNumber_not_in: [Int!]
  anonSerialNumber_lt: Int
  anonSerialNumber_lte: Int
  anonSerialNumber_gt: Int
  anonSerialNumber_gte: Int
  calibId: CalibrationWhereInput
  companyId: CompanyWhereInput
  cupAppSync_every: CupAppSyncWhereInput
  cupAppSync_some: CupAppSyncWhereInput
  cupAppSync_none: CupAppSyncWhereInput
  cupData_every: CupDatumWhereInput
  cupData_some: CupDatumWhereInput
  cupData_none: CupDatumWhereInput
  cupDataColourCalib_every: CupDataColourCalibWhereInput
  cupDataColourCalib_some: CupDataColourCalibWhereInput
  cupDataColourCalib_none: CupDataColourCalibWhereInput
  cupDataRaw_every: CupDataRawWhereInput
  cupDataRaw_some: CupDataRawWhereInput
  cupDataRaw_none: CupDataRawWhereInput
  cupDataUserRemove_every: CupDataUserRemoveWhereInput
  cupDataUserRemove_some: CupDataUserRemoveWhereInput
  cupDataUserRemove_none: CupDataUserRemoveWhereInput
  encryptionKey: Int
  encryptionKey_not: Int
  encryptionKey_in: [Int!]
  encryptionKey_not_in: [Int!]
  encryptionKey_lt: Int
  encryptionKey_lte: Int
  encryptionKey_gt: Int
  encryptionKey_gte: Int
  fwId: FirmwareWhereInput
  hwId: HardwareWhereInput
  userCups_every: UserCupWhereInput
  userCups_some: UserCupWhereInput
  userCups_none: UserCupWhereInput
  AND: [CupWhereInput!]
  OR: [CupWhereInput!]
  NOT: [CupWhereInput!]
}

input CupWhereUniqueInput {
  id: Int
}

scalar DateTime

type Ethnicity {
  id: Int!
  ethnicity: String!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type EthnicityConnection {
  pageInfo: PageInfo!
  edges: [EthnicityEdge]!
  aggregate: AggregateEthnicity!
}

input EthnicityCreateInput {
  ethnicity: String!
  users: UserCreateManyWithoutEthnicityIdInput
}

input EthnicityCreateOneWithoutUsersInput {
  create: EthnicityCreateWithoutUsersInput
  connect: EthnicityWhereUniqueInput
}

input EthnicityCreateWithoutUsersInput {
  ethnicity: String!
}

type EthnicityEdge {
  node: Ethnicity!
  cursor: String!
}

enum EthnicityOrderByInput {
  id_ASC
  id_DESC
  ethnicity_ASC
  ethnicity_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EthnicityPreviousValues {
  id: Int!
  ethnicity: String!
}

type EthnicitySubscriptionPayload {
  mutation: MutationType!
  node: Ethnicity
  updatedFields: [String!]
  previousValues: EthnicityPreviousValues
}

input EthnicitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EthnicityWhereInput
  AND: [EthnicitySubscriptionWhereInput!]
  OR: [EthnicitySubscriptionWhereInput!]
  NOT: [EthnicitySubscriptionWhereInput!]
}

input EthnicityUpdateInput {
  ethnicity: String
  users: UserUpdateManyWithoutEthnicityIdInput
}

input EthnicityUpdateManyMutationInput {
  ethnicity: String
}

input EthnicityUpdateOneRequiredWithoutUsersInput {
  create: EthnicityCreateWithoutUsersInput
  update: EthnicityUpdateWithoutUsersDataInput
  upsert: EthnicityUpsertWithoutUsersInput
  connect: EthnicityWhereUniqueInput
}

input EthnicityUpdateWithoutUsersDataInput {
  ethnicity: String
}

input EthnicityUpsertWithoutUsersInput {
  update: EthnicityUpdateWithoutUsersDataInput!
  create: EthnicityCreateWithoutUsersInput!
}

input EthnicityWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  ethnicity: String
  ethnicity_not: String
  ethnicity_in: [String!]
  ethnicity_not_in: [String!]
  ethnicity_lt: String
  ethnicity_lte: String
  ethnicity_gt: String
  ethnicity_gte: String
  ethnicity_contains: String
  ethnicity_not_contains: String
  ethnicity_starts_with: String
  ethnicity_not_starts_with: String
  ethnicity_ends_with: String
  ethnicity_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  AND: [EthnicityWhereInput!]
  OR: [EthnicityWhereInput!]
  NOT: [EthnicityWhereInput!]
}

input EthnicityWhereUniqueInput {
  id: Int
  ethnicity: String
}

type Firmware {
  id: Int!
  cup(where: CupWhereInput, orderBy: CupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cup!]
  fwVersion: String!
}

type FirmwareConnection {
  pageInfo: PageInfo!
  edges: [FirmwareEdge]!
  aggregate: AggregateFirmware!
}

input FirmwareCreateInput {
  cup: CupCreateManyWithoutFwIdInput
  fwVersion: String!
}

input FirmwareCreateOneWithoutCupInput {
  create: FirmwareCreateWithoutCupInput
  connect: FirmwareWhereUniqueInput
}

input FirmwareCreateWithoutCupInput {
  fwVersion: String!
}

type FirmwareEdge {
  node: Firmware!
  cursor: String!
}

enum FirmwareOrderByInput {
  id_ASC
  id_DESC
  fwVersion_ASC
  fwVersion_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FirmwarePreviousValues {
  id: Int!
  fwVersion: String!
}

type FirmwareSubscriptionPayload {
  mutation: MutationType!
  node: Firmware
  updatedFields: [String!]
  previousValues: FirmwarePreviousValues
}

input FirmwareSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FirmwareWhereInput
  AND: [FirmwareSubscriptionWhereInput!]
  OR: [FirmwareSubscriptionWhereInput!]
  NOT: [FirmwareSubscriptionWhereInput!]
}

input FirmwareUpdateInput {
  cup: CupUpdateManyWithoutFwIdInput
  fwVersion: String
}

input FirmwareUpdateManyMutationInput {
  fwVersion: String
}

input FirmwareUpdateOneWithoutCupInput {
  create: FirmwareCreateWithoutCupInput
  update: FirmwareUpdateWithoutCupDataInput
  upsert: FirmwareUpsertWithoutCupInput
  delete: Boolean
  disconnect: Boolean
  connect: FirmwareWhereUniqueInput
}

input FirmwareUpdateWithoutCupDataInput {
  fwVersion: String
}

input FirmwareUpsertWithoutCupInput {
  update: FirmwareUpdateWithoutCupDataInput!
  create: FirmwareCreateWithoutCupInput!
}

input FirmwareWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  cup_every: CupWhereInput
  cup_some: CupWhereInput
  cup_none: CupWhereInput
  fwVersion: String
  fwVersion_not: String
  fwVersion_in: [String!]
  fwVersion_not_in: [String!]
  fwVersion_lt: String
  fwVersion_lte: String
  fwVersion_gt: String
  fwVersion_gte: String
  fwVersion_contains: String
  fwVersion_not_contains: String
  fwVersion_starts_with: String
  fwVersion_not_starts_with: String
  fwVersion_ends_with: String
  fwVersion_not_ends_with: String
  AND: [FirmwareWhereInput!]
  OR: [FirmwareWhereInput!]
  NOT: [FirmwareWhereInput!]
}

input FirmwareWhereUniqueInput {
  id: Int
  fwVersion: String
}

type Hardware {
  id: Int!
  cup(where: CupWhereInput, orderBy: CupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cup!]
  hwVersion: String!
}

type HardwareConnection {
  pageInfo: PageInfo!
  edges: [HardwareEdge]!
  aggregate: AggregateHardware!
}

input HardwareCreateInput {
  cup: CupCreateManyWithoutHwIdInput
  hwVersion: String!
}

input HardwareCreateOneWithoutCupInput {
  create: HardwareCreateWithoutCupInput
  connect: HardwareWhereUniqueInput
}

input HardwareCreateWithoutCupInput {
  hwVersion: String!
}

type HardwareEdge {
  node: Hardware!
  cursor: String!
}

enum HardwareOrderByInput {
  id_ASC
  id_DESC
  hwVersion_ASC
  hwVersion_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HardwarePreviousValues {
  id: Int!
  hwVersion: String!
}

type HardwareSubscriptionPayload {
  mutation: MutationType!
  node: Hardware
  updatedFields: [String!]
  previousValues: HardwarePreviousValues
}

input HardwareSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HardwareWhereInput
  AND: [HardwareSubscriptionWhereInput!]
  OR: [HardwareSubscriptionWhereInput!]
  NOT: [HardwareSubscriptionWhereInput!]
}

input HardwareUpdateInput {
  cup: CupUpdateManyWithoutHwIdInput
  hwVersion: String
}

input HardwareUpdateManyMutationInput {
  hwVersion: String
}

input HardwareUpdateOneWithoutCupInput {
  create: HardwareCreateWithoutCupInput
  update: HardwareUpdateWithoutCupDataInput
  upsert: HardwareUpsertWithoutCupInput
  delete: Boolean
  disconnect: Boolean
  connect: HardwareWhereUniqueInput
}

input HardwareUpdateWithoutCupDataInput {
  hwVersion: String
}

input HardwareUpsertWithoutCupInput {
  update: HardwareUpdateWithoutCupDataInput!
  create: HardwareCreateWithoutCupInput!
}

input HardwareWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  cup_every: CupWhereInput
  cup_some: CupWhereInput
  cup_none: CupWhereInput
  hwVersion: String
  hwVersion_not: String
  hwVersion_in: [String!]
  hwVersion_not_in: [String!]
  hwVersion_lt: String
  hwVersion_lte: String
  hwVersion_gt: String
  hwVersion_gte: String
  hwVersion_contains: String
  hwVersion_not_contains: String
  hwVersion_starts_with: String
  hwVersion_not_starts_with: String
  hwVersion_ends_with: String
  hwVersion_not_ends_with: String
  AND: [HardwareWhereInput!]
  OR: [HardwareWhereInput!]
  NOT: [HardwareWhereInput!]
}

input HardwareWhereUniqueInput {
  id: Int
  hwVersion: String
}

scalar Long

type Mutation {
  createAnswerType(data: AnswerTypeCreateInput!): AnswerType!
  updateAnswerType(data: AnswerTypeUpdateInput!, where: AnswerTypeWhereUniqueInput!): AnswerType
  updateManyAnswerTypes(data: AnswerTypeUpdateManyMutationInput!, where: AnswerTypeWhereInput): BatchPayload!
  upsertAnswerType(where: AnswerTypeWhereUniqueInput!, create: AnswerTypeCreateInput!, update: AnswerTypeUpdateInput!): AnswerType!
  deleteAnswerType(where: AnswerTypeWhereUniqueInput!): AnswerType
  deleteManyAnswerTypes(where: AnswerTypeWhereInput): BatchPayload!
  createAppServerSync(data: AppServerSyncCreateInput!): AppServerSync!
  updateAppServerSync(data: AppServerSyncUpdateInput!, where: AppServerSyncWhereUniqueInput!): AppServerSync
  updateManyAppServerSyncs(data: AppServerSyncUpdateManyMutationInput!, where: AppServerSyncWhereInput): BatchPayload!
  upsertAppServerSync(where: AppServerSyncWhereUniqueInput!, create: AppServerSyncCreateInput!, update: AppServerSyncUpdateInput!): AppServerSync!
  deleteAppServerSync(where: AppServerSyncWhereUniqueInput!): AppServerSync
  deleteManyAppServerSyncs(where: AppServerSyncWhereInput): BatchPayload!
  createAuthToken: AuthToken!
  deleteAuthToken(where: AuthTokenWhereUniqueInput!): AuthToken
  deleteManyAuthTokens(where: AuthTokenWhereInput): BatchPayload!
  createCalibration(data: CalibrationCreateInput!): Calibration!
  updateCalibration(data: CalibrationUpdateInput!, where: CalibrationWhereUniqueInput!): Calibration
  updateManyCalibrations(data: CalibrationUpdateManyMutationInput!, where: CalibrationWhereInput): BatchPayload!
  upsertCalibration(where: CalibrationWhereUniqueInput!, create: CalibrationCreateInput!, update: CalibrationUpdateInput!): Calibration!
  deleteCalibration(where: CalibrationWhereUniqueInput!): Calibration
  deleteManyCalibrations(where: CalibrationWhereInput): BatchPayload!
  createCompany(data: CompanyCreateInput!): Company!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateManyCompanies(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  createCountry(data: CountryCreateInput!): Country!
  updateCountry(data: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country
  updateManyCountries(data: CountryUpdateManyMutationInput!, where: CountryWhereInput): BatchPayload!
  upsertCountry(where: CountryWhereUniqueInput!, create: CountryCreateInput!, update: CountryUpdateInput!): Country!
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteManyCountries(where: CountryWhereInput): BatchPayload!
  createCup(data: CupCreateInput!): Cup!
  updateCup(data: CupUpdateInput!, where: CupWhereUniqueInput!): Cup
  updateManyCups(data: CupUpdateManyMutationInput!, where: CupWhereInput): BatchPayload!
  upsertCup(where: CupWhereUniqueInput!, create: CupCreateInput!, update: CupUpdateInput!): Cup!
  deleteCup(where: CupWhereUniqueInput!): Cup
  deleteManyCups(where: CupWhereInput): BatchPayload!
  createCupAppSync(data: CupAppSyncCreateInput!): CupAppSync!
  updateCupAppSync(data: CupAppSyncUpdateInput!, where: CupAppSyncWhereUniqueInput!): CupAppSync
  updateManyCupAppSyncs(data: CupAppSyncUpdateManyMutationInput!, where: CupAppSyncWhereInput): BatchPayload!
  upsertCupAppSync(where: CupAppSyncWhereUniqueInput!, create: CupAppSyncCreateInput!, update: CupAppSyncUpdateInput!): CupAppSync!
  deleteCupAppSync(where: CupAppSyncWhereUniqueInput!): CupAppSync
  deleteManyCupAppSyncs(where: CupAppSyncWhereInput): BatchPayload!
  createCupDataAnswer(data: CupDataAnswerCreateInput!): CupDataAnswer!
  updateCupDataAnswer(data: CupDataAnswerUpdateInput!, where: CupDataAnswerWhereUniqueInput!): CupDataAnswer
  updateManyCupDataAnswers(data: CupDataAnswerUpdateManyMutationInput!, where: CupDataAnswerWhereInput): BatchPayload!
  upsertCupDataAnswer(where: CupDataAnswerWhereUniqueInput!, create: CupDataAnswerCreateInput!, update: CupDataAnswerUpdateInput!): CupDataAnswer!
  deleteCupDataAnswer(where: CupDataAnswerWhereUniqueInput!): CupDataAnswer
  deleteManyCupDataAnswers(where: CupDataAnswerWhereInput): BatchPayload!
  createCupDataColourCalc(data: CupDataColourCalcCreateInput!): CupDataColourCalc!
  updateCupDataColourCalc(data: CupDataColourCalcUpdateInput!, where: CupDataColourCalcWhereUniqueInput!): CupDataColourCalc
  updateManyCupDataColourCalcs(data: CupDataColourCalcUpdateManyMutationInput!, where: CupDataColourCalcWhereInput): BatchPayload!
  upsertCupDataColourCalc(where: CupDataColourCalcWhereUniqueInput!, create: CupDataColourCalcCreateInput!, update: CupDataColourCalcUpdateInput!): CupDataColourCalc!
  deleteCupDataColourCalc(where: CupDataColourCalcWhereUniqueInput!): CupDataColourCalc
  deleteManyCupDataColourCalcs(where: CupDataColourCalcWhereInput): BatchPayload!
  createCupDataColourCalib(data: CupDataColourCalibCreateInput!): CupDataColourCalib!
  updateCupDataColourCalib(data: CupDataColourCalibUpdateInput!, where: CupDataColourCalibWhereUniqueInput!): CupDataColourCalib
  updateManyCupDataColourCalibs(data: CupDataColourCalibUpdateManyMutationInput!, where: CupDataColourCalibWhereInput): BatchPayload!
  upsertCupDataColourCalib(where: CupDataColourCalibWhereUniqueInput!, create: CupDataColourCalibCreateInput!, update: CupDataColourCalibUpdateInput!): CupDataColourCalib!
  deleteCupDataColourCalib(where: CupDataColourCalibWhereUniqueInput!): CupDataColourCalib
  deleteManyCupDataColourCalibs(where: CupDataColourCalibWhereInput): BatchPayload!
  createCupDataManMdate(data: CupDataManMdateCreateInput!): CupDataManMdate!
  updateCupDataManMdate(data: CupDataManMdateUpdateInput!, where: CupDataManMdateWhereUniqueInput!): CupDataManMdate
  updateManyCupDataManMdates(data: CupDataManMdateUpdateManyMutationInput!, where: CupDataManMdateWhereInput): BatchPayload!
  upsertCupDataManMdate(where: CupDataManMdateWhereUniqueInput!, create: CupDataManMdateCreateInput!, update: CupDataManMdateUpdateInput!): CupDataManMdate!
  deleteCupDataManMdate(where: CupDataManMdateWhereUniqueInput!): CupDataManMdate
  deleteManyCupDataManMdates(where: CupDataManMdateWhereInput): BatchPayload!
  createCupDataProcFlow(data: CupDataProcFlowCreateInput!): CupDataProcFlow!
  updateCupDataProcFlow(data: CupDataProcFlowUpdateInput!, where: CupDataProcFlowWhereUniqueInput!): CupDataProcFlow
  updateManyCupDataProcFlows(data: CupDataProcFlowUpdateManyMutationInput!, where: CupDataProcFlowWhereInput): BatchPayload!
  upsertCupDataProcFlow(where: CupDataProcFlowWhereUniqueInput!, create: CupDataProcFlowCreateInput!, update: CupDataProcFlowUpdateInput!): CupDataProcFlow!
  deleteCupDataProcFlow(where: CupDataProcFlowWhereUniqueInput!): CupDataProcFlow
  deleteManyCupDataProcFlows(where: CupDataProcFlowWhereInput): BatchPayload!
  createCupDataProcMdate(data: CupDataProcMdateCreateInput!): CupDataProcMdate!
  updateCupDataProcMdate(data: CupDataProcMdateUpdateInput!, where: CupDataProcMdateWhereUniqueInput!): CupDataProcMdate
  updateManyCupDataProcMdates(data: CupDataProcMdateUpdateManyMutationInput!, where: CupDataProcMdateWhereInput): BatchPayload!
  upsertCupDataProcMdate(where: CupDataProcMdateWhereUniqueInput!, create: CupDataProcMdateCreateInput!, update: CupDataProcMdateUpdateInput!): CupDataProcMdate!
  deleteCupDataProcMdate(where: CupDataProcMdateWhereUniqueInput!): CupDataProcMdate
  deleteManyCupDataProcMdates(where: CupDataProcMdateWhereInput): BatchPayload!
  createCupDataProcVolume(data: CupDataProcVolumeCreateInput!): CupDataProcVolume!
  updateCupDataProcVolume(data: CupDataProcVolumeUpdateInput!, where: CupDataProcVolumeWhereUniqueInput!): CupDataProcVolume
  updateManyCupDataProcVolumes(data: CupDataProcVolumeUpdateManyMutationInput!, where: CupDataProcVolumeWhereInput): BatchPayload!
  upsertCupDataProcVolume(where: CupDataProcVolumeWhereUniqueInput!, create: CupDataProcVolumeCreateInput!, update: CupDataProcVolumeUpdateInput!): CupDataProcVolume!
  deleteCupDataProcVolume(where: CupDataProcVolumeWhereUniqueInput!): CupDataProcVolume
  deleteManyCupDataProcVolumes(where: CupDataProcVolumeWhereInput): BatchPayload!
  createCupDataQaResponse(data: CupDataQaResponseCreateInput!): CupDataQaResponse!
  updateCupDataQaResponse(data: CupDataQaResponseUpdateInput!, where: CupDataQaResponseWhereUniqueInput!): CupDataQaResponse
  updateManyCupDataQaResponses(data: CupDataQaResponseUpdateManyMutationInput!, where: CupDataQaResponseWhereInput): BatchPayload!
  upsertCupDataQaResponse(where: CupDataQaResponseWhereUniqueInput!, create: CupDataQaResponseCreateInput!, update: CupDataQaResponseUpdateInput!): CupDataQaResponse!
  deleteCupDataQaResponse(where: CupDataQaResponseWhereUniqueInput!): CupDataQaResponse
  deleteManyCupDataQaResponses(where: CupDataQaResponseWhereInput): BatchPayload!
  createCupDataQuestion(data: CupDataQuestionCreateInput!): CupDataQuestion!
  updateCupDataQuestion(data: CupDataQuestionUpdateInput!, where: CupDataQuestionWhereUniqueInput!): CupDataQuestion
  updateManyCupDataQuestions(data: CupDataQuestionUpdateManyMutationInput!, where: CupDataQuestionWhereInput): BatchPayload!
  upsertCupDataQuestion(where: CupDataQuestionWhereUniqueInput!, create: CupDataQuestionCreateInput!, update: CupDataQuestionUpdateInput!): CupDataQuestion!
  deleteCupDataQuestion(where: CupDataQuestionWhereUniqueInput!): CupDataQuestion
  deleteManyCupDataQuestions(where: CupDataQuestionWhereInput): BatchPayload!
  createCupDataRaw(data: CupDataRawCreateInput!): CupDataRaw!
  updateCupDataRaw(data: CupDataRawUpdateInput!, where: CupDataRawWhereUniqueInput!): CupDataRaw
  updateManyCupDataRaws(data: CupDataRawUpdateManyMutationInput!, where: CupDataRawWhereInput): BatchPayload!
  upsertCupDataRaw(where: CupDataRawWhereUniqueInput!, create: CupDataRawCreateInput!, update: CupDataRawUpdateInput!): CupDataRaw!
  deleteCupDataRaw(where: CupDataRawWhereUniqueInput!): CupDataRaw
  deleteManyCupDataRaws(where: CupDataRawWhereInput): BatchPayload!
  createCupDataRejection(data: CupDataRejectionCreateInput!): CupDataRejection!
  updateCupDataRejection(data: CupDataRejectionUpdateInput!, where: CupDataRejectionWhereUniqueInput!): CupDataRejection
  updateManyCupDataRejections(data: CupDataRejectionUpdateManyMutationInput!, where: CupDataRejectionWhereInput): BatchPayload!
  upsertCupDataRejection(where: CupDataRejectionWhereUniqueInput!, create: CupDataRejectionCreateInput!, update: CupDataRejectionUpdateInput!): CupDataRejection!
  deleteCupDataRejection(where: CupDataRejectionWhereUniqueInput!): CupDataRejection
  deleteManyCupDataRejections(where: CupDataRejectionWhereInput): BatchPayload!
  createCupDataUserRemove(data: CupDataUserRemoveCreateInput!): CupDataUserRemove!
  updateCupDataUserRemove(data: CupDataUserRemoveUpdateInput!, where: CupDataUserRemoveWhereUniqueInput!): CupDataUserRemove
  updateManyCupDataUserRemoves(data: CupDataUserRemoveUpdateManyMutationInput!, where: CupDataUserRemoveWhereInput): BatchPayload!
  upsertCupDataUserRemove(where: CupDataUserRemoveWhereUniqueInput!, create: CupDataUserRemoveCreateInput!, update: CupDataUserRemoveUpdateInput!): CupDataUserRemove!
  deleteCupDataUserRemove(where: CupDataUserRemoveWhereUniqueInput!): CupDataUserRemove
  deleteManyCupDataUserRemoves(where: CupDataUserRemoveWhereInput): BatchPayload!
  createCupDataUserRemoveExplain(data: CupDataUserRemoveExplainCreateInput!): CupDataUserRemoveExplain!
  updateCupDataUserRemoveExplain(data: CupDataUserRemoveExplainUpdateInput!, where: CupDataUserRemoveExplainWhereUniqueInput!): CupDataUserRemoveExplain
  updateManyCupDataUserRemoveExplains(data: CupDataUserRemoveExplainUpdateManyMutationInput!, where: CupDataUserRemoveExplainWhereInput): BatchPayload!
  upsertCupDataUserRemoveExplain(where: CupDataUserRemoveExplainWhereUniqueInput!, create: CupDataUserRemoveExplainCreateInput!, update: CupDataUserRemoveExplainUpdateInput!): CupDataUserRemoveExplain!
  deleteCupDataUserRemoveExplain(where: CupDataUserRemoveExplainWhereUniqueInput!): CupDataUserRemoveExplain
  deleteManyCupDataUserRemoveExplains(where: CupDataUserRemoveExplainWhereInput): BatchPayload!
  createCupDatum(data: CupDatumCreateInput!): CupDatum!
  updateCupDatum(data: CupDatumUpdateInput!, where: CupDatumWhereUniqueInput!): CupDatum
  updateManyCupData(data: CupDatumUpdateManyMutationInput!, where: CupDatumWhereInput): BatchPayload!
  upsertCupDatum(where: CupDatumWhereUniqueInput!, create: CupDatumCreateInput!, update: CupDatumUpdateInput!): CupDatum!
  deleteCupDatum(where: CupDatumWhereUniqueInput!): CupDatum
  deleteManyCupData(where: CupDatumWhereInput): BatchPayload!
  createEthnicity(data: EthnicityCreateInput!): Ethnicity!
  updateEthnicity(data: EthnicityUpdateInput!, where: EthnicityWhereUniqueInput!): Ethnicity
  updateManyEthnicities(data: EthnicityUpdateManyMutationInput!, where: EthnicityWhereInput): BatchPayload!
  upsertEthnicity(where: EthnicityWhereUniqueInput!, create: EthnicityCreateInput!, update: EthnicityUpdateInput!): Ethnicity!
  deleteEthnicity(where: EthnicityWhereUniqueInput!): Ethnicity
  deleteManyEthnicities(where: EthnicityWhereInput): BatchPayload!
  createFirmware(data: FirmwareCreateInput!): Firmware!
  updateFirmware(data: FirmwareUpdateInput!, where: FirmwareWhereUniqueInput!): Firmware
  updateManyFirmwares(data: FirmwareUpdateManyMutationInput!, where: FirmwareWhereInput): BatchPayload!
  upsertFirmware(where: FirmwareWhereUniqueInput!, create: FirmwareCreateInput!, update: FirmwareUpdateInput!): Firmware!
  deleteFirmware(where: FirmwareWhereUniqueInput!): Firmware
  deleteManyFirmwares(where: FirmwareWhereInput): BatchPayload!
  createHardware(data: HardwareCreateInput!): Hardware!
  updateHardware(data: HardwareUpdateInput!, where: HardwareWhereUniqueInput!): Hardware
  updateManyHardwares(data: HardwareUpdateManyMutationInput!, where: HardwareWhereInput): BatchPayload!
  upsertHardware(where: HardwareWhereUniqueInput!, create: HardwareCreateInput!, update: HardwareUpdateInput!): Hardware!
  deleteHardware(where: HardwareWhereUniqueInput!): Hardware
  deleteManyHardwares(where: HardwareWhereInput): BatchPayload!
  createPlatformComp(data: PlatformCompCreateInput!): PlatformComp!
  updatePlatformComp(data: PlatformCompUpdateInput!, where: PlatformCompWhereUniqueInput!): PlatformComp
  updateManyPlatformComps(data: PlatformCompUpdateManyMutationInput!, where: PlatformCompWhereInput): BatchPayload!
  upsertPlatformComp(where: PlatformCompWhereUniqueInput!, create: PlatformCompCreateInput!, update: PlatformCompUpdateInput!): PlatformComp!
  deletePlatformComp(where: PlatformCompWhereUniqueInput!): PlatformComp
  deleteManyPlatformComps(where: PlatformCompWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserCoinHistory(data: UserCoinHistoryCreateInput!): UserCoinHistory!
  updateUserCoinHistory(data: UserCoinHistoryUpdateInput!, where: UserCoinHistoryWhereUniqueInput!): UserCoinHistory
  updateManyUserCoinHistories(data: UserCoinHistoryUpdateManyMutationInput!, where: UserCoinHistoryWhereInput): BatchPayload!
  upsertUserCoinHistory(where: UserCoinHistoryWhereUniqueInput!, create: UserCoinHistoryCreateInput!, update: UserCoinHistoryUpdateInput!): UserCoinHistory!
  deleteUserCoinHistory(where: UserCoinHistoryWhereUniqueInput!): UserCoinHistory
  deleteManyUserCoinHistories(where: UserCoinHistoryWhereInput): BatchPayload!
  createUserCup(data: UserCupCreateInput!): UserCup!
  updateUserCup(data: UserCupUpdateInput!, where: UserCupWhereUniqueInput!): UserCup
  upsertUserCup(where: UserCupWhereUniqueInput!, create: UserCupCreateInput!, update: UserCupUpdateInput!): UserCup!
  deleteUserCup(where: UserCupWhereUniqueInput!): UserCup
  deleteManyUserCups(where: UserCupWhereInput): BatchPayload!
  createUserInterviewDatum(data: UserInterviewDatumCreateInput!): UserInterviewDatum!
  updateUserInterviewDatum(data: UserInterviewDatumUpdateInput!, where: UserInterviewDatumWhereUniqueInput!): UserInterviewDatum
  updateManyUserInterviewData(data: UserInterviewDatumUpdateManyMutationInput!, where: UserInterviewDatumWhereInput): BatchPayload!
  upsertUserInterviewDatum(where: UserInterviewDatumWhereUniqueInput!, create: UserInterviewDatumCreateInput!, update: UserInterviewDatumUpdateInput!): UserInterviewDatum!
  deleteUserInterviewDatum(where: UserInterviewDatumWhereUniqueInput!): UserInterviewDatum
  deleteManyUserInterviewData(where: UserInterviewDatumWhereInput): BatchPayload!
  createUserInterviewQuestion(data: UserInterviewQuestionCreateInput!): UserInterviewQuestion!
  updateUserInterviewQuestion(data: UserInterviewQuestionUpdateInput!, where: UserInterviewQuestionWhereUniqueInput!): UserInterviewQuestion
  updateManyUserInterviewQuestions(data: UserInterviewQuestionUpdateManyMutationInput!, where: UserInterviewQuestionWhereInput): BatchPayload!
  upsertUserInterviewQuestion(where: UserInterviewQuestionWhereUniqueInput!, create: UserInterviewQuestionCreateInput!, update: UserInterviewQuestionUpdateInput!): UserInterviewQuestion!
  deleteUserInterviewQuestion(where: UserInterviewQuestionWhereUniqueInput!): UserInterviewQuestion
  deleteManyUserInterviewQuestions(where: UserInterviewQuestionWhereInput): BatchPayload!
  createUserRecordDataByDay(data: UserRecordDataByDayCreateInput!): UserRecordDataByDay!
  updateUserRecordDataByDay(data: UserRecordDataByDayUpdateInput!, where: UserRecordDataByDayWhereUniqueInput!): UserRecordDataByDay
  updateManyUserRecordDataByDays(data: UserRecordDataByDayUpdateManyMutationInput!, where: UserRecordDataByDayWhereInput): BatchPayload!
  upsertUserRecordDataByDay(where: UserRecordDataByDayWhereUniqueInput!, create: UserRecordDataByDayCreateInput!, update: UserRecordDataByDayUpdateInput!): UserRecordDataByDay!
  deleteUserRecordDataByDay(where: UserRecordDataByDayWhereUniqueInput!): UserRecordDataByDay
  deleteManyUserRecordDataByDays(where: UserRecordDataByDayWhereInput): BatchPayload!
  createUserRecordDataByPeriod(data: UserRecordDataByPeriodCreateInput!): UserRecordDataByPeriod!
  updateUserRecordDataByPeriod(data: UserRecordDataByPeriodUpdateInput!, where: UserRecordDataByPeriodWhereUniqueInput!): UserRecordDataByPeriod
  updateManyUserRecordDataByPeriods(data: UserRecordDataByPeriodUpdateManyMutationInput!, where: UserRecordDataByPeriodWhereInput): BatchPayload!
  upsertUserRecordDataByPeriod(where: UserRecordDataByPeriodWhereUniqueInput!, create: UserRecordDataByPeriodCreateInput!, update: UserRecordDataByPeriodUpdateInput!): UserRecordDataByPeriod!
  deleteUserRecordDataByPeriod(where: UserRecordDataByPeriodWhereUniqueInput!): UserRecordDataByPeriod
  deleteManyUserRecordDataByPeriods(where: UserRecordDataByPeriodWhereInput): BatchPayload!
  createUserRecordDataByTime(data: UserRecordDataByTimeCreateInput!): UserRecordDataByTime!
  updateUserRecordDataByTime(data: UserRecordDataByTimeUpdateInput!, where: UserRecordDataByTimeWhereUniqueInput!): UserRecordDataByTime
  updateManyUserRecordDataByTimes(data: UserRecordDataByTimeUpdateManyMutationInput!, where: UserRecordDataByTimeWhereInput): BatchPayload!
  upsertUserRecordDataByTime(where: UserRecordDataByTimeWhereUniqueInput!, create: UserRecordDataByTimeCreateInput!, update: UserRecordDataByTimeUpdateInput!): UserRecordDataByTime!
  deleteUserRecordDataByTime(where: UserRecordDataByTimeWhereUniqueInput!): UserRecordDataByTime
  deleteManyUserRecordDataByTimes(where: UserRecordDataByTimeWhereInput): BatchPayload!
  createUsersDataAnalysis(data: UsersDataAnalysisCreateInput!): UsersDataAnalysis!
  updateUsersDataAnalysis(data: UsersDataAnalysisUpdateInput!, where: UsersDataAnalysisWhereUniqueInput!): UsersDataAnalysis
  updateManyUsersDataAnalyses(data: UsersDataAnalysisUpdateManyMutationInput!, where: UsersDataAnalysisWhereInput): BatchPayload!
  upsertUsersDataAnalysis(where: UsersDataAnalysisWhereUniqueInput!, create: UsersDataAnalysisCreateInput!, update: UsersDataAnalysisUpdateInput!): UsersDataAnalysis!
  deleteUsersDataAnalysis(where: UsersDataAnalysisWhereUniqueInput!): UsersDataAnalysis
  deleteManyUsersDataAnalyses(where: UsersDataAnalysisWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PlatformComp {
  id: Int!
  phoneId: Int!
  platformId: Int!
  problemHistory: Boolean
  softwareId: Int!
  successHistory: Boolean
}

type PlatformCompConnection {
  pageInfo: PageInfo!
  edges: [PlatformCompEdge]!
  aggregate: AggregatePlatformComp!
}

input PlatformCompCreateInput {
  phoneId: Int!
  platformId: Int!
  problemHistory: Boolean
  softwareId: Int!
  successHistory: Boolean
}

type PlatformCompEdge {
  node: PlatformComp!
  cursor: String!
}

enum PlatformCompOrderByInput {
  id_ASC
  id_DESC
  phoneId_ASC
  phoneId_DESC
  platformId_ASC
  platformId_DESC
  problemHistory_ASC
  problemHistory_DESC
  softwareId_ASC
  softwareId_DESC
  successHistory_ASC
  successHistory_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PlatformCompPreviousValues {
  id: Int!
  phoneId: Int!
  platformId: Int!
  problemHistory: Boolean
  softwareId: Int!
  successHistory: Boolean
}

type PlatformCompSubscriptionPayload {
  mutation: MutationType!
  node: PlatformComp
  updatedFields: [String!]
  previousValues: PlatformCompPreviousValues
}

input PlatformCompSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlatformCompWhereInput
  AND: [PlatformCompSubscriptionWhereInput!]
  OR: [PlatformCompSubscriptionWhereInput!]
  NOT: [PlatformCompSubscriptionWhereInput!]
}

input PlatformCompUpdateInput {
  phoneId: Int
  platformId: Int
  problemHistory: Boolean
  softwareId: Int
  successHistory: Boolean
}

input PlatformCompUpdateManyMutationInput {
  phoneId: Int
  platformId: Int
  problemHistory: Boolean
  softwareId: Int
  successHistory: Boolean
}

input PlatformCompWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  phoneId: Int
  phoneId_not: Int
  phoneId_in: [Int!]
  phoneId_not_in: [Int!]
  phoneId_lt: Int
  phoneId_lte: Int
  phoneId_gt: Int
  phoneId_gte: Int
  platformId: Int
  platformId_not: Int
  platformId_in: [Int!]
  platformId_not_in: [Int!]
  platformId_lt: Int
  platformId_lte: Int
  platformId_gt: Int
  platformId_gte: Int
  problemHistory: Boolean
  problemHistory_not: Boolean
  softwareId: Int
  softwareId_not: Int
  softwareId_in: [Int!]
  softwareId_not_in: [Int!]
  softwareId_lt: Int
  softwareId_lte: Int
  softwareId_gt: Int
  softwareId_gte: Int
  successHistory: Boolean
  successHistory_not: Boolean
  AND: [PlatformCompWhereInput!]
  OR: [PlatformCompWhereInput!]
  NOT: [PlatformCompWhereInput!]
}

input PlatformCompWhereUniqueInput {
  id: Int
}

type Query {
  answerType(where: AnswerTypeWhereUniqueInput!): AnswerType
  answerTypes(where: AnswerTypeWhereInput, orderBy: AnswerTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AnswerType]!
  answerTypesConnection(where: AnswerTypeWhereInput, orderBy: AnswerTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AnswerTypeConnection!
  appServerSync(where: AppServerSyncWhereUniqueInput!): AppServerSync
  appServerSyncs(where: AppServerSyncWhereInput, orderBy: AppServerSyncOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AppServerSync]!
  appServerSyncsConnection(where: AppServerSyncWhereInput, orderBy: AppServerSyncOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AppServerSyncConnection!
  authToken(where: AuthTokenWhereUniqueInput!): AuthToken
  authTokens(where: AuthTokenWhereInput, orderBy: AuthTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AuthToken]!
  authTokensConnection(where: AuthTokenWhereInput, orderBy: AuthTokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AuthTokenConnection!
  calibration(where: CalibrationWhereUniqueInput!): Calibration
  calibrations(where: CalibrationWhereInput, orderBy: CalibrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Calibration]!
  calibrationsConnection(where: CalibrationWhereInput, orderBy: CalibrationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CalibrationConnection!
  company(where: CompanyWhereUniqueInput!): Company
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  country(where: CountryWhereUniqueInput!): Country
  countries(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Country]!
  countriesConnection(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CountryConnection!
  cup(where: CupWhereUniqueInput!): Cup
  cups(where: CupWhereInput, orderBy: CupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Cup]!
  cupsConnection(where: CupWhereInput, orderBy: CupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CupConnection!
  cupAppSync(where: CupAppSyncWhereUniqueInput!): CupAppSync
  cupAppSyncs(where: CupAppSyncWhereInput, orderBy: CupAppSyncOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupAppSync]!
  cupAppSyncsConnection(where: CupAppSyncWhereInput, orderBy: CupAppSyncOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CupAppSyncConnection!
  cupDataAnswer(where: CupDataAnswerWhereUniqueInput!): CupDataAnswer
  cupDataAnswers(where: CupDataAnswerWhereInput, orderBy: CupDataAnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataAnswer]!
  cupDataAnswersConnection(where: CupDataAnswerWhereInput, orderBy: CupDataAnswerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CupDataAnswerConnection!
  cupDataColourCalc(where: CupDataColourCalcWhereUniqueInput!): CupDataColourCalc
  cupDataColourCalcs(where: CupDataColourCalcWhereInput, orderBy: CupDataColourCalcOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataColourCalc]!
  cupDataColourCalcsConnection(where: CupDataColourCalcWhereInput, orderBy: CupDataColourCalcOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CupDataColourCalcConnection!
  cupDataColourCalib(where: CupDataColourCalibWhereUniqueInput!): CupDataColourCalib
  cupDataColourCalibs(where: CupDataColourCalibWhereInput, orderBy: CupDataColourCalibOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataColourCalib]!
  cupDataColourCalibsConnection(where: CupDataColourCalibWhereInput, orderBy: CupDataColourCalibOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CupDataColourCalibConnection!
  cupDataManMdate(where: CupDataManMdateWhereUniqueInput!): CupDataManMdate
  cupDataManMdates(where: CupDataManMdateWhereInput, orderBy: CupDataManMdateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataManMdate]!
  cupDataManMdatesConnection(where: CupDataManMdateWhereInput, orderBy: CupDataManMdateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CupDataManMdateConnection!
  cupDataProcFlow(where: CupDataProcFlowWhereUniqueInput!): CupDataProcFlow
  cupDataProcFlows(where: CupDataProcFlowWhereInput, orderBy: CupDataProcFlowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataProcFlow]!
  cupDataProcFlowsConnection(where: CupDataProcFlowWhereInput, orderBy: CupDataProcFlowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CupDataProcFlowConnection!
  cupDataProcMdate(where: CupDataProcMdateWhereUniqueInput!): CupDataProcMdate
  cupDataProcMdates(where: CupDataProcMdateWhereInput, orderBy: CupDataProcMdateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataProcMdate]!
  cupDataProcMdatesConnection(where: CupDataProcMdateWhereInput, orderBy: CupDataProcMdateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CupDataProcMdateConnection!
  cupDataProcVolume(where: CupDataProcVolumeWhereUniqueInput!): CupDataProcVolume
  cupDataProcVolumes(where: CupDataProcVolumeWhereInput, orderBy: CupDataProcVolumeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataProcVolume]!
  cupDataProcVolumesConnection(where: CupDataProcVolumeWhereInput, orderBy: CupDataProcVolumeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CupDataProcVolumeConnection!
  cupDataQaResponse(where: CupDataQaResponseWhereUniqueInput!): CupDataQaResponse
  cupDataQaResponses(where: CupDataQaResponseWhereInput, orderBy: CupDataQaResponseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataQaResponse]!
  cupDataQaResponsesConnection(where: CupDataQaResponseWhereInput, orderBy: CupDataQaResponseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CupDataQaResponseConnection!
  cupDataQuestion(where: CupDataQuestionWhereUniqueInput!): CupDataQuestion
  cupDataQuestions(where: CupDataQuestionWhereInput, orderBy: CupDataQuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataQuestion]!
  cupDataQuestionsConnection(where: CupDataQuestionWhereInput, orderBy: CupDataQuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CupDataQuestionConnection!
  cupDataRaw(where: CupDataRawWhereUniqueInput!): CupDataRaw
  cupDataRaws(where: CupDataRawWhereInput, orderBy: CupDataRawOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataRaw]!
  cupDataRawsConnection(where: CupDataRawWhereInput, orderBy: CupDataRawOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CupDataRawConnection!
  cupDataRejection(where: CupDataRejectionWhereUniqueInput!): CupDataRejection
  cupDataRejections(where: CupDataRejectionWhereInput, orderBy: CupDataRejectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataRejection]!
  cupDataRejectionsConnection(where: CupDataRejectionWhereInput, orderBy: CupDataRejectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CupDataRejectionConnection!
  cupDataUserRemove(where: CupDataUserRemoveWhereUniqueInput!): CupDataUserRemove
  cupDataUserRemoves(where: CupDataUserRemoveWhereInput, orderBy: CupDataUserRemoveOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataUserRemove]!
  cupDataUserRemovesConnection(where: CupDataUserRemoveWhereInput, orderBy: CupDataUserRemoveOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CupDataUserRemoveConnection!
  cupDataUserRemoveExplain(where: CupDataUserRemoveExplainWhereUniqueInput!): CupDataUserRemoveExplain
  cupDataUserRemoveExplains(where: CupDataUserRemoveExplainWhereInput, orderBy: CupDataUserRemoveExplainOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataUserRemoveExplain]!
  cupDataUserRemoveExplainsConnection(where: CupDataUserRemoveExplainWhereInput, orderBy: CupDataUserRemoveExplainOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CupDataUserRemoveExplainConnection!
  cupDatum(where: CupDatumWhereUniqueInput!): CupDatum
  cupData(where: CupDatumWhereInput, orderBy: CupDatumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDatum]!
  cupDataConnection(where: CupDatumWhereInput, orderBy: CupDatumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CupDatumConnection!
  ethnicity(where: EthnicityWhereUniqueInput!): Ethnicity
  ethnicities(where: EthnicityWhereInput, orderBy: EthnicityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ethnicity]!
  ethnicitiesConnection(where: EthnicityWhereInput, orderBy: EthnicityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EthnicityConnection!
  firmware(where: FirmwareWhereUniqueInput!): Firmware
  firmwares(where: FirmwareWhereInput, orderBy: FirmwareOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Firmware]!
  firmwaresConnection(where: FirmwareWhereInput, orderBy: FirmwareOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FirmwareConnection!
  hardware(where: HardwareWhereUniqueInput!): Hardware
  hardwares(where: HardwareWhereInput, orderBy: HardwareOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hardware]!
  hardwaresConnection(where: HardwareWhereInput, orderBy: HardwareOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HardwareConnection!
  platformComp(where: PlatformCompWhereUniqueInput!): PlatformComp
  platformComps(where: PlatformCompWhereInput, orderBy: PlatformCompOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PlatformComp]!
  platformCompsConnection(where: PlatformCompWhereInput, orderBy: PlatformCompOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlatformCompConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userCoinHistory(where: UserCoinHistoryWhereUniqueInput!): UserCoinHistory
  userCoinHistories(where: UserCoinHistoryWhereInput, orderBy: UserCoinHistoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserCoinHistory]!
  userCoinHistoriesConnection(where: UserCoinHistoryWhereInput, orderBy: UserCoinHistoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserCoinHistoryConnection!
  userCup(where: UserCupWhereUniqueInput!): UserCup
  userCups(where: UserCupWhereInput, orderBy: UserCupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserCup]!
  userCupsConnection(where: UserCupWhereInput, orderBy: UserCupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserCupConnection!
  userInterviewDatum(where: UserInterviewDatumWhereUniqueInput!): UserInterviewDatum
  userInterviewData(where: UserInterviewDatumWhereInput, orderBy: UserInterviewDatumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserInterviewDatum]!
  userInterviewDataConnection(where: UserInterviewDatumWhereInput, orderBy: UserInterviewDatumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserInterviewDatumConnection!
  userInterviewQuestion(where: UserInterviewQuestionWhereUniqueInput!): UserInterviewQuestion
  userInterviewQuestions(where: UserInterviewQuestionWhereInput, orderBy: UserInterviewQuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserInterviewQuestion]!
  userInterviewQuestionsConnection(where: UserInterviewQuestionWhereInput, orderBy: UserInterviewQuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserInterviewQuestionConnection!
  userRecordDataByDay(where: UserRecordDataByDayWhereUniqueInput!): UserRecordDataByDay
  userRecordDataByDays(where: UserRecordDataByDayWhereInput, orderBy: UserRecordDataByDayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserRecordDataByDay]!
  userRecordDataByDaysConnection(where: UserRecordDataByDayWhereInput, orderBy: UserRecordDataByDayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserRecordDataByDayConnection!
  userRecordDataByPeriod(where: UserRecordDataByPeriodWhereUniqueInput!): UserRecordDataByPeriod
  userRecordDataByPeriods(where: UserRecordDataByPeriodWhereInput, orderBy: UserRecordDataByPeriodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserRecordDataByPeriod]!
  userRecordDataByPeriodsConnection(where: UserRecordDataByPeriodWhereInput, orderBy: UserRecordDataByPeriodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserRecordDataByPeriodConnection!
  userRecordDataByTime(where: UserRecordDataByTimeWhereUniqueInput!): UserRecordDataByTime
  userRecordDataByTimes(where: UserRecordDataByTimeWhereInput, orderBy: UserRecordDataByTimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserRecordDataByTime]!
  userRecordDataByTimesConnection(where: UserRecordDataByTimeWhereInput, orderBy: UserRecordDataByTimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserRecordDataByTimeConnection!
  usersDataAnalysis(where: UsersDataAnalysisWhereUniqueInput!): UsersDataAnalysis
  usersDataAnalyses(where: UsersDataAnalysisWhereInput, orderBy: UsersDataAnalysisOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UsersDataAnalysis]!
  usersDataAnalysesConnection(where: UsersDataAnalysisWhereInput, orderBy: UsersDataAnalysisOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UsersDataAnalysisConnection!
  node(id: ID!): Node
}

type Subscription {
  answerType(where: AnswerTypeSubscriptionWhereInput): AnswerTypeSubscriptionPayload
  appServerSync(where: AppServerSyncSubscriptionWhereInput): AppServerSyncSubscriptionPayload
  authToken(where: AuthTokenSubscriptionWhereInput): AuthTokenSubscriptionPayload
  calibration(where: CalibrationSubscriptionWhereInput): CalibrationSubscriptionPayload
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  country(where: CountrySubscriptionWhereInput): CountrySubscriptionPayload
  cup(where: CupSubscriptionWhereInput): CupSubscriptionPayload
  cupAppSync(where: CupAppSyncSubscriptionWhereInput): CupAppSyncSubscriptionPayload
  cupDataAnswer(where: CupDataAnswerSubscriptionWhereInput): CupDataAnswerSubscriptionPayload
  cupDataColourCalc(where: CupDataColourCalcSubscriptionWhereInput): CupDataColourCalcSubscriptionPayload
  cupDataColourCalib(where: CupDataColourCalibSubscriptionWhereInput): CupDataColourCalibSubscriptionPayload
  cupDataManMdate(where: CupDataManMdateSubscriptionWhereInput): CupDataManMdateSubscriptionPayload
  cupDataProcFlow(where: CupDataProcFlowSubscriptionWhereInput): CupDataProcFlowSubscriptionPayload
  cupDataProcMdate(where: CupDataProcMdateSubscriptionWhereInput): CupDataProcMdateSubscriptionPayload
  cupDataProcVolume(where: CupDataProcVolumeSubscriptionWhereInput): CupDataProcVolumeSubscriptionPayload
  cupDataQaResponse(where: CupDataQaResponseSubscriptionWhereInput): CupDataQaResponseSubscriptionPayload
  cupDataQuestion(where: CupDataQuestionSubscriptionWhereInput): CupDataQuestionSubscriptionPayload
  cupDataRaw(where: CupDataRawSubscriptionWhereInput): CupDataRawSubscriptionPayload
  cupDataRejection(where: CupDataRejectionSubscriptionWhereInput): CupDataRejectionSubscriptionPayload
  cupDataUserRemove(where: CupDataUserRemoveSubscriptionWhereInput): CupDataUserRemoveSubscriptionPayload
  cupDataUserRemoveExplain(where: CupDataUserRemoveExplainSubscriptionWhereInput): CupDataUserRemoveExplainSubscriptionPayload
  cupDatum(where: CupDatumSubscriptionWhereInput): CupDatumSubscriptionPayload
  ethnicity(where: EthnicitySubscriptionWhereInput): EthnicitySubscriptionPayload
  firmware(where: FirmwareSubscriptionWhereInput): FirmwareSubscriptionPayload
  hardware(where: HardwareSubscriptionWhereInput): HardwareSubscriptionPayload
  platformComp(where: PlatformCompSubscriptionWhereInput): PlatformCompSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userCoinHistory(where: UserCoinHistorySubscriptionWhereInput): UserCoinHistorySubscriptionPayload
  userCup(where: UserCupSubscriptionWhereInput): UserCupSubscriptionPayload
  userInterviewDatum(where: UserInterviewDatumSubscriptionWhereInput): UserInterviewDatumSubscriptionPayload
  userInterviewQuestion(where: UserInterviewQuestionSubscriptionWhereInput): UserInterviewQuestionSubscriptionPayload
  userRecordDataByDay(where: UserRecordDataByDaySubscriptionWhereInput): UserRecordDataByDaySubscriptionPayload
  userRecordDataByPeriod(where: UserRecordDataByPeriodSubscriptionWhereInput): UserRecordDataByPeriodSubscriptionPayload
  userRecordDataByTime(where: UserRecordDataByTimeSubscriptionWhereInput): UserRecordDataByTimeSubscriptionPayload
  usersDataAnalysis(where: UsersDataAnalysisSubscriptionWhereInput): UsersDataAnalysisSubscriptionPayload
}

type User {
  id: Int!
  anonUserId: Int
  appServerSync(where: AppServerSyncWhereInput, orderBy: AppServerSyncOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AppServerSync!]
  countryId: Country
  cupDataProcFlow(where: CupDataProcFlowWhereInput, orderBy: CupDataProcFlowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataProcFlow!]
  cupDataProcMdates(where: CupDataProcMdateWhereInput, orderBy: CupDataProcMdateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataProcMdate!]
  cupDataQaResponse(where: CupDataQaResponseWhereInput, orderBy: CupDataQaResponseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataQaResponse!]
  cupDataUserRemove(where: CupDataUserRemoveWhereInput, orderBy: CupDataUserRemoveOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CupDataUserRemove!]
  deleted: Boolean!
  dob: DateTime!
  email: String!
  encryptSaltString: String
  ethnicityId: Ethnicity!
  firstName: String!
  givenBirth: Boolean!
  lastName: String!
  password: String!
  userCoinHistory(where: UserCoinHistoryWhereInput, orderBy: UserCoinHistoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserCoinHistory!]
  userCups(where: UserCupWhereInput, orderBy: UserCupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserCup!]
  userInterviewData(where: UserInterviewDatumWhereInput, orderBy: UserInterviewDatumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserInterviewDatum!]
  userRecordDataByPeriod(where: UserRecordDataByPeriodWhereInput, orderBy: UserRecordDataByPeriodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserRecordDataByPeriod!]
}

type UserCoinHistory {
  id: Int!
  category: String!
  coin: Int!
  contents: String!
  date: DateTime!
  txhash: String!
  userId: User
  userRecordDataByPeriod(where: UserRecordDataByPeriodWhereInput, orderBy: UserRecordDataByPeriodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserRecordDataByPeriod!]
}

type UserCoinHistoryConnection {
  pageInfo: PageInfo!
  edges: [UserCoinHistoryEdge]!
  aggregate: AggregateUserCoinHistory!
}

input UserCoinHistoryCreateInput {
  category: String!
  coin: Int!
  contents: String!
  date: DateTime!
  txhash: String!
  userId: UserCreateOneWithoutUserCoinHistoryInput
  userRecordDataByPeriod: UserRecordDataByPeriodCreateManyWithoutCoinHistoryRowIdInput
}

input UserCoinHistoryCreateManyWithoutUserIdInput {
  create: [UserCoinHistoryCreateWithoutUserIdInput!]
  connect: [UserCoinHistoryWhereUniqueInput!]
}

input UserCoinHistoryCreateOneWithoutUserRecordDataByPeriodInput {
  create: UserCoinHistoryCreateWithoutUserRecordDataByPeriodInput
  connect: UserCoinHistoryWhereUniqueInput
}

input UserCoinHistoryCreateWithoutUserIdInput {
  category: String!
  coin: Int!
  contents: String!
  date: DateTime!
  txhash: String!
  userRecordDataByPeriod: UserRecordDataByPeriodCreateManyWithoutCoinHistoryRowIdInput
}

input UserCoinHistoryCreateWithoutUserRecordDataByPeriodInput {
  category: String!
  coin: Int!
  contents: String!
  date: DateTime!
  txhash: String!
  userId: UserCreateOneWithoutUserCoinHistoryInput
}

type UserCoinHistoryEdge {
  node: UserCoinHistory!
  cursor: String!
}

enum UserCoinHistoryOrderByInput {
  id_ASC
  id_DESC
  category_ASC
  category_DESC
  coin_ASC
  coin_DESC
  contents_ASC
  contents_DESC
  date_ASC
  date_DESC
  txhash_ASC
  txhash_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserCoinHistoryPreviousValues {
  id: Int!
  category: String!
  coin: Int!
  contents: String!
  date: DateTime!
  txhash: String!
}

input UserCoinHistoryScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  coin: Int
  coin_not: Int
  coin_in: [Int!]
  coin_not_in: [Int!]
  coin_lt: Int
  coin_lte: Int
  coin_gt: Int
  coin_gte: Int
  contents: String
  contents_not: String
  contents_in: [String!]
  contents_not_in: [String!]
  contents_lt: String
  contents_lte: String
  contents_gt: String
  contents_gte: String
  contents_contains: String
  contents_not_contains: String
  contents_starts_with: String
  contents_not_starts_with: String
  contents_ends_with: String
  contents_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  txhash: String
  txhash_not: String
  txhash_in: [String!]
  txhash_not_in: [String!]
  txhash_lt: String
  txhash_lte: String
  txhash_gt: String
  txhash_gte: String
  txhash_contains: String
  txhash_not_contains: String
  txhash_starts_with: String
  txhash_not_starts_with: String
  txhash_ends_with: String
  txhash_not_ends_with: String
  AND: [UserCoinHistoryScalarWhereInput!]
  OR: [UserCoinHistoryScalarWhereInput!]
  NOT: [UserCoinHistoryScalarWhereInput!]
}

type UserCoinHistorySubscriptionPayload {
  mutation: MutationType!
  node: UserCoinHistory
  updatedFields: [String!]
  previousValues: UserCoinHistoryPreviousValues
}

input UserCoinHistorySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserCoinHistoryWhereInput
  AND: [UserCoinHistorySubscriptionWhereInput!]
  OR: [UserCoinHistorySubscriptionWhereInput!]
  NOT: [UserCoinHistorySubscriptionWhereInput!]
}

input UserCoinHistoryUpdateInput {
  category: String
  coin: Int
  contents: String
  date: DateTime
  txhash: String
  userId: UserUpdateOneWithoutUserCoinHistoryInput
  userRecordDataByPeriod: UserRecordDataByPeriodUpdateManyWithoutCoinHistoryRowIdInput
}

input UserCoinHistoryUpdateManyDataInput {
  category: String
  coin: Int
  contents: String
  date: DateTime
  txhash: String
}

input UserCoinHistoryUpdateManyMutationInput {
  category: String
  coin: Int
  contents: String
  date: DateTime
  txhash: String
}

input UserCoinHistoryUpdateManyWithoutUserIdInput {
  create: [UserCoinHistoryCreateWithoutUserIdInput!]
  delete: [UserCoinHistoryWhereUniqueInput!]
  connect: [UserCoinHistoryWhereUniqueInput!]
  set: [UserCoinHistoryWhereUniqueInput!]
  disconnect: [UserCoinHistoryWhereUniqueInput!]
  update: [UserCoinHistoryUpdateWithWhereUniqueWithoutUserIdInput!]
  upsert: [UserCoinHistoryUpsertWithWhereUniqueWithoutUserIdInput!]
  deleteMany: [UserCoinHistoryScalarWhereInput!]
  updateMany: [UserCoinHistoryUpdateManyWithWhereNestedInput!]
}

input UserCoinHistoryUpdateManyWithWhereNestedInput {
  where: UserCoinHistoryScalarWhereInput!
  data: UserCoinHistoryUpdateManyDataInput!
}

input UserCoinHistoryUpdateOneWithoutUserRecordDataByPeriodInput {
  create: UserCoinHistoryCreateWithoutUserRecordDataByPeriodInput
  update: UserCoinHistoryUpdateWithoutUserRecordDataByPeriodDataInput
  upsert: UserCoinHistoryUpsertWithoutUserRecordDataByPeriodInput
  delete: Boolean
  disconnect: Boolean
  connect: UserCoinHistoryWhereUniqueInput
}

input UserCoinHistoryUpdateWithoutUserIdDataInput {
  category: String
  coin: Int
  contents: String
  date: DateTime
  txhash: String
  userRecordDataByPeriod: UserRecordDataByPeriodUpdateManyWithoutCoinHistoryRowIdInput
}

input UserCoinHistoryUpdateWithoutUserRecordDataByPeriodDataInput {
  category: String
  coin: Int
  contents: String
  date: DateTime
  txhash: String
  userId: UserUpdateOneWithoutUserCoinHistoryInput
}

input UserCoinHistoryUpdateWithWhereUniqueWithoutUserIdInput {
  where: UserCoinHistoryWhereUniqueInput!
  data: UserCoinHistoryUpdateWithoutUserIdDataInput!
}

input UserCoinHistoryUpsertWithoutUserRecordDataByPeriodInput {
  update: UserCoinHistoryUpdateWithoutUserRecordDataByPeriodDataInput!
  create: UserCoinHistoryCreateWithoutUserRecordDataByPeriodInput!
}

input UserCoinHistoryUpsertWithWhereUniqueWithoutUserIdInput {
  where: UserCoinHistoryWhereUniqueInput!
  update: UserCoinHistoryUpdateWithoutUserIdDataInput!
  create: UserCoinHistoryCreateWithoutUserIdInput!
}

input UserCoinHistoryWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  category: String
  category_not: String
  category_in: [String!]
  category_not_in: [String!]
  category_lt: String
  category_lte: String
  category_gt: String
  category_gte: String
  category_contains: String
  category_not_contains: String
  category_starts_with: String
  category_not_starts_with: String
  category_ends_with: String
  category_not_ends_with: String
  coin: Int
  coin_not: Int
  coin_in: [Int!]
  coin_not_in: [Int!]
  coin_lt: Int
  coin_lte: Int
  coin_gt: Int
  coin_gte: Int
  contents: String
  contents_not: String
  contents_in: [String!]
  contents_not_in: [String!]
  contents_lt: String
  contents_lte: String
  contents_gt: String
  contents_gte: String
  contents_contains: String
  contents_not_contains: String
  contents_starts_with: String
  contents_not_starts_with: String
  contents_ends_with: String
  contents_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  txhash: String
  txhash_not: String
  txhash_in: [String!]
  txhash_not_in: [String!]
  txhash_lt: String
  txhash_lte: String
  txhash_gt: String
  txhash_gte: String
  txhash_contains: String
  txhash_not_contains: String
  txhash_starts_with: String
  txhash_not_starts_with: String
  txhash_ends_with: String
  txhash_not_ends_with: String
  userId: UserWhereInput
  userRecordDataByPeriod_every: UserRecordDataByPeriodWhereInput
  userRecordDataByPeriod_some: UserRecordDataByPeriodWhereInput
  userRecordDataByPeriod_none: UserRecordDataByPeriodWhereInput
  AND: [UserCoinHistoryWhereInput!]
  OR: [UserCoinHistoryWhereInput!]
  NOT: [UserCoinHistoryWhereInput!]
}

input UserCoinHistoryWhereUniqueInput {
  id: Int
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  anonUserId: Int
  appServerSync: AppServerSyncCreateManyWithoutUserIdInput
  countryId: CountryCreateOneWithoutUsersInput
  cupDataProcFlow: CupDataProcFlowCreateManyWithoutUserIdInput
  cupDataProcMdates: CupDataProcMdateCreateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseCreateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime!
  email: String!
  encryptSaltString: String
  ethnicityId: EthnicityCreateOneWithoutUsersInput!
  firstName: String!
  givenBirth: Boolean!
  lastName: String!
  password: String!
  userCoinHistory: UserCoinHistoryCreateManyWithoutUserIdInput
  userCups: UserCupCreateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumCreateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodCreateManyWithoutUserIdInput
}

input UserCreateManyWithoutCountryIdInput {
  create: [UserCreateWithoutCountryIdInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutEthnicityIdInput {
  create: [UserCreateWithoutEthnicityIdInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutAppServerSyncInput {
  create: UserCreateWithoutAppServerSyncInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCupDataProcFlowInput {
  create: UserCreateWithoutCupDataProcFlowInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCupDataProcMdatesInput {
  create: UserCreateWithoutCupDataProcMdatesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCupDataQaResponseInput {
  create: UserCreateWithoutCupDataQaResponseInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCupDataUserRemoveInput {
  create: UserCreateWithoutCupDataUserRemoveInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUserCoinHistoryInput {
  create: UserCreateWithoutUserCoinHistoryInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUserCupsInput {
  create: UserCreateWithoutUserCupsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUserInterviewDataInput {
  create: UserCreateWithoutUserInterviewDataInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutUserRecordDataByPeriodInput {
  create: UserCreateWithoutUserRecordDataByPeriodInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAppServerSyncInput {
  anonUserId: Int
  countryId: CountryCreateOneWithoutUsersInput
  cupDataProcFlow: CupDataProcFlowCreateManyWithoutUserIdInput
  cupDataProcMdates: CupDataProcMdateCreateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseCreateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime!
  email: String!
  encryptSaltString: String
  ethnicityId: EthnicityCreateOneWithoutUsersInput!
  firstName: String!
  givenBirth: Boolean!
  lastName: String!
  password: String!
  userCoinHistory: UserCoinHistoryCreateManyWithoutUserIdInput
  userCups: UserCupCreateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumCreateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodCreateManyWithoutUserIdInput
}

input UserCreateWithoutCountryIdInput {
  anonUserId: Int
  appServerSync: AppServerSyncCreateManyWithoutUserIdInput
  cupDataProcFlow: CupDataProcFlowCreateManyWithoutUserIdInput
  cupDataProcMdates: CupDataProcMdateCreateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseCreateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime!
  email: String!
  encryptSaltString: String
  ethnicityId: EthnicityCreateOneWithoutUsersInput!
  firstName: String!
  givenBirth: Boolean!
  lastName: String!
  password: String!
  userCoinHistory: UserCoinHistoryCreateManyWithoutUserIdInput
  userCups: UserCupCreateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumCreateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodCreateManyWithoutUserIdInput
}

input UserCreateWithoutCupDataProcFlowInput {
  anonUserId: Int
  appServerSync: AppServerSyncCreateManyWithoutUserIdInput
  countryId: CountryCreateOneWithoutUsersInput
  cupDataProcMdates: CupDataProcMdateCreateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseCreateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime!
  email: String!
  encryptSaltString: String
  ethnicityId: EthnicityCreateOneWithoutUsersInput!
  firstName: String!
  givenBirth: Boolean!
  lastName: String!
  password: String!
  userCoinHistory: UserCoinHistoryCreateManyWithoutUserIdInput
  userCups: UserCupCreateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumCreateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodCreateManyWithoutUserIdInput
}

input UserCreateWithoutCupDataProcMdatesInput {
  anonUserId: Int
  appServerSync: AppServerSyncCreateManyWithoutUserIdInput
  countryId: CountryCreateOneWithoutUsersInput
  cupDataProcFlow: CupDataProcFlowCreateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseCreateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime!
  email: String!
  encryptSaltString: String
  ethnicityId: EthnicityCreateOneWithoutUsersInput!
  firstName: String!
  givenBirth: Boolean!
  lastName: String!
  password: String!
  userCoinHistory: UserCoinHistoryCreateManyWithoutUserIdInput
  userCups: UserCupCreateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumCreateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodCreateManyWithoutUserIdInput
}

input UserCreateWithoutCupDataQaResponseInput {
  anonUserId: Int
  appServerSync: AppServerSyncCreateManyWithoutUserIdInput
  countryId: CountryCreateOneWithoutUsersInput
  cupDataProcFlow: CupDataProcFlowCreateManyWithoutUserIdInput
  cupDataProcMdates: CupDataProcMdateCreateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime!
  email: String!
  encryptSaltString: String
  ethnicityId: EthnicityCreateOneWithoutUsersInput!
  firstName: String!
  givenBirth: Boolean!
  lastName: String!
  password: String!
  userCoinHistory: UserCoinHistoryCreateManyWithoutUserIdInput
  userCups: UserCupCreateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumCreateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodCreateManyWithoutUserIdInput
}

input UserCreateWithoutCupDataUserRemoveInput {
  anonUserId: Int
  appServerSync: AppServerSyncCreateManyWithoutUserIdInput
  countryId: CountryCreateOneWithoutUsersInput
  cupDataProcFlow: CupDataProcFlowCreateManyWithoutUserIdInput
  cupDataProcMdates: CupDataProcMdateCreateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseCreateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime!
  email: String!
  encryptSaltString: String
  ethnicityId: EthnicityCreateOneWithoutUsersInput!
  firstName: String!
  givenBirth: Boolean!
  lastName: String!
  password: String!
  userCoinHistory: UserCoinHistoryCreateManyWithoutUserIdInput
  userCups: UserCupCreateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumCreateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodCreateManyWithoutUserIdInput
}

input UserCreateWithoutEthnicityIdInput {
  anonUserId: Int
  appServerSync: AppServerSyncCreateManyWithoutUserIdInput
  countryId: CountryCreateOneWithoutUsersInput
  cupDataProcFlow: CupDataProcFlowCreateManyWithoutUserIdInput
  cupDataProcMdates: CupDataProcMdateCreateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseCreateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime!
  email: String!
  encryptSaltString: String
  firstName: String!
  givenBirth: Boolean!
  lastName: String!
  password: String!
  userCoinHistory: UserCoinHistoryCreateManyWithoutUserIdInput
  userCups: UserCupCreateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumCreateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodCreateManyWithoutUserIdInput
}

input UserCreateWithoutUserCoinHistoryInput {
  anonUserId: Int
  appServerSync: AppServerSyncCreateManyWithoutUserIdInput
  countryId: CountryCreateOneWithoutUsersInput
  cupDataProcFlow: CupDataProcFlowCreateManyWithoutUserIdInput
  cupDataProcMdates: CupDataProcMdateCreateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseCreateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime!
  email: String!
  encryptSaltString: String
  ethnicityId: EthnicityCreateOneWithoutUsersInput!
  firstName: String!
  givenBirth: Boolean!
  lastName: String!
  password: String!
  userCups: UserCupCreateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumCreateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodCreateManyWithoutUserIdInput
}

input UserCreateWithoutUserCupsInput {
  anonUserId: Int
  appServerSync: AppServerSyncCreateManyWithoutUserIdInput
  countryId: CountryCreateOneWithoutUsersInput
  cupDataProcFlow: CupDataProcFlowCreateManyWithoutUserIdInput
  cupDataProcMdates: CupDataProcMdateCreateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseCreateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime!
  email: String!
  encryptSaltString: String
  ethnicityId: EthnicityCreateOneWithoutUsersInput!
  firstName: String!
  givenBirth: Boolean!
  lastName: String!
  password: String!
  userCoinHistory: UserCoinHistoryCreateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumCreateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodCreateManyWithoutUserIdInput
}

input UserCreateWithoutUserInterviewDataInput {
  anonUserId: Int
  appServerSync: AppServerSyncCreateManyWithoutUserIdInput
  countryId: CountryCreateOneWithoutUsersInput
  cupDataProcFlow: CupDataProcFlowCreateManyWithoutUserIdInput
  cupDataProcMdates: CupDataProcMdateCreateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseCreateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime!
  email: String!
  encryptSaltString: String
  ethnicityId: EthnicityCreateOneWithoutUsersInput!
  firstName: String!
  givenBirth: Boolean!
  lastName: String!
  password: String!
  userCoinHistory: UserCoinHistoryCreateManyWithoutUserIdInput
  userCups: UserCupCreateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodCreateManyWithoutUserIdInput
}

input UserCreateWithoutUserRecordDataByPeriodInput {
  anonUserId: Int
  appServerSync: AppServerSyncCreateManyWithoutUserIdInput
  countryId: CountryCreateOneWithoutUsersInput
  cupDataProcFlow: CupDataProcFlowCreateManyWithoutUserIdInput
  cupDataProcMdates: CupDataProcMdateCreateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseCreateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveCreateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime!
  email: String!
  encryptSaltString: String
  ethnicityId: EthnicityCreateOneWithoutUsersInput!
  firstName: String!
  givenBirth: Boolean!
  lastName: String!
  password: String!
  userCoinHistory: UserCoinHistoryCreateManyWithoutUserIdInput
  userCups: UserCupCreateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumCreateManyWithoutUserIdInput
}

type UserCup {
  id: Int!
  serialNumber: Cup
  userId: User
}

type UserCupConnection {
  pageInfo: PageInfo!
  edges: [UserCupEdge]!
  aggregate: AggregateUserCup!
}

input UserCupCreateInput {
  serialNumber: CupCreateOneWithoutUserCupsInput
  userId: UserCreateOneWithoutUserCupsInput
}

input UserCupCreateManyWithoutSerialNumberInput {
  create: [UserCupCreateWithoutSerialNumberInput!]
  connect: [UserCupWhereUniqueInput!]
}

input UserCupCreateManyWithoutUserIdInput {
  create: [UserCupCreateWithoutUserIdInput!]
  connect: [UserCupWhereUniqueInput!]
}

input UserCupCreateWithoutSerialNumberInput {
  userId: UserCreateOneWithoutUserCupsInput
}

input UserCupCreateWithoutUserIdInput {
  serialNumber: CupCreateOneWithoutUserCupsInput
}

type UserCupEdge {
  node: UserCup!
  cursor: String!
}

enum UserCupOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserCupPreviousValues {
  id: Int!
}

input UserCupScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  AND: [UserCupScalarWhereInput!]
  OR: [UserCupScalarWhereInput!]
  NOT: [UserCupScalarWhereInput!]
}

type UserCupSubscriptionPayload {
  mutation: MutationType!
  node: UserCup
  updatedFields: [String!]
  previousValues: UserCupPreviousValues
}

input UserCupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserCupWhereInput
  AND: [UserCupSubscriptionWhereInput!]
  OR: [UserCupSubscriptionWhereInput!]
  NOT: [UserCupSubscriptionWhereInput!]
}

input UserCupUpdateInput {
  serialNumber: CupUpdateOneWithoutUserCupsInput
  userId: UserUpdateOneWithoutUserCupsInput
}

input UserCupUpdateManyWithoutSerialNumberInput {
  create: [UserCupCreateWithoutSerialNumberInput!]
  delete: [UserCupWhereUniqueInput!]
  connect: [UserCupWhereUniqueInput!]
  set: [UserCupWhereUniqueInput!]
  disconnect: [UserCupWhereUniqueInput!]
  update: [UserCupUpdateWithWhereUniqueWithoutSerialNumberInput!]
  upsert: [UserCupUpsertWithWhereUniqueWithoutSerialNumberInput!]
  deleteMany: [UserCupScalarWhereInput!]
}

input UserCupUpdateManyWithoutUserIdInput {
  create: [UserCupCreateWithoutUserIdInput!]
  delete: [UserCupWhereUniqueInput!]
  connect: [UserCupWhereUniqueInput!]
  set: [UserCupWhereUniqueInput!]
  disconnect: [UserCupWhereUniqueInput!]
  update: [UserCupUpdateWithWhereUniqueWithoutUserIdInput!]
  upsert: [UserCupUpsertWithWhereUniqueWithoutUserIdInput!]
  deleteMany: [UserCupScalarWhereInput!]
}

input UserCupUpdateWithoutSerialNumberDataInput {
  userId: UserUpdateOneWithoutUserCupsInput
}

input UserCupUpdateWithoutUserIdDataInput {
  serialNumber: CupUpdateOneWithoutUserCupsInput
}

input UserCupUpdateWithWhereUniqueWithoutSerialNumberInput {
  where: UserCupWhereUniqueInput!
  data: UserCupUpdateWithoutSerialNumberDataInput!
}

input UserCupUpdateWithWhereUniqueWithoutUserIdInput {
  where: UserCupWhereUniqueInput!
  data: UserCupUpdateWithoutUserIdDataInput!
}

input UserCupUpsertWithWhereUniqueWithoutSerialNumberInput {
  where: UserCupWhereUniqueInput!
  update: UserCupUpdateWithoutSerialNumberDataInput!
  create: UserCupCreateWithoutSerialNumberInput!
}

input UserCupUpsertWithWhereUniqueWithoutUserIdInput {
  where: UserCupWhereUniqueInput!
  update: UserCupUpdateWithoutUserIdDataInput!
  create: UserCupCreateWithoutUserIdInput!
}

input UserCupWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  serialNumber: CupWhereInput
  userId: UserWhereInput
  AND: [UserCupWhereInput!]
  OR: [UserCupWhereInput!]
  NOT: [UserCupWhereInput!]
}

input UserCupWhereUniqueInput {
  id: Int
}

type UserEdge {
  node: User!
  cursor: String!
}

type UserInterviewDatum {
  id: Int!
  answerRange: Int
  answerText: String
  answerYn: Boolean
  date: DateTime!
  questionId: UserInterviewQuestion!
  userId: User!
}

type UserInterviewDatumConnection {
  pageInfo: PageInfo!
  edges: [UserInterviewDatumEdge]!
  aggregate: AggregateUserInterviewDatum!
}

input UserInterviewDatumCreateInput {
  answerRange: Int
  answerText: String
  answerYn: Boolean
  date: DateTime!
  questionId: UserInterviewQuestionCreateOneWithoutUserInterviewDataInput!
  userId: UserCreateOneWithoutUserInterviewDataInput!
}

input UserInterviewDatumCreateManyWithoutQuestionIdInput {
  create: [UserInterviewDatumCreateWithoutQuestionIdInput!]
  connect: [UserInterviewDatumWhereUniqueInput!]
}

input UserInterviewDatumCreateManyWithoutUserIdInput {
  create: [UserInterviewDatumCreateWithoutUserIdInput!]
  connect: [UserInterviewDatumWhereUniqueInput!]
}

input UserInterviewDatumCreateWithoutQuestionIdInput {
  answerRange: Int
  answerText: String
  answerYn: Boolean
  date: DateTime!
  userId: UserCreateOneWithoutUserInterviewDataInput!
}

input UserInterviewDatumCreateWithoutUserIdInput {
  answerRange: Int
  answerText: String
  answerYn: Boolean
  date: DateTime!
  questionId: UserInterviewQuestionCreateOneWithoutUserInterviewDataInput!
}

type UserInterviewDatumEdge {
  node: UserInterviewDatum!
  cursor: String!
}

enum UserInterviewDatumOrderByInput {
  id_ASC
  id_DESC
  answerRange_ASC
  answerRange_DESC
  answerText_ASC
  answerText_DESC
  answerYn_ASC
  answerYn_DESC
  date_ASC
  date_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserInterviewDatumPreviousValues {
  id: Int!
  answerRange: Int
  answerText: String
  answerYn: Boolean
  date: DateTime!
}

input UserInterviewDatumScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  answerRange: Int
  answerRange_not: Int
  answerRange_in: [Int!]
  answerRange_not_in: [Int!]
  answerRange_lt: Int
  answerRange_lte: Int
  answerRange_gt: Int
  answerRange_gte: Int
  answerText: String
  answerText_not: String
  answerText_in: [String!]
  answerText_not_in: [String!]
  answerText_lt: String
  answerText_lte: String
  answerText_gt: String
  answerText_gte: String
  answerText_contains: String
  answerText_not_contains: String
  answerText_starts_with: String
  answerText_not_starts_with: String
  answerText_ends_with: String
  answerText_not_ends_with: String
  answerYn: Boolean
  answerYn_not: Boolean
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [UserInterviewDatumScalarWhereInput!]
  OR: [UserInterviewDatumScalarWhereInput!]
  NOT: [UserInterviewDatumScalarWhereInput!]
}

type UserInterviewDatumSubscriptionPayload {
  mutation: MutationType!
  node: UserInterviewDatum
  updatedFields: [String!]
  previousValues: UserInterviewDatumPreviousValues
}

input UserInterviewDatumSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserInterviewDatumWhereInput
  AND: [UserInterviewDatumSubscriptionWhereInput!]
  OR: [UserInterviewDatumSubscriptionWhereInput!]
  NOT: [UserInterviewDatumSubscriptionWhereInput!]
}

input UserInterviewDatumUpdateInput {
  answerRange: Int
  answerText: String
  answerYn: Boolean
  date: DateTime
  questionId: UserInterviewQuestionUpdateOneRequiredWithoutUserInterviewDataInput
  userId: UserUpdateOneRequiredWithoutUserInterviewDataInput
}

input UserInterviewDatumUpdateManyDataInput {
  answerRange: Int
  answerText: String
  answerYn: Boolean
  date: DateTime
}

input UserInterviewDatumUpdateManyMutationInput {
  answerRange: Int
  answerText: String
  answerYn: Boolean
  date: DateTime
}

input UserInterviewDatumUpdateManyWithoutQuestionIdInput {
  create: [UserInterviewDatumCreateWithoutQuestionIdInput!]
  delete: [UserInterviewDatumWhereUniqueInput!]
  connect: [UserInterviewDatumWhereUniqueInput!]
  set: [UserInterviewDatumWhereUniqueInput!]
  disconnect: [UserInterviewDatumWhereUniqueInput!]
  update: [UserInterviewDatumUpdateWithWhereUniqueWithoutQuestionIdInput!]
  upsert: [UserInterviewDatumUpsertWithWhereUniqueWithoutQuestionIdInput!]
  deleteMany: [UserInterviewDatumScalarWhereInput!]
  updateMany: [UserInterviewDatumUpdateManyWithWhereNestedInput!]
}

input UserInterviewDatumUpdateManyWithoutUserIdInput {
  create: [UserInterviewDatumCreateWithoutUserIdInput!]
  delete: [UserInterviewDatumWhereUniqueInput!]
  connect: [UserInterviewDatumWhereUniqueInput!]
  set: [UserInterviewDatumWhereUniqueInput!]
  disconnect: [UserInterviewDatumWhereUniqueInput!]
  update: [UserInterviewDatumUpdateWithWhereUniqueWithoutUserIdInput!]
  upsert: [UserInterviewDatumUpsertWithWhereUniqueWithoutUserIdInput!]
  deleteMany: [UserInterviewDatumScalarWhereInput!]
  updateMany: [UserInterviewDatumUpdateManyWithWhereNestedInput!]
}

input UserInterviewDatumUpdateManyWithWhereNestedInput {
  where: UserInterviewDatumScalarWhereInput!
  data: UserInterviewDatumUpdateManyDataInput!
}

input UserInterviewDatumUpdateWithoutQuestionIdDataInput {
  answerRange: Int
  answerText: String
  answerYn: Boolean
  date: DateTime
  userId: UserUpdateOneRequiredWithoutUserInterviewDataInput
}

input UserInterviewDatumUpdateWithoutUserIdDataInput {
  answerRange: Int
  answerText: String
  answerYn: Boolean
  date: DateTime
  questionId: UserInterviewQuestionUpdateOneRequiredWithoutUserInterviewDataInput
}

input UserInterviewDatumUpdateWithWhereUniqueWithoutQuestionIdInput {
  where: UserInterviewDatumWhereUniqueInput!
  data: UserInterviewDatumUpdateWithoutQuestionIdDataInput!
}

input UserInterviewDatumUpdateWithWhereUniqueWithoutUserIdInput {
  where: UserInterviewDatumWhereUniqueInput!
  data: UserInterviewDatumUpdateWithoutUserIdDataInput!
}

input UserInterviewDatumUpsertWithWhereUniqueWithoutQuestionIdInput {
  where: UserInterviewDatumWhereUniqueInput!
  update: UserInterviewDatumUpdateWithoutQuestionIdDataInput!
  create: UserInterviewDatumCreateWithoutQuestionIdInput!
}

input UserInterviewDatumUpsertWithWhereUniqueWithoutUserIdInput {
  where: UserInterviewDatumWhereUniqueInput!
  update: UserInterviewDatumUpdateWithoutUserIdDataInput!
  create: UserInterviewDatumCreateWithoutUserIdInput!
}

input UserInterviewDatumWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  answerRange: Int
  answerRange_not: Int
  answerRange_in: [Int!]
  answerRange_not_in: [Int!]
  answerRange_lt: Int
  answerRange_lte: Int
  answerRange_gt: Int
  answerRange_gte: Int
  answerText: String
  answerText_not: String
  answerText_in: [String!]
  answerText_not_in: [String!]
  answerText_lt: String
  answerText_lte: String
  answerText_gt: String
  answerText_gte: String
  answerText_contains: String
  answerText_not_contains: String
  answerText_starts_with: String
  answerText_not_starts_with: String
  answerText_ends_with: String
  answerText_not_ends_with: String
  answerYn: Boolean
  answerYn_not: Boolean
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  questionId: UserInterviewQuestionWhereInput
  userId: UserWhereInput
  AND: [UserInterviewDatumWhereInput!]
  OR: [UserInterviewDatumWhereInput!]
  NOT: [UserInterviewDatumWhereInput!]
}

input UserInterviewDatumWhereUniqueInput {
  id: Int
}

type UserInterviewQuestion {
  id: Int!
  answerTypeId: AnswerType!
  question: String!
  userInterviewData(where: UserInterviewDatumWhereInput, orderBy: UserInterviewDatumOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserInterviewDatum!]
}

type UserInterviewQuestionConnection {
  pageInfo: PageInfo!
  edges: [UserInterviewQuestionEdge]!
  aggregate: AggregateUserInterviewQuestion!
}

input UserInterviewQuestionCreateInput {
  answerTypeId: AnswerTypeCreateOneWithoutUserInterviewQuestionsInput!
  question: String!
  userInterviewData: UserInterviewDatumCreateManyWithoutQuestionIdInput
}

input UserInterviewQuestionCreateManyWithoutAnswerTypeIdInput {
  create: [UserInterviewQuestionCreateWithoutAnswerTypeIdInput!]
  connect: [UserInterviewQuestionWhereUniqueInput!]
}

input UserInterviewQuestionCreateOneWithoutUserInterviewDataInput {
  create: UserInterviewQuestionCreateWithoutUserInterviewDataInput
  connect: UserInterviewQuestionWhereUniqueInput
}

input UserInterviewQuestionCreateWithoutAnswerTypeIdInput {
  question: String!
  userInterviewData: UserInterviewDatumCreateManyWithoutQuestionIdInput
}

input UserInterviewQuestionCreateWithoutUserInterviewDataInput {
  answerTypeId: AnswerTypeCreateOneWithoutUserInterviewQuestionsInput!
  question: String!
}

type UserInterviewQuestionEdge {
  node: UserInterviewQuestion!
  cursor: String!
}

enum UserInterviewQuestionOrderByInput {
  id_ASC
  id_DESC
  question_ASC
  question_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserInterviewQuestionPreviousValues {
  id: Int!
  question: String!
}

input UserInterviewQuestionScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  question: String
  question_not: String
  question_in: [String!]
  question_not_in: [String!]
  question_lt: String
  question_lte: String
  question_gt: String
  question_gte: String
  question_contains: String
  question_not_contains: String
  question_starts_with: String
  question_not_starts_with: String
  question_ends_with: String
  question_not_ends_with: String
  AND: [UserInterviewQuestionScalarWhereInput!]
  OR: [UserInterviewQuestionScalarWhereInput!]
  NOT: [UserInterviewQuestionScalarWhereInput!]
}

type UserInterviewQuestionSubscriptionPayload {
  mutation: MutationType!
  node: UserInterviewQuestion
  updatedFields: [String!]
  previousValues: UserInterviewQuestionPreviousValues
}

input UserInterviewQuestionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserInterviewQuestionWhereInput
  AND: [UserInterviewQuestionSubscriptionWhereInput!]
  OR: [UserInterviewQuestionSubscriptionWhereInput!]
  NOT: [UserInterviewQuestionSubscriptionWhereInput!]
}

input UserInterviewQuestionUpdateInput {
  answerTypeId: AnswerTypeUpdateOneRequiredWithoutUserInterviewQuestionsInput
  question: String
  userInterviewData: UserInterviewDatumUpdateManyWithoutQuestionIdInput
}

input UserInterviewQuestionUpdateManyDataInput {
  question: String
}

input UserInterviewQuestionUpdateManyMutationInput {
  question: String
}

input UserInterviewQuestionUpdateManyWithoutAnswerTypeIdInput {
  create: [UserInterviewQuestionCreateWithoutAnswerTypeIdInput!]
  delete: [UserInterviewQuestionWhereUniqueInput!]
  connect: [UserInterviewQuestionWhereUniqueInput!]
  set: [UserInterviewQuestionWhereUniqueInput!]
  disconnect: [UserInterviewQuestionWhereUniqueInput!]
  update: [UserInterviewQuestionUpdateWithWhereUniqueWithoutAnswerTypeIdInput!]
  upsert: [UserInterviewQuestionUpsertWithWhereUniqueWithoutAnswerTypeIdInput!]
  deleteMany: [UserInterviewQuestionScalarWhereInput!]
  updateMany: [UserInterviewQuestionUpdateManyWithWhereNestedInput!]
}

input UserInterviewQuestionUpdateManyWithWhereNestedInput {
  where: UserInterviewQuestionScalarWhereInput!
  data: UserInterviewQuestionUpdateManyDataInput!
}

input UserInterviewQuestionUpdateOneRequiredWithoutUserInterviewDataInput {
  create: UserInterviewQuestionCreateWithoutUserInterviewDataInput
  update: UserInterviewQuestionUpdateWithoutUserInterviewDataDataInput
  upsert: UserInterviewQuestionUpsertWithoutUserInterviewDataInput
  connect: UserInterviewQuestionWhereUniqueInput
}

input UserInterviewQuestionUpdateWithoutAnswerTypeIdDataInput {
  question: String
  userInterviewData: UserInterviewDatumUpdateManyWithoutQuestionIdInput
}

input UserInterviewQuestionUpdateWithoutUserInterviewDataDataInput {
  answerTypeId: AnswerTypeUpdateOneRequiredWithoutUserInterviewQuestionsInput
  question: String
}

input UserInterviewQuestionUpdateWithWhereUniqueWithoutAnswerTypeIdInput {
  where: UserInterviewQuestionWhereUniqueInput!
  data: UserInterviewQuestionUpdateWithoutAnswerTypeIdDataInput!
}

input UserInterviewQuestionUpsertWithoutUserInterviewDataInput {
  update: UserInterviewQuestionUpdateWithoutUserInterviewDataDataInput!
  create: UserInterviewQuestionCreateWithoutUserInterviewDataInput!
}

input UserInterviewQuestionUpsertWithWhereUniqueWithoutAnswerTypeIdInput {
  where: UserInterviewQuestionWhereUniqueInput!
  update: UserInterviewQuestionUpdateWithoutAnswerTypeIdDataInput!
  create: UserInterviewQuestionCreateWithoutAnswerTypeIdInput!
}

input UserInterviewQuestionWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  answerTypeId: AnswerTypeWhereInput
  question: String
  question_not: String
  question_in: [String!]
  question_not_in: [String!]
  question_lt: String
  question_lte: String
  question_gt: String
  question_gte: String
  question_contains: String
  question_not_contains: String
  question_starts_with: String
  question_not_starts_with: String
  question_ends_with: String
  question_not_ends_with: String
  userInterviewData_every: UserInterviewDatumWhereInput
  userInterviewData_some: UserInterviewDatumWhereInput
  userInterviewData_none: UserInterviewDatumWhereInput
  AND: [UserInterviewQuestionWhereInput!]
  OR: [UserInterviewQuestionWhereInput!]
  NOT: [UserInterviewQuestionWhereInput!]
}

input UserInterviewQuestionWhereUniqueInput {
  id: Int
  question: String
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  anonUserId_ASC
  anonUserId_DESC
  deleted_ASC
  deleted_DESC
  dob_ASC
  dob_DESC
  email_ASC
  email_DESC
  encryptSaltString_ASC
  encryptSaltString_DESC
  firstName_ASC
  firstName_DESC
  givenBirth_ASC
  givenBirth_DESC
  lastName_ASC
  lastName_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: Int!
  anonUserId: Int
  deleted: Boolean!
  dob: DateTime!
  email: String!
  encryptSaltString: String
  firstName: String!
  givenBirth: Boolean!
  lastName: String!
  password: String!
}

type UserRecordDataByDay {
  id: Int!
  crampsLevel: Int
  recordDate: DateTime!
  recordPeriodRowId: UserRecordDataByPeriod
  userRecordDataByTime(where: UserRecordDataByTimeWhereInput, orderBy: UserRecordDataByTimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserRecordDataByTime!]
}

type UserRecordDataByDayConnection {
  pageInfo: PageInfo!
  edges: [UserRecordDataByDayEdge]!
  aggregate: AggregateUserRecordDataByDay!
}

input UserRecordDataByDayCreateInput {
  crampsLevel: Int
  recordDate: DateTime!
  recordPeriodRowId: UserRecordDataByPeriodCreateOneWithoutUserRecordDataByDayInput
  userRecordDataByTime: UserRecordDataByTimeCreateManyWithoutRecordDayRowIdInput
}

input UserRecordDataByDayCreateManyWithoutRecordPeriodRowIdInput {
  create: [UserRecordDataByDayCreateWithoutRecordPeriodRowIdInput!]
  connect: [UserRecordDataByDayWhereUniqueInput!]
}

input UserRecordDataByDayCreateOneWithoutUserRecordDataByTimeInput {
  create: UserRecordDataByDayCreateWithoutUserRecordDataByTimeInput
  connect: UserRecordDataByDayWhereUniqueInput
}

input UserRecordDataByDayCreateWithoutRecordPeriodRowIdInput {
  crampsLevel: Int
  recordDate: DateTime!
  userRecordDataByTime: UserRecordDataByTimeCreateManyWithoutRecordDayRowIdInput
}

input UserRecordDataByDayCreateWithoutUserRecordDataByTimeInput {
  crampsLevel: Int
  recordDate: DateTime!
  recordPeriodRowId: UserRecordDataByPeriodCreateOneWithoutUserRecordDataByDayInput
}

type UserRecordDataByDayEdge {
  node: UserRecordDataByDay!
  cursor: String!
}

enum UserRecordDataByDayOrderByInput {
  id_ASC
  id_DESC
  crampsLevel_ASC
  crampsLevel_DESC
  recordDate_ASC
  recordDate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserRecordDataByDayPreviousValues {
  id: Int!
  crampsLevel: Int
  recordDate: DateTime!
}

input UserRecordDataByDayScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  crampsLevel: Int
  crampsLevel_not: Int
  crampsLevel_in: [Int!]
  crampsLevel_not_in: [Int!]
  crampsLevel_lt: Int
  crampsLevel_lte: Int
  crampsLevel_gt: Int
  crampsLevel_gte: Int
  recordDate: DateTime
  recordDate_not: DateTime
  recordDate_in: [DateTime!]
  recordDate_not_in: [DateTime!]
  recordDate_lt: DateTime
  recordDate_lte: DateTime
  recordDate_gt: DateTime
  recordDate_gte: DateTime
  AND: [UserRecordDataByDayScalarWhereInput!]
  OR: [UserRecordDataByDayScalarWhereInput!]
  NOT: [UserRecordDataByDayScalarWhereInput!]
}

type UserRecordDataByDaySubscriptionPayload {
  mutation: MutationType!
  node: UserRecordDataByDay
  updatedFields: [String!]
  previousValues: UserRecordDataByDayPreviousValues
}

input UserRecordDataByDaySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserRecordDataByDayWhereInput
  AND: [UserRecordDataByDaySubscriptionWhereInput!]
  OR: [UserRecordDataByDaySubscriptionWhereInput!]
  NOT: [UserRecordDataByDaySubscriptionWhereInput!]
}

input UserRecordDataByDayUpdateInput {
  crampsLevel: Int
  recordDate: DateTime
  recordPeriodRowId: UserRecordDataByPeriodUpdateOneWithoutUserRecordDataByDayInput
  userRecordDataByTime: UserRecordDataByTimeUpdateManyWithoutRecordDayRowIdInput
}

input UserRecordDataByDayUpdateManyDataInput {
  crampsLevel: Int
  recordDate: DateTime
}

input UserRecordDataByDayUpdateManyMutationInput {
  crampsLevel: Int
  recordDate: DateTime
}

input UserRecordDataByDayUpdateManyWithoutRecordPeriodRowIdInput {
  create: [UserRecordDataByDayCreateWithoutRecordPeriodRowIdInput!]
  delete: [UserRecordDataByDayWhereUniqueInput!]
  connect: [UserRecordDataByDayWhereUniqueInput!]
  set: [UserRecordDataByDayWhereUniqueInput!]
  disconnect: [UserRecordDataByDayWhereUniqueInput!]
  update: [UserRecordDataByDayUpdateWithWhereUniqueWithoutRecordPeriodRowIdInput!]
  upsert: [UserRecordDataByDayUpsertWithWhereUniqueWithoutRecordPeriodRowIdInput!]
  deleteMany: [UserRecordDataByDayScalarWhereInput!]
  updateMany: [UserRecordDataByDayUpdateManyWithWhereNestedInput!]
}

input UserRecordDataByDayUpdateManyWithWhereNestedInput {
  where: UserRecordDataByDayScalarWhereInput!
  data: UserRecordDataByDayUpdateManyDataInput!
}

input UserRecordDataByDayUpdateOneWithoutUserRecordDataByTimeInput {
  create: UserRecordDataByDayCreateWithoutUserRecordDataByTimeInput
  update: UserRecordDataByDayUpdateWithoutUserRecordDataByTimeDataInput
  upsert: UserRecordDataByDayUpsertWithoutUserRecordDataByTimeInput
  delete: Boolean
  disconnect: Boolean
  connect: UserRecordDataByDayWhereUniqueInput
}

input UserRecordDataByDayUpdateWithoutRecordPeriodRowIdDataInput {
  crampsLevel: Int
  recordDate: DateTime
  userRecordDataByTime: UserRecordDataByTimeUpdateManyWithoutRecordDayRowIdInput
}

input UserRecordDataByDayUpdateWithoutUserRecordDataByTimeDataInput {
  crampsLevel: Int
  recordDate: DateTime
  recordPeriodRowId: UserRecordDataByPeriodUpdateOneWithoutUserRecordDataByDayInput
}

input UserRecordDataByDayUpdateWithWhereUniqueWithoutRecordPeriodRowIdInput {
  where: UserRecordDataByDayWhereUniqueInput!
  data: UserRecordDataByDayUpdateWithoutRecordPeriodRowIdDataInput!
}

input UserRecordDataByDayUpsertWithoutUserRecordDataByTimeInput {
  update: UserRecordDataByDayUpdateWithoutUserRecordDataByTimeDataInput!
  create: UserRecordDataByDayCreateWithoutUserRecordDataByTimeInput!
}

input UserRecordDataByDayUpsertWithWhereUniqueWithoutRecordPeriodRowIdInput {
  where: UserRecordDataByDayWhereUniqueInput!
  update: UserRecordDataByDayUpdateWithoutRecordPeriodRowIdDataInput!
  create: UserRecordDataByDayCreateWithoutRecordPeriodRowIdInput!
}

input UserRecordDataByDayWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  crampsLevel: Int
  crampsLevel_not: Int
  crampsLevel_in: [Int!]
  crampsLevel_not_in: [Int!]
  crampsLevel_lt: Int
  crampsLevel_lte: Int
  crampsLevel_gt: Int
  crampsLevel_gte: Int
  recordDate: DateTime
  recordDate_not: DateTime
  recordDate_in: [DateTime!]
  recordDate_not_in: [DateTime!]
  recordDate_lt: DateTime
  recordDate_lte: DateTime
  recordDate_gt: DateTime
  recordDate_gte: DateTime
  recordPeriodRowId: UserRecordDataByPeriodWhereInput
  userRecordDataByTime_every: UserRecordDataByTimeWhereInput
  userRecordDataByTime_some: UserRecordDataByTimeWhereInput
  userRecordDataByTime_none: UserRecordDataByTimeWhereInput
  AND: [UserRecordDataByDayWhereInput!]
  OR: [UserRecordDataByDayWhereInput!]
  NOT: [UserRecordDataByDayWhereInput!]
}

input UserRecordDataByDayWhereUniqueInput {
  id: Int
}

type UserRecordDataByPeriod {
  id: Int!
  coinHistoryRowId: UserCoinHistory
  isTakePill: Boolean
  mensFinish: DateTime!
  mensStart: DateTime!
  userId: User
  userRecordDataByDay(where: UserRecordDataByDayWhereInput, orderBy: UserRecordDataByDayOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserRecordDataByDay!]
}

type UserRecordDataByPeriodConnection {
  pageInfo: PageInfo!
  edges: [UserRecordDataByPeriodEdge]!
  aggregate: AggregateUserRecordDataByPeriod!
}

input UserRecordDataByPeriodCreateInput {
  coinHistoryRowId: UserCoinHistoryCreateOneWithoutUserRecordDataByPeriodInput
  isTakePill: Boolean
  mensFinish: DateTime!
  mensStart: DateTime!
  userId: UserCreateOneWithoutUserRecordDataByPeriodInput
  userRecordDataByDay: UserRecordDataByDayCreateManyWithoutRecordPeriodRowIdInput
}

input UserRecordDataByPeriodCreateManyWithoutCoinHistoryRowIdInput {
  create: [UserRecordDataByPeriodCreateWithoutCoinHistoryRowIdInput!]
  connect: [UserRecordDataByPeriodWhereUniqueInput!]
}

input UserRecordDataByPeriodCreateManyWithoutUserIdInput {
  create: [UserRecordDataByPeriodCreateWithoutUserIdInput!]
  connect: [UserRecordDataByPeriodWhereUniqueInput!]
}

input UserRecordDataByPeriodCreateOneWithoutUserRecordDataByDayInput {
  create: UserRecordDataByPeriodCreateWithoutUserRecordDataByDayInput
  connect: UserRecordDataByPeriodWhereUniqueInput
}

input UserRecordDataByPeriodCreateWithoutCoinHistoryRowIdInput {
  isTakePill: Boolean
  mensFinish: DateTime!
  mensStart: DateTime!
  userId: UserCreateOneWithoutUserRecordDataByPeriodInput
  userRecordDataByDay: UserRecordDataByDayCreateManyWithoutRecordPeriodRowIdInput
}

input UserRecordDataByPeriodCreateWithoutUserIdInput {
  coinHistoryRowId: UserCoinHistoryCreateOneWithoutUserRecordDataByPeriodInput
  isTakePill: Boolean
  mensFinish: DateTime!
  mensStart: DateTime!
  userRecordDataByDay: UserRecordDataByDayCreateManyWithoutRecordPeriodRowIdInput
}

input UserRecordDataByPeriodCreateWithoutUserRecordDataByDayInput {
  coinHistoryRowId: UserCoinHistoryCreateOneWithoutUserRecordDataByPeriodInput
  isTakePill: Boolean
  mensFinish: DateTime!
  mensStart: DateTime!
  userId: UserCreateOneWithoutUserRecordDataByPeriodInput
}

type UserRecordDataByPeriodEdge {
  node: UserRecordDataByPeriod!
  cursor: String!
}

enum UserRecordDataByPeriodOrderByInput {
  id_ASC
  id_DESC
  isTakePill_ASC
  isTakePill_DESC
  mensFinish_ASC
  mensFinish_DESC
  mensStart_ASC
  mensStart_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserRecordDataByPeriodPreviousValues {
  id: Int!
  isTakePill: Boolean
  mensFinish: DateTime!
  mensStart: DateTime!
}

input UserRecordDataByPeriodScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  isTakePill: Boolean
  isTakePill_not: Boolean
  mensFinish: DateTime
  mensFinish_not: DateTime
  mensFinish_in: [DateTime!]
  mensFinish_not_in: [DateTime!]
  mensFinish_lt: DateTime
  mensFinish_lte: DateTime
  mensFinish_gt: DateTime
  mensFinish_gte: DateTime
  mensStart: DateTime
  mensStart_not: DateTime
  mensStart_in: [DateTime!]
  mensStart_not_in: [DateTime!]
  mensStart_lt: DateTime
  mensStart_lte: DateTime
  mensStart_gt: DateTime
  mensStart_gte: DateTime
  AND: [UserRecordDataByPeriodScalarWhereInput!]
  OR: [UserRecordDataByPeriodScalarWhereInput!]
  NOT: [UserRecordDataByPeriodScalarWhereInput!]
}

type UserRecordDataByPeriodSubscriptionPayload {
  mutation: MutationType!
  node: UserRecordDataByPeriod
  updatedFields: [String!]
  previousValues: UserRecordDataByPeriodPreviousValues
}

input UserRecordDataByPeriodSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserRecordDataByPeriodWhereInput
  AND: [UserRecordDataByPeriodSubscriptionWhereInput!]
  OR: [UserRecordDataByPeriodSubscriptionWhereInput!]
  NOT: [UserRecordDataByPeriodSubscriptionWhereInput!]
}

input UserRecordDataByPeriodUpdateInput {
  coinHistoryRowId: UserCoinHistoryUpdateOneWithoutUserRecordDataByPeriodInput
  isTakePill: Boolean
  mensFinish: DateTime
  mensStart: DateTime
  userId: UserUpdateOneWithoutUserRecordDataByPeriodInput
  userRecordDataByDay: UserRecordDataByDayUpdateManyWithoutRecordPeriodRowIdInput
}

input UserRecordDataByPeriodUpdateManyDataInput {
  isTakePill: Boolean
  mensFinish: DateTime
  mensStart: DateTime
}

input UserRecordDataByPeriodUpdateManyMutationInput {
  isTakePill: Boolean
  mensFinish: DateTime
  mensStart: DateTime
}

input UserRecordDataByPeriodUpdateManyWithoutCoinHistoryRowIdInput {
  create: [UserRecordDataByPeriodCreateWithoutCoinHistoryRowIdInput!]
  delete: [UserRecordDataByPeriodWhereUniqueInput!]
  connect: [UserRecordDataByPeriodWhereUniqueInput!]
  set: [UserRecordDataByPeriodWhereUniqueInput!]
  disconnect: [UserRecordDataByPeriodWhereUniqueInput!]
  update: [UserRecordDataByPeriodUpdateWithWhereUniqueWithoutCoinHistoryRowIdInput!]
  upsert: [UserRecordDataByPeriodUpsertWithWhereUniqueWithoutCoinHistoryRowIdInput!]
  deleteMany: [UserRecordDataByPeriodScalarWhereInput!]
  updateMany: [UserRecordDataByPeriodUpdateManyWithWhereNestedInput!]
}

input UserRecordDataByPeriodUpdateManyWithoutUserIdInput {
  create: [UserRecordDataByPeriodCreateWithoutUserIdInput!]
  delete: [UserRecordDataByPeriodWhereUniqueInput!]
  connect: [UserRecordDataByPeriodWhereUniqueInput!]
  set: [UserRecordDataByPeriodWhereUniqueInput!]
  disconnect: [UserRecordDataByPeriodWhereUniqueInput!]
  update: [UserRecordDataByPeriodUpdateWithWhereUniqueWithoutUserIdInput!]
  upsert: [UserRecordDataByPeriodUpsertWithWhereUniqueWithoutUserIdInput!]
  deleteMany: [UserRecordDataByPeriodScalarWhereInput!]
  updateMany: [UserRecordDataByPeriodUpdateManyWithWhereNestedInput!]
}

input UserRecordDataByPeriodUpdateManyWithWhereNestedInput {
  where: UserRecordDataByPeriodScalarWhereInput!
  data: UserRecordDataByPeriodUpdateManyDataInput!
}

input UserRecordDataByPeriodUpdateOneWithoutUserRecordDataByDayInput {
  create: UserRecordDataByPeriodCreateWithoutUserRecordDataByDayInput
  update: UserRecordDataByPeriodUpdateWithoutUserRecordDataByDayDataInput
  upsert: UserRecordDataByPeriodUpsertWithoutUserRecordDataByDayInput
  delete: Boolean
  disconnect: Boolean
  connect: UserRecordDataByPeriodWhereUniqueInput
}

input UserRecordDataByPeriodUpdateWithoutCoinHistoryRowIdDataInput {
  isTakePill: Boolean
  mensFinish: DateTime
  mensStart: DateTime
  userId: UserUpdateOneWithoutUserRecordDataByPeriodInput
  userRecordDataByDay: UserRecordDataByDayUpdateManyWithoutRecordPeriodRowIdInput
}

input UserRecordDataByPeriodUpdateWithoutUserIdDataInput {
  coinHistoryRowId: UserCoinHistoryUpdateOneWithoutUserRecordDataByPeriodInput
  isTakePill: Boolean
  mensFinish: DateTime
  mensStart: DateTime
  userRecordDataByDay: UserRecordDataByDayUpdateManyWithoutRecordPeriodRowIdInput
}

input UserRecordDataByPeriodUpdateWithoutUserRecordDataByDayDataInput {
  coinHistoryRowId: UserCoinHistoryUpdateOneWithoutUserRecordDataByPeriodInput
  isTakePill: Boolean
  mensFinish: DateTime
  mensStart: DateTime
  userId: UserUpdateOneWithoutUserRecordDataByPeriodInput
}

input UserRecordDataByPeriodUpdateWithWhereUniqueWithoutCoinHistoryRowIdInput {
  where: UserRecordDataByPeriodWhereUniqueInput!
  data: UserRecordDataByPeriodUpdateWithoutCoinHistoryRowIdDataInput!
}

input UserRecordDataByPeriodUpdateWithWhereUniqueWithoutUserIdInput {
  where: UserRecordDataByPeriodWhereUniqueInput!
  data: UserRecordDataByPeriodUpdateWithoutUserIdDataInput!
}

input UserRecordDataByPeriodUpsertWithoutUserRecordDataByDayInput {
  update: UserRecordDataByPeriodUpdateWithoutUserRecordDataByDayDataInput!
  create: UserRecordDataByPeriodCreateWithoutUserRecordDataByDayInput!
}

input UserRecordDataByPeriodUpsertWithWhereUniqueWithoutCoinHistoryRowIdInput {
  where: UserRecordDataByPeriodWhereUniqueInput!
  update: UserRecordDataByPeriodUpdateWithoutCoinHistoryRowIdDataInput!
  create: UserRecordDataByPeriodCreateWithoutCoinHistoryRowIdInput!
}

input UserRecordDataByPeriodUpsertWithWhereUniqueWithoutUserIdInput {
  where: UserRecordDataByPeriodWhereUniqueInput!
  update: UserRecordDataByPeriodUpdateWithoutUserIdDataInput!
  create: UserRecordDataByPeriodCreateWithoutUserIdInput!
}

input UserRecordDataByPeriodWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  coinHistoryRowId: UserCoinHistoryWhereInput
  isTakePill: Boolean
  isTakePill_not: Boolean
  mensFinish: DateTime
  mensFinish_not: DateTime
  mensFinish_in: [DateTime!]
  mensFinish_not_in: [DateTime!]
  mensFinish_lt: DateTime
  mensFinish_lte: DateTime
  mensFinish_gt: DateTime
  mensFinish_gte: DateTime
  mensStart: DateTime
  mensStart_not: DateTime
  mensStart_in: [DateTime!]
  mensStart_not_in: [DateTime!]
  mensStart_lt: DateTime
  mensStart_lte: DateTime
  mensStart_gt: DateTime
  mensStart_gte: DateTime
  userId: UserWhereInput
  userRecordDataByDay_every: UserRecordDataByDayWhereInput
  userRecordDataByDay_some: UserRecordDataByDayWhereInput
  userRecordDataByDay_none: UserRecordDataByDayWhereInput
  AND: [UserRecordDataByPeriodWhereInput!]
  OR: [UserRecordDataByPeriodWhereInput!]
  NOT: [UserRecordDataByPeriodWhereInput!]
}

input UserRecordDataByPeriodWhereUniqueInput {
  id: Int
}

type UserRecordDataByTime {
  id: Int!
  changeTime: DateTime!
  colorB: Int
  colorG: Int
  colorR: Int
  leakage: String
  recordDayRowId: UserRecordDataByDay
  startTime: DateTime
  volume: Float
}

type UserRecordDataByTimeConnection {
  pageInfo: PageInfo!
  edges: [UserRecordDataByTimeEdge]!
  aggregate: AggregateUserRecordDataByTime!
}

input UserRecordDataByTimeCreateInput {
  changeTime: DateTime!
  colorB: Int
  colorG: Int
  colorR: Int
  leakage: String
  recordDayRowId: UserRecordDataByDayCreateOneWithoutUserRecordDataByTimeInput
  startTime: DateTime
  volume: Float
}

input UserRecordDataByTimeCreateManyWithoutRecordDayRowIdInput {
  create: [UserRecordDataByTimeCreateWithoutRecordDayRowIdInput!]
  connect: [UserRecordDataByTimeWhereUniqueInput!]
}

input UserRecordDataByTimeCreateWithoutRecordDayRowIdInput {
  changeTime: DateTime!
  colorB: Int
  colorG: Int
  colorR: Int
  leakage: String
  startTime: DateTime
  volume: Float
}

type UserRecordDataByTimeEdge {
  node: UserRecordDataByTime!
  cursor: String!
}

enum UserRecordDataByTimeOrderByInput {
  id_ASC
  id_DESC
  changeTime_ASC
  changeTime_DESC
  colorB_ASC
  colorB_DESC
  colorG_ASC
  colorG_DESC
  colorR_ASC
  colorR_DESC
  leakage_ASC
  leakage_DESC
  startTime_ASC
  startTime_DESC
  volume_ASC
  volume_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserRecordDataByTimePreviousValues {
  id: Int!
  changeTime: DateTime!
  colorB: Int
  colorG: Int
  colorR: Int
  leakage: String
  startTime: DateTime
  volume: Float
}

input UserRecordDataByTimeScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  changeTime: DateTime
  changeTime_not: DateTime
  changeTime_in: [DateTime!]
  changeTime_not_in: [DateTime!]
  changeTime_lt: DateTime
  changeTime_lte: DateTime
  changeTime_gt: DateTime
  changeTime_gte: DateTime
  colorB: Int
  colorB_not: Int
  colorB_in: [Int!]
  colorB_not_in: [Int!]
  colorB_lt: Int
  colorB_lte: Int
  colorB_gt: Int
  colorB_gte: Int
  colorG: Int
  colorG_not: Int
  colorG_in: [Int!]
  colorG_not_in: [Int!]
  colorG_lt: Int
  colorG_lte: Int
  colorG_gt: Int
  colorG_gte: Int
  colorR: Int
  colorR_not: Int
  colorR_in: [Int!]
  colorR_not_in: [Int!]
  colorR_lt: Int
  colorR_lte: Int
  colorR_gt: Int
  colorR_gte: Int
  leakage: String
  leakage_not: String
  leakage_in: [String!]
  leakage_not_in: [String!]
  leakage_lt: String
  leakage_lte: String
  leakage_gt: String
  leakage_gte: String
  leakage_contains: String
  leakage_not_contains: String
  leakage_starts_with: String
  leakage_not_starts_with: String
  leakage_ends_with: String
  leakage_not_ends_with: String
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  volume: Float
  volume_not: Float
  volume_in: [Float!]
  volume_not_in: [Float!]
  volume_lt: Float
  volume_lte: Float
  volume_gt: Float
  volume_gte: Float
  AND: [UserRecordDataByTimeScalarWhereInput!]
  OR: [UserRecordDataByTimeScalarWhereInput!]
  NOT: [UserRecordDataByTimeScalarWhereInput!]
}

type UserRecordDataByTimeSubscriptionPayload {
  mutation: MutationType!
  node: UserRecordDataByTime
  updatedFields: [String!]
  previousValues: UserRecordDataByTimePreviousValues
}

input UserRecordDataByTimeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserRecordDataByTimeWhereInput
  AND: [UserRecordDataByTimeSubscriptionWhereInput!]
  OR: [UserRecordDataByTimeSubscriptionWhereInput!]
  NOT: [UserRecordDataByTimeSubscriptionWhereInput!]
}

input UserRecordDataByTimeUpdateInput {
  changeTime: DateTime
  colorB: Int
  colorG: Int
  colorR: Int
  leakage: String
  recordDayRowId: UserRecordDataByDayUpdateOneWithoutUserRecordDataByTimeInput
  startTime: DateTime
  volume: Float
}

input UserRecordDataByTimeUpdateManyDataInput {
  changeTime: DateTime
  colorB: Int
  colorG: Int
  colorR: Int
  leakage: String
  startTime: DateTime
  volume: Float
}

input UserRecordDataByTimeUpdateManyMutationInput {
  changeTime: DateTime
  colorB: Int
  colorG: Int
  colorR: Int
  leakage: String
  startTime: DateTime
  volume: Float
}

input UserRecordDataByTimeUpdateManyWithoutRecordDayRowIdInput {
  create: [UserRecordDataByTimeCreateWithoutRecordDayRowIdInput!]
  delete: [UserRecordDataByTimeWhereUniqueInput!]
  connect: [UserRecordDataByTimeWhereUniqueInput!]
  set: [UserRecordDataByTimeWhereUniqueInput!]
  disconnect: [UserRecordDataByTimeWhereUniqueInput!]
  update: [UserRecordDataByTimeUpdateWithWhereUniqueWithoutRecordDayRowIdInput!]
  upsert: [UserRecordDataByTimeUpsertWithWhereUniqueWithoutRecordDayRowIdInput!]
  deleteMany: [UserRecordDataByTimeScalarWhereInput!]
  updateMany: [UserRecordDataByTimeUpdateManyWithWhereNestedInput!]
}

input UserRecordDataByTimeUpdateManyWithWhereNestedInput {
  where: UserRecordDataByTimeScalarWhereInput!
  data: UserRecordDataByTimeUpdateManyDataInput!
}

input UserRecordDataByTimeUpdateWithoutRecordDayRowIdDataInput {
  changeTime: DateTime
  colorB: Int
  colorG: Int
  colorR: Int
  leakage: String
  startTime: DateTime
  volume: Float
}

input UserRecordDataByTimeUpdateWithWhereUniqueWithoutRecordDayRowIdInput {
  where: UserRecordDataByTimeWhereUniqueInput!
  data: UserRecordDataByTimeUpdateWithoutRecordDayRowIdDataInput!
}

input UserRecordDataByTimeUpsertWithWhereUniqueWithoutRecordDayRowIdInput {
  where: UserRecordDataByTimeWhereUniqueInput!
  update: UserRecordDataByTimeUpdateWithoutRecordDayRowIdDataInput!
  create: UserRecordDataByTimeCreateWithoutRecordDayRowIdInput!
}

input UserRecordDataByTimeWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  changeTime: DateTime
  changeTime_not: DateTime
  changeTime_in: [DateTime!]
  changeTime_not_in: [DateTime!]
  changeTime_lt: DateTime
  changeTime_lte: DateTime
  changeTime_gt: DateTime
  changeTime_gte: DateTime
  colorB: Int
  colorB_not: Int
  colorB_in: [Int!]
  colorB_not_in: [Int!]
  colorB_lt: Int
  colorB_lte: Int
  colorB_gt: Int
  colorB_gte: Int
  colorG: Int
  colorG_not: Int
  colorG_in: [Int!]
  colorG_not_in: [Int!]
  colorG_lt: Int
  colorG_lte: Int
  colorG_gt: Int
  colorG_gte: Int
  colorR: Int
  colorR_not: Int
  colorR_in: [Int!]
  colorR_not_in: [Int!]
  colorR_lt: Int
  colorR_lte: Int
  colorR_gt: Int
  colorR_gte: Int
  leakage: String
  leakage_not: String
  leakage_in: [String!]
  leakage_not_in: [String!]
  leakage_lt: String
  leakage_lte: String
  leakage_gt: String
  leakage_gte: String
  leakage_contains: String
  leakage_not_contains: String
  leakage_starts_with: String
  leakage_not_starts_with: String
  leakage_ends_with: String
  leakage_not_ends_with: String
  recordDayRowId: UserRecordDataByDayWhereInput
  startTime: DateTime
  startTime_not: DateTime
  startTime_in: [DateTime!]
  startTime_not_in: [DateTime!]
  startTime_lt: DateTime
  startTime_lte: DateTime
  startTime_gt: DateTime
  startTime_gte: DateTime
  volume: Float
  volume_not: Float
  volume_in: [Float!]
  volume_not_in: [Float!]
  volume_lt: Float
  volume_lte: Float
  volume_gt: Float
  volume_gte: Float
  AND: [UserRecordDataByTimeWhereInput!]
  OR: [UserRecordDataByTimeWhereInput!]
  NOT: [UserRecordDataByTimeWhereInput!]
}

input UserRecordDataByTimeWhereUniqueInput {
  id: Int
}

input UserScalarWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  anonUserId: Int
  anonUserId_not: Int
  anonUserId_in: [Int!]
  anonUserId_not_in: [Int!]
  anonUserId_lt: Int
  anonUserId_lte: Int
  anonUserId_gt: Int
  anonUserId_gte: Int
  deleted: Boolean
  deleted_not: Boolean
  dob: DateTime
  dob_not: DateTime
  dob_in: [DateTime!]
  dob_not_in: [DateTime!]
  dob_lt: DateTime
  dob_lte: DateTime
  dob_gt: DateTime
  dob_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  encryptSaltString: String
  encryptSaltString_not: String
  encryptSaltString_in: [String!]
  encryptSaltString_not_in: [String!]
  encryptSaltString_lt: String
  encryptSaltString_lte: String
  encryptSaltString_gt: String
  encryptSaltString_gte: String
  encryptSaltString_contains: String
  encryptSaltString_not_contains: String
  encryptSaltString_starts_with: String
  encryptSaltString_not_starts_with: String
  encryptSaltString_ends_with: String
  encryptSaltString_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  givenBirth: Boolean
  givenBirth_not: Boolean
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UsersDataAnalysis {
  id: Int!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  userId: String!
}

type UsersDataAnalysisConnection {
  pageInfo: PageInfo!
  edges: [UsersDataAnalysisEdge]!
  aggregate: AggregateUsersDataAnalysis!
}

input UsersDataAnalysisCreateInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  userId: String!
}

type UsersDataAnalysisEdge {
  node: UsersDataAnalysis!
  cursor: String!
}

enum UsersDataAnalysisOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  password_ASC
  password_DESC
  userId_ASC
  userId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UsersDataAnalysisPreviousValues {
  id: Int!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  userId: String!
}

type UsersDataAnalysisSubscriptionPayload {
  mutation: MutationType!
  node: UsersDataAnalysis
  updatedFields: [String!]
  previousValues: UsersDataAnalysisPreviousValues
}

input UsersDataAnalysisSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UsersDataAnalysisWhereInput
  AND: [UsersDataAnalysisSubscriptionWhereInput!]
  OR: [UsersDataAnalysisSubscriptionWhereInput!]
  NOT: [UsersDataAnalysisSubscriptionWhereInput!]
}

input UsersDataAnalysisUpdateInput {
  email: String
  firstName: String
  lastName: String
  password: String
  userId: String
}

input UsersDataAnalysisUpdateManyMutationInput {
  email: String
  firstName: String
  lastName: String
  password: String
  userId: String
}

input UsersDataAnalysisWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  userId: String
  userId_not: String
  userId_in: [String!]
  userId_not_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_gt: String
  userId_gte: String
  userId_contains: String
  userId_not_contains: String
  userId_starts_with: String
  userId_not_starts_with: String
  userId_ends_with: String
  userId_not_ends_with: String
  AND: [UsersDataAnalysisWhereInput!]
  OR: [UsersDataAnalysisWhereInput!]
  NOT: [UsersDataAnalysisWhereInput!]
}

input UsersDataAnalysisWhereUniqueInput {
  id: Int
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  anonUserId: Int
  appServerSync: AppServerSyncUpdateManyWithoutUserIdInput
  countryId: CountryUpdateOneWithoutUsersInput
  cupDataProcFlow: CupDataProcFlowUpdateManyWithoutUserIdInput
  cupDataProcMdates: CupDataProcMdateUpdateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseUpdateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime
  email: String
  encryptSaltString: String
  ethnicityId: EthnicityUpdateOneRequiredWithoutUsersInput
  firstName: String
  givenBirth: Boolean
  lastName: String
  password: String
  userCoinHistory: UserCoinHistoryUpdateManyWithoutUserIdInput
  userCups: UserCupUpdateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumUpdateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodUpdateManyWithoutUserIdInput
}

input UserUpdateManyDataInput {
  anonUserId: Int
  deleted: Boolean
  dob: DateTime
  email: String
  encryptSaltString: String
  firstName: String
  givenBirth: Boolean
  lastName: String
  password: String
}

input UserUpdateManyMutationInput {
  anonUserId: Int
  deleted: Boolean
  dob: DateTime
  email: String
  encryptSaltString: String
  firstName: String
  givenBirth: Boolean
  lastName: String
  password: String
}

input UserUpdateManyWithoutCountryIdInput {
  create: [UserCreateWithoutCountryIdInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCountryIdInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCountryIdInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutEthnicityIdInput {
  create: [UserCreateWithoutEthnicityIdInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutEthnicityIdInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutEthnicityIdInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutAppServerSyncInput {
  create: UserCreateWithoutAppServerSyncInput
  update: UserUpdateWithoutAppServerSyncDataInput
  upsert: UserUpsertWithoutAppServerSyncInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCupDataProcFlowInput {
  create: UserCreateWithoutCupDataProcFlowInput
  update: UserUpdateWithoutCupDataProcFlowDataInput
  upsert: UserUpsertWithoutCupDataProcFlowInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCupDataProcMdatesInput {
  create: UserCreateWithoutCupDataProcMdatesInput
  update: UserUpdateWithoutCupDataProcMdatesDataInput
  upsert: UserUpsertWithoutCupDataProcMdatesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCupDataQaResponseInput {
  create: UserCreateWithoutCupDataQaResponseInput
  update: UserUpdateWithoutCupDataQaResponseDataInput
  upsert: UserUpsertWithoutCupDataQaResponseInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCupDataUserRemoveInput {
  create: UserCreateWithoutCupDataUserRemoveInput
  update: UserUpdateWithoutCupDataUserRemoveDataInput
  upsert: UserUpsertWithoutCupDataUserRemoveInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutUserInterviewDataInput {
  create: UserCreateWithoutUserInterviewDataInput
  update: UserUpdateWithoutUserInterviewDataDataInput
  upsert: UserUpsertWithoutUserInterviewDataInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutUserCoinHistoryInput {
  create: UserCreateWithoutUserCoinHistoryInput
  update: UserUpdateWithoutUserCoinHistoryDataInput
  upsert: UserUpsertWithoutUserCoinHistoryInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutUserCupsInput {
  create: UserCreateWithoutUserCupsInput
  update: UserUpdateWithoutUserCupsDataInput
  upsert: UserUpsertWithoutUserCupsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutUserRecordDataByPeriodInput {
  create: UserCreateWithoutUserRecordDataByPeriodInput
  update: UserUpdateWithoutUserRecordDataByPeriodDataInput
  upsert: UserUpsertWithoutUserRecordDataByPeriodInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutAppServerSyncDataInput {
  anonUserId: Int
  countryId: CountryUpdateOneWithoutUsersInput
  cupDataProcFlow: CupDataProcFlowUpdateManyWithoutUserIdInput
  cupDataProcMdates: CupDataProcMdateUpdateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseUpdateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime
  email: String
  encryptSaltString: String
  ethnicityId: EthnicityUpdateOneRequiredWithoutUsersInput
  firstName: String
  givenBirth: Boolean
  lastName: String
  password: String
  userCoinHistory: UserCoinHistoryUpdateManyWithoutUserIdInput
  userCups: UserCupUpdateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumUpdateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutCountryIdDataInput {
  anonUserId: Int
  appServerSync: AppServerSyncUpdateManyWithoutUserIdInput
  cupDataProcFlow: CupDataProcFlowUpdateManyWithoutUserIdInput
  cupDataProcMdates: CupDataProcMdateUpdateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseUpdateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime
  email: String
  encryptSaltString: String
  ethnicityId: EthnicityUpdateOneRequiredWithoutUsersInput
  firstName: String
  givenBirth: Boolean
  lastName: String
  password: String
  userCoinHistory: UserCoinHistoryUpdateManyWithoutUserIdInput
  userCups: UserCupUpdateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumUpdateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutCupDataProcFlowDataInput {
  anonUserId: Int
  appServerSync: AppServerSyncUpdateManyWithoutUserIdInput
  countryId: CountryUpdateOneWithoutUsersInput
  cupDataProcMdates: CupDataProcMdateUpdateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseUpdateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime
  email: String
  encryptSaltString: String
  ethnicityId: EthnicityUpdateOneRequiredWithoutUsersInput
  firstName: String
  givenBirth: Boolean
  lastName: String
  password: String
  userCoinHistory: UserCoinHistoryUpdateManyWithoutUserIdInput
  userCups: UserCupUpdateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumUpdateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutCupDataProcMdatesDataInput {
  anonUserId: Int
  appServerSync: AppServerSyncUpdateManyWithoutUserIdInput
  countryId: CountryUpdateOneWithoutUsersInput
  cupDataProcFlow: CupDataProcFlowUpdateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseUpdateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime
  email: String
  encryptSaltString: String
  ethnicityId: EthnicityUpdateOneRequiredWithoutUsersInput
  firstName: String
  givenBirth: Boolean
  lastName: String
  password: String
  userCoinHistory: UserCoinHistoryUpdateManyWithoutUserIdInput
  userCups: UserCupUpdateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumUpdateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutCupDataQaResponseDataInput {
  anonUserId: Int
  appServerSync: AppServerSyncUpdateManyWithoutUserIdInput
  countryId: CountryUpdateOneWithoutUsersInput
  cupDataProcFlow: CupDataProcFlowUpdateManyWithoutUserIdInput
  cupDataProcMdates: CupDataProcMdateUpdateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime
  email: String
  encryptSaltString: String
  ethnicityId: EthnicityUpdateOneRequiredWithoutUsersInput
  firstName: String
  givenBirth: Boolean
  lastName: String
  password: String
  userCoinHistory: UserCoinHistoryUpdateManyWithoutUserIdInput
  userCups: UserCupUpdateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumUpdateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutCupDataUserRemoveDataInput {
  anonUserId: Int
  appServerSync: AppServerSyncUpdateManyWithoutUserIdInput
  countryId: CountryUpdateOneWithoutUsersInput
  cupDataProcFlow: CupDataProcFlowUpdateManyWithoutUserIdInput
  cupDataProcMdates: CupDataProcMdateUpdateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseUpdateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime
  email: String
  encryptSaltString: String
  ethnicityId: EthnicityUpdateOneRequiredWithoutUsersInput
  firstName: String
  givenBirth: Boolean
  lastName: String
  password: String
  userCoinHistory: UserCoinHistoryUpdateManyWithoutUserIdInput
  userCups: UserCupUpdateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumUpdateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutEthnicityIdDataInput {
  anonUserId: Int
  appServerSync: AppServerSyncUpdateManyWithoutUserIdInput
  countryId: CountryUpdateOneWithoutUsersInput
  cupDataProcFlow: CupDataProcFlowUpdateManyWithoutUserIdInput
  cupDataProcMdates: CupDataProcMdateUpdateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseUpdateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime
  email: String
  encryptSaltString: String
  firstName: String
  givenBirth: Boolean
  lastName: String
  password: String
  userCoinHistory: UserCoinHistoryUpdateManyWithoutUserIdInput
  userCups: UserCupUpdateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumUpdateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutUserCoinHistoryDataInput {
  anonUserId: Int
  appServerSync: AppServerSyncUpdateManyWithoutUserIdInput
  countryId: CountryUpdateOneWithoutUsersInput
  cupDataProcFlow: CupDataProcFlowUpdateManyWithoutUserIdInput
  cupDataProcMdates: CupDataProcMdateUpdateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseUpdateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime
  email: String
  encryptSaltString: String
  ethnicityId: EthnicityUpdateOneRequiredWithoutUsersInput
  firstName: String
  givenBirth: Boolean
  lastName: String
  password: String
  userCups: UserCupUpdateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumUpdateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutUserCupsDataInput {
  anonUserId: Int
  appServerSync: AppServerSyncUpdateManyWithoutUserIdInput
  countryId: CountryUpdateOneWithoutUsersInput
  cupDataProcFlow: CupDataProcFlowUpdateManyWithoutUserIdInput
  cupDataProcMdates: CupDataProcMdateUpdateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseUpdateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime
  email: String
  encryptSaltString: String
  ethnicityId: EthnicityUpdateOneRequiredWithoutUsersInput
  firstName: String
  givenBirth: Boolean
  lastName: String
  password: String
  userCoinHistory: UserCoinHistoryUpdateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumUpdateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutUserInterviewDataDataInput {
  anonUserId: Int
  appServerSync: AppServerSyncUpdateManyWithoutUserIdInput
  countryId: CountryUpdateOneWithoutUsersInput
  cupDataProcFlow: CupDataProcFlowUpdateManyWithoutUserIdInput
  cupDataProcMdates: CupDataProcMdateUpdateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseUpdateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime
  email: String
  encryptSaltString: String
  ethnicityId: EthnicityUpdateOneRequiredWithoutUsersInput
  firstName: String
  givenBirth: Boolean
  lastName: String
  password: String
  userCoinHistory: UserCoinHistoryUpdateManyWithoutUserIdInput
  userCups: UserCupUpdateManyWithoutUserIdInput
  userRecordDataByPeriod: UserRecordDataByPeriodUpdateManyWithoutUserIdInput
}

input UserUpdateWithoutUserRecordDataByPeriodDataInput {
  anonUserId: Int
  appServerSync: AppServerSyncUpdateManyWithoutUserIdInput
  countryId: CountryUpdateOneWithoutUsersInput
  cupDataProcFlow: CupDataProcFlowUpdateManyWithoutUserIdInput
  cupDataProcMdates: CupDataProcMdateUpdateManyWithoutUserIdInput
  cupDataQaResponse: CupDataQaResponseUpdateManyWithoutUserIdInput
  cupDataUserRemove: CupDataUserRemoveUpdateManyWithoutUserIdInput
  deleted: Boolean
  dob: DateTime
  email: String
  encryptSaltString: String
  ethnicityId: EthnicityUpdateOneRequiredWithoutUsersInput
  firstName: String
  givenBirth: Boolean
  lastName: String
  password: String
  userCoinHistory: UserCoinHistoryUpdateManyWithoutUserIdInput
  userCups: UserCupUpdateManyWithoutUserIdInput
  userInterviewData: UserInterviewDatumUpdateManyWithoutUserIdInput
}

input UserUpdateWithWhereUniqueWithoutCountryIdInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCountryIdDataInput!
}

input UserUpdateWithWhereUniqueWithoutEthnicityIdInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutEthnicityIdDataInput!
}

input UserUpsertWithoutAppServerSyncInput {
  update: UserUpdateWithoutAppServerSyncDataInput!
  create: UserCreateWithoutAppServerSyncInput!
}

input UserUpsertWithoutCupDataProcFlowInput {
  update: UserUpdateWithoutCupDataProcFlowDataInput!
  create: UserCreateWithoutCupDataProcFlowInput!
}

input UserUpsertWithoutCupDataProcMdatesInput {
  update: UserUpdateWithoutCupDataProcMdatesDataInput!
  create: UserCreateWithoutCupDataProcMdatesInput!
}

input UserUpsertWithoutCupDataQaResponseInput {
  update: UserUpdateWithoutCupDataQaResponseDataInput!
  create: UserCreateWithoutCupDataQaResponseInput!
}

input UserUpsertWithoutCupDataUserRemoveInput {
  update: UserUpdateWithoutCupDataUserRemoveDataInput!
  create: UserCreateWithoutCupDataUserRemoveInput!
}

input UserUpsertWithoutUserCoinHistoryInput {
  update: UserUpdateWithoutUserCoinHistoryDataInput!
  create: UserCreateWithoutUserCoinHistoryInput!
}

input UserUpsertWithoutUserCupsInput {
  update: UserUpdateWithoutUserCupsDataInput!
  create: UserCreateWithoutUserCupsInput!
}

input UserUpsertWithoutUserInterviewDataInput {
  update: UserUpdateWithoutUserInterviewDataDataInput!
  create: UserCreateWithoutUserInterviewDataInput!
}

input UserUpsertWithoutUserRecordDataByPeriodInput {
  update: UserUpdateWithoutUserRecordDataByPeriodDataInput!
  create: UserCreateWithoutUserRecordDataByPeriodInput!
}

input UserUpsertWithWhereUniqueWithoutCountryIdInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCountryIdDataInput!
  create: UserCreateWithoutCountryIdInput!
}

input UserUpsertWithWhereUniqueWithoutEthnicityIdInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutEthnicityIdDataInput!
  create: UserCreateWithoutEthnicityIdInput!
}

input UserWhereInput {
  id: Int
  id_not: Int
  id_in: [Int!]
  id_not_in: [Int!]
  id_lt: Int
  id_lte: Int
  id_gt: Int
  id_gte: Int
  anonUserId: Int
  anonUserId_not: Int
  anonUserId_in: [Int!]
  anonUserId_not_in: [Int!]
  anonUserId_lt: Int
  anonUserId_lte: Int
  anonUserId_gt: Int
  anonUserId_gte: Int
  appServerSync_every: AppServerSyncWhereInput
  appServerSync_some: AppServerSyncWhereInput
  appServerSync_none: AppServerSyncWhereInput
  countryId: CountryWhereInput
  cupDataProcFlow_every: CupDataProcFlowWhereInput
  cupDataProcFlow_some: CupDataProcFlowWhereInput
  cupDataProcFlow_none: CupDataProcFlowWhereInput
  cupDataProcMdates_every: CupDataProcMdateWhereInput
  cupDataProcMdates_some: CupDataProcMdateWhereInput
  cupDataProcMdates_none: CupDataProcMdateWhereInput
  cupDataQaResponse_every: CupDataQaResponseWhereInput
  cupDataQaResponse_some: CupDataQaResponseWhereInput
  cupDataQaResponse_none: CupDataQaResponseWhereInput
  cupDataUserRemove_every: CupDataUserRemoveWhereInput
  cupDataUserRemove_some: CupDataUserRemoveWhereInput
  cupDataUserRemove_none: CupDataUserRemoveWhereInput
  deleted: Boolean
  deleted_not: Boolean
  dob: DateTime
  dob_not: DateTime
  dob_in: [DateTime!]
  dob_not_in: [DateTime!]
  dob_lt: DateTime
  dob_lte: DateTime
  dob_gt: DateTime
  dob_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  encryptSaltString: String
  encryptSaltString_not: String
  encryptSaltString_in: [String!]
  encryptSaltString_not_in: [String!]
  encryptSaltString_lt: String
  encryptSaltString_lte: String
  encryptSaltString_gt: String
  encryptSaltString_gte: String
  encryptSaltString_contains: String
  encryptSaltString_not_contains: String
  encryptSaltString_starts_with: String
  encryptSaltString_not_starts_with: String
  encryptSaltString_ends_with: String
  encryptSaltString_not_ends_with: String
  ethnicityId: EthnicityWhereInput
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  givenBirth: Boolean
  givenBirth_not: Boolean
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  userCoinHistory_every: UserCoinHistoryWhereInput
  userCoinHistory_some: UserCoinHistoryWhereInput
  userCoinHistory_none: UserCoinHistoryWhereInput
  userCups_every: UserCupWhereInput
  userCups_some: UserCupWhereInput
  userCups_none: UserCupWhereInput
  userInterviewData_every: UserInterviewDatumWhereInput
  userInterviewData_some: UserInterviewDatumWhereInput
  userInterviewData_none: UserInterviewDatumWhereInput
  userRecordDataByPeriod_every: UserRecordDataByPeriodWhereInput
  userRecordDataByPeriod_some: UserRecordDataByPeriodWhereInput
  userRecordDataByPeriod_none: UserRecordDataByPeriodWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: Int
  anonUserId: Int
  email: String
}
`
      }
    