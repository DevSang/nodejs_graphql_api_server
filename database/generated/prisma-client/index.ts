// Code generated by Prisma (prisma@1.30.5). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  additionalInfo: (where?: AdditionalInfoWhereInput) => Promise<boolean>;
  answerType: (where?: AnswerTypeWhereInput) => Promise<boolean>;
  appServerSync: (where?: AppServerSyncWhereInput) => Promise<boolean>;
  authToken: (where?: AuthTokenWhereInput) => Promise<boolean>;
  calibration: (where?: CalibrationWhereInput) => Promise<boolean>;
  company: (where?: CompanyWhereInput) => Promise<boolean>;
  country: (where?: CountryWhereInput) => Promise<boolean>;
  cup: (where?: CupWhereInput) => Promise<boolean>;
  cupAppSync: (where?: CupAppSyncWhereInput) => Promise<boolean>;
  cupDataAnswer: (where?: CupDataAnswerWhereInput) => Promise<boolean>;
  cupDataColourCalc: (where?: CupDataColourCalcWhereInput) => Promise<boolean>;
  cupDataColourCalib: (
    where?: CupDataColourCalibWhereInput
  ) => Promise<boolean>;
  cupDataManMdate: (where?: CupDataManMdateWhereInput) => Promise<boolean>;
  cupDataProcFlow: (where?: CupDataProcFlowWhereInput) => Promise<boolean>;
  cupDataProcMdate: (where?: CupDataProcMdateWhereInput) => Promise<boolean>;
  cupDataProcVolume: (where?: CupDataProcVolumeWhereInput) => Promise<boolean>;
  cupDataQaResponse: (where?: CupDataQaResponseWhereInput) => Promise<boolean>;
  cupDataQuestion: (where?: CupDataQuestionWhereInput) => Promise<boolean>;
  cupDataRaw: (where?: CupDataRawWhereInput) => Promise<boolean>;
  cupDataRejection: (where?: CupDataRejectionWhereInput) => Promise<boolean>;
  cupDataUserRemove: (where?: CupDataUserRemoveWhereInput) => Promise<boolean>;
  cupDataUserRemoveExplain: (
    where?: CupDataUserRemoveExplainWhereInput
  ) => Promise<boolean>;
  cupDatum: (where?: CupDatumWhereInput) => Promise<boolean>;
  ethnicity: (where?: EthnicityWhereInput) => Promise<boolean>;
  firmware: (where?: FirmwareWhereInput) => Promise<boolean>;
  hardware: (where?: HardwareWhereInput) => Promise<boolean>;
  marketAmazonCoupon: (
    where?: MarketAmazonCouponWhereInput
  ) => Promise<boolean>;
  marketBuyHistory: (where?: MarketBuyHistoryWhereInput) => Promise<boolean>;
  marketList: (where?: MarketListWhereInput) => Promise<boolean>;
  marketListDetail: (where?: MarketListDetailWhereInput) => Promise<boolean>;
  platformComp: (where?: PlatformCompWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userCoinHistory: (where?: UserCoinHistoryWhereInput) => Promise<boolean>;
  userCoinRewardsFee: (
    where?: UserCoinRewardsFeeWhereInput
  ) => Promise<boolean>;
  userCup: (where?: UserCupWhereInput) => Promise<boolean>;
  userInterviewDatum: (
    where?: UserInterviewDatumWhereInput
  ) => Promise<boolean>;
  userInterviewQuestion: (
    where?: UserInterviewQuestionWhereInput
  ) => Promise<boolean>;
  userRecordCameraDataByTime: (
    where?: UserRecordCameraDataByTimeWhereInput
  ) => Promise<boolean>;
  userRecordDataByDay: (
    where?: UserRecordDataByDayWhereInput
  ) => Promise<boolean>;
  userRecordDataByPeriod: (
    where?: UserRecordDataByPeriodWhereInput
  ) => Promise<boolean>;
  userRecordDataByTime: (
    where?: UserRecordDataByTimeWhereInput
  ) => Promise<boolean>;
  userWallet: (where?: UserWalletWhereInput) => Promise<boolean>;
  usersDataAnalysis: (where?: UsersDataAnalysisWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  additionalInfo: (
    where: AdditionalInfoWhereUniqueInput
  ) => AdditionalInfoPromise;
  additionalInfoes: (
    args?: {
      where?: AdditionalInfoWhereInput;
      orderBy?: AdditionalInfoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<AdditionalInfo>;
  additionalInfoesConnection: (
    args?: {
      where?: AdditionalInfoWhereInput;
      orderBy?: AdditionalInfoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AdditionalInfoConnectionPromise;
  answerType: (where: AnswerTypeWhereUniqueInput) => AnswerTypePromise;
  answerTypes: (
    args?: {
      where?: AnswerTypeWhereInput;
      orderBy?: AnswerTypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<AnswerType>;
  answerTypesConnection: (
    args?: {
      where?: AnswerTypeWhereInput;
      orderBy?: AnswerTypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AnswerTypeConnectionPromise;
  appServerSync: (where: AppServerSyncWhereUniqueInput) => AppServerSyncPromise;
  appServerSyncs: (
    args?: {
      where?: AppServerSyncWhereInput;
      orderBy?: AppServerSyncOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<AppServerSync>;
  appServerSyncsConnection: (
    args?: {
      where?: AppServerSyncWhereInput;
      orderBy?: AppServerSyncOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AppServerSyncConnectionPromise;
  authToken: (where: AuthTokenWhereUniqueInput) => AuthTokenPromise;
  authTokens: (
    args?: {
      where?: AuthTokenWhereInput;
      orderBy?: AuthTokenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<AuthToken>;
  authTokensConnection: (
    args?: {
      where?: AuthTokenWhereInput;
      orderBy?: AuthTokenOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AuthTokenConnectionPromise;
  calibration: (where: CalibrationWhereUniqueInput) => CalibrationPromise;
  calibrations: (
    args?: {
      where?: CalibrationWhereInput;
      orderBy?: CalibrationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Calibration>;
  calibrationsConnection: (
    args?: {
      where?: CalibrationWhereInput;
      orderBy?: CalibrationOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CalibrationConnectionPromise;
  company: (where: CompanyWhereUniqueInput) => CompanyPromise;
  companies: (
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Company>;
  companiesConnection: (
    args?: {
      where?: CompanyWhereInput;
      orderBy?: CompanyOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CompanyConnectionPromise;
  country: (where: CountryWhereUniqueInput) => CountryPromise;
  countries: (
    args?: {
      where?: CountryWhereInput;
      orderBy?: CountryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Country>;
  countriesConnection: (
    args?: {
      where?: CountryWhereInput;
      orderBy?: CountryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CountryConnectionPromise;
  cup: (where: CupWhereUniqueInput) => CupPromise;
  cups: (
    args?: {
      where?: CupWhereInput;
      orderBy?: CupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Cup>;
  cupsConnection: (
    args?: {
      where?: CupWhereInput;
      orderBy?: CupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CupConnectionPromise;
  cupAppSync: (where: CupAppSyncWhereUniqueInput) => CupAppSyncPromise;
  cupAppSyncs: (
    args?: {
      where?: CupAppSyncWhereInput;
      orderBy?: CupAppSyncOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CupAppSync>;
  cupAppSyncsConnection: (
    args?: {
      where?: CupAppSyncWhereInput;
      orderBy?: CupAppSyncOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CupAppSyncConnectionPromise;
  cupDataAnswer: (where: CupDataAnswerWhereUniqueInput) => CupDataAnswerPromise;
  cupDataAnswers: (
    args?: {
      where?: CupDataAnswerWhereInput;
      orderBy?: CupDataAnswerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CupDataAnswer>;
  cupDataAnswersConnection: (
    args?: {
      where?: CupDataAnswerWhereInput;
      orderBy?: CupDataAnswerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CupDataAnswerConnectionPromise;
  cupDataColourCalc: (
    where: CupDataColourCalcWhereUniqueInput
  ) => CupDataColourCalcPromise;
  cupDataColourCalcs: (
    args?: {
      where?: CupDataColourCalcWhereInput;
      orderBy?: CupDataColourCalcOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CupDataColourCalc>;
  cupDataColourCalcsConnection: (
    args?: {
      where?: CupDataColourCalcWhereInput;
      orderBy?: CupDataColourCalcOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CupDataColourCalcConnectionPromise;
  cupDataColourCalib: (
    where: CupDataColourCalibWhereUniqueInput
  ) => CupDataColourCalibPromise;
  cupDataColourCalibs: (
    args?: {
      where?: CupDataColourCalibWhereInput;
      orderBy?: CupDataColourCalibOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CupDataColourCalib>;
  cupDataColourCalibsConnection: (
    args?: {
      where?: CupDataColourCalibWhereInput;
      orderBy?: CupDataColourCalibOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CupDataColourCalibConnectionPromise;
  cupDataManMdate: (
    where: CupDataManMdateWhereUniqueInput
  ) => CupDataManMdatePromise;
  cupDataManMdates: (
    args?: {
      where?: CupDataManMdateWhereInput;
      orderBy?: CupDataManMdateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CupDataManMdate>;
  cupDataManMdatesConnection: (
    args?: {
      where?: CupDataManMdateWhereInput;
      orderBy?: CupDataManMdateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CupDataManMdateConnectionPromise;
  cupDataProcFlow: (
    where: CupDataProcFlowWhereUniqueInput
  ) => CupDataProcFlowPromise;
  cupDataProcFlows: (
    args?: {
      where?: CupDataProcFlowWhereInput;
      orderBy?: CupDataProcFlowOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CupDataProcFlow>;
  cupDataProcFlowsConnection: (
    args?: {
      where?: CupDataProcFlowWhereInput;
      orderBy?: CupDataProcFlowOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CupDataProcFlowConnectionPromise;
  cupDataProcMdate: (
    where: CupDataProcMdateWhereUniqueInput
  ) => CupDataProcMdatePromise;
  cupDataProcMdates: (
    args?: {
      where?: CupDataProcMdateWhereInput;
      orderBy?: CupDataProcMdateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CupDataProcMdate>;
  cupDataProcMdatesConnection: (
    args?: {
      where?: CupDataProcMdateWhereInput;
      orderBy?: CupDataProcMdateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CupDataProcMdateConnectionPromise;
  cupDataProcVolume: (
    where: CupDataProcVolumeWhereUniqueInput
  ) => CupDataProcVolumePromise;
  cupDataProcVolumes: (
    args?: {
      where?: CupDataProcVolumeWhereInput;
      orderBy?: CupDataProcVolumeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CupDataProcVolume>;
  cupDataProcVolumesConnection: (
    args?: {
      where?: CupDataProcVolumeWhereInput;
      orderBy?: CupDataProcVolumeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CupDataProcVolumeConnectionPromise;
  cupDataQaResponse: (
    where: CupDataQaResponseWhereUniqueInput
  ) => CupDataQaResponsePromise;
  cupDataQaResponses: (
    args?: {
      where?: CupDataQaResponseWhereInput;
      orderBy?: CupDataQaResponseOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CupDataQaResponse>;
  cupDataQaResponsesConnection: (
    args?: {
      where?: CupDataQaResponseWhereInput;
      orderBy?: CupDataQaResponseOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CupDataQaResponseConnectionPromise;
  cupDataQuestion: (
    where: CupDataQuestionWhereUniqueInput
  ) => CupDataQuestionPromise;
  cupDataQuestions: (
    args?: {
      where?: CupDataQuestionWhereInput;
      orderBy?: CupDataQuestionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CupDataQuestion>;
  cupDataQuestionsConnection: (
    args?: {
      where?: CupDataQuestionWhereInput;
      orderBy?: CupDataQuestionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CupDataQuestionConnectionPromise;
  cupDataRaw: (where: CupDataRawWhereUniqueInput) => CupDataRawPromise;
  cupDataRaws: (
    args?: {
      where?: CupDataRawWhereInput;
      orderBy?: CupDataRawOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CupDataRaw>;
  cupDataRawsConnection: (
    args?: {
      where?: CupDataRawWhereInput;
      orderBy?: CupDataRawOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CupDataRawConnectionPromise;
  cupDataRejection: (
    where: CupDataRejectionWhereUniqueInput
  ) => CupDataRejectionPromise;
  cupDataRejections: (
    args?: {
      where?: CupDataRejectionWhereInput;
      orderBy?: CupDataRejectionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CupDataRejection>;
  cupDataRejectionsConnection: (
    args?: {
      where?: CupDataRejectionWhereInput;
      orderBy?: CupDataRejectionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CupDataRejectionConnectionPromise;
  cupDataUserRemove: (
    where: CupDataUserRemoveWhereUniqueInput
  ) => CupDataUserRemovePromise;
  cupDataUserRemoves: (
    args?: {
      where?: CupDataUserRemoveWhereInput;
      orderBy?: CupDataUserRemoveOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CupDataUserRemove>;
  cupDataUserRemovesConnection: (
    args?: {
      where?: CupDataUserRemoveWhereInput;
      orderBy?: CupDataUserRemoveOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CupDataUserRemoveConnectionPromise;
  cupDataUserRemoveExplain: (
    where: CupDataUserRemoveExplainWhereUniqueInput
  ) => CupDataUserRemoveExplainPromise;
  cupDataUserRemoveExplains: (
    args?: {
      where?: CupDataUserRemoveExplainWhereInput;
      orderBy?: CupDataUserRemoveExplainOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CupDataUserRemoveExplain>;
  cupDataUserRemoveExplainsConnection: (
    args?: {
      where?: CupDataUserRemoveExplainWhereInput;
      orderBy?: CupDataUserRemoveExplainOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CupDataUserRemoveExplainConnectionPromise;
  cupDatum: (where: CupDatumWhereUniqueInput) => CupDatumPromise;
  cupData: (
    args?: {
      where?: CupDatumWhereInput;
      orderBy?: CupDatumOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CupDatum>;
  cupDataConnection: (
    args?: {
      where?: CupDatumWhereInput;
      orderBy?: CupDatumOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CupDatumConnectionPromise;
  ethnicity: (where: EthnicityWhereUniqueInput) => EthnicityPromise;
  ethnicities: (
    args?: {
      where?: EthnicityWhereInput;
      orderBy?: EthnicityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Ethnicity>;
  ethnicitiesConnection: (
    args?: {
      where?: EthnicityWhereInput;
      orderBy?: EthnicityOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => EthnicityConnectionPromise;
  firmware: (where: FirmwareWhereUniqueInput) => FirmwarePromise;
  firmwares: (
    args?: {
      where?: FirmwareWhereInput;
      orderBy?: FirmwareOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Firmware>;
  firmwaresConnection: (
    args?: {
      where?: FirmwareWhereInput;
      orderBy?: FirmwareOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FirmwareConnectionPromise;
  hardware: (where: HardwareWhereUniqueInput) => HardwarePromise;
  hardwares: (
    args?: {
      where?: HardwareWhereInput;
      orderBy?: HardwareOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Hardware>;
  hardwaresConnection: (
    args?: {
      where?: HardwareWhereInput;
      orderBy?: HardwareOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => HardwareConnectionPromise;
  marketAmazonCoupon: (
    where: MarketAmazonCouponWhereUniqueInput
  ) => MarketAmazonCouponPromise;
  marketAmazonCoupons: (
    args?: {
      where?: MarketAmazonCouponWhereInput;
      orderBy?: MarketAmazonCouponOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<MarketAmazonCoupon>;
  marketAmazonCouponsConnection: (
    args?: {
      where?: MarketAmazonCouponWhereInput;
      orderBy?: MarketAmazonCouponOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MarketAmazonCouponConnectionPromise;
  marketBuyHistory: (
    where: MarketBuyHistoryWhereUniqueInput
  ) => MarketBuyHistoryPromise;
  marketBuyHistories: (
    args?: {
      where?: MarketBuyHistoryWhereInput;
      orderBy?: MarketBuyHistoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<MarketBuyHistory>;
  marketBuyHistoriesConnection: (
    args?: {
      where?: MarketBuyHistoryWhereInput;
      orderBy?: MarketBuyHistoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MarketBuyHistoryConnectionPromise;
  marketList: (where: MarketListWhereUniqueInput) => MarketListPromise;
  marketLists: (
    args?: {
      where?: MarketListWhereInput;
      orderBy?: MarketListOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<MarketList>;
  marketListsConnection: (
    args?: {
      where?: MarketListWhereInput;
      orderBy?: MarketListOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MarketListConnectionPromise;
  marketListDetail: (
    where: MarketListDetailWhereUniqueInput
  ) => MarketListDetailPromise;
  marketListDetails: (
    args?: {
      where?: MarketListDetailWhereInput;
      orderBy?: MarketListDetailOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<MarketListDetail>;
  marketListDetailsConnection: (
    args?: {
      where?: MarketListDetailWhereInput;
      orderBy?: MarketListDetailOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MarketListDetailConnectionPromise;
  platformComp: (where: PlatformCompWhereUniqueInput) => PlatformCompPromise;
  platformComps: (
    args?: {
      where?: PlatformCompWhereInput;
      orderBy?: PlatformCompOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<PlatformComp>;
  platformCompsConnection: (
    args?: {
      where?: PlatformCompWhereInput;
      orderBy?: PlatformCompOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PlatformCompConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  userCoinHistory: (
    where: UserCoinHistoryWhereUniqueInput
  ) => UserCoinHistoryPromise;
  userCoinHistories: (
    args?: {
      where?: UserCoinHistoryWhereInput;
      orderBy?: UserCoinHistoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserCoinHistory>;
  userCoinHistoriesConnection: (
    args?: {
      where?: UserCoinHistoryWhereInput;
      orderBy?: UserCoinHistoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserCoinHistoryConnectionPromise;
  userCoinRewardsFee: (
    where: UserCoinRewardsFeeWhereUniqueInput
  ) => UserCoinRewardsFeePromise;
  userCoinRewardsFees: (
    args?: {
      where?: UserCoinRewardsFeeWhereInput;
      orderBy?: UserCoinRewardsFeeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserCoinRewardsFee>;
  userCoinRewardsFeesConnection: (
    args?: {
      where?: UserCoinRewardsFeeWhereInput;
      orderBy?: UserCoinRewardsFeeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserCoinRewardsFeeConnectionPromise;
  userCup: (where: UserCupWhereUniqueInput) => UserCupPromise;
  userCups: (
    args?: {
      where?: UserCupWhereInput;
      orderBy?: UserCupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserCup>;
  userCupsConnection: (
    args?: {
      where?: UserCupWhereInput;
      orderBy?: UserCupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserCupConnectionPromise;
  userInterviewDatum: (
    where: UserInterviewDatumWhereUniqueInput
  ) => UserInterviewDatumPromise;
  userInterviewData: (
    args?: {
      where?: UserInterviewDatumWhereInput;
      orderBy?: UserInterviewDatumOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserInterviewDatum>;
  userInterviewDataConnection: (
    args?: {
      where?: UserInterviewDatumWhereInput;
      orderBy?: UserInterviewDatumOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserInterviewDatumConnectionPromise;
  userInterviewQuestion: (
    where: UserInterviewQuestionWhereUniqueInput
  ) => UserInterviewQuestionPromise;
  userInterviewQuestions: (
    args?: {
      where?: UserInterviewQuestionWhereInput;
      orderBy?: UserInterviewQuestionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserInterviewQuestion>;
  userInterviewQuestionsConnection: (
    args?: {
      where?: UserInterviewQuestionWhereInput;
      orderBy?: UserInterviewQuestionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserInterviewQuestionConnectionPromise;
  userRecordCameraDataByTime: (
    where: UserRecordCameraDataByTimeWhereUniqueInput
  ) => UserRecordCameraDataByTimePromise;
  userRecordCameraDataByTimes: (
    args?: {
      where?: UserRecordCameraDataByTimeWhereInput;
      orderBy?: UserRecordCameraDataByTimeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserRecordCameraDataByTime>;
  userRecordCameraDataByTimesConnection: (
    args?: {
      where?: UserRecordCameraDataByTimeWhereInput;
      orderBy?: UserRecordCameraDataByTimeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserRecordCameraDataByTimeConnectionPromise;
  userRecordDataByDay: (
    where: UserRecordDataByDayWhereUniqueInput
  ) => UserRecordDataByDayPromise;
  userRecordDataByDays: (
    args?: {
      where?: UserRecordDataByDayWhereInput;
      orderBy?: UserRecordDataByDayOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserRecordDataByDay>;
  userRecordDataByDaysConnection: (
    args?: {
      where?: UserRecordDataByDayWhereInput;
      orderBy?: UserRecordDataByDayOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserRecordDataByDayConnectionPromise;
  userRecordDataByPeriod: (
    where: UserRecordDataByPeriodWhereUniqueInput
  ) => UserRecordDataByPeriodPromise;
  userRecordDataByPeriods: (
    args?: {
      where?: UserRecordDataByPeriodWhereInput;
      orderBy?: UserRecordDataByPeriodOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserRecordDataByPeriod>;
  userRecordDataByPeriodsConnection: (
    args?: {
      where?: UserRecordDataByPeriodWhereInput;
      orderBy?: UserRecordDataByPeriodOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserRecordDataByPeriodConnectionPromise;
  userRecordDataByTime: (
    where: UserRecordDataByTimeWhereUniqueInput
  ) => UserRecordDataByTimePromise;
  userRecordDataByTimes: (
    args?: {
      where?: UserRecordDataByTimeWhereInput;
      orderBy?: UserRecordDataByTimeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserRecordDataByTime>;
  userRecordDataByTimesConnection: (
    args?: {
      where?: UserRecordDataByTimeWhereInput;
      orderBy?: UserRecordDataByTimeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserRecordDataByTimeConnectionPromise;
  userWallet: (where: UserWalletWhereUniqueInput) => UserWalletPromise;
  userWallets: (
    args?: {
      where?: UserWalletWhereInput;
      orderBy?: UserWalletOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UserWallet>;
  userWalletsConnection: (
    args?: {
      where?: UserWalletWhereInput;
      orderBy?: UserWalletOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserWalletConnectionPromise;
  usersDataAnalysis: (
    where: UsersDataAnalysisWhereUniqueInput
  ) => UsersDataAnalysisPromise;
  usersDataAnalyses: (
    args?: {
      where?: UsersDataAnalysisWhereInput;
      orderBy?: UsersDataAnalysisOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<UsersDataAnalysis>;
  usersDataAnalysesConnection: (
    args?: {
      where?: UsersDataAnalysisWhereInput;
      orderBy?: UsersDataAnalysisOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UsersDataAnalysisConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAdditionalInfo: (
    data: AdditionalInfoCreateInput
  ) => AdditionalInfoPromise;
  updateAdditionalInfo: (
    args: {
      data: AdditionalInfoUpdateInput;
      where: AdditionalInfoWhereUniqueInput;
    }
  ) => AdditionalInfoPromise;
  updateManyAdditionalInfoes: (
    args: {
      data: AdditionalInfoUpdateManyMutationInput;
      where?: AdditionalInfoWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertAdditionalInfo: (
    args: {
      where: AdditionalInfoWhereUniqueInput;
      create: AdditionalInfoCreateInput;
      update: AdditionalInfoUpdateInput;
    }
  ) => AdditionalInfoPromise;
  deleteAdditionalInfo: (
    where: AdditionalInfoWhereUniqueInput
  ) => AdditionalInfoPromise;
  deleteManyAdditionalInfoes: (
    where?: AdditionalInfoWhereInput
  ) => BatchPayloadPromise;
  createAnswerType: (data: AnswerTypeCreateInput) => AnswerTypePromise;
  updateAnswerType: (
    args: { data: AnswerTypeUpdateInput; where: AnswerTypeWhereUniqueInput }
  ) => AnswerTypePromise;
  updateManyAnswerTypes: (
    args: {
      data: AnswerTypeUpdateManyMutationInput;
      where?: AnswerTypeWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertAnswerType: (
    args: {
      where: AnswerTypeWhereUniqueInput;
      create: AnswerTypeCreateInput;
      update: AnswerTypeUpdateInput;
    }
  ) => AnswerTypePromise;
  deleteAnswerType: (where: AnswerTypeWhereUniqueInput) => AnswerTypePromise;
  deleteManyAnswerTypes: (where?: AnswerTypeWhereInput) => BatchPayloadPromise;
  createAppServerSync: (data: AppServerSyncCreateInput) => AppServerSyncPromise;
  updateAppServerSync: (
    args: {
      data: AppServerSyncUpdateInput;
      where: AppServerSyncWhereUniqueInput;
    }
  ) => AppServerSyncPromise;
  updateManyAppServerSyncs: (
    args: {
      data: AppServerSyncUpdateManyMutationInput;
      where?: AppServerSyncWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertAppServerSync: (
    args: {
      where: AppServerSyncWhereUniqueInput;
      create: AppServerSyncCreateInput;
      update: AppServerSyncUpdateInput;
    }
  ) => AppServerSyncPromise;
  deleteAppServerSync: (
    where: AppServerSyncWhereUniqueInput
  ) => AppServerSyncPromise;
  deleteManyAppServerSyncs: (
    where?: AppServerSyncWhereInput
  ) => BatchPayloadPromise;
  createAuthToken: () => AuthTokenPromise;
  deleteAuthToken: (where: AuthTokenWhereUniqueInput) => AuthTokenPromise;
  deleteManyAuthTokens: (where?: AuthTokenWhereInput) => BatchPayloadPromise;
  createCalibration: (data: CalibrationCreateInput) => CalibrationPromise;
  updateCalibration: (
    args: { data: CalibrationUpdateInput; where: CalibrationWhereUniqueInput }
  ) => CalibrationPromise;
  updateManyCalibrations: (
    args: {
      data: CalibrationUpdateManyMutationInput;
      where?: CalibrationWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCalibration: (
    args: {
      where: CalibrationWhereUniqueInput;
      create: CalibrationCreateInput;
      update: CalibrationUpdateInput;
    }
  ) => CalibrationPromise;
  deleteCalibration: (where: CalibrationWhereUniqueInput) => CalibrationPromise;
  deleteManyCalibrations: (
    where?: CalibrationWhereInput
  ) => BatchPayloadPromise;
  createCompany: (data: CompanyCreateInput) => CompanyPromise;
  updateCompany: (
    args: { data: CompanyUpdateInput; where: CompanyWhereUniqueInput }
  ) => CompanyPromise;
  updateManyCompanies: (
    args: { data: CompanyUpdateManyMutationInput; where?: CompanyWhereInput }
  ) => BatchPayloadPromise;
  upsertCompany: (
    args: {
      where: CompanyWhereUniqueInput;
      create: CompanyCreateInput;
      update: CompanyUpdateInput;
    }
  ) => CompanyPromise;
  deleteCompany: (where: CompanyWhereUniqueInput) => CompanyPromise;
  deleteManyCompanies: (where?: CompanyWhereInput) => BatchPayloadPromise;
  createCountry: (data: CountryCreateInput) => CountryPromise;
  updateCountry: (
    args: { data: CountryUpdateInput; where: CountryWhereUniqueInput }
  ) => CountryPromise;
  updateManyCountries: (
    args: { data: CountryUpdateManyMutationInput; where?: CountryWhereInput }
  ) => BatchPayloadPromise;
  upsertCountry: (
    args: {
      where: CountryWhereUniqueInput;
      create: CountryCreateInput;
      update: CountryUpdateInput;
    }
  ) => CountryPromise;
  deleteCountry: (where: CountryWhereUniqueInput) => CountryPromise;
  deleteManyCountries: (where?: CountryWhereInput) => BatchPayloadPromise;
  createCup: (data: CupCreateInput) => CupPromise;
  updateCup: (
    args: { data: CupUpdateInput; where: CupWhereUniqueInput }
  ) => CupPromise;
  updateManyCups: (
    args: { data: CupUpdateManyMutationInput; where?: CupWhereInput }
  ) => BatchPayloadPromise;
  upsertCup: (
    args: {
      where: CupWhereUniqueInput;
      create: CupCreateInput;
      update: CupUpdateInput;
    }
  ) => CupPromise;
  deleteCup: (where: CupWhereUniqueInput) => CupPromise;
  deleteManyCups: (where?: CupWhereInput) => BatchPayloadPromise;
  createCupAppSync: (data: CupAppSyncCreateInput) => CupAppSyncPromise;
  updateCupAppSync: (
    args: { data: CupAppSyncUpdateInput; where: CupAppSyncWhereUniqueInput }
  ) => CupAppSyncPromise;
  updateManyCupAppSyncs: (
    args: {
      data: CupAppSyncUpdateManyMutationInput;
      where?: CupAppSyncWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCupAppSync: (
    args: {
      where: CupAppSyncWhereUniqueInput;
      create: CupAppSyncCreateInput;
      update: CupAppSyncUpdateInput;
    }
  ) => CupAppSyncPromise;
  deleteCupAppSync: (where: CupAppSyncWhereUniqueInput) => CupAppSyncPromise;
  deleteManyCupAppSyncs: (where?: CupAppSyncWhereInput) => BatchPayloadPromise;
  createCupDataAnswer: (data: CupDataAnswerCreateInput) => CupDataAnswerPromise;
  updateCupDataAnswer: (
    args: {
      data: CupDataAnswerUpdateInput;
      where: CupDataAnswerWhereUniqueInput;
    }
  ) => CupDataAnswerPromise;
  updateManyCupDataAnswers: (
    args: {
      data: CupDataAnswerUpdateManyMutationInput;
      where?: CupDataAnswerWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCupDataAnswer: (
    args: {
      where: CupDataAnswerWhereUniqueInput;
      create: CupDataAnswerCreateInput;
      update: CupDataAnswerUpdateInput;
    }
  ) => CupDataAnswerPromise;
  deleteCupDataAnswer: (
    where: CupDataAnswerWhereUniqueInput
  ) => CupDataAnswerPromise;
  deleteManyCupDataAnswers: (
    where?: CupDataAnswerWhereInput
  ) => BatchPayloadPromise;
  createCupDataColourCalc: (
    data: CupDataColourCalcCreateInput
  ) => CupDataColourCalcPromise;
  updateCupDataColourCalc: (
    args: {
      data: CupDataColourCalcUpdateInput;
      where: CupDataColourCalcWhereUniqueInput;
    }
  ) => CupDataColourCalcPromise;
  updateManyCupDataColourCalcs: (
    args: {
      data: CupDataColourCalcUpdateManyMutationInput;
      where?: CupDataColourCalcWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCupDataColourCalc: (
    args: {
      where: CupDataColourCalcWhereUniqueInput;
      create: CupDataColourCalcCreateInput;
      update: CupDataColourCalcUpdateInput;
    }
  ) => CupDataColourCalcPromise;
  deleteCupDataColourCalc: (
    where: CupDataColourCalcWhereUniqueInput
  ) => CupDataColourCalcPromise;
  deleteManyCupDataColourCalcs: (
    where?: CupDataColourCalcWhereInput
  ) => BatchPayloadPromise;
  createCupDataColourCalib: (
    data: CupDataColourCalibCreateInput
  ) => CupDataColourCalibPromise;
  updateCupDataColourCalib: (
    args: {
      data: CupDataColourCalibUpdateInput;
      where: CupDataColourCalibWhereUniqueInput;
    }
  ) => CupDataColourCalibPromise;
  updateManyCupDataColourCalibs: (
    args: {
      data: CupDataColourCalibUpdateManyMutationInput;
      where?: CupDataColourCalibWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCupDataColourCalib: (
    args: {
      where: CupDataColourCalibWhereUniqueInput;
      create: CupDataColourCalibCreateInput;
      update: CupDataColourCalibUpdateInput;
    }
  ) => CupDataColourCalibPromise;
  deleteCupDataColourCalib: (
    where: CupDataColourCalibWhereUniqueInput
  ) => CupDataColourCalibPromise;
  deleteManyCupDataColourCalibs: (
    where?: CupDataColourCalibWhereInput
  ) => BatchPayloadPromise;
  createCupDataManMdate: (
    data: CupDataManMdateCreateInput
  ) => CupDataManMdatePromise;
  updateCupDataManMdate: (
    args: {
      data: CupDataManMdateUpdateInput;
      where: CupDataManMdateWhereUniqueInput;
    }
  ) => CupDataManMdatePromise;
  updateManyCupDataManMdates: (
    args: {
      data: CupDataManMdateUpdateManyMutationInput;
      where?: CupDataManMdateWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCupDataManMdate: (
    args: {
      where: CupDataManMdateWhereUniqueInput;
      create: CupDataManMdateCreateInput;
      update: CupDataManMdateUpdateInput;
    }
  ) => CupDataManMdatePromise;
  deleteCupDataManMdate: (
    where: CupDataManMdateWhereUniqueInput
  ) => CupDataManMdatePromise;
  deleteManyCupDataManMdates: (
    where?: CupDataManMdateWhereInput
  ) => BatchPayloadPromise;
  createCupDataProcFlow: (
    data: CupDataProcFlowCreateInput
  ) => CupDataProcFlowPromise;
  updateCupDataProcFlow: (
    args: {
      data: CupDataProcFlowUpdateInput;
      where: CupDataProcFlowWhereUniqueInput;
    }
  ) => CupDataProcFlowPromise;
  updateManyCupDataProcFlows: (
    args: {
      data: CupDataProcFlowUpdateManyMutationInput;
      where?: CupDataProcFlowWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCupDataProcFlow: (
    args: {
      where: CupDataProcFlowWhereUniqueInput;
      create: CupDataProcFlowCreateInput;
      update: CupDataProcFlowUpdateInput;
    }
  ) => CupDataProcFlowPromise;
  deleteCupDataProcFlow: (
    where: CupDataProcFlowWhereUniqueInput
  ) => CupDataProcFlowPromise;
  deleteManyCupDataProcFlows: (
    where?: CupDataProcFlowWhereInput
  ) => BatchPayloadPromise;
  createCupDataProcMdate: (
    data: CupDataProcMdateCreateInput
  ) => CupDataProcMdatePromise;
  updateCupDataProcMdate: (
    args: {
      data: CupDataProcMdateUpdateInput;
      where: CupDataProcMdateWhereUniqueInput;
    }
  ) => CupDataProcMdatePromise;
  updateManyCupDataProcMdates: (
    args: {
      data: CupDataProcMdateUpdateManyMutationInput;
      where?: CupDataProcMdateWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCupDataProcMdate: (
    args: {
      where: CupDataProcMdateWhereUniqueInput;
      create: CupDataProcMdateCreateInput;
      update: CupDataProcMdateUpdateInput;
    }
  ) => CupDataProcMdatePromise;
  deleteCupDataProcMdate: (
    where: CupDataProcMdateWhereUniqueInput
  ) => CupDataProcMdatePromise;
  deleteManyCupDataProcMdates: (
    where?: CupDataProcMdateWhereInput
  ) => BatchPayloadPromise;
  createCupDataProcVolume: (
    data: CupDataProcVolumeCreateInput
  ) => CupDataProcVolumePromise;
  updateCupDataProcVolume: (
    args: {
      data: CupDataProcVolumeUpdateInput;
      where: CupDataProcVolumeWhereUniqueInput;
    }
  ) => CupDataProcVolumePromise;
  updateManyCupDataProcVolumes: (
    args: {
      data: CupDataProcVolumeUpdateManyMutationInput;
      where?: CupDataProcVolumeWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCupDataProcVolume: (
    args: {
      where: CupDataProcVolumeWhereUniqueInput;
      create: CupDataProcVolumeCreateInput;
      update: CupDataProcVolumeUpdateInput;
    }
  ) => CupDataProcVolumePromise;
  deleteCupDataProcVolume: (
    where: CupDataProcVolumeWhereUniqueInput
  ) => CupDataProcVolumePromise;
  deleteManyCupDataProcVolumes: (
    where?: CupDataProcVolumeWhereInput
  ) => BatchPayloadPromise;
  createCupDataQaResponse: (
    data: CupDataQaResponseCreateInput
  ) => CupDataQaResponsePromise;
  updateCupDataQaResponse: (
    args: {
      data: CupDataQaResponseUpdateInput;
      where: CupDataQaResponseWhereUniqueInput;
    }
  ) => CupDataQaResponsePromise;
  updateManyCupDataQaResponses: (
    args: {
      data: CupDataQaResponseUpdateManyMutationInput;
      where?: CupDataQaResponseWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCupDataQaResponse: (
    args: {
      where: CupDataQaResponseWhereUniqueInput;
      create: CupDataQaResponseCreateInput;
      update: CupDataQaResponseUpdateInput;
    }
  ) => CupDataQaResponsePromise;
  deleteCupDataQaResponse: (
    where: CupDataQaResponseWhereUniqueInput
  ) => CupDataQaResponsePromise;
  deleteManyCupDataQaResponses: (
    where?: CupDataQaResponseWhereInput
  ) => BatchPayloadPromise;
  createCupDataQuestion: (
    data: CupDataQuestionCreateInput
  ) => CupDataQuestionPromise;
  updateCupDataQuestion: (
    args: {
      data: CupDataQuestionUpdateInput;
      where: CupDataQuestionWhereUniqueInput;
    }
  ) => CupDataQuestionPromise;
  updateManyCupDataQuestions: (
    args: {
      data: CupDataQuestionUpdateManyMutationInput;
      where?: CupDataQuestionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCupDataQuestion: (
    args: {
      where: CupDataQuestionWhereUniqueInput;
      create: CupDataQuestionCreateInput;
      update: CupDataQuestionUpdateInput;
    }
  ) => CupDataQuestionPromise;
  deleteCupDataQuestion: (
    where: CupDataQuestionWhereUniqueInput
  ) => CupDataQuestionPromise;
  deleteManyCupDataQuestions: (
    where?: CupDataQuestionWhereInput
  ) => BatchPayloadPromise;
  createCupDataRaw: (data: CupDataRawCreateInput) => CupDataRawPromise;
  updateCupDataRaw: (
    args: { data: CupDataRawUpdateInput; where: CupDataRawWhereUniqueInput }
  ) => CupDataRawPromise;
  updateManyCupDataRaws: (
    args: {
      data: CupDataRawUpdateManyMutationInput;
      where?: CupDataRawWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCupDataRaw: (
    args: {
      where: CupDataRawWhereUniqueInput;
      create: CupDataRawCreateInput;
      update: CupDataRawUpdateInput;
    }
  ) => CupDataRawPromise;
  deleteCupDataRaw: (where: CupDataRawWhereUniqueInput) => CupDataRawPromise;
  deleteManyCupDataRaws: (where?: CupDataRawWhereInput) => BatchPayloadPromise;
  createCupDataRejection: (
    data: CupDataRejectionCreateInput
  ) => CupDataRejectionPromise;
  updateCupDataRejection: (
    args: {
      data: CupDataRejectionUpdateInput;
      where: CupDataRejectionWhereUniqueInput;
    }
  ) => CupDataRejectionPromise;
  updateManyCupDataRejections: (
    args: {
      data: CupDataRejectionUpdateManyMutationInput;
      where?: CupDataRejectionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCupDataRejection: (
    args: {
      where: CupDataRejectionWhereUniqueInput;
      create: CupDataRejectionCreateInput;
      update: CupDataRejectionUpdateInput;
    }
  ) => CupDataRejectionPromise;
  deleteCupDataRejection: (
    where: CupDataRejectionWhereUniqueInput
  ) => CupDataRejectionPromise;
  deleteManyCupDataRejections: (
    where?: CupDataRejectionWhereInput
  ) => BatchPayloadPromise;
  createCupDataUserRemove: (
    data: CupDataUserRemoveCreateInput
  ) => CupDataUserRemovePromise;
  updateCupDataUserRemove: (
    args: {
      data: CupDataUserRemoveUpdateInput;
      where: CupDataUserRemoveWhereUniqueInput;
    }
  ) => CupDataUserRemovePromise;
  updateManyCupDataUserRemoves: (
    args: {
      data: CupDataUserRemoveUpdateManyMutationInput;
      where?: CupDataUserRemoveWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCupDataUserRemove: (
    args: {
      where: CupDataUserRemoveWhereUniqueInput;
      create: CupDataUserRemoveCreateInput;
      update: CupDataUserRemoveUpdateInput;
    }
  ) => CupDataUserRemovePromise;
  deleteCupDataUserRemove: (
    where: CupDataUserRemoveWhereUniqueInput
  ) => CupDataUserRemovePromise;
  deleteManyCupDataUserRemoves: (
    where?: CupDataUserRemoveWhereInput
  ) => BatchPayloadPromise;
  createCupDataUserRemoveExplain: (
    data: CupDataUserRemoveExplainCreateInput
  ) => CupDataUserRemoveExplainPromise;
  updateCupDataUserRemoveExplain: (
    args: {
      data: CupDataUserRemoveExplainUpdateInput;
      where: CupDataUserRemoveExplainWhereUniqueInput;
    }
  ) => CupDataUserRemoveExplainPromise;
  updateManyCupDataUserRemoveExplains: (
    args: {
      data: CupDataUserRemoveExplainUpdateManyMutationInput;
      where?: CupDataUserRemoveExplainWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCupDataUserRemoveExplain: (
    args: {
      where: CupDataUserRemoveExplainWhereUniqueInput;
      create: CupDataUserRemoveExplainCreateInput;
      update: CupDataUserRemoveExplainUpdateInput;
    }
  ) => CupDataUserRemoveExplainPromise;
  deleteCupDataUserRemoveExplain: (
    where: CupDataUserRemoveExplainWhereUniqueInput
  ) => CupDataUserRemoveExplainPromise;
  deleteManyCupDataUserRemoveExplains: (
    where?: CupDataUserRemoveExplainWhereInput
  ) => BatchPayloadPromise;
  createCupDatum: (data: CupDatumCreateInput) => CupDatumPromise;
  updateCupDatum: (
    args: { data: CupDatumUpdateInput; where: CupDatumWhereUniqueInput }
  ) => CupDatumPromise;
  updateManyCupData: (
    args: { data: CupDatumUpdateManyMutationInput; where?: CupDatumWhereInput }
  ) => BatchPayloadPromise;
  upsertCupDatum: (
    args: {
      where: CupDatumWhereUniqueInput;
      create: CupDatumCreateInput;
      update: CupDatumUpdateInput;
    }
  ) => CupDatumPromise;
  deleteCupDatum: (where: CupDatumWhereUniqueInput) => CupDatumPromise;
  deleteManyCupData: (where?: CupDatumWhereInput) => BatchPayloadPromise;
  createEthnicity: (data: EthnicityCreateInput) => EthnicityPromise;
  updateEthnicity: (
    args: { data: EthnicityUpdateInput; where: EthnicityWhereUniqueInput }
  ) => EthnicityPromise;
  updateManyEthnicities: (
    args: {
      data: EthnicityUpdateManyMutationInput;
      where?: EthnicityWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertEthnicity: (
    args: {
      where: EthnicityWhereUniqueInput;
      create: EthnicityCreateInput;
      update: EthnicityUpdateInput;
    }
  ) => EthnicityPromise;
  deleteEthnicity: (where: EthnicityWhereUniqueInput) => EthnicityPromise;
  deleteManyEthnicities: (where?: EthnicityWhereInput) => BatchPayloadPromise;
  createFirmware: (data: FirmwareCreateInput) => FirmwarePromise;
  updateFirmware: (
    args: { data: FirmwareUpdateInput; where: FirmwareWhereUniqueInput }
  ) => FirmwarePromise;
  updateManyFirmwares: (
    args: { data: FirmwareUpdateManyMutationInput; where?: FirmwareWhereInput }
  ) => BatchPayloadPromise;
  upsertFirmware: (
    args: {
      where: FirmwareWhereUniqueInput;
      create: FirmwareCreateInput;
      update: FirmwareUpdateInput;
    }
  ) => FirmwarePromise;
  deleteFirmware: (where: FirmwareWhereUniqueInput) => FirmwarePromise;
  deleteManyFirmwares: (where?: FirmwareWhereInput) => BatchPayloadPromise;
  createHardware: (data: HardwareCreateInput) => HardwarePromise;
  updateHardware: (
    args: { data: HardwareUpdateInput; where: HardwareWhereUniqueInput }
  ) => HardwarePromise;
  updateManyHardwares: (
    args: { data: HardwareUpdateManyMutationInput; where?: HardwareWhereInput }
  ) => BatchPayloadPromise;
  upsertHardware: (
    args: {
      where: HardwareWhereUniqueInput;
      create: HardwareCreateInput;
      update: HardwareUpdateInput;
    }
  ) => HardwarePromise;
  deleteHardware: (where: HardwareWhereUniqueInput) => HardwarePromise;
  deleteManyHardwares: (where?: HardwareWhereInput) => BatchPayloadPromise;
  createMarketAmazonCoupon: (
    data: MarketAmazonCouponCreateInput
  ) => MarketAmazonCouponPromise;
  updateMarketAmazonCoupon: (
    args: {
      data: MarketAmazonCouponUpdateInput;
      where: MarketAmazonCouponWhereUniqueInput;
    }
  ) => MarketAmazonCouponPromise;
  updateManyMarketAmazonCoupons: (
    args: {
      data: MarketAmazonCouponUpdateManyMutationInput;
      where?: MarketAmazonCouponWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertMarketAmazonCoupon: (
    args: {
      where: MarketAmazonCouponWhereUniqueInput;
      create: MarketAmazonCouponCreateInput;
      update: MarketAmazonCouponUpdateInput;
    }
  ) => MarketAmazonCouponPromise;
  deleteMarketAmazonCoupon: (
    where: MarketAmazonCouponWhereUniqueInput
  ) => MarketAmazonCouponPromise;
  deleteManyMarketAmazonCoupons: (
    where?: MarketAmazonCouponWhereInput
  ) => BatchPayloadPromise;
  createMarketBuyHistory: (
    data: MarketBuyHistoryCreateInput
  ) => MarketBuyHistoryPromise;
  updateMarketBuyHistory: (
    args: {
      data: MarketBuyHistoryUpdateInput;
      where: MarketBuyHistoryWhereUniqueInput;
    }
  ) => MarketBuyHistoryPromise;
  updateManyMarketBuyHistories: (
    args: {
      data: MarketBuyHistoryUpdateManyMutationInput;
      where?: MarketBuyHistoryWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertMarketBuyHistory: (
    args: {
      where: MarketBuyHistoryWhereUniqueInput;
      create: MarketBuyHistoryCreateInput;
      update: MarketBuyHistoryUpdateInput;
    }
  ) => MarketBuyHistoryPromise;
  deleteMarketBuyHistory: (
    where: MarketBuyHistoryWhereUniqueInput
  ) => MarketBuyHistoryPromise;
  deleteManyMarketBuyHistories: (
    where?: MarketBuyHistoryWhereInput
  ) => BatchPayloadPromise;
  createMarketList: (data: MarketListCreateInput) => MarketListPromise;
  updateMarketList: (
    args: { data: MarketListUpdateInput; where: MarketListWhereUniqueInput }
  ) => MarketListPromise;
  updateManyMarketLists: (
    args: {
      data: MarketListUpdateManyMutationInput;
      where?: MarketListWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertMarketList: (
    args: {
      where: MarketListWhereUniqueInput;
      create: MarketListCreateInput;
      update: MarketListUpdateInput;
    }
  ) => MarketListPromise;
  deleteMarketList: (where: MarketListWhereUniqueInput) => MarketListPromise;
  deleteManyMarketLists: (where?: MarketListWhereInput) => BatchPayloadPromise;
  createMarketListDetail: (
    data: MarketListDetailCreateInput
  ) => MarketListDetailPromise;
  updateMarketListDetail: (
    args: {
      data: MarketListDetailUpdateInput;
      where: MarketListDetailWhereUniqueInput;
    }
  ) => MarketListDetailPromise;
  updateManyMarketListDetails: (
    args: {
      data: MarketListDetailUpdateManyMutationInput;
      where?: MarketListDetailWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertMarketListDetail: (
    args: {
      where: MarketListDetailWhereUniqueInput;
      create: MarketListDetailCreateInput;
      update: MarketListDetailUpdateInput;
    }
  ) => MarketListDetailPromise;
  deleteMarketListDetail: (
    where: MarketListDetailWhereUniqueInput
  ) => MarketListDetailPromise;
  deleteManyMarketListDetails: (
    where?: MarketListDetailWhereInput
  ) => BatchPayloadPromise;
  createPlatformComp: (data: PlatformCompCreateInput) => PlatformCompPromise;
  updatePlatformComp: (
    args: { data: PlatformCompUpdateInput; where: PlatformCompWhereUniqueInput }
  ) => PlatformCompPromise;
  updateManyPlatformComps: (
    args: {
      data: PlatformCompUpdateManyMutationInput;
      where?: PlatformCompWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertPlatformComp: (
    args: {
      where: PlatformCompWhereUniqueInput;
      create: PlatformCompCreateInput;
      update: PlatformCompUpdateInput;
    }
  ) => PlatformCompPromise;
  deletePlatformComp: (
    where: PlatformCompWhereUniqueInput
  ) => PlatformCompPromise;
  deleteManyPlatformComps: (
    where?: PlatformCompWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserCoinHistory: (
    data: UserCoinHistoryCreateInput
  ) => UserCoinHistoryPromise;
  updateUserCoinHistory: (
    args: {
      data: UserCoinHistoryUpdateInput;
      where: UserCoinHistoryWhereUniqueInput;
    }
  ) => UserCoinHistoryPromise;
  updateManyUserCoinHistories: (
    args: {
      data: UserCoinHistoryUpdateManyMutationInput;
      where?: UserCoinHistoryWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertUserCoinHistory: (
    args: {
      where: UserCoinHistoryWhereUniqueInput;
      create: UserCoinHistoryCreateInput;
      update: UserCoinHistoryUpdateInput;
    }
  ) => UserCoinHistoryPromise;
  deleteUserCoinHistory: (
    where: UserCoinHistoryWhereUniqueInput
  ) => UserCoinHistoryPromise;
  deleteManyUserCoinHistories: (
    where?: UserCoinHistoryWhereInput
  ) => BatchPayloadPromise;
  createUserCoinRewardsFee: (
    data: UserCoinRewardsFeeCreateInput
  ) => UserCoinRewardsFeePromise;
  updateUserCoinRewardsFee: (
    args: {
      data: UserCoinRewardsFeeUpdateInput;
      where: UserCoinRewardsFeeWhereUniqueInput;
    }
  ) => UserCoinRewardsFeePromise;
  updateManyUserCoinRewardsFees: (
    args: {
      data: UserCoinRewardsFeeUpdateManyMutationInput;
      where?: UserCoinRewardsFeeWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertUserCoinRewardsFee: (
    args: {
      where: UserCoinRewardsFeeWhereUniqueInput;
      create: UserCoinRewardsFeeCreateInput;
      update: UserCoinRewardsFeeUpdateInput;
    }
  ) => UserCoinRewardsFeePromise;
  deleteUserCoinRewardsFee: (
    where: UserCoinRewardsFeeWhereUniqueInput
  ) => UserCoinRewardsFeePromise;
  deleteManyUserCoinRewardsFees: (
    where?: UserCoinRewardsFeeWhereInput
  ) => BatchPayloadPromise;
  createUserCup: (data: UserCupCreateInput) => UserCupPromise;
  updateUserCup: (
    args: { data: UserCupUpdateInput; where: UserCupWhereUniqueInput }
  ) => UserCupPromise;
  upsertUserCup: (
    args: {
      where: UserCupWhereUniqueInput;
      create: UserCupCreateInput;
      update: UserCupUpdateInput;
    }
  ) => UserCupPromise;
  deleteUserCup: (where: UserCupWhereUniqueInput) => UserCupPromise;
  deleteManyUserCups: (where?: UserCupWhereInput) => BatchPayloadPromise;
  createUserInterviewDatum: (
    data: UserInterviewDatumCreateInput
  ) => UserInterviewDatumPromise;
  updateUserInterviewDatum: (
    args: {
      data: UserInterviewDatumUpdateInput;
      where: UserInterviewDatumWhereUniqueInput;
    }
  ) => UserInterviewDatumPromise;
  updateManyUserInterviewData: (
    args: {
      data: UserInterviewDatumUpdateManyMutationInput;
      where?: UserInterviewDatumWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertUserInterviewDatum: (
    args: {
      where: UserInterviewDatumWhereUniqueInput;
      create: UserInterviewDatumCreateInput;
      update: UserInterviewDatumUpdateInput;
    }
  ) => UserInterviewDatumPromise;
  deleteUserInterviewDatum: (
    where: UserInterviewDatumWhereUniqueInput
  ) => UserInterviewDatumPromise;
  deleteManyUserInterviewData: (
    where?: UserInterviewDatumWhereInput
  ) => BatchPayloadPromise;
  createUserInterviewQuestion: (
    data: UserInterviewQuestionCreateInput
  ) => UserInterviewQuestionPromise;
  updateUserInterviewQuestion: (
    args: {
      data: UserInterviewQuestionUpdateInput;
      where: UserInterviewQuestionWhereUniqueInput;
    }
  ) => UserInterviewQuestionPromise;
  updateManyUserInterviewQuestions: (
    args: {
      data: UserInterviewQuestionUpdateManyMutationInput;
      where?: UserInterviewQuestionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertUserInterviewQuestion: (
    args: {
      where: UserInterviewQuestionWhereUniqueInput;
      create: UserInterviewQuestionCreateInput;
      update: UserInterviewQuestionUpdateInput;
    }
  ) => UserInterviewQuestionPromise;
  deleteUserInterviewQuestion: (
    where: UserInterviewQuestionWhereUniqueInput
  ) => UserInterviewQuestionPromise;
  deleteManyUserInterviewQuestions: (
    where?: UserInterviewQuestionWhereInput
  ) => BatchPayloadPromise;
  createUserRecordCameraDataByTime: (
    data: UserRecordCameraDataByTimeCreateInput
  ) => UserRecordCameraDataByTimePromise;
  updateUserRecordCameraDataByTime: (
    args: {
      data: UserRecordCameraDataByTimeUpdateInput;
      where: UserRecordCameraDataByTimeWhereUniqueInput;
    }
  ) => UserRecordCameraDataByTimePromise;
  updateManyUserRecordCameraDataByTimes: (
    args: {
      data: UserRecordCameraDataByTimeUpdateManyMutationInput;
      where?: UserRecordCameraDataByTimeWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertUserRecordCameraDataByTime: (
    args: {
      where: UserRecordCameraDataByTimeWhereUniqueInput;
      create: UserRecordCameraDataByTimeCreateInput;
      update: UserRecordCameraDataByTimeUpdateInput;
    }
  ) => UserRecordCameraDataByTimePromise;
  deleteUserRecordCameraDataByTime: (
    where: UserRecordCameraDataByTimeWhereUniqueInput
  ) => UserRecordCameraDataByTimePromise;
  deleteManyUserRecordCameraDataByTimes: (
    where?: UserRecordCameraDataByTimeWhereInput
  ) => BatchPayloadPromise;
  createUserRecordDataByDay: (
    data: UserRecordDataByDayCreateInput
  ) => UserRecordDataByDayPromise;
  updateUserRecordDataByDay: (
    args: {
      data: UserRecordDataByDayUpdateInput;
      where: UserRecordDataByDayWhereUniqueInput;
    }
  ) => UserRecordDataByDayPromise;
  updateManyUserRecordDataByDays: (
    args: {
      data: UserRecordDataByDayUpdateManyMutationInput;
      where?: UserRecordDataByDayWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertUserRecordDataByDay: (
    args: {
      where: UserRecordDataByDayWhereUniqueInput;
      create: UserRecordDataByDayCreateInput;
      update: UserRecordDataByDayUpdateInput;
    }
  ) => UserRecordDataByDayPromise;
  deleteUserRecordDataByDay: (
    where: UserRecordDataByDayWhereUniqueInput
  ) => UserRecordDataByDayPromise;
  deleteManyUserRecordDataByDays: (
    where?: UserRecordDataByDayWhereInput
  ) => BatchPayloadPromise;
  createUserRecordDataByPeriod: (
    data: UserRecordDataByPeriodCreateInput
  ) => UserRecordDataByPeriodPromise;
  updateUserRecordDataByPeriod: (
    args: {
      data: UserRecordDataByPeriodUpdateInput;
      where: UserRecordDataByPeriodWhereUniqueInput;
    }
  ) => UserRecordDataByPeriodPromise;
  updateManyUserRecordDataByPeriods: (
    args: {
      data: UserRecordDataByPeriodUpdateManyMutationInput;
      where?: UserRecordDataByPeriodWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertUserRecordDataByPeriod: (
    args: {
      where: UserRecordDataByPeriodWhereUniqueInput;
      create: UserRecordDataByPeriodCreateInput;
      update: UserRecordDataByPeriodUpdateInput;
    }
  ) => UserRecordDataByPeriodPromise;
  deleteUserRecordDataByPeriod: (
    where: UserRecordDataByPeriodWhereUniqueInput
  ) => UserRecordDataByPeriodPromise;
  deleteManyUserRecordDataByPeriods: (
    where?: UserRecordDataByPeriodWhereInput
  ) => BatchPayloadPromise;
  createUserRecordDataByTime: (
    data: UserRecordDataByTimeCreateInput
  ) => UserRecordDataByTimePromise;
  updateUserRecordDataByTime: (
    args: {
      data: UserRecordDataByTimeUpdateInput;
      where: UserRecordDataByTimeWhereUniqueInput;
    }
  ) => UserRecordDataByTimePromise;
  updateManyUserRecordDataByTimes: (
    args: {
      data: UserRecordDataByTimeUpdateManyMutationInput;
      where?: UserRecordDataByTimeWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertUserRecordDataByTime: (
    args: {
      where: UserRecordDataByTimeWhereUniqueInput;
      create: UserRecordDataByTimeCreateInput;
      update: UserRecordDataByTimeUpdateInput;
    }
  ) => UserRecordDataByTimePromise;
  deleteUserRecordDataByTime: (
    where: UserRecordDataByTimeWhereUniqueInput
  ) => UserRecordDataByTimePromise;
  deleteManyUserRecordDataByTimes: (
    where?: UserRecordDataByTimeWhereInput
  ) => BatchPayloadPromise;
  createUserWallet: (data: UserWalletCreateInput) => UserWalletPromise;
  updateUserWallet: (
    args: { data: UserWalletUpdateInput; where: UserWalletWhereUniqueInput }
  ) => UserWalletPromise;
  updateManyUserWallets: (
    args: {
      data: UserWalletUpdateManyMutationInput;
      where?: UserWalletWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertUserWallet: (
    args: {
      where: UserWalletWhereUniqueInput;
      create: UserWalletCreateInput;
      update: UserWalletUpdateInput;
    }
  ) => UserWalletPromise;
  deleteUserWallet: (where: UserWalletWhereUniqueInput) => UserWalletPromise;
  deleteManyUserWallets: (where?: UserWalletWhereInput) => BatchPayloadPromise;
  createUsersDataAnalysis: (
    data: UsersDataAnalysisCreateInput
  ) => UsersDataAnalysisPromise;
  updateUsersDataAnalysis: (
    args: {
      data: UsersDataAnalysisUpdateInput;
      where: UsersDataAnalysisWhereUniqueInput;
    }
  ) => UsersDataAnalysisPromise;
  updateManyUsersDataAnalyses: (
    args: {
      data: UsersDataAnalysisUpdateManyMutationInput;
      where?: UsersDataAnalysisWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertUsersDataAnalysis: (
    args: {
      where: UsersDataAnalysisWhereUniqueInput;
      create: UsersDataAnalysisCreateInput;
      update: UsersDataAnalysisUpdateInput;
    }
  ) => UsersDataAnalysisPromise;
  deleteUsersDataAnalysis: (
    where: UsersDataAnalysisWhereUniqueInput
  ) => UsersDataAnalysisPromise;
  deleteManyUsersDataAnalyses: (
    where?: UsersDataAnalysisWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  additionalInfo: (
    where?: AdditionalInfoSubscriptionWhereInput
  ) => AdditionalInfoSubscriptionPayloadSubscription;
  answerType: (
    where?: AnswerTypeSubscriptionWhereInput
  ) => AnswerTypeSubscriptionPayloadSubscription;
  appServerSync: (
    where?: AppServerSyncSubscriptionWhereInput
  ) => AppServerSyncSubscriptionPayloadSubscription;
  authToken: (
    where?: AuthTokenSubscriptionWhereInput
  ) => AuthTokenSubscriptionPayloadSubscription;
  calibration: (
    where?: CalibrationSubscriptionWhereInput
  ) => CalibrationSubscriptionPayloadSubscription;
  company: (
    where?: CompanySubscriptionWhereInput
  ) => CompanySubscriptionPayloadSubscription;
  country: (
    where?: CountrySubscriptionWhereInput
  ) => CountrySubscriptionPayloadSubscription;
  cup: (
    where?: CupSubscriptionWhereInput
  ) => CupSubscriptionPayloadSubscription;
  cupAppSync: (
    where?: CupAppSyncSubscriptionWhereInput
  ) => CupAppSyncSubscriptionPayloadSubscription;
  cupDataAnswer: (
    where?: CupDataAnswerSubscriptionWhereInput
  ) => CupDataAnswerSubscriptionPayloadSubscription;
  cupDataColourCalc: (
    where?: CupDataColourCalcSubscriptionWhereInput
  ) => CupDataColourCalcSubscriptionPayloadSubscription;
  cupDataColourCalib: (
    where?: CupDataColourCalibSubscriptionWhereInput
  ) => CupDataColourCalibSubscriptionPayloadSubscription;
  cupDataManMdate: (
    where?: CupDataManMdateSubscriptionWhereInput
  ) => CupDataManMdateSubscriptionPayloadSubscription;
  cupDataProcFlow: (
    where?: CupDataProcFlowSubscriptionWhereInput
  ) => CupDataProcFlowSubscriptionPayloadSubscription;
  cupDataProcMdate: (
    where?: CupDataProcMdateSubscriptionWhereInput
  ) => CupDataProcMdateSubscriptionPayloadSubscription;
  cupDataProcVolume: (
    where?: CupDataProcVolumeSubscriptionWhereInput
  ) => CupDataProcVolumeSubscriptionPayloadSubscription;
  cupDataQaResponse: (
    where?: CupDataQaResponseSubscriptionWhereInput
  ) => CupDataQaResponseSubscriptionPayloadSubscription;
  cupDataQuestion: (
    where?: CupDataQuestionSubscriptionWhereInput
  ) => CupDataQuestionSubscriptionPayloadSubscription;
  cupDataRaw: (
    where?: CupDataRawSubscriptionWhereInput
  ) => CupDataRawSubscriptionPayloadSubscription;
  cupDataRejection: (
    where?: CupDataRejectionSubscriptionWhereInput
  ) => CupDataRejectionSubscriptionPayloadSubscription;
  cupDataUserRemove: (
    where?: CupDataUserRemoveSubscriptionWhereInput
  ) => CupDataUserRemoveSubscriptionPayloadSubscription;
  cupDataUserRemoveExplain: (
    where?: CupDataUserRemoveExplainSubscriptionWhereInput
  ) => CupDataUserRemoveExplainSubscriptionPayloadSubscription;
  cupDatum: (
    where?: CupDatumSubscriptionWhereInput
  ) => CupDatumSubscriptionPayloadSubscription;
  ethnicity: (
    where?: EthnicitySubscriptionWhereInput
  ) => EthnicitySubscriptionPayloadSubscription;
  firmware: (
    where?: FirmwareSubscriptionWhereInput
  ) => FirmwareSubscriptionPayloadSubscription;
  hardware: (
    where?: HardwareSubscriptionWhereInput
  ) => HardwareSubscriptionPayloadSubscription;
  marketAmazonCoupon: (
    where?: MarketAmazonCouponSubscriptionWhereInput
  ) => MarketAmazonCouponSubscriptionPayloadSubscription;
  marketBuyHistory: (
    where?: MarketBuyHistorySubscriptionWhereInput
  ) => MarketBuyHistorySubscriptionPayloadSubscription;
  marketList: (
    where?: MarketListSubscriptionWhereInput
  ) => MarketListSubscriptionPayloadSubscription;
  marketListDetail: (
    where?: MarketListDetailSubscriptionWhereInput
  ) => MarketListDetailSubscriptionPayloadSubscription;
  platformComp: (
    where?: PlatformCompSubscriptionWhereInput
  ) => PlatformCompSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userCoinHistory: (
    where?: UserCoinHistorySubscriptionWhereInput
  ) => UserCoinHistorySubscriptionPayloadSubscription;
  userCoinRewardsFee: (
    where?: UserCoinRewardsFeeSubscriptionWhereInput
  ) => UserCoinRewardsFeeSubscriptionPayloadSubscription;
  userCup: (
    where?: UserCupSubscriptionWhereInput
  ) => UserCupSubscriptionPayloadSubscription;
  userInterviewDatum: (
    where?: UserInterviewDatumSubscriptionWhereInput
  ) => UserInterviewDatumSubscriptionPayloadSubscription;
  userInterviewQuestion: (
    where?: UserInterviewQuestionSubscriptionWhereInput
  ) => UserInterviewQuestionSubscriptionPayloadSubscription;
  userRecordCameraDataByTime: (
    where?: UserRecordCameraDataByTimeSubscriptionWhereInput
  ) => UserRecordCameraDataByTimeSubscriptionPayloadSubscription;
  userRecordDataByDay: (
    where?: UserRecordDataByDaySubscriptionWhereInput
  ) => UserRecordDataByDaySubscriptionPayloadSubscription;
  userRecordDataByPeriod: (
    where?: UserRecordDataByPeriodSubscriptionWhereInput
  ) => UserRecordDataByPeriodSubscriptionPayloadSubscription;
  userRecordDataByTime: (
    where?: UserRecordDataByTimeSubscriptionWhereInput
  ) => UserRecordDataByTimeSubscriptionPayloadSubscription;
  userWallet: (
    where?: UserWalletSubscriptionWhereInput
  ) => UserWalletSubscriptionPayloadSubscription;
  usersDataAnalysis: (
    where?: UsersDataAnalysisSubscriptionWhereInput
  ) => UsersDataAnalysisSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type UserRecordDataByDayOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "crampsLevel_ASC"
  | "crampsLevel_DESC"
  | "recordDate_ASC"
  | "recordDate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserInterviewQuestionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "question_ASC"
  | "question_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserRecordDataByPeriodOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "coinHistoryRowId_ASC"
  | "coinHistoryRowId_DESC"
  | "isTakePill_ASC"
  | "isTakePill_DESC"
  | "mensFinish_ASC"
  | "mensFinish_DESC"
  | "mensStart_ASC"
  | "mensStart_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UsersDataAnalysisOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "password_ASC"
  | "password_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserRecordCameraDataByTimeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "confirmYn_ASC"
  | "confirmYn_DESC"
  | "deleteYn_ASC"
  | "deleteYn_DESC"
  | "height_ASC"
  | "height_DESC"
  | "imagePath_ASC"
  | "imagePath_DESC"
  | "locationX_ASC"
  | "locationX_DESC"
  | "locationY_ASC"
  | "locationY_DESC"
  | "size_ASC"
  | "size_DESC"
  | "width_ASC"
  | "width_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PlatformCompOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "phoneId_ASC"
  | "phoneId_DESC"
  | "platformId_ASC"
  | "platformId_DESC"
  | "problemHistory_ASC"
  | "problemHistory_DESC"
  | "softwareId_ASC"
  | "softwareId_DESC"
  | "successHistory_ASC"
  | "successHistory_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MarketBuyHistoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "cancelYn_ASC"
  | "cancelYn_DESC"
  | "category_ASC"
  | "category_DESC"
  | "createTime_ASC"
  | "createTime_DESC"
  | "orderNumber_ASC"
  | "orderNumber_DESC"
  | "productId_ASC"
  | "productId_DESC"
  | "status_ASC"
  | "status_DESC"
  | "updateTime_ASC"
  | "updateTime_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MarketListDetailOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "contents_ASC"
  | "contents_DESC"
  | "detailImage_ASC"
  | "detailImage_DESC"
  | "mainImage_ASC"
  | "mainImage_DESC"
  | "price_ASC"
  | "price_DESC"
  | "savingPrice_ASC"
  | "savingPrice_DESC"
  | "subTitle_ASC"
  | "subTitle_DESC"
  | "title_ASC"
  | "title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserCoinHistoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "category_ASC"
  | "category_DESC"
  | "coin_ASC"
  | "coin_DESC"
  | "contents_ASC"
  | "contents_DESC"
  | "date_ASC"
  | "date_DESC"
  | "txhash_ASC"
  | "txhash_DESC"
  | "walletId_ASC"
  | "walletId_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MarketAmazonCouponOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "availability_ASC"
  | "availability_DESC"
  | "couponNumber_ASC"
  | "couponNumber_DESC"
  | "createTime_ASC"
  | "createTime_DESC"
  | "endTime_ASC"
  | "endTime_DESC"
  | "marketListId_ASC"
  | "marketListId_DESC"
  | "price_ASC"
  | "price_DESC"
  | "startTime_ASC"
  | "startTime_DESC"
  | "title_ASC"
  | "title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "anonUserId_ASC"
  | "anonUserId_DESC"
  | "countryId_ASC"
  | "countryId_DESC"
  | "deleted_ASC"
  | "deleted_DESC"
  | "deviceModel_ASC"
  | "deviceModel_DESC"
  | "dob_ASC"
  | "dob_DESC"
  | "email_ASC"
  | "email_DESC"
  | "emailVerify_ASC"
  | "emailVerify_DESC"
  | "encryptSaltString_ASC"
  | "encryptSaltString_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "givenBirth_ASC"
  | "givenBirth_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "macId_ASC"
  | "macId_DESC"
  | "password_ASC"
  | "password_DESC"
  | "personalHealthRecord_ASC"
  | "personalHealthRecord_DESC"
  | "referralCode_ASC"
  | "referralCode_DESC"
  | "tutorial_ASC"
  | "tutorial_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type FirmwareOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "fwVersion_ASC"
  | "fwVersion_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserCupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CupDataUserRemoveExplainOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "explain_ASC"
  | "explain_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CupDataRawOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "pageData_ASC"
  | "pageData_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CupDataQuestionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "questionText_ASC"
  | "questionText_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CupDataColourCalibOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "blue_ASC"
  | "blue_DESC"
  | "c_ASC"
  | "c_DESC"
  | "green_ASC"
  | "green_DESC"
  | "red_ASC"
  | "red_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CompanyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "companyName_ASC"
  | "companyName_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CupDataProcVolumeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "confidenceL_ASC"
  | "confidenceL_DESC"
  | "confidenceR_ASC"
  | "confidenceR_DESC"
  | "inVitro_ASC"
  | "inVitro_DESC"
  | "volume_ASC"
  | "volume_DESC"
  | "volumeAdj_ASC"
  | "volumeAdj_DESC"
  | "volumeL_ASC"
  | "volumeL_DESC"
  | "volumeR_ASC"
  | "volumeR_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AuthTokenOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CupDataColourCalcOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "blue_ASC"
  | "blue_DESC"
  | "green_ASC"
  | "green_DESC"
  | "red_ASC"
  | "red_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserWalletOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "address_ASC"
  | "address_DESC"
  | "createTime_ASC"
  | "createTime_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CupDatumOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "battery_ASC"
  | "battery_DESC"
  | "calibFlag_ASC"
  | "calibFlag_DESC"
  | "ch1_ASC"
  | "ch1_DESC"
  | "ch10_ASC"
  | "ch10_DESC"
  | "ch11_ASC"
  | "ch11_DESC"
  | "ch12_ASC"
  | "ch12_DESC"
  | "ch13_ASC"
  | "ch13_DESC"
  | "ch14_ASC"
  | "ch14_DESC"
  | "ch2_ASC"
  | "ch2_DESC"
  | "ch3_ASC"
  | "ch3_DESC"
  | "ch4_ASC"
  | "ch4_DESC"
  | "ch5_ASC"
  | "ch5_DESC"
  | "ch6_ASC"
  | "ch6_DESC"
  | "ch7_ASC"
  | "ch7_DESC"
  | "ch8_ASC"
  | "ch8_DESC"
  | "ch9_ASC"
  | "ch9_DESC"
  | "colourB_ASC"
  | "colourB_DESC"
  | "colourC_ASC"
  | "colourC_DESC"
  | "colourG_ASC"
  | "colourG_DESC"
  | "colourR_ASC"
  | "colourR_DESC"
  | "date_ASC"
  | "date_DESC"
  | "day_ASC"
  | "day_DESC"
  | "hour_ASC"
  | "hour_DESC"
  | "line_ASC"
  | "line_DESC"
  | "minute_ASC"
  | "minute_DESC"
  | "month_ASC"
  | "month_DESC"
  | "page_ASC"
  | "page_DESC"
  | "rawTotalVolume_ASC"
  | "rawTotalVolume_DESC"
  | "rawVolumeL_ASC"
  | "rawVolumeL_DESC"
  | "rawVolumeR_ASC"
  | "rawVolumeR_DESC"
  | "temperature_ASC"
  | "temperature_DESC"
  | "x_ASC"
  | "x_DESC"
  | "y_ASC"
  | "y_DESC"
  | "year_ASC"
  | "year_DESC"
  | "z_ASC"
  | "z_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CupAppSyncOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "appSynchTime_ASC"
  | "appSynchTime_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MarketListOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "count_ASC"
  | "count_DESC"
  | "endTime_ASC"
  | "endTime_DESC"
  | "image_ASC"
  | "image_DESC"
  | "price_ASC"
  | "price_DESC"
  | "startTime_ASC"
  | "startTime_DESC"
  | "title_ASC"
  | "title_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "anonSerialNumber_ASC"
  | "anonSerialNumber_DESC"
  | "encryptionKey_ASC"
  | "encryptionKey_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type HardwareOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "hwVersion_ASC"
  | "hwVersion_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CupDataUserRemoveOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "changeTime_ASC"
  | "changeTime_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CupDataRejectionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "rejectionDescription_ASC"
  | "rejectionDescription_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CupDataAnswerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "answerText_ASC"
  | "answerText_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CalibrationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "calibVersion_ASC"
  | "calibVersion_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CupDataQaResponseOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "qaDate_ASC"
  | "qaDate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserRecordDataByTimeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "cameraDataId_ASC"
  | "cameraDataId_DESC"
  | "changeTime_ASC"
  | "changeTime_DESC"
  | "colorB_ASC"
  | "colorB_DESC"
  | "colorG_ASC"
  | "colorG_DESC"
  | "colorR_ASC"
  | "colorR_DESC"
  | "leakage_ASC"
  | "leakage_DESC"
  | "startTime_ASC"
  | "startTime_DESC"
  | "volume_ASC"
  | "volume_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CupDataProcMdateOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dataRejected_ASC"
  | "dataRejected_DESC"
  | "dataVerified_ASC"
  | "dataVerified_DESC"
  | "menFinish_ASC"
  | "menFinish_DESC"
  | "menStart_ASC"
  | "menStart_DESC"
  | "rewardAmount_ASC"
  | "rewardAmount_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AdditionalInfoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "abnormalUltrasoundFinding_ASC"
  | "abnormalUltrasoundFinding_DESC"
  | "conditionSurgicalHistory_ASC"
  | "conditionSurgicalHistory_DESC"
  | "cycle_ASC"
  | "cycle_DESC"
  | "cycleIrregular_ASC"
  | "cycleIrregular_DESC"
  | "ethnicity_ASC"
  | "ethnicity_DESC"
  | "height_ASC"
  | "height_DESC"
  | "inUseMenstrualCup_ASC"
  | "inUseMenstrualCup_DESC"
  | "inUseMenstrualCupSize_ASC"
  | "inUseMenstrualCupSize_DESC"
  | "iudImplanonExpireDate_ASC"
  | "iudImplanonExpireDate_DESC"
  | "iudImplanonInsertDate_ASC"
  | "iudImplanonInsertDate_DESC"
  | "lastPeriodDate_ASC"
  | "lastPeriodDate_DESC"
  | "medicineList_ASC"
  | "medicineList_DESC"
  | "period_ASC"
  | "period_DESC"
  | "periodIrregular_ASC"
  | "periodIrregular_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "weight_ASC"
  | "weight_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserInterviewDatumOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "answerRange_ASC"
  | "answerRange_DESC"
  | "answerText_ASC"
  | "answerText_DESC"
  | "answerYn_ASC"
  | "answerYn_DESC"
  | "date_ASC"
  | "date_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AppServerSyncOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "serverSynchTime_ASC"
  | "serverSynchTime_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CupDataProcFlowOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "date_ASC"
  | "date_DESC"
  | "hourlyFlow_ASC"
  | "hourlyFlow_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CupDataManMdateOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "menFinish_ASC"
  | "menFinish_DESC"
  | "menStart_ASC"
  | "menStart_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type EthnicityOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ethnicity_ASC"
  | "ethnicity_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserCoinRewardsFeeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "contents_ASC"
  | "contents_DESC"
  | "createTime_ASC"
  | "createTime_DESC"
  | "updateTime_ASC"
  | "updateTime_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AnswerTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "answerType_ASC"
  | "answerType_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CountryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "countryName_ASC"
  | "countryName_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface UserInterviewDatumUpdateManyWithoutQuestionIdInput {
  create?:
    | UserInterviewDatumCreateWithoutQuestionIdInput[]
    | UserInterviewDatumCreateWithoutQuestionIdInput;
  delete?:
    | UserInterviewDatumWhereUniqueInput[]
    | UserInterviewDatumWhereUniqueInput;
  connect?:
    | UserInterviewDatumWhereUniqueInput[]
    | UserInterviewDatumWhereUniqueInput;
  set?:
    | UserInterviewDatumWhereUniqueInput[]
    | UserInterviewDatumWhereUniqueInput;
  disconnect?:
    | UserInterviewDatumWhereUniqueInput[]
    | UserInterviewDatumWhereUniqueInput;
  update?:
    | UserInterviewDatumUpdateWithWhereUniqueWithoutQuestionIdInput[]
    | UserInterviewDatumUpdateWithWhereUniqueWithoutQuestionIdInput;
  upsert?:
    | UserInterviewDatumUpsertWithWhereUniqueWithoutQuestionIdInput[]
    | UserInterviewDatumUpsertWithWhereUniqueWithoutQuestionIdInput;
  deleteMany?:
    | UserInterviewDatumScalarWhereInput[]
    | UserInterviewDatumScalarWhereInput;
  updateMany?:
    | UserInterviewDatumUpdateManyWithWhereNestedInput[]
    | UserInterviewDatumUpdateManyWithWhereNestedInput;
}

export type AdditionalInfoWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CupDataUserRemoveUpdateWithWhereUniqueWithoutUserIdInput {
  where: CupDataUserRemoveWhereUniqueInput;
  data: CupDataUserRemoveUpdateWithoutUserIdDataInput;
}

export interface UserRecordDataByDayWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  crampsLevel?: Int;
  crampsLevel_not?: Int;
  crampsLevel_in?: Int[] | Int;
  crampsLevel_not_in?: Int[] | Int;
  crampsLevel_lt?: Int;
  crampsLevel_lte?: Int;
  crampsLevel_gt?: Int;
  crampsLevel_gte?: Int;
  recordDate?: DateTimeInput;
  recordDate_not?: DateTimeInput;
  recordDate_in?: DateTimeInput[] | DateTimeInput;
  recordDate_not_in?: DateTimeInput[] | DateTimeInput;
  recordDate_lt?: DateTimeInput;
  recordDate_lte?: DateTimeInput;
  recordDate_gt?: DateTimeInput;
  recordDate_gte?: DateTimeInput;
  recordPeriodRowId?: UserRecordDataByPeriodWhereInput;
  userRecordDataByTime_every?: UserRecordDataByTimeWhereInput;
  userRecordDataByTime_some?: UserRecordDataByTimeWhereInput;
  userRecordDataByTime_none?: UserRecordDataByTimeWhereInput;
  AND?: UserRecordDataByDayWhereInput[] | UserRecordDataByDayWhereInput;
  OR?: UserRecordDataByDayWhereInput[] | UserRecordDataByDayWhereInput;
  NOT?: UserRecordDataByDayWhereInput[] | UserRecordDataByDayWhereInput;
}

export interface UserUpdateWithoutCupDataProcFlowDataInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncUpdateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcMdates?: CupDataProcMdateUpdateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseUpdateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob?: DateTimeInput;
  email?: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityUpdateOneWithoutUsersInput;
  firstName?: String;
  givenBirth?: Boolean;
  lastName?: String;
  macId?: String;
  password?: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryUpdateManyWithoutUserIdInput;
  userCups?: UserCupUpdateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumUpdateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodUpdateManyWithoutUserIdInput;
  userWallet?: UserWalletUpdateManyWithoutUserIdInput;
}

export interface UserWalletWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  createTime?: DateTimeInput;
  createTime_not?: DateTimeInput;
  createTime_in?: DateTimeInput[] | DateTimeInput;
  createTime_not_in?: DateTimeInput[] | DateTimeInput;
  createTime_lt?: DateTimeInput;
  createTime_lte?: DateTimeInput;
  createTime_gt?: DateTimeInput;
  createTime_gte?: DateTimeInput;
  status?: Boolean;
  status_not?: Boolean;
  userId?: UserWhereInput;
  AND?: UserWalletWhereInput[] | UserWalletWhereInput;
  OR?: UserWalletWhereInput[] | UserWalletWhereInput;
  NOT?: UserWalletWhereInput[] | UserWalletWhereInput;
}

export interface UserInterviewQuestionUpdateWithWhereUniqueWithoutAnswerTypeIdInput {
  where: UserInterviewQuestionWhereUniqueInput;
  data: UserInterviewQuestionUpdateWithoutAnswerTypeIdDataInput;
}

export interface CupDataUserRemoveUpdateManyWithoutExplainIdInput {
  create?:
    | CupDataUserRemoveCreateWithoutExplainIdInput[]
    | CupDataUserRemoveCreateWithoutExplainIdInput;
  delete?:
    | CupDataUserRemoveWhereUniqueInput[]
    | CupDataUserRemoveWhereUniqueInput;
  connect?:
    | CupDataUserRemoveWhereUniqueInput[]
    | CupDataUserRemoveWhereUniqueInput;
  set?: CupDataUserRemoveWhereUniqueInput[] | CupDataUserRemoveWhereUniqueInput;
  disconnect?:
    | CupDataUserRemoveWhereUniqueInput[]
    | CupDataUserRemoveWhereUniqueInput;
  update?:
    | CupDataUserRemoveUpdateWithWhereUniqueWithoutExplainIdInput[]
    | CupDataUserRemoveUpdateWithWhereUniqueWithoutExplainIdInput;
  upsert?:
    | CupDataUserRemoveUpsertWithWhereUniqueWithoutExplainIdInput[]
    | CupDataUserRemoveUpsertWithWhereUniqueWithoutExplainIdInput;
  deleteMany?:
    | CupDataUserRemoveScalarWhereInput[]
    | CupDataUserRemoveScalarWhereInput;
  updateMany?:
    | CupDataUserRemoveUpdateManyWithWhereNestedInput[]
    | CupDataUserRemoveUpdateManyWithWhereNestedInput;
}

export interface UserInterviewQuestionUpdateWithoutAnswerTypeIdDataInput {
  question?: String;
  userInterviewData?: UserInterviewDatumUpdateManyWithoutQuestionIdInput;
}

export interface UserRecordCameraDataByTimeUpdateWithWhereUniqueWithoutCoinHistoryRowIdInput {
  where: UserRecordCameraDataByTimeWhereUniqueInput;
  data: UserRecordCameraDataByTimeUpdateWithoutCoinHistoryRowIdDataInput;
}

export interface CupDataUserRemoveUpdateWithWhereUniqueWithoutExplainIdInput {
  where: CupDataUserRemoveWhereUniqueInput;
  data: CupDataUserRemoveUpdateWithoutExplainIdDataInput;
}

export interface UserWalletSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWalletWhereInput;
  AND?: UserWalletSubscriptionWhereInput[] | UserWalletSubscriptionWhereInput;
  OR?: UserWalletSubscriptionWhereInput[] | UserWalletSubscriptionWhereInput;
  NOT?: UserWalletSubscriptionWhereInput[] | UserWalletSubscriptionWhereInput;
}

export interface UserInterviewDatumUpdateWithWhereUniqueWithoutQuestionIdInput {
  where: UserInterviewDatumWhereUniqueInput;
  data: UserInterviewDatumUpdateWithoutQuestionIdDataInput;
}

export interface UserRecordDataByTimeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserRecordDataByTimeWhereInput;
  AND?:
    | UserRecordDataByTimeSubscriptionWhereInput[]
    | UserRecordDataByTimeSubscriptionWhereInput;
  OR?:
    | UserRecordDataByTimeSubscriptionWhereInput[]
    | UserRecordDataByTimeSubscriptionWhereInput;
  NOT?:
    | UserRecordDataByTimeSubscriptionWhereInput[]
    | UserRecordDataByTimeSubscriptionWhereInput;
}

export interface UserInterviewDatumUpdateWithoutQuestionIdDataInput {
  answerRange?: Int;
  answerText?: String;
  answerYn?: Boolean;
  date?: DateTimeInput;
  userId?: UserUpdateOneRequiredWithoutUserInterviewDataInput;
}

export interface UserRecordDataByPeriodSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserRecordDataByPeriodWhereInput;
  AND?:
    | UserRecordDataByPeriodSubscriptionWhereInput[]
    | UserRecordDataByPeriodSubscriptionWhereInput;
  OR?:
    | UserRecordDataByPeriodSubscriptionWhereInput[]
    | UserRecordDataByPeriodSubscriptionWhereInput;
  NOT?:
    | UserRecordDataByPeriodSubscriptionWhereInput[]
    | UserRecordDataByPeriodSubscriptionWhereInput;
}

export interface UserUpdateOneRequiredWithoutUserInterviewDataInput {
  create?: UserCreateWithoutUserInterviewDataInput;
  update?: UserUpdateWithoutUserInterviewDataDataInput;
  upsert?: UserUpsertWithoutUserInterviewDataInput;
  connect?: UserWhereUniqueInput;
}

export interface EthnicityWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  ethnicity?: String;
  ethnicity_not?: String;
  ethnicity_in?: String[] | String;
  ethnicity_not_in?: String[] | String;
  ethnicity_lt?: String;
  ethnicity_lte?: String;
  ethnicity_gt?: String;
  ethnicity_gte?: String;
  ethnicity_contains?: String;
  ethnicity_not_contains?: String;
  ethnicity_starts_with?: String;
  ethnicity_not_starts_with?: String;
  ethnicity_ends_with?: String;
  ethnicity_not_ends_with?: String;
  users_every?: UserWhereInput;
  users_some?: UserWhereInput;
  users_none?: UserWhereInput;
  AND?: EthnicityWhereInput[] | EthnicityWhereInput;
  OR?: EthnicityWhereInput[] | EthnicityWhereInput;
  NOT?: EthnicityWhereInput[] | EthnicityWhereInput;
}

export interface UserUpdateWithoutUserInterviewDataDataInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncUpdateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowUpdateManyWithoutUserIdInput;
  cupDataProcMdates?: CupDataProcMdateUpdateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseUpdateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob?: DateTimeInput;
  email?: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityUpdateOneWithoutUsersInput;
  firstName?: String;
  givenBirth?: Boolean;
  lastName?: String;
  macId?: String;
  password?: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryUpdateManyWithoutUserIdInput;
  userCups?: UserCupUpdateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodUpdateManyWithoutUserIdInput;
  userWallet?: UserWalletUpdateManyWithoutUserIdInput;
}

export interface UserInterviewQuestionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserInterviewQuestionWhereInput;
  AND?:
    | UserInterviewQuestionSubscriptionWhereInput[]
    | UserInterviewQuestionSubscriptionWhereInput;
  OR?:
    | UserInterviewQuestionSubscriptionWhereInput[]
    | UserInterviewQuestionSubscriptionWhereInput;
  NOT?:
    | UserInterviewQuestionSubscriptionWhereInput[]
    | UserInterviewQuestionSubscriptionWhereInput;
}

export interface AppServerSyncUpdateManyWithoutUserIdInput {
  create?:
    | AppServerSyncCreateWithoutUserIdInput[]
    | AppServerSyncCreateWithoutUserIdInput;
  delete?: AppServerSyncWhereUniqueInput[] | AppServerSyncWhereUniqueInput;
  connect?: AppServerSyncWhereUniqueInput[] | AppServerSyncWhereUniqueInput;
  set?: AppServerSyncWhereUniqueInput[] | AppServerSyncWhereUniqueInput;
  disconnect?: AppServerSyncWhereUniqueInput[] | AppServerSyncWhereUniqueInput;
  update?:
    | AppServerSyncUpdateWithWhereUniqueWithoutUserIdInput[]
    | AppServerSyncUpdateWithWhereUniqueWithoutUserIdInput;
  upsert?:
    | AppServerSyncUpsertWithWhereUniqueWithoutUserIdInput[]
    | AppServerSyncUpsertWithWhereUniqueWithoutUserIdInput;
  deleteMany?: AppServerSyncScalarWhereInput[] | AppServerSyncScalarWhereInput;
  updateMany?:
    | AppServerSyncUpdateManyWithWhereNestedInput[]
    | AppServerSyncUpdateManyWithWhereNestedInput;
}

export interface HardwareWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  cup_every?: CupWhereInput;
  cup_some?: CupWhereInput;
  cup_none?: CupWhereInput;
  hwVersion?: String;
  hwVersion_not?: String;
  hwVersion_in?: String[] | String;
  hwVersion_not_in?: String[] | String;
  hwVersion_lt?: String;
  hwVersion_lte?: String;
  hwVersion_gt?: String;
  hwVersion_gte?: String;
  hwVersion_contains?: String;
  hwVersion_not_contains?: String;
  hwVersion_starts_with?: String;
  hwVersion_not_starts_with?: String;
  hwVersion_ends_with?: String;
  hwVersion_not_ends_with?: String;
  AND?: HardwareWhereInput[] | HardwareWhereInput;
  OR?: HardwareWhereInput[] | HardwareWhereInput;
  NOT?: HardwareWhereInput[] | HardwareWhereInput;
}

export interface AppServerSyncUpdateWithWhereUniqueWithoutUserIdInput {
  where: AppServerSyncWhereUniqueInput;
  data: AppServerSyncUpdateWithoutUserIdDataInput;
}

export interface UserCupSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserCupWhereInput;
  AND?: UserCupSubscriptionWhereInput[] | UserCupSubscriptionWhereInput;
  OR?: UserCupSubscriptionWhereInput[] | UserCupSubscriptionWhereInput;
  NOT?: UserCupSubscriptionWhereInput[] | UserCupSubscriptionWhereInput;
}

export interface AppServerSyncUpdateWithoutUserIdDataInput {
  serverSynchTime?: DateTimeInput;
}

export interface FirmwareWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  cup_every?: CupWhereInput;
  cup_some?: CupWhereInput;
  cup_none?: CupWhereInput;
  fwVersion?: String;
  fwVersion_not?: String;
  fwVersion_in?: String[] | String;
  fwVersion_not_in?: String[] | String;
  fwVersion_lt?: String;
  fwVersion_lte?: String;
  fwVersion_gt?: String;
  fwVersion_gte?: String;
  fwVersion_contains?: String;
  fwVersion_not_contains?: String;
  fwVersion_starts_with?: String;
  fwVersion_not_starts_with?: String;
  fwVersion_ends_with?: String;
  fwVersion_not_ends_with?: String;
  AND?: FirmwareWhereInput[] | FirmwareWhereInput;
  OR?: FirmwareWhereInput[] | FirmwareWhereInput;
  NOT?: FirmwareWhereInput[] | FirmwareWhereInput;
}

export interface AppServerSyncUpsertWithWhereUniqueWithoutUserIdInput {
  where: AppServerSyncWhereUniqueInput;
  update: AppServerSyncUpdateWithoutUserIdDataInput;
  create: AppServerSyncCreateWithoutUserIdInput;
}

export interface UserCoinHistorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserCoinHistoryWhereInput;
  AND?:
    | UserCoinHistorySubscriptionWhereInput[]
    | UserCoinHistorySubscriptionWhereInput;
  OR?:
    | UserCoinHistorySubscriptionWhereInput[]
    | UserCoinHistorySubscriptionWhereInput;
  NOT?:
    | UserCoinHistorySubscriptionWhereInput[]
    | UserCoinHistorySubscriptionWhereInput;
}

export interface AppServerSyncScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  serverSynchTime?: DateTimeInput;
  serverSynchTime_not?: DateTimeInput;
  serverSynchTime_in?: DateTimeInput[] | DateTimeInput;
  serverSynchTime_not_in?: DateTimeInput[] | DateTimeInput;
  serverSynchTime_lt?: DateTimeInput;
  serverSynchTime_lte?: DateTimeInput;
  serverSynchTime_gt?: DateTimeInput;
  serverSynchTime_gte?: DateTimeInput;
  AND?: AppServerSyncScalarWhereInput[] | AppServerSyncScalarWhereInput;
  OR?: AppServerSyncScalarWhereInput[] | AppServerSyncScalarWhereInput;
  NOT?: AppServerSyncScalarWhereInput[] | AppServerSyncScalarWhereInput;
}

export interface PlatformCompSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PlatformCompWhereInput;
  AND?:
    | PlatformCompSubscriptionWhereInput[]
    | PlatformCompSubscriptionWhereInput;
  OR?:
    | PlatformCompSubscriptionWhereInput[]
    | PlatformCompSubscriptionWhereInput;
  NOT?:
    | PlatformCompSubscriptionWhereInput[]
    | PlatformCompSubscriptionWhereInput;
}

export interface AppServerSyncUpdateManyWithWhereNestedInput {
  where: AppServerSyncScalarWhereInput;
  data: AppServerSyncUpdateManyDataInput;
}

export interface CupDataColourCalibWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  blue?: Int;
  blue_not?: Int;
  blue_in?: Int[] | Int;
  blue_not_in?: Int[] | Int;
  blue_lt?: Int;
  blue_lte?: Int;
  blue_gt?: Int;
  blue_gte?: Int;
  c?: Int;
  c_not?: Int;
  c_in?: Int[] | Int;
  c_not_in?: Int[] | Int;
  c_lt?: Int;
  c_lte?: Int;
  c_gt?: Int;
  c_gte?: Int;
  green?: Int;
  green_not?: Int;
  green_in?: Int[] | Int;
  green_not_in?: Int[] | Int;
  green_lt?: Int;
  green_lte?: Int;
  green_gt?: Int;
  green_gte?: Int;
  red?: Int;
  red_not?: Int;
  red_in?: Int[] | Int;
  red_not_in?: Int[] | Int;
  red_lt?: Int;
  red_lte?: Int;
  red_gt?: Int;
  red_gte?: Int;
  serialNumber?: CupWhereInput;
  AND?: CupDataColourCalibWhereInput[] | CupDataColourCalibWhereInput;
  OR?: CupDataColourCalibWhereInput[] | CupDataColourCalibWhereInput;
  NOT?: CupDataColourCalibWhereInput[] | CupDataColourCalibWhereInput;
}

export interface AppServerSyncUpdateManyDataInput {
  serverSynchTime?: DateTimeInput;
}

export interface CupDataProcVolumeWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  confidenceL?: Int;
  confidenceL_not?: Int;
  confidenceL_in?: Int[] | Int;
  confidenceL_not_in?: Int[] | Int;
  confidenceL_lt?: Int;
  confidenceL_lte?: Int;
  confidenceL_gt?: Int;
  confidenceL_gte?: Int;
  confidenceR?: Int;
  confidenceR_not?: Int;
  confidenceR_in?: Int[] | Int;
  confidenceR_not_in?: Int[] | Int;
  confidenceR_lt?: Int;
  confidenceR_lte?: Int;
  confidenceR_gt?: Int;
  confidenceR_gte?: Int;
  cupDataRowId?: CupDatumWhereInput;
  inVitro?: Boolean;
  inVitro_not?: Boolean;
  volume?: Int;
  volume_not?: Int;
  volume_in?: Int[] | Int;
  volume_not_in?: Int[] | Int;
  volume_lt?: Int;
  volume_lte?: Int;
  volume_gt?: Int;
  volume_gte?: Int;
  volumeAdj?: Int;
  volumeAdj_not?: Int;
  volumeAdj_in?: Int[] | Int;
  volumeAdj_not_in?: Int[] | Int;
  volumeAdj_lt?: Int;
  volumeAdj_lte?: Int;
  volumeAdj_gt?: Int;
  volumeAdj_gte?: Int;
  volumeL?: Int;
  volumeL_not?: Int;
  volumeL_in?: Int[] | Int;
  volumeL_not_in?: Int[] | Int;
  volumeL_lt?: Int;
  volumeL_lte?: Int;
  volumeL_gt?: Int;
  volumeL_gte?: Int;
  volumeR?: Int;
  volumeR_not?: Int;
  volumeR_in?: Int[] | Int;
  volumeR_not_in?: Int[] | Int;
  volumeR_lt?: Int;
  volumeR_lte?: Int;
  volumeR_gt?: Int;
  volumeR_gte?: Int;
  AND?: CupDataProcVolumeWhereInput[] | CupDataProcVolumeWhereInput;
  OR?: CupDataProcVolumeWhereInput[] | CupDataProcVolumeWhereInput;
  NOT?: CupDataProcVolumeWhereInput[] | CupDataProcVolumeWhereInput;
}

export interface CupDataProcFlowUpdateManyWithoutUserIdInput {
  create?:
    | CupDataProcFlowCreateWithoutUserIdInput[]
    | CupDataProcFlowCreateWithoutUserIdInput;
  delete?: CupDataProcFlowWhereUniqueInput[] | CupDataProcFlowWhereUniqueInput;
  connect?: CupDataProcFlowWhereUniqueInput[] | CupDataProcFlowWhereUniqueInput;
  set?: CupDataProcFlowWhereUniqueInput[] | CupDataProcFlowWhereUniqueInput;
  disconnect?:
    | CupDataProcFlowWhereUniqueInput[]
    | CupDataProcFlowWhereUniqueInput;
  update?:
    | CupDataProcFlowUpdateWithWhereUniqueWithoutUserIdInput[]
    | CupDataProcFlowUpdateWithWhereUniqueWithoutUserIdInput;
  upsert?:
    | CupDataProcFlowUpsertWithWhereUniqueWithoutUserIdInput[]
    | CupDataProcFlowUpsertWithWhereUniqueWithoutUserIdInput;
  deleteMany?:
    | CupDataProcFlowScalarWhereInput[]
    | CupDataProcFlowScalarWhereInput;
  updateMany?:
    | CupDataProcFlowUpdateManyWithWhereNestedInput[]
    | CupDataProcFlowUpdateManyWithWhereNestedInput;
}

export interface CupDataColourCalcWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  blue?: Int;
  blue_not?: Int;
  blue_in?: Int[] | Int;
  blue_not_in?: Int[] | Int;
  blue_lt?: Int;
  blue_lte?: Int;
  blue_gt?: Int;
  blue_gte?: Int;
  cupDataRowId?: CupDatumWhereInput;
  green?: Int;
  green_not?: Int;
  green_in?: Int[] | Int;
  green_not_in?: Int[] | Int;
  green_lt?: Int;
  green_lte?: Int;
  green_gt?: Int;
  green_gte?: Int;
  red?: Int;
  red_not?: Int;
  red_in?: Int[] | Int;
  red_not_in?: Int[] | Int;
  red_lt?: Int;
  red_lte?: Int;
  red_gt?: Int;
  red_gte?: Int;
  AND?: CupDataColourCalcWhereInput[] | CupDataColourCalcWhereInput;
  OR?: CupDataColourCalcWhereInput[] | CupDataColourCalcWhereInput;
  NOT?: CupDataColourCalcWhereInput[] | CupDataColourCalcWhereInput;
}

export interface CupDataProcFlowUpdateWithWhereUniqueWithoutUserIdInput {
  where: CupDataProcFlowWhereUniqueInput;
  data: CupDataProcFlowUpdateWithoutUserIdDataInput;
}

export interface CupDatumWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  battery?: Int;
  battery_not?: Int;
  battery_in?: Int[] | Int;
  battery_not_in?: Int[] | Int;
  battery_lt?: Int;
  battery_lte?: Int;
  battery_gt?: Int;
  battery_gte?: Int;
  calibFlag?: Boolean;
  calibFlag_not?: Boolean;
  ch1?: Int;
  ch1_not?: Int;
  ch1_in?: Int[] | Int;
  ch1_not_in?: Int[] | Int;
  ch1_lt?: Int;
  ch1_lte?: Int;
  ch1_gt?: Int;
  ch1_gte?: Int;
  ch10?: Int;
  ch10_not?: Int;
  ch10_in?: Int[] | Int;
  ch10_not_in?: Int[] | Int;
  ch10_lt?: Int;
  ch10_lte?: Int;
  ch10_gt?: Int;
  ch10_gte?: Int;
  ch11?: Int;
  ch11_not?: Int;
  ch11_in?: Int[] | Int;
  ch11_not_in?: Int[] | Int;
  ch11_lt?: Int;
  ch11_lte?: Int;
  ch11_gt?: Int;
  ch11_gte?: Int;
  ch12?: Int;
  ch12_not?: Int;
  ch12_in?: Int[] | Int;
  ch12_not_in?: Int[] | Int;
  ch12_lt?: Int;
  ch12_lte?: Int;
  ch12_gt?: Int;
  ch12_gte?: Int;
  ch13?: Int;
  ch13_not?: Int;
  ch13_in?: Int[] | Int;
  ch13_not_in?: Int[] | Int;
  ch13_lt?: Int;
  ch13_lte?: Int;
  ch13_gt?: Int;
  ch13_gte?: Int;
  ch14?: Int;
  ch14_not?: Int;
  ch14_in?: Int[] | Int;
  ch14_not_in?: Int[] | Int;
  ch14_lt?: Int;
  ch14_lte?: Int;
  ch14_gt?: Int;
  ch14_gte?: Int;
  ch2?: Int;
  ch2_not?: Int;
  ch2_in?: Int[] | Int;
  ch2_not_in?: Int[] | Int;
  ch2_lt?: Int;
  ch2_lte?: Int;
  ch2_gt?: Int;
  ch2_gte?: Int;
  ch3?: Int;
  ch3_not?: Int;
  ch3_in?: Int[] | Int;
  ch3_not_in?: Int[] | Int;
  ch3_lt?: Int;
  ch3_lte?: Int;
  ch3_gt?: Int;
  ch3_gte?: Int;
  ch4?: Int;
  ch4_not?: Int;
  ch4_in?: Int[] | Int;
  ch4_not_in?: Int[] | Int;
  ch4_lt?: Int;
  ch4_lte?: Int;
  ch4_gt?: Int;
  ch4_gte?: Int;
  ch5?: Int;
  ch5_not?: Int;
  ch5_in?: Int[] | Int;
  ch5_not_in?: Int[] | Int;
  ch5_lt?: Int;
  ch5_lte?: Int;
  ch5_gt?: Int;
  ch5_gte?: Int;
  ch6?: Int;
  ch6_not?: Int;
  ch6_in?: Int[] | Int;
  ch6_not_in?: Int[] | Int;
  ch6_lt?: Int;
  ch6_lte?: Int;
  ch6_gt?: Int;
  ch6_gte?: Int;
  ch7?: Int;
  ch7_not?: Int;
  ch7_in?: Int[] | Int;
  ch7_not_in?: Int[] | Int;
  ch7_lt?: Int;
  ch7_lte?: Int;
  ch7_gt?: Int;
  ch7_gte?: Int;
  ch8?: Int;
  ch8_not?: Int;
  ch8_in?: Int[] | Int;
  ch8_not_in?: Int[] | Int;
  ch8_lt?: Int;
  ch8_lte?: Int;
  ch8_gt?: Int;
  ch8_gte?: Int;
  ch9?: Int;
  ch9_not?: Int;
  ch9_in?: Int[] | Int;
  ch9_not_in?: Int[] | Int;
  ch9_lt?: Int;
  ch9_lte?: Int;
  ch9_gt?: Int;
  ch9_gte?: Int;
  colourB?: Int;
  colourB_not?: Int;
  colourB_in?: Int[] | Int;
  colourB_not_in?: Int[] | Int;
  colourB_lt?: Int;
  colourB_lte?: Int;
  colourB_gt?: Int;
  colourB_gte?: Int;
  colourC?: Int;
  colourC_not?: Int;
  colourC_in?: Int[] | Int;
  colourC_not_in?: Int[] | Int;
  colourC_lt?: Int;
  colourC_lte?: Int;
  colourC_gt?: Int;
  colourC_gte?: Int;
  colourG?: Int;
  colourG_not?: Int;
  colourG_in?: Int[] | Int;
  colourG_not_in?: Int[] | Int;
  colourG_lt?: Int;
  colourG_lte?: Int;
  colourG_gt?: Int;
  colourG_gte?: Int;
  colourR?: Int;
  colourR_not?: Int;
  colourR_in?: Int[] | Int;
  colourR_not_in?: Int[] | Int;
  colourR_lt?: Int;
  colourR_lte?: Int;
  colourR_gt?: Int;
  colourR_gte?: Int;
  cupDataColourCalc_every?: CupDataColourCalcWhereInput;
  cupDataColourCalc_some?: CupDataColourCalcWhereInput;
  cupDataColourCalc_none?: CupDataColourCalcWhereInput;
  cupDataProcVolume_every?: CupDataProcVolumeWhereInput;
  cupDataProcVolume_some?: CupDataProcVolumeWhereInput;
  cupDataProcVolume_none?: CupDataProcVolumeWhereInput;
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[] | DateTimeInput;
  date_not_in?: DateTimeInput[] | DateTimeInput;
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  day?: Int;
  day_not?: Int;
  day_in?: Int[] | Int;
  day_not_in?: Int[] | Int;
  day_lt?: Int;
  day_lte?: Int;
  day_gt?: Int;
  day_gte?: Int;
  hour?: Int;
  hour_not?: Int;
  hour_in?: Int[] | Int;
  hour_not_in?: Int[] | Int;
  hour_lt?: Int;
  hour_lte?: Int;
  hour_gt?: Int;
  hour_gte?: Int;
  line?: Int;
  line_not?: Int;
  line_in?: Int[] | Int;
  line_not_in?: Int[] | Int;
  line_lt?: Int;
  line_lte?: Int;
  line_gt?: Int;
  line_gte?: Int;
  minute?: Int;
  minute_not?: Int;
  minute_in?: Int[] | Int;
  minute_not_in?: Int[] | Int;
  minute_lt?: Int;
  minute_lte?: Int;
  minute_gt?: Int;
  minute_gte?: Int;
  month?: Int;
  month_not?: Int;
  month_in?: Int[] | Int;
  month_not_in?: Int[] | Int;
  month_lt?: Int;
  month_lte?: Int;
  month_gt?: Int;
  month_gte?: Int;
  page?: Int;
  page_not?: Int;
  page_in?: Int[] | Int;
  page_not_in?: Int[] | Int;
  page_lt?: Int;
  page_lte?: Int;
  page_gt?: Int;
  page_gte?: Int;
  rawTotalVolume?: Int;
  rawTotalVolume_not?: Int;
  rawTotalVolume_in?: Int[] | Int;
  rawTotalVolume_not_in?: Int[] | Int;
  rawTotalVolume_lt?: Int;
  rawTotalVolume_lte?: Int;
  rawTotalVolume_gt?: Int;
  rawTotalVolume_gte?: Int;
  rawVolumeL?: Int;
  rawVolumeL_not?: Int;
  rawVolumeL_in?: Int[] | Int;
  rawVolumeL_not_in?: Int[] | Int;
  rawVolumeL_lt?: Int;
  rawVolumeL_lte?: Int;
  rawVolumeL_gt?: Int;
  rawVolumeL_gte?: Int;
  rawVolumeR?: Int;
  rawVolumeR_not?: Int;
  rawVolumeR_in?: Int[] | Int;
  rawVolumeR_not_in?: Int[] | Int;
  rawVolumeR_lt?: Int;
  rawVolumeR_lte?: Int;
  rawVolumeR_gt?: Int;
  rawVolumeR_gte?: Int;
  serialNumber?: CupWhereInput;
  temperature?: Int;
  temperature_not?: Int;
  temperature_in?: Int[] | Int;
  temperature_not_in?: Int[] | Int;
  temperature_lt?: Int;
  temperature_lte?: Int;
  temperature_gt?: Int;
  temperature_gte?: Int;
  x?: Int;
  x_not?: Int;
  x_in?: Int[] | Int;
  x_not_in?: Int[] | Int;
  x_lt?: Int;
  x_lte?: Int;
  x_gt?: Int;
  x_gte?: Int;
  y?: Int;
  y_not?: Int;
  y_in?: Int[] | Int;
  y_not_in?: Int[] | Int;
  y_lt?: Int;
  y_lte?: Int;
  y_gt?: Int;
  y_gte?: Int;
  year?: Int;
  year_not?: Int;
  year_in?: Int[] | Int;
  year_not_in?: Int[] | Int;
  year_lt?: Int;
  year_lte?: Int;
  year_gt?: Int;
  year_gte?: Int;
  z?: Int;
  z_not?: Int;
  z_in?: Int[] | Int;
  z_not_in?: Int[] | Int;
  z_lt?: Int;
  z_lte?: Int;
  z_gt?: Int;
  z_gte?: Int;
  AND?: CupDatumWhereInput[] | CupDatumWhereInput;
  OR?: CupDatumWhereInput[] | CupDatumWhereInput;
  NOT?: CupDatumWhereInput[] | CupDatumWhereInput;
}

export interface CupDataProcFlowUpdateWithoutUserIdDataInput {
  date?: DateTimeInput;
  hourlyFlow?: Int;
  mdateRowId?: CupDataProcMdateUpdateOneRequiredWithoutCupDataProcFlowInput;
}

export interface CupAppSyncWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  appSynchTime?: DateTimeInput;
  appSynchTime_not?: DateTimeInput;
  appSynchTime_in?: DateTimeInput[] | DateTimeInput;
  appSynchTime_not_in?: DateTimeInput[] | DateTimeInput;
  appSynchTime_lt?: DateTimeInput;
  appSynchTime_lte?: DateTimeInput;
  appSynchTime_gt?: DateTimeInput;
  appSynchTime_gte?: DateTimeInput;
  serialNumber?: CupWhereInput;
  AND?: CupAppSyncWhereInput[] | CupAppSyncWhereInput;
  OR?: CupAppSyncWhereInput[] | CupAppSyncWhereInput;
  NOT?: CupAppSyncWhereInput[] | CupAppSyncWhereInput;
}

export interface CupDataProcMdateUpdateOneRequiredWithoutCupDataProcFlowInput {
  create?: CupDataProcMdateCreateWithoutCupDataProcFlowInput;
  update?: CupDataProcMdateUpdateWithoutCupDataProcFlowDataInput;
  upsert?: CupDataProcMdateUpsertWithoutCupDataProcFlowInput;
  connect?: CupDataProcMdateWhereUniqueInput;
}

export interface CompanyWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  companyName?: String;
  companyName_not?: String;
  companyName_in?: String[] | String;
  companyName_not_in?: String[] | String;
  companyName_lt?: String;
  companyName_lte?: String;
  companyName_gt?: String;
  companyName_gte?: String;
  companyName_contains?: String;
  companyName_not_contains?: String;
  companyName_starts_with?: String;
  companyName_not_starts_with?: String;
  companyName_ends_with?: String;
  companyName_not_ends_with?: String;
  cup_every?: CupWhereInput;
  cup_some?: CupWhereInput;
  cup_none?: CupWhereInput;
  AND?: CompanyWhereInput[] | CompanyWhereInput;
  OR?: CompanyWhereInput[] | CompanyWhereInput;
  NOT?: CompanyWhereInput[] | CompanyWhereInput;
}

export interface CupDataProcMdateUpdateWithoutCupDataProcFlowDataInput {
  cupDataManMdates?: CupDataManMdateUpdateManyWithoutMdateRowIdInput;
  dataRejected?: Boolean;
  dataVerified?: Boolean;
  menFinish?: DateTimeInput;
  menStart?: DateTimeInput;
  rejectId?: CupDataRejectionUpdateOneWithoutCupDataProcMdatesInput;
  rewardAmount?: Int;
  userId?: UserUpdateOneRequiredWithoutCupDataProcMdatesInput;
}

export interface CalibrationWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  calibVersion?: String;
  calibVersion_not?: String;
  calibVersion_in?: String[] | String;
  calibVersion_not_in?: String[] | String;
  calibVersion_lt?: String;
  calibVersion_lte?: String;
  calibVersion_gt?: String;
  calibVersion_gte?: String;
  calibVersion_contains?: String;
  calibVersion_not_contains?: String;
  calibVersion_starts_with?: String;
  calibVersion_not_starts_with?: String;
  calibVersion_ends_with?: String;
  calibVersion_not_ends_with?: String;
  cup_every?: CupWhereInput;
  cup_some?: CupWhereInput;
  cup_none?: CupWhereInput;
  AND?: CalibrationWhereInput[] | CalibrationWhereInput;
  OR?: CalibrationWhereInput[] | CalibrationWhereInput;
  NOT?: CalibrationWhereInput[] | CalibrationWhereInput;
}

export interface CupDataManMdateUpdateManyWithoutMdateRowIdInput {
  create?:
    | CupDataManMdateCreateWithoutMdateRowIdInput[]
    | CupDataManMdateCreateWithoutMdateRowIdInput;
  delete?: CupDataManMdateWhereUniqueInput[] | CupDataManMdateWhereUniqueInput;
  connect?: CupDataManMdateWhereUniqueInput[] | CupDataManMdateWhereUniqueInput;
  set?: CupDataManMdateWhereUniqueInput[] | CupDataManMdateWhereUniqueInput;
  disconnect?:
    | CupDataManMdateWhereUniqueInput[]
    | CupDataManMdateWhereUniqueInput;
  update?:
    | CupDataManMdateUpdateWithWhereUniqueWithoutMdateRowIdInput[]
    | CupDataManMdateUpdateWithWhereUniqueWithoutMdateRowIdInput;
  upsert?:
    | CupDataManMdateUpsertWithWhereUniqueWithoutMdateRowIdInput[]
    | CupDataManMdateUpsertWithWhereUniqueWithoutMdateRowIdInput;
  deleteMany?:
    | CupDataManMdateScalarWhereInput[]
    | CupDataManMdateScalarWhereInput;
  updateMany?:
    | CupDataManMdateUpdateManyWithWhereNestedInput[]
    | CupDataManMdateUpdateManyWithWhereNestedInput;
}

export interface CupDataUserRemoveExplainSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CupDataUserRemoveExplainWhereInput;
  AND?:
    | CupDataUserRemoveExplainSubscriptionWhereInput[]
    | CupDataUserRemoveExplainSubscriptionWhereInput;
  OR?:
    | CupDataUserRemoveExplainSubscriptionWhereInput[]
    | CupDataUserRemoveExplainSubscriptionWhereInput;
  NOT?:
    | CupDataUserRemoveExplainSubscriptionWhereInput[]
    | CupDataUserRemoveExplainSubscriptionWhereInput;
}

export interface CupDataManMdateUpdateWithWhereUniqueWithoutMdateRowIdInput {
  where: CupDataManMdateWhereUniqueInput;
  data: CupDataManMdateUpdateWithoutMdateRowIdDataInput;
}

export interface CupWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  anonSerialNumber?: Int;
  anonSerialNumber_not?: Int;
  anonSerialNumber_in?: Int[] | Int;
  anonSerialNumber_not_in?: Int[] | Int;
  anonSerialNumber_lt?: Int;
  anonSerialNumber_lte?: Int;
  anonSerialNumber_gt?: Int;
  anonSerialNumber_gte?: Int;
  calibId?: CalibrationWhereInput;
  companyId?: CompanyWhereInput;
  cupAppSync_every?: CupAppSyncWhereInput;
  cupAppSync_some?: CupAppSyncWhereInput;
  cupAppSync_none?: CupAppSyncWhereInput;
  cupData_every?: CupDatumWhereInput;
  cupData_some?: CupDatumWhereInput;
  cupData_none?: CupDatumWhereInput;
  cupDataColourCalib_every?: CupDataColourCalibWhereInput;
  cupDataColourCalib_some?: CupDataColourCalibWhereInput;
  cupDataColourCalib_none?: CupDataColourCalibWhereInput;
  cupDataRaw_every?: CupDataRawWhereInput;
  cupDataRaw_some?: CupDataRawWhereInput;
  cupDataRaw_none?: CupDataRawWhereInput;
  cupDataUserRemove_every?: CupDataUserRemoveWhereInput;
  cupDataUserRemove_some?: CupDataUserRemoveWhereInput;
  cupDataUserRemove_none?: CupDataUserRemoveWhereInput;
  encryptionKey?: Int;
  encryptionKey_not?: Int;
  encryptionKey_in?: Int[] | Int;
  encryptionKey_not_in?: Int[] | Int;
  encryptionKey_lt?: Int;
  encryptionKey_lte?: Int;
  encryptionKey_gt?: Int;
  encryptionKey_gte?: Int;
  fwId?: FirmwareWhereInput;
  hwId?: HardwareWhereInput;
  userCups_every?: UserCupWhereInput;
  userCups_some?: UserCupWhereInput;
  userCups_none?: UserCupWhereInput;
  AND?: CupWhereInput[] | CupWhereInput;
  OR?: CupWhereInput[] | CupWhereInput;
  NOT?: CupWhereInput[] | CupWhereInput;
}

export interface CupDataManMdateUpdateWithoutMdateRowIdDataInput {
  menFinish?: DateTimeInput;
  menStart?: DateTimeInput;
}

export interface CupDataRawSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CupDataRawWhereInput;
  AND?: CupDataRawSubscriptionWhereInput[] | CupDataRawSubscriptionWhereInput;
  OR?: CupDataRawSubscriptionWhereInput[] | CupDataRawSubscriptionWhereInput;
  NOT?: CupDataRawSubscriptionWhereInput[] | CupDataRawSubscriptionWhereInput;
}

export interface CupDataManMdateUpsertWithWhereUniqueWithoutMdateRowIdInput {
  where: CupDataManMdateWhereUniqueInput;
  update: CupDataManMdateUpdateWithoutMdateRowIdDataInput;
  create: CupDataManMdateCreateWithoutMdateRowIdInput;
}

export interface CupDataUserRemoveWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  changeTime?: DateTimeInput;
  changeTime_not?: DateTimeInput;
  changeTime_in?: DateTimeInput[] | DateTimeInput;
  changeTime_not_in?: DateTimeInput[] | DateTimeInput;
  changeTime_lt?: DateTimeInput;
  changeTime_lte?: DateTimeInput;
  changeTime_gt?: DateTimeInput;
  changeTime_gte?: DateTimeInput;
  explainId?: CupDataUserRemoveExplainWhereInput;
  serialNumber?: CupWhereInput;
  userId?: UserWhereInput;
  AND?: CupDataUserRemoveWhereInput[] | CupDataUserRemoveWhereInput;
  OR?: CupDataUserRemoveWhereInput[] | CupDataUserRemoveWhereInput;
  NOT?: CupDataUserRemoveWhereInput[] | CupDataUserRemoveWhereInput;
}

export interface CupDataManMdateScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  menFinish?: DateTimeInput;
  menFinish_not?: DateTimeInput;
  menFinish_in?: DateTimeInput[] | DateTimeInput;
  menFinish_not_in?: DateTimeInput[] | DateTimeInput;
  menFinish_lt?: DateTimeInput;
  menFinish_lte?: DateTimeInput;
  menFinish_gt?: DateTimeInput;
  menFinish_gte?: DateTimeInput;
  menStart?: DateTimeInput;
  menStart_not?: DateTimeInput;
  menStart_in?: DateTimeInput[] | DateTimeInput;
  menStart_not_in?: DateTimeInput[] | DateTimeInput;
  menStart_lt?: DateTimeInput;
  menStart_lte?: DateTimeInput;
  menStart_gt?: DateTimeInput;
  menStart_gte?: DateTimeInput;
  AND?: CupDataManMdateScalarWhereInput[] | CupDataManMdateScalarWhereInput;
  OR?: CupDataManMdateScalarWhereInput[] | CupDataManMdateScalarWhereInput;
  NOT?: CupDataManMdateScalarWhereInput[] | CupDataManMdateScalarWhereInput;
}

export interface CupDataQuestionWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  cupDataAnswer_every?: CupDataAnswerWhereInput;
  cupDataAnswer_some?: CupDataAnswerWhereInput;
  cupDataAnswer_none?: CupDataAnswerWhereInput;
  cupDataQaResponse_every?: CupDataQaResponseWhereInput;
  cupDataQaResponse_some?: CupDataQaResponseWhereInput;
  cupDataQaResponse_none?: CupDataQaResponseWhereInput;
  questionText?: String;
  questionText_not?: String;
  questionText_in?: String[] | String;
  questionText_not_in?: String[] | String;
  questionText_lt?: String;
  questionText_lte?: String;
  questionText_gt?: String;
  questionText_gte?: String;
  questionText_contains?: String;
  questionText_not_contains?: String;
  questionText_starts_with?: String;
  questionText_not_starts_with?: String;
  questionText_ends_with?: String;
  questionText_not_ends_with?: String;
  AND?: CupDataQuestionWhereInput[] | CupDataQuestionWhereInput;
  OR?: CupDataQuestionWhereInput[] | CupDataQuestionWhereInput;
  NOT?: CupDataQuestionWhereInput[] | CupDataQuestionWhereInput;
}

export interface CupDataManMdateUpdateManyWithWhereNestedInput {
  where: CupDataManMdateScalarWhereInput;
  data: CupDataManMdateUpdateManyDataInput;
}

export interface CupDataAnswerWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  answerText?: String;
  answerText_not?: String;
  answerText_in?: String[] | String;
  answerText_not_in?: String[] | String;
  answerText_lt?: String;
  answerText_lte?: String;
  answerText_gt?: String;
  answerText_gte?: String;
  answerText_contains?: String;
  answerText_not_contains?: String;
  answerText_starts_with?: String;
  answerText_not_starts_with?: String;
  answerText_ends_with?: String;
  answerText_not_ends_with?: String;
  cupDataQaResponse_every?: CupDataQaResponseWhereInput;
  cupDataQaResponse_some?: CupDataQaResponseWhereInput;
  cupDataQaResponse_none?: CupDataQaResponseWhereInput;
  questionId?: CupDataQuestionWhereInput;
  AND?: CupDataAnswerWhereInput[] | CupDataAnswerWhereInput;
  OR?: CupDataAnswerWhereInput[] | CupDataAnswerWhereInput;
  NOT?: CupDataAnswerWhereInput[] | CupDataAnswerWhereInput;
}

export interface CupDataManMdateUpdateManyDataInput {
  menFinish?: DateTimeInput;
  menStart?: DateTimeInput;
}

export interface CupDataQaResponseWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  answerId?: CupDataAnswerWhereInput;
  qaDate?: DateTimeInput;
  qaDate_not?: DateTimeInput;
  qaDate_in?: DateTimeInput[] | DateTimeInput;
  qaDate_not_in?: DateTimeInput[] | DateTimeInput;
  qaDate_lt?: DateTimeInput;
  qaDate_lte?: DateTimeInput;
  qaDate_gt?: DateTimeInput;
  qaDate_gte?: DateTimeInput;
  questionId?: CupDataQuestionWhereInput;
  userId?: UserWhereInput;
  AND?: CupDataQaResponseWhereInput[] | CupDataQaResponseWhereInput;
  OR?: CupDataQaResponseWhereInput[] | CupDataQaResponseWhereInput;
  NOT?: CupDataQaResponseWhereInput[] | CupDataQaResponseWhereInput;
}

export interface CupDataRejectionUpdateOneWithoutCupDataProcMdatesInput {
  create?: CupDataRejectionCreateWithoutCupDataProcMdatesInput;
  update?: CupDataRejectionUpdateWithoutCupDataProcMdatesDataInput;
  upsert?: CupDataRejectionUpsertWithoutCupDataProcMdatesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CupDataRejectionWhereUniqueInput;
}

export interface CupDataRejectionWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  cupDataProcMdates_every?: CupDataProcMdateWhereInput;
  cupDataProcMdates_some?: CupDataProcMdateWhereInput;
  cupDataProcMdates_none?: CupDataProcMdateWhereInput;
  rejectionDescription?: String;
  rejectionDescription_not?: String;
  rejectionDescription_in?: String[] | String;
  rejectionDescription_not_in?: String[] | String;
  rejectionDescription_lt?: String;
  rejectionDescription_lte?: String;
  rejectionDescription_gt?: String;
  rejectionDescription_gte?: String;
  rejectionDescription_contains?: String;
  rejectionDescription_not_contains?: String;
  rejectionDescription_starts_with?: String;
  rejectionDescription_not_starts_with?: String;
  rejectionDescription_ends_with?: String;
  rejectionDescription_not_ends_with?: String;
  AND?: CupDataRejectionWhereInput[] | CupDataRejectionWhereInput;
  OR?: CupDataRejectionWhereInput[] | CupDataRejectionWhereInput;
  NOT?: CupDataRejectionWhereInput[] | CupDataRejectionWhereInput;
}

export interface CupDataRejectionUpdateWithoutCupDataProcMdatesDataInput {
  rejectionDescription?: String;
}

export interface CupDataManMdateWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  mdateRowId?: CupDataProcMdateWhereInput;
  menFinish?: DateTimeInput;
  menFinish_not?: DateTimeInput;
  menFinish_in?: DateTimeInput[] | DateTimeInput;
  menFinish_not_in?: DateTimeInput[] | DateTimeInput;
  menFinish_lt?: DateTimeInput;
  menFinish_lte?: DateTimeInput;
  menFinish_gt?: DateTimeInput;
  menFinish_gte?: DateTimeInput;
  menStart?: DateTimeInput;
  menStart_not?: DateTimeInput;
  menStart_in?: DateTimeInput[] | DateTimeInput;
  menStart_not_in?: DateTimeInput[] | DateTimeInput;
  menStart_lt?: DateTimeInput;
  menStart_lte?: DateTimeInput;
  menStart_gt?: DateTimeInput;
  menStart_gte?: DateTimeInput;
  AND?: CupDataManMdateWhereInput[] | CupDataManMdateWhereInput;
  OR?: CupDataManMdateWhereInput[] | CupDataManMdateWhereInput;
  NOT?: CupDataManMdateWhereInput[] | CupDataManMdateWhereInput;
}

export interface CupDataRejectionUpsertWithoutCupDataProcMdatesInput {
  update: CupDataRejectionUpdateWithoutCupDataProcMdatesDataInput;
  create: CupDataRejectionCreateWithoutCupDataProcMdatesInput;
}

export interface CupDataProcMdateWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  cupDataManMdates_every?: CupDataManMdateWhereInput;
  cupDataManMdates_some?: CupDataManMdateWhereInput;
  cupDataManMdates_none?: CupDataManMdateWhereInput;
  cupDataProcFlow_every?: CupDataProcFlowWhereInput;
  cupDataProcFlow_some?: CupDataProcFlowWhereInput;
  cupDataProcFlow_none?: CupDataProcFlowWhereInput;
  dataRejected?: Boolean;
  dataRejected_not?: Boolean;
  dataVerified?: Boolean;
  dataVerified_not?: Boolean;
  menFinish?: DateTimeInput;
  menFinish_not?: DateTimeInput;
  menFinish_in?: DateTimeInput[] | DateTimeInput;
  menFinish_not_in?: DateTimeInput[] | DateTimeInput;
  menFinish_lt?: DateTimeInput;
  menFinish_lte?: DateTimeInput;
  menFinish_gt?: DateTimeInput;
  menFinish_gte?: DateTimeInput;
  menStart?: DateTimeInput;
  menStart_not?: DateTimeInput;
  menStart_in?: DateTimeInput[] | DateTimeInput;
  menStart_not_in?: DateTimeInput[] | DateTimeInput;
  menStart_lt?: DateTimeInput;
  menStart_lte?: DateTimeInput;
  menStart_gt?: DateTimeInput;
  menStart_gte?: DateTimeInput;
  rejectId?: CupDataRejectionWhereInput;
  rewardAmount?: Int;
  rewardAmount_not?: Int;
  rewardAmount_in?: Int[] | Int;
  rewardAmount_not_in?: Int[] | Int;
  rewardAmount_lt?: Int;
  rewardAmount_lte?: Int;
  rewardAmount_gt?: Int;
  rewardAmount_gte?: Int;
  userId?: UserWhereInput;
  AND?: CupDataProcMdateWhereInput[] | CupDataProcMdateWhereInput;
  OR?: CupDataProcMdateWhereInput[] | CupDataProcMdateWhereInput;
  NOT?: CupDataProcMdateWhereInput[] | CupDataProcMdateWhereInput;
}

export interface UserUpdateOneRequiredWithoutCupDataProcMdatesInput {
  create?: UserCreateWithoutCupDataProcMdatesInput;
  update?: UserUpdateWithoutCupDataProcMdatesDataInput;
  upsert?: UserUpsertWithoutCupDataProcMdatesInput;
  connect?: UserWhereUniqueInput;
}

export interface CupDataProcFlowWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[] | DateTimeInput;
  date_not_in?: DateTimeInput[] | DateTimeInput;
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  hourlyFlow?: Int;
  hourlyFlow_not?: Int;
  hourlyFlow_in?: Int[] | Int;
  hourlyFlow_not_in?: Int[] | Int;
  hourlyFlow_lt?: Int;
  hourlyFlow_lte?: Int;
  hourlyFlow_gt?: Int;
  hourlyFlow_gte?: Int;
  mdateRowId?: CupDataProcMdateWhereInput;
  userId?: UserWhereInput;
  AND?: CupDataProcFlowWhereInput[] | CupDataProcFlowWhereInput;
  OR?: CupDataProcFlowWhereInput[] | CupDataProcFlowWhereInput;
  NOT?: CupDataProcFlowWhereInput[] | CupDataProcFlowWhereInput;
}

export interface UserUpdateWithoutCupDataProcMdatesDataInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncUpdateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowUpdateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseUpdateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob?: DateTimeInput;
  email?: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityUpdateOneWithoutUsersInput;
  firstName?: String;
  givenBirth?: Boolean;
  lastName?: String;
  macId?: String;
  password?: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryUpdateManyWithoutUserIdInput;
  userCups?: UserCupUpdateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumUpdateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodUpdateManyWithoutUserIdInput;
  userWallet?: UserWalletUpdateManyWithoutUserIdInput;
}

export interface CupDataAnswerSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CupDataAnswerWhereInput;
  AND?:
    | CupDataAnswerSubscriptionWhereInput[]
    | CupDataAnswerSubscriptionWhereInput;
  OR?:
    | CupDataAnswerSubscriptionWhereInput[]
    | CupDataAnswerSubscriptionWhereInput;
  NOT?:
    | CupDataAnswerSubscriptionWhereInput[]
    | CupDataAnswerSubscriptionWhereInput;
}

export interface CupDataQaResponseUpdateManyWithoutUserIdInput {
  create?:
    | CupDataQaResponseCreateWithoutUserIdInput[]
    | CupDataQaResponseCreateWithoutUserIdInput;
  delete?:
    | CupDataQaResponseWhereUniqueInput[]
    | CupDataQaResponseWhereUniqueInput;
  connect?:
    | CupDataQaResponseWhereUniqueInput[]
    | CupDataQaResponseWhereUniqueInput;
  set?: CupDataQaResponseWhereUniqueInput[] | CupDataQaResponseWhereUniqueInput;
  disconnect?:
    | CupDataQaResponseWhereUniqueInput[]
    | CupDataQaResponseWhereUniqueInput;
  update?:
    | CupDataQaResponseUpdateWithWhereUniqueWithoutUserIdInput[]
    | CupDataQaResponseUpdateWithWhereUniqueWithoutUserIdInput;
  upsert?:
    | CupDataQaResponseUpsertWithWhereUniqueWithoutUserIdInput[]
    | CupDataQaResponseUpsertWithWhereUniqueWithoutUserIdInput;
  deleteMany?:
    | CupDataQaResponseScalarWhereInput[]
    | CupDataQaResponseScalarWhereInput;
  updateMany?:
    | CupDataQaResponseUpdateManyWithWhereNestedInput[]
    | CupDataQaResponseUpdateManyWithWhereNestedInput;
}

export type AppServerSyncWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CupDataQaResponseUpdateWithWhereUniqueWithoutUserIdInput {
  where: CupDataQaResponseWhereUniqueInput;
  data: CupDataQaResponseUpdateWithoutUserIdDataInput;
}

export interface CountrySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CountryWhereInput;
  AND?: CountrySubscriptionWhereInput[] | CountrySubscriptionWhereInput;
  OR?: CountrySubscriptionWhereInput[] | CountrySubscriptionWhereInput;
  NOT?: CountrySubscriptionWhereInput[] | CountrySubscriptionWhereInput;
}

export interface CupDataQaResponseUpdateWithoutUserIdDataInput {
  answerId?: CupDataAnswerUpdateOneRequiredWithoutCupDataQaResponseInput;
  qaDate?: DateTimeInput;
  questionId?: CupDataQuestionUpdateOneRequiredWithoutCupDataQaResponseInput;
}

export type AuthTokenWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CupDataAnswerUpdateOneRequiredWithoutCupDataQaResponseInput {
  create?: CupDataAnswerCreateWithoutCupDataQaResponseInput;
  update?: CupDataAnswerUpdateWithoutCupDataQaResponseDataInput;
  upsert?: CupDataAnswerUpsertWithoutCupDataQaResponseInput;
  connect?: CupDataAnswerWhereUniqueInput;
}

export interface AuthTokenWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  AND?: AuthTokenWhereInput[] | AuthTokenWhereInput;
  OR?: AuthTokenWhereInput[] | AuthTokenWhereInput;
  NOT?: AuthTokenWhereInput[] | AuthTokenWhereInput;
}

export interface CupDataAnswerUpdateWithoutCupDataQaResponseDataInput {
  answerText?: String;
  questionId?: CupDataQuestionUpdateOneRequiredWithoutCupDataAnswerInput;
}

export interface AuthTokenSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AuthTokenWhereInput;
  AND?: AuthTokenSubscriptionWhereInput[] | AuthTokenSubscriptionWhereInput;
  OR?: AuthTokenSubscriptionWhereInput[] | AuthTokenSubscriptionWhereInput;
  NOT?: AuthTokenSubscriptionWhereInput[] | AuthTokenSubscriptionWhereInput;
}

export interface CupDataQuestionUpdateOneRequiredWithoutCupDataAnswerInput {
  create?: CupDataQuestionCreateWithoutCupDataAnswerInput;
  update?: CupDataQuestionUpdateWithoutCupDataAnswerDataInput;
  upsert?: CupDataQuestionUpsertWithoutCupDataAnswerInput;
  connect?: CupDataQuestionWhereUniqueInput;
}

export interface AnswerTypeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AnswerTypeWhereInput;
  AND?: AnswerTypeSubscriptionWhereInput[] | AnswerTypeSubscriptionWhereInput;
  OR?: AnswerTypeSubscriptionWhereInput[] | AnswerTypeSubscriptionWhereInput;
  NOT?: AnswerTypeSubscriptionWhereInput[] | AnswerTypeSubscriptionWhereInput;
}

export interface CupDataQuestionUpdateWithoutCupDataAnswerDataInput {
  cupDataQaResponse?: CupDataQaResponseUpdateManyWithoutQuestionIdInput;
  questionText?: String;
}

export interface UserWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  anonUserId?: Int;
  anonUserId_not?: Int;
  anonUserId_in?: Int[] | Int;
  anonUserId_not_in?: Int[] | Int;
  anonUserId_lt?: Int;
  anonUserId_lte?: Int;
  anonUserId_gt?: Int;
  anonUserId_gte?: Int;
  appServerSync_every?: AppServerSyncWhereInput;
  appServerSync_some?: AppServerSyncWhereInput;
  appServerSync_none?: AppServerSyncWhereInput;
  countryId?: Int;
  countryId_not?: Int;
  countryId_in?: Int[] | Int;
  countryId_not_in?: Int[] | Int;
  countryId_lt?: Int;
  countryId_lte?: Int;
  countryId_gt?: Int;
  countryId_gte?: Int;
  cupDataProcFlow_every?: CupDataProcFlowWhereInput;
  cupDataProcFlow_some?: CupDataProcFlowWhereInput;
  cupDataProcFlow_none?: CupDataProcFlowWhereInput;
  cupDataProcMdates_every?: CupDataProcMdateWhereInput;
  cupDataProcMdates_some?: CupDataProcMdateWhereInput;
  cupDataProcMdates_none?: CupDataProcMdateWhereInput;
  cupDataQaResponse_every?: CupDataQaResponseWhereInput;
  cupDataQaResponse_some?: CupDataQaResponseWhereInput;
  cupDataQaResponse_none?: CupDataQaResponseWhereInput;
  cupDataUserRemove_every?: CupDataUserRemoveWhereInput;
  cupDataUserRemove_some?: CupDataUserRemoveWhereInput;
  cupDataUserRemove_none?: CupDataUserRemoveWhereInput;
  deleted?: Boolean;
  deleted_not?: Boolean;
  deviceModel?: String;
  deviceModel_not?: String;
  deviceModel_in?: String[] | String;
  deviceModel_not_in?: String[] | String;
  deviceModel_lt?: String;
  deviceModel_lte?: String;
  deviceModel_gt?: String;
  deviceModel_gte?: String;
  deviceModel_contains?: String;
  deviceModel_not_contains?: String;
  deviceModel_starts_with?: String;
  deviceModel_not_starts_with?: String;
  deviceModel_ends_with?: String;
  deviceModel_not_ends_with?: String;
  dob?: DateTimeInput;
  dob_not?: DateTimeInput;
  dob_in?: DateTimeInput[] | DateTimeInput;
  dob_not_in?: DateTimeInput[] | DateTimeInput;
  dob_lt?: DateTimeInput;
  dob_lte?: DateTimeInput;
  dob_gt?: DateTimeInput;
  dob_gte?: DateTimeInput;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  emailVerify?: Boolean;
  emailVerify_not?: Boolean;
  encryptSaltString?: String;
  encryptSaltString_not?: String;
  encryptSaltString_in?: String[] | String;
  encryptSaltString_not_in?: String[] | String;
  encryptSaltString_lt?: String;
  encryptSaltString_lte?: String;
  encryptSaltString_gt?: String;
  encryptSaltString_gte?: String;
  encryptSaltString_contains?: String;
  encryptSaltString_not_contains?: String;
  encryptSaltString_starts_with?: String;
  encryptSaltString_not_starts_with?: String;
  encryptSaltString_ends_with?: String;
  encryptSaltString_not_ends_with?: String;
  ethnicityId?: EthnicityWhereInput;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  givenBirth?: Boolean;
  givenBirth_not?: Boolean;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  macId?: String;
  macId_not?: String;
  macId_in?: String[] | String;
  macId_not_in?: String[] | String;
  macId_lt?: String;
  macId_lte?: String;
  macId_gt?: String;
  macId_gte?: String;
  macId_contains?: String;
  macId_not_contains?: String;
  macId_starts_with?: String;
  macId_not_starts_with?: String;
  macId_ends_with?: String;
  macId_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  personalHealthRecord?: Boolean;
  personalHealthRecord_not?: Boolean;
  referralCode?: String;
  referralCode_not?: String;
  referralCode_in?: String[] | String;
  referralCode_not_in?: String[] | String;
  referralCode_lt?: String;
  referralCode_lte?: String;
  referralCode_gt?: String;
  referralCode_gte?: String;
  referralCode_contains?: String;
  referralCode_not_contains?: String;
  referralCode_starts_with?: String;
  referralCode_not_starts_with?: String;
  referralCode_ends_with?: String;
  referralCode_not_ends_with?: String;
  tutorial?: Boolean;
  tutorial_not?: Boolean;
  userCoinHistory_every?: UserCoinHistoryWhereInput;
  userCoinHistory_some?: UserCoinHistoryWhereInput;
  userCoinHistory_none?: UserCoinHistoryWhereInput;
  userCups_every?: UserCupWhereInput;
  userCups_some?: UserCupWhereInput;
  userCups_none?: UserCupWhereInput;
  userInterviewData_every?: UserInterviewDatumWhereInput;
  userInterviewData_some?: UserInterviewDatumWhereInput;
  userInterviewData_none?: UserInterviewDatumWhereInput;
  userRecordDataByPeriod_every?: UserRecordDataByPeriodWhereInput;
  userRecordDataByPeriod_some?: UserRecordDataByPeriodWhereInput;
  userRecordDataByPeriod_none?: UserRecordDataByPeriodWhereInput;
  userWallet_every?: UserWalletWhereInput;
  userWallet_some?: UserWalletWhereInput;
  userWallet_none?: UserWalletWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface CupDataQaResponseUpdateManyWithoutQuestionIdInput {
  create?:
    | CupDataQaResponseCreateWithoutQuestionIdInput[]
    | CupDataQaResponseCreateWithoutQuestionIdInput;
  delete?:
    | CupDataQaResponseWhereUniqueInput[]
    | CupDataQaResponseWhereUniqueInput;
  connect?:
    | CupDataQaResponseWhereUniqueInput[]
    | CupDataQaResponseWhereUniqueInput;
  set?: CupDataQaResponseWhereUniqueInput[] | CupDataQaResponseWhereUniqueInput;
  disconnect?:
    | CupDataQaResponseWhereUniqueInput[]
    | CupDataQaResponseWhereUniqueInput;
  update?:
    | CupDataQaResponseUpdateWithWhereUniqueWithoutQuestionIdInput[]
    | CupDataQaResponseUpdateWithWhereUniqueWithoutQuestionIdInput;
  upsert?:
    | CupDataQaResponseUpsertWithWhereUniqueWithoutQuestionIdInput[]
    | CupDataQaResponseUpsertWithWhereUniqueWithoutQuestionIdInput;
  deleteMany?:
    | CupDataQaResponseScalarWhereInput[]
    | CupDataQaResponseScalarWhereInput;
  updateMany?:
    | CupDataQaResponseUpdateManyWithWhereNestedInput[]
    | CupDataQaResponseUpdateManyWithWhereNestedInput;
}

export interface UsersDataAnalysisUpdateManyMutationInput {
  email?: String;
  firstName?: String;
  lastName?: String;
  password?: String;
  userId?: String;
}

export interface CupDataQaResponseUpdateWithWhereUniqueWithoutQuestionIdInput {
  where: CupDataQaResponseWhereUniqueInput;
  data: CupDataQaResponseUpdateWithoutQuestionIdDataInput;
}

export type CompanyWhereUniqueInput = AtLeastOne<{
  id: Int;
  companyName?: String;
}>;

export interface CupDataQaResponseUpdateWithoutQuestionIdDataInput {
  answerId?: CupDataAnswerUpdateOneRequiredWithoutCupDataQaResponseInput;
  qaDate?: DateTimeInput;
  userId?: UserUpdateOneRequiredWithoutCupDataQaResponseInput;
}

export interface UsersDataAnalysisCreateInput {
  email: String;
  firstName: String;
  lastName: String;
  password: String;
  userId: String;
}

export interface UserUpdateOneRequiredWithoutCupDataQaResponseInput {
  create?: UserCreateWithoutCupDataQaResponseInput;
  update?: UserUpdateWithoutCupDataQaResponseDataInput;
  upsert?: UserUpsertWithoutCupDataQaResponseInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpsertWithoutUserWalletInput {
  update: UserUpdateWithoutUserWalletDataInput;
  create: UserCreateWithoutUserWalletInput;
}

export interface UserUpdateWithoutCupDataQaResponseDataInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncUpdateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowUpdateManyWithoutUserIdInput;
  cupDataProcMdates?: CupDataProcMdateUpdateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob?: DateTimeInput;
  email?: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityUpdateOneWithoutUsersInput;
  firstName?: String;
  givenBirth?: Boolean;
  lastName?: String;
  macId?: String;
  password?: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryUpdateManyWithoutUserIdInput;
  userCups?: UserCupUpdateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumUpdateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodUpdateManyWithoutUserIdInput;
  userWallet?: UserWalletUpdateManyWithoutUserIdInput;
}

export interface UserUpdateWithoutUserWalletDataInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncUpdateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowUpdateManyWithoutUserIdInput;
  cupDataProcMdates?: CupDataProcMdateUpdateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseUpdateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob?: DateTimeInput;
  email?: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityUpdateOneWithoutUsersInput;
  firstName?: String;
  givenBirth?: Boolean;
  lastName?: String;
  macId?: String;
  password?: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryUpdateManyWithoutUserIdInput;
  userCups?: UserCupUpdateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumUpdateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodUpdateManyWithoutUserIdInput;
}

export interface CupDataProcMdateUpdateManyWithoutUserIdInput {
  create?:
    | CupDataProcMdateCreateWithoutUserIdInput[]
    | CupDataProcMdateCreateWithoutUserIdInput;
  delete?:
    | CupDataProcMdateWhereUniqueInput[]
    | CupDataProcMdateWhereUniqueInput;
  connect?:
    | CupDataProcMdateWhereUniqueInput[]
    | CupDataProcMdateWhereUniqueInput;
  set?: CupDataProcMdateWhereUniqueInput[] | CupDataProcMdateWhereUniqueInput;
  disconnect?:
    | CupDataProcMdateWhereUniqueInput[]
    | CupDataProcMdateWhereUniqueInput;
  update?:
    | CupDataProcMdateUpdateWithWhereUniqueWithoutUserIdInput[]
    | CupDataProcMdateUpdateWithWhereUniqueWithoutUserIdInput;
  upsert?:
    | CupDataProcMdateUpsertWithWhereUniqueWithoutUserIdInput[]
    | CupDataProcMdateUpsertWithWhereUniqueWithoutUserIdInput;
  deleteMany?:
    | CupDataProcMdateScalarWhereInput[]
    | CupDataProcMdateScalarWhereInput;
  updateMany?:
    | CupDataProcMdateUpdateManyWithWhereNestedInput[]
    | CupDataProcMdateUpdateManyWithWhereNestedInput;
}

export interface AnswerTypeWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  answerType?: String;
  answerType_not?: String;
  answerType_in?: String[] | String;
  answerType_not_in?: String[] | String;
  answerType_lt?: String;
  answerType_lte?: String;
  answerType_gt?: String;
  answerType_gte?: String;
  answerType_contains?: String;
  answerType_not_contains?: String;
  answerType_starts_with?: String;
  answerType_not_starts_with?: String;
  answerType_ends_with?: String;
  answerType_not_ends_with?: String;
  userInterviewQuestions_every?: UserInterviewQuestionWhereInput;
  userInterviewQuestions_some?: UserInterviewQuestionWhereInput;
  userInterviewQuestions_none?: UserInterviewQuestionWhereInput;
  AND?: AnswerTypeWhereInput[] | AnswerTypeWhereInput;
  OR?: AnswerTypeWhereInput[] | AnswerTypeWhereInput;
  NOT?: AnswerTypeWhereInput[] | AnswerTypeWhereInput;
}

export interface CupDataProcMdateUpdateWithWhereUniqueWithoutUserIdInput {
  where: CupDataProcMdateWhereUniqueInput;
  data: CupDataProcMdateUpdateWithoutUserIdDataInput;
}

export interface UserWalletUpdateInput {
  address?: String;
  createTime?: DateTimeInput;
  status?: Boolean;
  userId?: UserUpdateOneWithoutUserWalletInput;
}

export interface CupDataProcMdateUpdateWithoutUserIdDataInput {
  cupDataManMdates?: CupDataManMdateUpdateManyWithoutMdateRowIdInput;
  cupDataProcFlow?: CupDataProcFlowUpdateManyWithoutMdateRowIdInput;
  dataRejected?: Boolean;
  dataVerified?: Boolean;
  menFinish?: DateTimeInput;
  menStart?: DateTimeInput;
  rejectId?: CupDataRejectionUpdateOneWithoutCupDataProcMdatesInput;
  rewardAmount?: Int;
}

export type CupWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CupDataProcFlowUpdateManyWithoutMdateRowIdInput {
  create?:
    | CupDataProcFlowCreateWithoutMdateRowIdInput[]
    | CupDataProcFlowCreateWithoutMdateRowIdInput;
  delete?: CupDataProcFlowWhereUniqueInput[] | CupDataProcFlowWhereUniqueInput;
  connect?: CupDataProcFlowWhereUniqueInput[] | CupDataProcFlowWhereUniqueInput;
  set?: CupDataProcFlowWhereUniqueInput[] | CupDataProcFlowWhereUniqueInput;
  disconnect?:
    | CupDataProcFlowWhereUniqueInput[]
    | CupDataProcFlowWhereUniqueInput;
  update?:
    | CupDataProcFlowUpdateWithWhereUniqueWithoutMdateRowIdInput[]
    | CupDataProcFlowUpdateWithWhereUniqueWithoutMdateRowIdInput;
  upsert?:
    | CupDataProcFlowUpsertWithWhereUniqueWithoutMdateRowIdInput[]
    | CupDataProcFlowUpsertWithWhereUniqueWithoutMdateRowIdInput;
  deleteMany?:
    | CupDataProcFlowScalarWhereInput[]
    | CupDataProcFlowScalarWhereInput;
  updateMany?:
    | CupDataProcFlowUpdateManyWithWhereNestedInput[]
    | CupDataProcFlowUpdateManyWithWhereNestedInput;
}

export interface UserWalletCreateInput {
  address?: String;
  createTime?: DateTimeInput;
  status?: Boolean;
  userId?: UserCreateOneWithoutUserWalletInput;
}

export interface CupDataProcFlowUpdateWithWhereUniqueWithoutMdateRowIdInput {
  where: CupDataProcFlowWhereUniqueInput;
  data: CupDataProcFlowUpdateWithoutMdateRowIdDataInput;
}

export type CupAppSyncWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CupDataProcFlowUpdateWithoutMdateRowIdDataInput {
  date?: DateTimeInput;
  hourlyFlow?: Int;
  userId?: UserUpdateOneRequiredWithoutCupDataProcFlowInput;
}

export interface UserRecordDataByDayUpdateWithoutUserRecordDataByTimeDataInput {
  crampsLevel?: Int;
  recordDate?: DateTimeInput;
  recordPeriodRowId?: UserRecordDataByPeriodUpdateOneWithoutUserRecordDataByDayInput;
}

export interface UserUpdateOneRequiredWithoutCupDataProcFlowInput {
  create?: UserCreateWithoutCupDataProcFlowInput;
  update?: UserUpdateWithoutCupDataProcFlowDataInput;
  upsert?: UserUpsertWithoutCupDataProcFlowInput;
  connect?: UserWhereUniqueInput;
}

export type CupDataAnswerWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface UserRecordDataByPeriodWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  coinHistoryRowId?: Int;
  coinHistoryRowId_not?: Int;
  coinHistoryRowId_in?: Int[] | Int;
  coinHistoryRowId_not_in?: Int[] | Int;
  coinHistoryRowId_lt?: Int;
  coinHistoryRowId_lte?: Int;
  coinHistoryRowId_gt?: Int;
  coinHistoryRowId_gte?: Int;
  isTakePill?: Boolean;
  isTakePill_not?: Boolean;
  mensFinish?: DateTimeInput;
  mensFinish_not?: DateTimeInput;
  mensFinish_in?: DateTimeInput[] | DateTimeInput;
  mensFinish_not_in?: DateTimeInput[] | DateTimeInput;
  mensFinish_lt?: DateTimeInput;
  mensFinish_lte?: DateTimeInput;
  mensFinish_gt?: DateTimeInput;
  mensFinish_gte?: DateTimeInput;
  mensStart?: DateTimeInput;
  mensStart_not?: DateTimeInput;
  mensStart_in?: DateTimeInput[] | DateTimeInput;
  mensStart_not_in?: DateTimeInput[] | DateTimeInput;
  mensStart_lt?: DateTimeInput;
  mensStart_lte?: DateTimeInput;
  mensStart_gt?: DateTimeInput;
  mensStart_gte?: DateTimeInput;
  userId?: UserWhereInput;
  userRecordDataByDay_every?: UserRecordDataByDayWhereInput;
  userRecordDataByDay_some?: UserRecordDataByDayWhereInput;
  userRecordDataByDay_none?: UserRecordDataByDayWhereInput;
  AND?: UserRecordDataByPeriodWhereInput[] | UserRecordDataByPeriodWhereInput;
  OR?: UserRecordDataByPeriodWhereInput[] | UserRecordDataByPeriodWhereInput;
  NOT?: UserRecordDataByPeriodWhereInput[] | UserRecordDataByPeriodWhereInput;
}

export interface UserRecordDataByDayCreateWithoutUserRecordDataByTimeInput {
  crampsLevel?: Int;
  recordDate: DateTimeInput;
  recordPeriodRowId?: UserRecordDataByPeriodCreateOneWithoutUserRecordDataByDayInput;
}

export interface CupDataUserRemoveUpdateManyWithoutUserIdInput {
  create?:
    | CupDataUserRemoveCreateWithoutUserIdInput[]
    | CupDataUserRemoveCreateWithoutUserIdInput;
  delete?:
    | CupDataUserRemoveWhereUniqueInput[]
    | CupDataUserRemoveWhereUniqueInput;
  connect?:
    | CupDataUserRemoveWhereUniqueInput[]
    | CupDataUserRemoveWhereUniqueInput;
  set?: CupDataUserRemoveWhereUniqueInput[] | CupDataUserRemoveWhereUniqueInput;
  disconnect?:
    | CupDataUserRemoveWhereUniqueInput[]
    | CupDataUserRemoveWhereUniqueInput;
  update?:
    | CupDataUserRemoveUpdateWithWhereUniqueWithoutUserIdInput[]
    | CupDataUserRemoveUpdateWithWhereUniqueWithoutUserIdInput;
  upsert?:
    | CupDataUserRemoveUpsertWithWhereUniqueWithoutUserIdInput[]
    | CupDataUserRemoveUpsertWithWhereUniqueWithoutUserIdInput;
  deleteMany?:
    | CupDataUserRemoveScalarWhereInput[]
    | CupDataUserRemoveScalarWhereInput;
  updateMany?:
    | CupDataUserRemoveUpdateManyWithWhereNestedInput[]
    | CupDataUserRemoveUpdateManyWithWhereNestedInput;
}

export type CupDataColourCalcWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface UserRecordDataByTimeWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  cameraDataId?: Int;
  cameraDataId_not?: Int;
  cameraDataId_in?: Int[] | Int;
  cameraDataId_not_in?: Int[] | Int;
  cameraDataId_lt?: Int;
  cameraDataId_lte?: Int;
  cameraDataId_gt?: Int;
  cameraDataId_gte?: Int;
  changeTime?: DateTimeInput;
  changeTime_not?: DateTimeInput;
  changeTime_in?: DateTimeInput[] | DateTimeInput;
  changeTime_not_in?: DateTimeInput[] | DateTimeInput;
  changeTime_lt?: DateTimeInput;
  changeTime_lte?: DateTimeInput;
  changeTime_gt?: DateTimeInput;
  changeTime_gte?: DateTimeInput;
  colorB?: Int;
  colorB_not?: Int;
  colorB_in?: Int[] | Int;
  colorB_not_in?: Int[] | Int;
  colorB_lt?: Int;
  colorB_lte?: Int;
  colorB_gt?: Int;
  colorB_gte?: Int;
  colorG?: Int;
  colorG_not?: Int;
  colorG_in?: Int[] | Int;
  colorG_not_in?: Int[] | Int;
  colorG_lt?: Int;
  colorG_lte?: Int;
  colorG_gt?: Int;
  colorG_gte?: Int;
  colorR?: Int;
  colorR_not?: Int;
  colorR_in?: Int[] | Int;
  colorR_not_in?: Int[] | Int;
  colorR_lt?: Int;
  colorR_lte?: Int;
  colorR_gt?: Int;
  colorR_gte?: Int;
  leakage?: String;
  leakage_not?: String;
  leakage_in?: String[] | String;
  leakage_not_in?: String[] | String;
  leakage_lt?: String;
  leakage_lte?: String;
  leakage_gt?: String;
  leakage_gte?: String;
  leakage_contains?: String;
  leakage_not_contains?: String;
  leakage_starts_with?: String;
  leakage_not_starts_with?: String;
  leakage_ends_with?: String;
  leakage_not_ends_with?: String;
  recordDayRowId?: UserRecordDataByDayWhereInput;
  startTime?: DateTimeInput;
  startTime_not?: DateTimeInput;
  startTime_in?: DateTimeInput[] | DateTimeInput;
  startTime_not_in?: DateTimeInput[] | DateTimeInput;
  startTime_lt?: DateTimeInput;
  startTime_lte?: DateTimeInput;
  startTime_gt?: DateTimeInput;
  startTime_gte?: DateTimeInput;
  volume?: Float;
  volume_not?: Float;
  volume_in?: Float[] | Float;
  volume_not_in?: Float[] | Float;
  volume_lt?: Float;
  volume_lte?: Float;
  volume_gt?: Float;
  volume_gte?: Float;
  AND?: UserRecordDataByTimeWhereInput[] | UserRecordDataByTimeWhereInput;
  OR?: UserRecordDataByTimeWhereInput[] | UserRecordDataByTimeWhereInput;
  NOT?: UserRecordDataByTimeWhereInput[] | UserRecordDataByTimeWhereInput;
}

export interface UserRecordDataByPeriodUpdateManyMutationInput {
  coinHistoryRowId?: Int;
  isTakePill?: Boolean;
  mensFinish?: DateTimeInput;
  mensStart?: DateTimeInput;
}

export interface CupDataUserRemoveUpdateWithoutUserIdDataInput {
  changeTime?: DateTimeInput;
  explainId?: CupDataUserRemoveExplainUpdateOneRequiredWithoutCupDataUserRemoveInput;
  serialNumber?: CupUpdateOneRequiredWithoutCupDataUserRemoveInput;
}

export type CupDataColourCalibWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CupDataUserRemoveExplainUpdateOneRequiredWithoutCupDataUserRemoveInput {
  create?: CupDataUserRemoveExplainCreateWithoutCupDataUserRemoveInput;
  update?: CupDataUserRemoveExplainUpdateWithoutCupDataUserRemoveDataInput;
  upsert?: CupDataUserRemoveExplainUpsertWithoutCupDataUserRemoveInput;
  connect?: CupDataUserRemoveExplainWhereUniqueInput;
}

export interface UserRecordDataByDayUpdateManyMutationInput {
  crampsLevel?: Int;
  recordDate?: DateTimeInput;
}

export interface CupDataUserRemoveExplainUpdateWithoutCupDataUserRemoveDataInput {
  explain?: String;
}

export type CupDataManMdateWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CupDataUserRemoveExplainUpsertWithoutCupDataUserRemoveInput {
  update: CupDataUserRemoveExplainUpdateWithoutCupDataUserRemoveDataInput;
  create: CupDataUserRemoveExplainCreateWithoutCupDataUserRemoveInput;
}

export interface UserUpdateWithoutUserRecordDataByPeriodDataInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncUpdateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowUpdateManyWithoutUserIdInput;
  cupDataProcMdates?: CupDataProcMdateUpdateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseUpdateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob?: DateTimeInput;
  email?: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityUpdateOneWithoutUsersInput;
  firstName?: String;
  givenBirth?: Boolean;
  lastName?: String;
  macId?: String;
  password?: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryUpdateManyWithoutUserIdInput;
  userCups?: UserCupUpdateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumUpdateManyWithoutUserIdInput;
  userWallet?: UserWalletUpdateManyWithoutUserIdInput;
}

export interface CupUpdateOneRequiredWithoutCupDataUserRemoveInput {
  create?: CupCreateWithoutCupDataUserRemoveInput;
  update?: CupUpdateWithoutCupDataUserRemoveDataInput;
  upsert?: CupUpsertWithoutCupDataUserRemoveInput;
  connect?: CupWhereUniqueInput;
}

export type CupDataProcFlowWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CupUpdateWithoutCupDataUserRemoveDataInput {
  anonSerialNumber?: Int;
  calibId?: CalibrationUpdateOneWithoutCupInput;
  companyId?: CompanyUpdateOneWithoutCupInput;
  cupAppSync?: CupAppSyncUpdateManyWithoutSerialNumberInput;
  cupData?: CupDatumUpdateManyWithoutSerialNumberInput;
  cupDataColourCalib?: CupDataColourCalibUpdateManyWithoutSerialNumberInput;
  cupDataRaw?: CupDataRawUpdateManyWithoutSerialNumberInput;
  encryptionKey?: Int;
  fwId?: FirmwareUpdateOneWithoutCupInput;
  hwId?: HardwareUpdateOneWithoutCupInput;
  userCups?: UserCupUpdateManyWithoutSerialNumberInput;
}

export interface UserRecordDataByPeriodUpdateOneWithoutUserRecordDataByDayInput {
  create?: UserRecordDataByPeriodCreateWithoutUserRecordDataByDayInput;
  update?: UserRecordDataByPeriodUpdateWithoutUserRecordDataByDayDataInput;
  upsert?: UserRecordDataByPeriodUpsertWithoutUserRecordDataByDayInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserRecordDataByPeriodWhereUniqueInput;
}

export interface CalibrationUpdateOneWithoutCupInput {
  create?: CalibrationCreateWithoutCupInput;
  update?: CalibrationUpdateWithoutCupDataInput;
  upsert?: CalibrationUpsertWithoutCupInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CalibrationWhereUniqueInput;
}

export type CupDataProcMdateWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CalibrationUpdateWithoutCupDataInput {
  calibVersion?: String;
}

export interface UserCreateOneWithoutUserRecordDataByPeriodInput {
  create?: UserCreateWithoutUserRecordDataByPeriodInput;
  connect?: UserWhereUniqueInput;
}

export interface CalibrationUpsertWithoutCupInput {
  update: CalibrationUpdateWithoutCupDataInput;
  create: CalibrationCreateWithoutCupInput;
}

export type CupDataProcVolumeWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CompanyUpdateOneWithoutCupInput {
  create?: CompanyCreateWithoutCupInput;
  update?: CompanyUpdateWithoutCupDataInput;
  upsert?: CompanyUpsertWithoutCupInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CompanyWhereUniqueInput;
}

export interface UserRecordDataByDayCreateInput {
  crampsLevel?: Int;
  recordDate: DateTimeInput;
  recordPeriodRowId?: UserRecordDataByPeriodCreateOneWithoutUserRecordDataByDayInput;
  userRecordDataByTime?: UserRecordDataByTimeCreateManyWithoutRecordDayRowIdInput;
}

export interface CompanyUpdateWithoutCupDataInput {
  companyName?: String;
}

export type CupDataQaResponseWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CompanyUpsertWithoutCupInput {
  update: CompanyUpdateWithoutCupDataInput;
  create: CompanyCreateWithoutCupInput;
}

export interface UserCoinHistoryUpdateWithoutUserRecordCameraDataByTimeDataInput {
  category?: String;
  coin?: Int;
  contents?: String;
  date?: DateTimeInput;
  marketBuyHistory?: MarketBuyHistoryUpdateManyWithoutCoinHistoryRowIdInput;
  txhash?: String;
  userId?: UserUpdateOneWithoutUserCoinHistoryInput;
  walletId?: Int;
}

export interface CupAppSyncUpdateManyWithoutSerialNumberInput {
  create?:
    | CupAppSyncCreateWithoutSerialNumberInput[]
    | CupAppSyncCreateWithoutSerialNumberInput;
  delete?: CupAppSyncWhereUniqueInput[] | CupAppSyncWhereUniqueInput;
  connect?: CupAppSyncWhereUniqueInput[] | CupAppSyncWhereUniqueInput;
  set?: CupAppSyncWhereUniqueInput[] | CupAppSyncWhereUniqueInput;
  disconnect?: CupAppSyncWhereUniqueInput[] | CupAppSyncWhereUniqueInput;
  update?:
    | CupAppSyncUpdateWithWhereUniqueWithoutSerialNumberInput[]
    | CupAppSyncUpdateWithWhereUniqueWithoutSerialNumberInput;
  upsert?:
    | CupAppSyncUpsertWithWhereUniqueWithoutSerialNumberInput[]
    | CupAppSyncUpsertWithWhereUniqueWithoutSerialNumberInput;
  deleteMany?: CupAppSyncScalarWhereInput[] | CupAppSyncScalarWhereInput;
  updateMany?:
    | CupAppSyncUpdateManyWithWhereNestedInput[]
    | CupAppSyncUpdateManyWithWhereNestedInput;
}

export type CupDataQuestionWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CupAppSyncUpdateWithWhereUniqueWithoutSerialNumberInput {
  where: CupAppSyncWhereUniqueInput;
  data: CupAppSyncUpdateWithoutSerialNumberDataInput;
}

export interface UserRecordCameraDataByTimeUpdateInput {
  coinHistoryRowId?: UserCoinHistoryUpdateOneWithoutUserRecordCameraDataByTimeInput;
  confirmYn?: Boolean;
  deleteYn?: Boolean;
  height?: Float;
  imagePath?: String;
  locationX?: Float;
  locationY?: Float;
  size?: Float;
  width?: Float;
}

export interface CupAppSyncUpdateWithoutSerialNumberDataInput {
  appSynchTime?: DateTimeInput;
}

export interface UserCoinHistoryCreateOneWithoutUserRecordCameraDataByTimeInput {
  create?: UserCoinHistoryCreateWithoutUserRecordCameraDataByTimeInput;
  connect?: UserCoinHistoryWhereUniqueInput;
}

export interface CupAppSyncUpsertWithWhereUniqueWithoutSerialNumberInput {
  where: CupAppSyncWhereUniqueInput;
  update: CupAppSyncUpdateWithoutSerialNumberDataInput;
  create: CupAppSyncCreateWithoutSerialNumberInput;
}

export interface UserRecordCameraDataByTimeCreateInput {
  coinHistoryRowId?: UserCoinHistoryCreateOneWithoutUserRecordCameraDataByTimeInput;
  confirmYn?: Boolean;
  deleteYn?: Boolean;
  height?: Float;
  imagePath?: String;
  locationX?: Float;
  locationY?: Float;
  size?: Float;
  width?: Float;
}

export interface CupAppSyncScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  appSynchTime?: DateTimeInput;
  appSynchTime_not?: DateTimeInput;
  appSynchTime_in?: DateTimeInput[] | DateTimeInput;
  appSynchTime_not_in?: DateTimeInput[] | DateTimeInput;
  appSynchTime_lt?: DateTimeInput;
  appSynchTime_lte?: DateTimeInput;
  appSynchTime_gt?: DateTimeInput;
  appSynchTime_gte?: DateTimeInput;
  AND?: CupAppSyncScalarWhereInput[] | CupAppSyncScalarWhereInput;
  OR?: CupAppSyncScalarWhereInput[] | CupAppSyncScalarWhereInput;
  NOT?: CupAppSyncScalarWhereInput[] | CupAppSyncScalarWhereInput;
}

export interface UserInterviewQuestionUpdateInput {
  answerTypeId?: AnswerTypeUpdateOneRequiredWithoutUserInterviewQuestionsInput;
  question?: String;
  userInterviewData?: UserInterviewDatumUpdateManyWithoutQuestionIdInput;
}

export interface CupAppSyncUpdateManyWithWhereNestedInput {
  where: CupAppSyncScalarWhereInput;
  data: CupAppSyncUpdateManyDataInput;
}

export interface UserInterviewQuestionCreateInput {
  answerTypeId: AnswerTypeCreateOneWithoutUserInterviewQuestionsInput;
  question: String;
  userInterviewData?: UserInterviewDatumCreateManyWithoutQuestionIdInput;
}

export interface CupAppSyncUpdateManyDataInput {
  appSynchTime?: DateTimeInput;
}

export interface UserInterviewDatumUpdateInput {
  answerRange?: Int;
  answerText?: String;
  answerYn?: Boolean;
  date?: DateTimeInput;
  questionId?: UserInterviewQuestionUpdateOneRequiredWithoutUserInterviewDataInput;
  userId?: UserUpdateOneRequiredWithoutUserInterviewDataInput;
}

export interface CupDatumUpdateManyWithoutSerialNumberInput {
  create?:
    | CupDatumCreateWithoutSerialNumberInput[]
    | CupDatumCreateWithoutSerialNumberInput;
  delete?: CupDatumWhereUniqueInput[] | CupDatumWhereUniqueInput;
  connect?: CupDatumWhereUniqueInput[] | CupDatumWhereUniqueInput;
  set?: CupDatumWhereUniqueInput[] | CupDatumWhereUniqueInput;
  disconnect?: CupDatumWhereUniqueInput[] | CupDatumWhereUniqueInput;
  update?:
    | CupDatumUpdateWithWhereUniqueWithoutSerialNumberInput[]
    | CupDatumUpdateWithWhereUniqueWithoutSerialNumberInput;
  upsert?:
    | CupDatumUpsertWithWhereUniqueWithoutSerialNumberInput[]
    | CupDatumUpsertWithWhereUniqueWithoutSerialNumberInput;
  deleteMany?: CupDatumScalarWhereInput[] | CupDatumScalarWhereInput;
  updateMany?:
    | CupDatumUpdateManyWithWhereNestedInput[]
    | CupDatumUpdateManyWithWhereNestedInput;
}

export type CupDataUserRemoveWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CupDatumUpdateWithWhereUniqueWithoutSerialNumberInput {
  where: CupDatumWhereUniqueInput;
  data: CupDatumUpdateWithoutSerialNumberDataInput;
}

export interface UserCupCreateInput {
  serialNumber?: CupCreateOneWithoutUserCupsInput;
  userId?: UserCreateOneWithoutUserCupsInput;
}

export interface CupDatumUpdateWithoutSerialNumberDataInput {
  battery?: Int;
  calibFlag?: Boolean;
  ch1?: Int;
  ch10?: Int;
  ch11?: Int;
  ch12?: Int;
  ch13?: Int;
  ch14?: Int;
  ch2?: Int;
  ch3?: Int;
  ch4?: Int;
  ch5?: Int;
  ch6?: Int;
  ch7?: Int;
  ch8?: Int;
  ch9?: Int;
  colourB?: Int;
  colourC?: Int;
  colourG?: Int;
  colourR?: Int;
  cupDataColourCalc?: CupDataColourCalcUpdateManyWithoutCupDataRowIdInput;
  cupDataProcVolume?: CupDataProcVolumeUpdateManyWithoutCupDataRowIdInput;
  date?: DateTimeInput;
  day?: Int;
  hour?: Int;
  line?: Int;
  minute?: Int;
  month?: Int;
  page?: Int;
  rawTotalVolume?: Int;
  rawVolumeL?: Int;
  rawVolumeR?: Int;
  temperature?: Int;
  x?: Int;
  y?: Int;
  year?: Int;
  z?: Int;
}

export type CupDataUserRemoveExplainWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CupDataColourCalcUpdateManyWithoutCupDataRowIdInput {
  create?:
    | CupDataColourCalcCreateWithoutCupDataRowIdInput[]
    | CupDataColourCalcCreateWithoutCupDataRowIdInput;
  delete?:
    | CupDataColourCalcWhereUniqueInput[]
    | CupDataColourCalcWhereUniqueInput;
  connect?:
    | CupDataColourCalcWhereUniqueInput[]
    | CupDataColourCalcWhereUniqueInput;
  set?: CupDataColourCalcWhereUniqueInput[] | CupDataColourCalcWhereUniqueInput;
  disconnect?:
    | CupDataColourCalcWhereUniqueInput[]
    | CupDataColourCalcWhereUniqueInput;
  update?:
    | CupDataColourCalcUpdateWithWhereUniqueWithoutCupDataRowIdInput[]
    | CupDataColourCalcUpdateWithWhereUniqueWithoutCupDataRowIdInput;
  upsert?:
    | CupDataColourCalcUpsertWithWhereUniqueWithoutCupDataRowIdInput[]
    | CupDataColourCalcUpsertWithWhereUniqueWithoutCupDataRowIdInput;
  deleteMany?:
    | CupDataColourCalcScalarWhereInput[]
    | CupDataColourCalcScalarWhereInput;
  updateMany?:
    | CupDataColourCalcUpdateManyWithWhereNestedInput[]
    | CupDataColourCalcUpdateManyWithWhereNestedInput;
}

export interface UserCoinRewardsFeeUpdateInput {
  amount?: Int;
  contents?: String;
  createTime?: DateTimeInput;
  updateTime?: DateTimeInput;
}

export interface CupDataColourCalcUpdateWithWhereUniqueWithoutCupDataRowIdInput {
  where: CupDataColourCalcWhereUniqueInput;
  data: CupDataColourCalcUpdateWithoutCupDataRowIdDataInput;
}

export interface UserCoinHistoryUpdateManyMutationInput {
  category?: String;
  coin?: Int;
  contents?: String;
  date?: DateTimeInput;
  txhash?: String;
  walletId?: Int;
}

export interface CupDataColourCalcUpdateWithoutCupDataRowIdDataInput {
  blue?: Int;
  green?: Int;
  red?: Int;
}

export interface UserCoinHistoryUpdateInput {
  category?: String;
  coin?: Int;
  contents?: String;
  date?: DateTimeInput;
  marketBuyHistory?: MarketBuyHistoryUpdateManyWithoutCoinHistoryRowIdInput;
  txhash?: String;
  userId?: UserUpdateOneWithoutUserCoinHistoryInput;
  userRecordCameraDataByTime?: UserRecordCameraDataByTimeUpdateManyWithoutCoinHistoryRowIdInput;
  walletId?: Int;
}

export interface CupDataColourCalcUpsertWithWhereUniqueWithoutCupDataRowIdInput {
  where: CupDataColourCalcWhereUniqueInput;
  update: CupDataColourCalcUpdateWithoutCupDataRowIdDataInput;
  create: CupDataColourCalcCreateWithoutCupDataRowIdInput;
}

export interface UserUpdateManyMutationInput {
  anonUserId?: Int;
  countryId?: Int;
  deleted?: Boolean;
  deviceModel?: String;
  dob?: DateTimeInput;
  email?: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  firstName?: String;
  givenBirth?: Boolean;
  lastName?: String;
  macId?: String;
  password?: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
}

export interface CupDataColourCalcScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  blue?: Int;
  blue_not?: Int;
  blue_in?: Int[] | Int;
  blue_not_in?: Int[] | Int;
  blue_lt?: Int;
  blue_lte?: Int;
  blue_gt?: Int;
  blue_gte?: Int;
  green?: Int;
  green_not?: Int;
  green_in?: Int[] | Int;
  green_not_in?: Int[] | Int;
  green_lt?: Int;
  green_lte?: Int;
  green_gt?: Int;
  green_gte?: Int;
  red?: Int;
  red_not?: Int;
  red_in?: Int[] | Int;
  red_not_in?: Int[] | Int;
  red_lt?: Int;
  red_lte?: Int;
  red_gt?: Int;
  red_gte?: Int;
  AND?: CupDataColourCalcScalarWhereInput[] | CupDataColourCalcScalarWhereInput;
  OR?: CupDataColourCalcScalarWhereInput[] | CupDataColourCalcScalarWhereInput;
  NOT?: CupDataColourCalcScalarWhereInput[] | CupDataColourCalcScalarWhereInput;
}

export interface UserUpdateInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncUpdateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowUpdateManyWithoutUserIdInput;
  cupDataProcMdates?: CupDataProcMdateUpdateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseUpdateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob?: DateTimeInput;
  email?: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityUpdateOneWithoutUsersInput;
  firstName?: String;
  givenBirth?: Boolean;
  lastName?: String;
  macId?: String;
  password?: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryUpdateManyWithoutUserIdInput;
  userCups?: UserCupUpdateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumUpdateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodUpdateManyWithoutUserIdInput;
  userWallet?: UserWalletUpdateManyWithoutUserIdInput;
}

export interface CupDataColourCalcUpdateManyWithWhereNestedInput {
  where: CupDataColourCalcScalarWhereInput;
  data: CupDataColourCalcUpdateManyDataInput;
}

export interface PlatformCompUpdateManyMutationInput {
  phoneId?: Int;
  platformId?: Int;
  problemHistory?: Boolean;
  softwareId?: Int;
  successHistory?: Boolean;
}

export interface CupDataColourCalcUpdateManyDataInput {
  blue?: Int;
  green?: Int;
  red?: Int;
}

export type FirmwareWhereUniqueInput = AtLeastOne<{
  id: Int;
  fwVersion?: String;
}>;

export interface CupDataProcVolumeUpdateManyWithoutCupDataRowIdInput {
  create?:
    | CupDataProcVolumeCreateWithoutCupDataRowIdInput[]
    | CupDataProcVolumeCreateWithoutCupDataRowIdInput;
  delete?:
    | CupDataProcVolumeWhereUniqueInput[]
    | CupDataProcVolumeWhereUniqueInput;
  connect?:
    | CupDataProcVolumeWhereUniqueInput[]
    | CupDataProcVolumeWhereUniqueInput;
  set?: CupDataProcVolumeWhereUniqueInput[] | CupDataProcVolumeWhereUniqueInput;
  disconnect?:
    | CupDataProcVolumeWhereUniqueInput[]
    | CupDataProcVolumeWhereUniqueInput;
  update?:
    | CupDataProcVolumeUpdateWithWhereUniqueWithoutCupDataRowIdInput[]
    | CupDataProcVolumeUpdateWithWhereUniqueWithoutCupDataRowIdInput;
  upsert?:
    | CupDataProcVolumeUpsertWithWhereUniqueWithoutCupDataRowIdInput[]
    | CupDataProcVolumeUpsertWithWhereUniqueWithoutCupDataRowIdInput;
  deleteMany?:
    | CupDataProcVolumeScalarWhereInput[]
    | CupDataProcVolumeScalarWhereInput;
  updateMany?:
    | CupDataProcVolumeUpdateManyWithWhereNestedInput[]
    | CupDataProcVolumeUpdateManyWithWhereNestedInput;
}

export interface MarketListDetailUpdateManyMutationInput {
  contents?: String;
  detailImage?: String;
  mainImage?: String;
  price?: Int;
  savingPrice?: Int;
  subTitle?: String;
  title?: String;
}

export interface CupDataProcVolumeUpdateWithWhereUniqueWithoutCupDataRowIdInput {
  where: CupDataProcVolumeWhereUniqueInput;
  data: CupDataProcVolumeUpdateWithoutCupDataRowIdDataInput;
}

export interface MarketListUpdateWithoutMarketListDetailDataInput {
  count?: Int;
  endTime?: DateTimeInput;
  image?: String;
  price?: Int;
  startTime?: DateTimeInput;
  title?: String;
}

export interface CupDataProcVolumeUpdateWithoutCupDataRowIdDataInput {
  confidenceL?: Int;
  confidenceR?: Int;
  inVitro?: Boolean;
  volume?: Int;
  volumeAdj?: Int;
  volumeL?: Int;
  volumeR?: Int;
}

export interface MarketListUpdateOneWithoutMarketListDetailInput {
  create?: MarketListCreateWithoutMarketListDetailInput;
  update?: MarketListUpdateWithoutMarketListDetailDataInput;
  upsert?: MarketListUpsertWithoutMarketListDetailInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: MarketListWhereUniqueInput;
}

export interface CupDataProcVolumeUpsertWithWhereUniqueWithoutCupDataRowIdInput {
  where: CupDataProcVolumeWhereUniqueInput;
  update: CupDataProcVolumeUpdateWithoutCupDataRowIdDataInput;
  create: CupDataProcVolumeCreateWithoutCupDataRowIdInput;
}

export interface MarketListCreateWithoutMarketListDetailInput {
  count?: Int;
  endTime: DateTimeInput;
  image?: String;
  price?: Int;
  startTime: DateTimeInput;
  title?: String;
}

export interface CupDataProcVolumeScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  confidenceL?: Int;
  confidenceL_not?: Int;
  confidenceL_in?: Int[] | Int;
  confidenceL_not_in?: Int[] | Int;
  confidenceL_lt?: Int;
  confidenceL_lte?: Int;
  confidenceL_gt?: Int;
  confidenceL_gte?: Int;
  confidenceR?: Int;
  confidenceR_not?: Int;
  confidenceR_in?: Int[] | Int;
  confidenceR_not_in?: Int[] | Int;
  confidenceR_lt?: Int;
  confidenceR_lte?: Int;
  confidenceR_gt?: Int;
  confidenceR_gte?: Int;
  inVitro?: Boolean;
  inVitro_not?: Boolean;
  volume?: Int;
  volume_not?: Int;
  volume_in?: Int[] | Int;
  volume_not_in?: Int[] | Int;
  volume_lt?: Int;
  volume_lte?: Int;
  volume_gt?: Int;
  volume_gte?: Int;
  volumeAdj?: Int;
  volumeAdj_not?: Int;
  volumeAdj_in?: Int[] | Int;
  volumeAdj_not_in?: Int[] | Int;
  volumeAdj_lt?: Int;
  volumeAdj_lte?: Int;
  volumeAdj_gt?: Int;
  volumeAdj_gte?: Int;
  volumeL?: Int;
  volumeL_not?: Int;
  volumeL_in?: Int[] | Int;
  volumeL_not_in?: Int[] | Int;
  volumeL_lt?: Int;
  volumeL_lte?: Int;
  volumeL_gt?: Int;
  volumeL_gte?: Int;
  volumeR?: Int;
  volumeR_not?: Int;
  volumeR_in?: Int[] | Int;
  volumeR_not_in?: Int[] | Int;
  volumeR_lt?: Int;
  volumeR_lte?: Int;
  volumeR_gt?: Int;
  volumeR_gte?: Int;
  AND?: CupDataProcVolumeScalarWhereInput[] | CupDataProcVolumeScalarWhereInput;
  OR?: CupDataProcVolumeScalarWhereInput[] | CupDataProcVolumeScalarWhereInput;
  NOT?: CupDataProcVolumeScalarWhereInput[] | CupDataProcVolumeScalarWhereInput;
}

export type MarketAmazonCouponWhereUniqueInput = AtLeastOne<{
  id: Int;
  couponNumber?: String;
}>;

export interface CupDataProcVolumeUpdateManyWithWhereNestedInput {
  where: CupDataProcVolumeScalarWhereInput;
  data: CupDataProcVolumeUpdateManyDataInput;
}

export interface MarketAmazonCouponWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  availability?: Boolean;
  availability_not?: Boolean;
  couponNumber?: String;
  couponNumber_not?: String;
  couponNumber_in?: String[] | String;
  couponNumber_not_in?: String[] | String;
  couponNumber_lt?: String;
  couponNumber_lte?: String;
  couponNumber_gt?: String;
  couponNumber_gte?: String;
  couponNumber_contains?: String;
  couponNumber_not_contains?: String;
  couponNumber_starts_with?: String;
  couponNumber_not_starts_with?: String;
  couponNumber_ends_with?: String;
  couponNumber_not_ends_with?: String;
  createTime?: DateTimeInput;
  createTime_not?: DateTimeInput;
  createTime_in?: DateTimeInput[] | DateTimeInput;
  createTime_not_in?: DateTimeInput[] | DateTimeInput;
  createTime_lt?: DateTimeInput;
  createTime_lte?: DateTimeInput;
  createTime_gt?: DateTimeInput;
  createTime_gte?: DateTimeInput;
  endTime?: DateTimeInput;
  endTime_not?: DateTimeInput;
  endTime_in?: DateTimeInput[] | DateTimeInput;
  endTime_not_in?: DateTimeInput[] | DateTimeInput;
  endTime_lt?: DateTimeInput;
  endTime_lte?: DateTimeInput;
  endTime_gt?: DateTimeInput;
  endTime_gte?: DateTimeInput;
  marketListId?: Int;
  marketListId_not?: Int;
  marketListId_in?: Int[] | Int;
  marketListId_not_in?: Int[] | Int;
  marketListId_lt?: Int;
  marketListId_lte?: Int;
  marketListId_gt?: Int;
  marketListId_gte?: Int;
  price?: Int;
  price_not?: Int;
  price_in?: Int[] | Int;
  price_not_in?: Int[] | Int;
  price_lt?: Int;
  price_lte?: Int;
  price_gt?: Int;
  price_gte?: Int;
  startTime?: DateTimeInput;
  startTime_not?: DateTimeInput;
  startTime_in?: DateTimeInput[] | DateTimeInput;
  startTime_not_in?: DateTimeInput[] | DateTimeInput;
  startTime_lt?: DateTimeInput;
  startTime_lte?: DateTimeInput;
  startTime_gt?: DateTimeInput;
  startTime_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  AND?: MarketAmazonCouponWhereInput[] | MarketAmazonCouponWhereInput;
  OR?: MarketAmazonCouponWhereInput[] | MarketAmazonCouponWhereInput;
  NOT?: MarketAmazonCouponWhereInput[] | MarketAmazonCouponWhereInput;
}

export interface CupDataProcVolumeUpdateManyDataInput {
  confidenceL?: Int;
  confidenceR?: Int;
  inVitro?: Boolean;
  volume?: Int;
  volumeAdj?: Int;
  volumeL?: Int;
  volumeR?: Int;
}

export interface MarketListDetailUpdateManyDataInput {
  contents?: String;
  detailImage?: String;
  mainImage?: String;
  price?: Int;
  savingPrice?: Int;
  subTitle?: String;
  title?: String;
}

export interface CupDatumUpsertWithWhereUniqueWithoutSerialNumberInput {
  where: CupDatumWhereUniqueInput;
  update: CupDatumUpdateWithoutSerialNumberDataInput;
  create: CupDatumCreateWithoutSerialNumberInput;
}

export interface MarketListDetailScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  contents?: String;
  contents_not?: String;
  contents_in?: String[] | String;
  contents_not_in?: String[] | String;
  contents_lt?: String;
  contents_lte?: String;
  contents_gt?: String;
  contents_gte?: String;
  contents_contains?: String;
  contents_not_contains?: String;
  contents_starts_with?: String;
  contents_not_starts_with?: String;
  contents_ends_with?: String;
  contents_not_ends_with?: String;
  detailImage?: String;
  detailImage_not?: String;
  detailImage_in?: String[] | String;
  detailImage_not_in?: String[] | String;
  detailImage_lt?: String;
  detailImage_lte?: String;
  detailImage_gt?: String;
  detailImage_gte?: String;
  detailImage_contains?: String;
  detailImage_not_contains?: String;
  detailImage_starts_with?: String;
  detailImage_not_starts_with?: String;
  detailImage_ends_with?: String;
  detailImage_not_ends_with?: String;
  mainImage?: String;
  mainImage_not?: String;
  mainImage_in?: String[] | String;
  mainImage_not_in?: String[] | String;
  mainImage_lt?: String;
  mainImage_lte?: String;
  mainImage_gt?: String;
  mainImage_gte?: String;
  mainImage_contains?: String;
  mainImage_not_contains?: String;
  mainImage_starts_with?: String;
  mainImage_not_starts_with?: String;
  mainImage_ends_with?: String;
  mainImage_not_ends_with?: String;
  price?: Int;
  price_not?: Int;
  price_in?: Int[] | Int;
  price_not_in?: Int[] | Int;
  price_lt?: Int;
  price_lte?: Int;
  price_gt?: Int;
  price_gte?: Int;
  savingPrice?: Int;
  savingPrice_not?: Int;
  savingPrice_in?: Int[] | Int;
  savingPrice_not_in?: Int[] | Int;
  savingPrice_lt?: Int;
  savingPrice_lte?: Int;
  savingPrice_gt?: Int;
  savingPrice_gte?: Int;
  subTitle?: String;
  subTitle_not?: String;
  subTitle_in?: String[] | String;
  subTitle_not_in?: String[] | String;
  subTitle_lt?: String;
  subTitle_lte?: String;
  subTitle_gt?: String;
  subTitle_gte?: String;
  subTitle_contains?: String;
  subTitle_not_contains?: String;
  subTitle_starts_with?: String;
  subTitle_not_starts_with?: String;
  subTitle_ends_with?: String;
  subTitle_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  AND?: MarketListDetailScalarWhereInput[] | MarketListDetailScalarWhereInput;
  OR?: MarketListDetailScalarWhereInput[] | MarketListDetailScalarWhereInput;
  NOT?: MarketListDetailScalarWhereInput[] | MarketListDetailScalarWhereInput;
}

export interface CupDatumScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  battery?: Int;
  battery_not?: Int;
  battery_in?: Int[] | Int;
  battery_not_in?: Int[] | Int;
  battery_lt?: Int;
  battery_lte?: Int;
  battery_gt?: Int;
  battery_gte?: Int;
  calibFlag?: Boolean;
  calibFlag_not?: Boolean;
  ch1?: Int;
  ch1_not?: Int;
  ch1_in?: Int[] | Int;
  ch1_not_in?: Int[] | Int;
  ch1_lt?: Int;
  ch1_lte?: Int;
  ch1_gt?: Int;
  ch1_gte?: Int;
  ch10?: Int;
  ch10_not?: Int;
  ch10_in?: Int[] | Int;
  ch10_not_in?: Int[] | Int;
  ch10_lt?: Int;
  ch10_lte?: Int;
  ch10_gt?: Int;
  ch10_gte?: Int;
  ch11?: Int;
  ch11_not?: Int;
  ch11_in?: Int[] | Int;
  ch11_not_in?: Int[] | Int;
  ch11_lt?: Int;
  ch11_lte?: Int;
  ch11_gt?: Int;
  ch11_gte?: Int;
  ch12?: Int;
  ch12_not?: Int;
  ch12_in?: Int[] | Int;
  ch12_not_in?: Int[] | Int;
  ch12_lt?: Int;
  ch12_lte?: Int;
  ch12_gt?: Int;
  ch12_gte?: Int;
  ch13?: Int;
  ch13_not?: Int;
  ch13_in?: Int[] | Int;
  ch13_not_in?: Int[] | Int;
  ch13_lt?: Int;
  ch13_lte?: Int;
  ch13_gt?: Int;
  ch13_gte?: Int;
  ch14?: Int;
  ch14_not?: Int;
  ch14_in?: Int[] | Int;
  ch14_not_in?: Int[] | Int;
  ch14_lt?: Int;
  ch14_lte?: Int;
  ch14_gt?: Int;
  ch14_gte?: Int;
  ch2?: Int;
  ch2_not?: Int;
  ch2_in?: Int[] | Int;
  ch2_not_in?: Int[] | Int;
  ch2_lt?: Int;
  ch2_lte?: Int;
  ch2_gt?: Int;
  ch2_gte?: Int;
  ch3?: Int;
  ch3_not?: Int;
  ch3_in?: Int[] | Int;
  ch3_not_in?: Int[] | Int;
  ch3_lt?: Int;
  ch3_lte?: Int;
  ch3_gt?: Int;
  ch3_gte?: Int;
  ch4?: Int;
  ch4_not?: Int;
  ch4_in?: Int[] | Int;
  ch4_not_in?: Int[] | Int;
  ch4_lt?: Int;
  ch4_lte?: Int;
  ch4_gt?: Int;
  ch4_gte?: Int;
  ch5?: Int;
  ch5_not?: Int;
  ch5_in?: Int[] | Int;
  ch5_not_in?: Int[] | Int;
  ch5_lt?: Int;
  ch5_lte?: Int;
  ch5_gt?: Int;
  ch5_gte?: Int;
  ch6?: Int;
  ch6_not?: Int;
  ch6_in?: Int[] | Int;
  ch6_not_in?: Int[] | Int;
  ch6_lt?: Int;
  ch6_lte?: Int;
  ch6_gt?: Int;
  ch6_gte?: Int;
  ch7?: Int;
  ch7_not?: Int;
  ch7_in?: Int[] | Int;
  ch7_not_in?: Int[] | Int;
  ch7_lt?: Int;
  ch7_lte?: Int;
  ch7_gt?: Int;
  ch7_gte?: Int;
  ch8?: Int;
  ch8_not?: Int;
  ch8_in?: Int[] | Int;
  ch8_not_in?: Int[] | Int;
  ch8_lt?: Int;
  ch8_lte?: Int;
  ch8_gt?: Int;
  ch8_gte?: Int;
  ch9?: Int;
  ch9_not?: Int;
  ch9_in?: Int[] | Int;
  ch9_not_in?: Int[] | Int;
  ch9_lt?: Int;
  ch9_lte?: Int;
  ch9_gt?: Int;
  ch9_gte?: Int;
  colourB?: Int;
  colourB_not?: Int;
  colourB_in?: Int[] | Int;
  colourB_not_in?: Int[] | Int;
  colourB_lt?: Int;
  colourB_lte?: Int;
  colourB_gt?: Int;
  colourB_gte?: Int;
  colourC?: Int;
  colourC_not?: Int;
  colourC_in?: Int[] | Int;
  colourC_not_in?: Int[] | Int;
  colourC_lt?: Int;
  colourC_lte?: Int;
  colourC_gt?: Int;
  colourC_gte?: Int;
  colourG?: Int;
  colourG_not?: Int;
  colourG_in?: Int[] | Int;
  colourG_not_in?: Int[] | Int;
  colourG_lt?: Int;
  colourG_lte?: Int;
  colourG_gt?: Int;
  colourG_gte?: Int;
  colourR?: Int;
  colourR_not?: Int;
  colourR_in?: Int[] | Int;
  colourR_not_in?: Int[] | Int;
  colourR_lt?: Int;
  colourR_lte?: Int;
  colourR_gt?: Int;
  colourR_gte?: Int;
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[] | DateTimeInput;
  date_not_in?: DateTimeInput[] | DateTimeInput;
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  day?: Int;
  day_not?: Int;
  day_in?: Int[] | Int;
  day_not_in?: Int[] | Int;
  day_lt?: Int;
  day_lte?: Int;
  day_gt?: Int;
  day_gte?: Int;
  hour?: Int;
  hour_not?: Int;
  hour_in?: Int[] | Int;
  hour_not_in?: Int[] | Int;
  hour_lt?: Int;
  hour_lte?: Int;
  hour_gt?: Int;
  hour_gte?: Int;
  line?: Int;
  line_not?: Int;
  line_in?: Int[] | Int;
  line_not_in?: Int[] | Int;
  line_lt?: Int;
  line_lte?: Int;
  line_gt?: Int;
  line_gte?: Int;
  minute?: Int;
  minute_not?: Int;
  minute_in?: Int[] | Int;
  minute_not_in?: Int[] | Int;
  minute_lt?: Int;
  minute_lte?: Int;
  minute_gt?: Int;
  minute_gte?: Int;
  month?: Int;
  month_not?: Int;
  month_in?: Int[] | Int;
  month_not_in?: Int[] | Int;
  month_lt?: Int;
  month_lte?: Int;
  month_gt?: Int;
  month_gte?: Int;
  page?: Int;
  page_not?: Int;
  page_in?: Int[] | Int;
  page_not_in?: Int[] | Int;
  page_lt?: Int;
  page_lte?: Int;
  page_gt?: Int;
  page_gte?: Int;
  rawTotalVolume?: Int;
  rawTotalVolume_not?: Int;
  rawTotalVolume_in?: Int[] | Int;
  rawTotalVolume_not_in?: Int[] | Int;
  rawTotalVolume_lt?: Int;
  rawTotalVolume_lte?: Int;
  rawTotalVolume_gt?: Int;
  rawTotalVolume_gte?: Int;
  rawVolumeL?: Int;
  rawVolumeL_not?: Int;
  rawVolumeL_in?: Int[] | Int;
  rawVolumeL_not_in?: Int[] | Int;
  rawVolumeL_lt?: Int;
  rawVolumeL_lte?: Int;
  rawVolumeL_gt?: Int;
  rawVolumeL_gte?: Int;
  rawVolumeR?: Int;
  rawVolumeR_not?: Int;
  rawVolumeR_in?: Int[] | Int;
  rawVolumeR_not_in?: Int[] | Int;
  rawVolumeR_lt?: Int;
  rawVolumeR_lte?: Int;
  rawVolumeR_gt?: Int;
  rawVolumeR_gte?: Int;
  temperature?: Int;
  temperature_not?: Int;
  temperature_in?: Int[] | Int;
  temperature_not_in?: Int[] | Int;
  temperature_lt?: Int;
  temperature_lte?: Int;
  temperature_gt?: Int;
  temperature_gte?: Int;
  x?: Int;
  x_not?: Int;
  x_in?: Int[] | Int;
  x_not_in?: Int[] | Int;
  x_lt?: Int;
  x_lte?: Int;
  x_gt?: Int;
  x_gte?: Int;
  y?: Int;
  y_not?: Int;
  y_in?: Int[] | Int;
  y_not_in?: Int[] | Int;
  y_lt?: Int;
  y_lte?: Int;
  y_gt?: Int;
  y_gte?: Int;
  year?: Int;
  year_not?: Int;
  year_in?: Int[] | Int;
  year_not_in?: Int[] | Int;
  year_lt?: Int;
  year_lte?: Int;
  year_gt?: Int;
  year_gte?: Int;
  z?: Int;
  z_not?: Int;
  z_in?: Int[] | Int;
  z_not_in?: Int[] | Int;
  z_lt?: Int;
  z_lte?: Int;
  z_gt?: Int;
  z_gte?: Int;
  AND?: CupDatumScalarWhereInput[] | CupDatumScalarWhereInput;
  OR?: CupDatumScalarWhereInput[] | CupDatumScalarWhereInput;
  NOT?: CupDatumScalarWhereInput[] | CupDatumScalarWhereInput;
}

export interface MarketListDetailUpsertWithWhereUniqueWithoutMarketListIdInput {
  where: MarketListDetailWhereUniqueInput;
  update: MarketListDetailUpdateWithoutMarketListIdDataInput;
  create: MarketListDetailCreateWithoutMarketListIdInput;
}

export interface CupDatumUpdateManyWithWhereNestedInput {
  where: CupDatumScalarWhereInput;
  data: CupDatumUpdateManyDataInput;
}

export interface MarketListDetailUpdateWithWhereUniqueWithoutMarketListIdInput {
  where: MarketListDetailWhereUniqueInput;
  data: MarketListDetailUpdateWithoutMarketListIdDataInput;
}

export interface CupDatumUpdateManyDataInput {
  battery?: Int;
  calibFlag?: Boolean;
  ch1?: Int;
  ch10?: Int;
  ch11?: Int;
  ch12?: Int;
  ch13?: Int;
  ch14?: Int;
  ch2?: Int;
  ch3?: Int;
  ch4?: Int;
  ch5?: Int;
  ch6?: Int;
  ch7?: Int;
  ch8?: Int;
  ch9?: Int;
  colourB?: Int;
  colourC?: Int;
  colourG?: Int;
  colourR?: Int;
  date?: DateTimeInput;
  day?: Int;
  hour?: Int;
  line?: Int;
  minute?: Int;
  month?: Int;
  page?: Int;
  rawTotalVolume?: Int;
  rawVolumeL?: Int;
  rawVolumeR?: Int;
  temperature?: Int;
  x?: Int;
  y?: Int;
  year?: Int;
  z?: Int;
}

export interface MarketListDetailUpdateManyWithoutMarketListIdInput {
  create?:
    | MarketListDetailCreateWithoutMarketListIdInput[]
    | MarketListDetailCreateWithoutMarketListIdInput;
  delete?:
    | MarketListDetailWhereUniqueInput[]
    | MarketListDetailWhereUniqueInput;
  connect?:
    | MarketListDetailWhereUniqueInput[]
    | MarketListDetailWhereUniqueInput;
  set?: MarketListDetailWhereUniqueInput[] | MarketListDetailWhereUniqueInput;
  disconnect?:
    | MarketListDetailWhereUniqueInput[]
    | MarketListDetailWhereUniqueInput;
  update?:
    | MarketListDetailUpdateWithWhereUniqueWithoutMarketListIdInput[]
    | MarketListDetailUpdateWithWhereUniqueWithoutMarketListIdInput;
  upsert?:
    | MarketListDetailUpsertWithWhereUniqueWithoutMarketListIdInput[]
    | MarketListDetailUpsertWithWhereUniqueWithoutMarketListIdInput;
  deleteMany?:
    | MarketListDetailScalarWhereInput[]
    | MarketListDetailScalarWhereInput;
  updateMany?:
    | MarketListDetailUpdateManyWithWhereNestedInput[]
    | MarketListDetailUpdateManyWithWhereNestedInput;
}

export interface CupDataColourCalibUpdateManyWithoutSerialNumberInput {
  create?:
    | CupDataColourCalibCreateWithoutSerialNumberInput[]
    | CupDataColourCalibCreateWithoutSerialNumberInput;
  delete?:
    | CupDataColourCalibWhereUniqueInput[]
    | CupDataColourCalibWhereUniqueInput;
  connect?:
    | CupDataColourCalibWhereUniqueInput[]
    | CupDataColourCalibWhereUniqueInput;
  set?:
    | CupDataColourCalibWhereUniqueInput[]
    | CupDataColourCalibWhereUniqueInput;
  disconnect?:
    | CupDataColourCalibWhereUniqueInput[]
    | CupDataColourCalibWhereUniqueInput;
  update?:
    | CupDataColourCalibUpdateWithWhereUniqueWithoutSerialNumberInput[]
    | CupDataColourCalibUpdateWithWhereUniqueWithoutSerialNumberInput;
  upsert?:
    | CupDataColourCalibUpsertWithWhereUniqueWithoutSerialNumberInput[]
    | CupDataColourCalibUpsertWithWhereUniqueWithoutSerialNumberInput;
  deleteMany?:
    | CupDataColourCalibScalarWhereInput[]
    | CupDataColourCalibScalarWhereInput;
  updateMany?:
    | CupDataColourCalibUpdateManyWithWhereNestedInput[]
    | CupDataColourCalibUpdateManyWithWhereNestedInput;
}

export interface MarketListWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  count?: Int;
  count_not?: Int;
  count_in?: Int[] | Int;
  count_not_in?: Int[] | Int;
  count_lt?: Int;
  count_lte?: Int;
  count_gt?: Int;
  count_gte?: Int;
  endTime?: DateTimeInput;
  endTime_not?: DateTimeInput;
  endTime_in?: DateTimeInput[] | DateTimeInput;
  endTime_not_in?: DateTimeInput[] | DateTimeInput;
  endTime_lt?: DateTimeInput;
  endTime_lte?: DateTimeInput;
  endTime_gt?: DateTimeInput;
  endTime_gte?: DateTimeInput;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  marketListDetail_every?: MarketListDetailWhereInput;
  marketListDetail_some?: MarketListDetailWhereInput;
  marketListDetail_none?: MarketListDetailWhereInput;
  price?: Int;
  price_not?: Int;
  price_in?: Int[] | Int;
  price_not_in?: Int[] | Int;
  price_lt?: Int;
  price_lte?: Int;
  price_gt?: Int;
  price_gte?: Int;
  startTime?: DateTimeInput;
  startTime_not?: DateTimeInput;
  startTime_in?: DateTimeInput[] | DateTimeInput;
  startTime_not_in?: DateTimeInput[] | DateTimeInput;
  startTime_lt?: DateTimeInput;
  startTime_lte?: DateTimeInput;
  startTime_gt?: DateTimeInput;
  startTime_gte?: DateTimeInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  AND?: MarketListWhereInput[] | MarketListWhereInput;
  OR?: MarketListWhereInput[] | MarketListWhereInput;
  NOT?: MarketListWhereInput[] | MarketListWhereInput;
}

export interface CupDataColourCalibUpdateWithWhereUniqueWithoutSerialNumberInput {
  where: CupDataColourCalibWhereUniqueInput;
  data: CupDataColourCalibUpdateWithoutSerialNumberDataInput;
}

export interface MarketListUpdateInput {
  count?: Int;
  endTime?: DateTimeInput;
  image?: String;
  marketListDetail?: MarketListDetailUpdateManyWithoutMarketListIdInput;
  price?: Int;
  startTime?: DateTimeInput;
  title?: String;
}

export interface CupDataColourCalibUpdateWithoutSerialNumberDataInput {
  blue?: Int;
  c?: Int;
  green?: Int;
  red?: Int;
}

export interface MarketListDetailCreateManyWithoutMarketListIdInput {
  create?:
    | MarketListDetailCreateWithoutMarketListIdInput[]
    | MarketListDetailCreateWithoutMarketListIdInput;
  connect?:
    | MarketListDetailWhereUniqueInput[]
    | MarketListDetailWhereUniqueInput;
}

export interface CupDataColourCalibUpsertWithWhereUniqueWithoutSerialNumberInput {
  where: CupDataColourCalibWhereUniqueInput;
  update: CupDataColourCalibUpdateWithoutSerialNumberDataInput;
  create: CupDataColourCalibCreateWithoutSerialNumberInput;
}

export interface MarketBuyHistoryUpdateManyMutationInput {
  cancelYn?: Boolean;
  category?: String;
  createTime?: DateTimeInput;
  orderNumber?: String;
  productId?: Int;
  status?: Boolean;
  updateTime?: DateTimeInput;
  userId?: Int;
}

export interface CupDataColourCalibScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  blue?: Int;
  blue_not?: Int;
  blue_in?: Int[] | Int;
  blue_not_in?: Int[] | Int;
  blue_lt?: Int;
  blue_lte?: Int;
  blue_gt?: Int;
  blue_gte?: Int;
  c?: Int;
  c_not?: Int;
  c_in?: Int[] | Int;
  c_not_in?: Int[] | Int;
  c_lt?: Int;
  c_lte?: Int;
  c_gt?: Int;
  c_gte?: Int;
  green?: Int;
  green_not?: Int;
  green_in?: Int[] | Int;
  green_not_in?: Int[] | Int;
  green_lt?: Int;
  green_lte?: Int;
  green_gt?: Int;
  green_gte?: Int;
  red?: Int;
  red_not?: Int;
  red_in?: Int[] | Int;
  red_not_in?: Int[] | Int;
  red_lt?: Int;
  red_lte?: Int;
  red_gt?: Int;
  red_gte?: Int;
  AND?:
    | CupDataColourCalibScalarWhereInput[]
    | CupDataColourCalibScalarWhereInput;
  OR?:
    | CupDataColourCalibScalarWhereInput[]
    | CupDataColourCalibScalarWhereInput;
  NOT?:
    | CupDataColourCalibScalarWhereInput[]
    | CupDataColourCalibScalarWhereInput;
}

export interface UserCoinHistoryUpsertWithoutMarketBuyHistoryInput {
  update: UserCoinHistoryUpdateWithoutMarketBuyHistoryDataInput;
  create: UserCoinHistoryCreateWithoutMarketBuyHistoryInput;
}

export interface CupDataColourCalibUpdateManyWithWhereNestedInput {
  where: CupDataColourCalibScalarWhereInput;
  data: CupDataColourCalibUpdateManyDataInput;
}

export interface UserUpdateWithoutUserCoinHistoryDataInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncUpdateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowUpdateManyWithoutUserIdInput;
  cupDataProcMdates?: CupDataProcMdateUpdateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseUpdateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob?: DateTimeInput;
  email?: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityUpdateOneWithoutUsersInput;
  firstName?: String;
  givenBirth?: Boolean;
  lastName?: String;
  macId?: String;
  password?: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCups?: UserCupUpdateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumUpdateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodUpdateManyWithoutUserIdInput;
  userWallet?: UserWalletUpdateManyWithoutUserIdInput;
}

export interface CupDataColourCalibUpdateManyDataInput {
  blue?: Int;
  c?: Int;
  green?: Int;
  red?: Int;
}

export interface UserUpdateOneWithoutUserCoinHistoryInput {
  create?: UserCreateWithoutUserCoinHistoryInput;
  update?: UserUpdateWithoutUserCoinHistoryDataInput;
  upsert?: UserUpsertWithoutUserCoinHistoryInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface CupDataRawUpdateManyWithoutSerialNumberInput {
  create?:
    | CupDataRawCreateWithoutSerialNumberInput[]
    | CupDataRawCreateWithoutSerialNumberInput;
  delete?: CupDataRawWhereUniqueInput[] | CupDataRawWhereUniqueInput;
  connect?: CupDataRawWhereUniqueInput[] | CupDataRawWhereUniqueInput;
  set?: CupDataRawWhereUniqueInput[] | CupDataRawWhereUniqueInput;
  disconnect?: CupDataRawWhereUniqueInput[] | CupDataRawWhereUniqueInput;
  update?:
    | CupDataRawUpdateWithWhereUniqueWithoutSerialNumberInput[]
    | CupDataRawUpdateWithWhereUniqueWithoutSerialNumberInput;
  upsert?:
    | CupDataRawUpsertWithWhereUniqueWithoutSerialNumberInput[]
    | CupDataRawUpsertWithWhereUniqueWithoutSerialNumberInput;
  deleteMany?: CupDataRawScalarWhereInput[] | CupDataRawScalarWhereInput;
  updateMany?:
    | CupDataRawUpdateManyWithWhereNestedInput[]
    | CupDataRawUpdateManyWithWhereNestedInput;
}

export interface UserCoinHistoryUpdateWithoutMarketBuyHistoryDataInput {
  category?: String;
  coin?: Int;
  contents?: String;
  date?: DateTimeInput;
  txhash?: String;
  userId?: UserUpdateOneWithoutUserCoinHistoryInput;
  userRecordCameraDataByTime?: UserRecordCameraDataByTimeUpdateManyWithoutCoinHistoryRowIdInput;
  walletId?: Int;
}

export interface CupDataRawUpdateWithWhereUniqueWithoutSerialNumberInput {
  where: CupDataRawWhereUniqueInput;
  data: CupDataRawUpdateWithoutSerialNumberDataInput;
}

export interface MarketBuyHistoryUpdateInput {
  cancelYn?: Boolean;
  category?: String;
  coinHistoryRowId?: UserCoinHistoryUpdateOneWithoutMarketBuyHistoryInput;
  createTime?: DateTimeInput;
  orderNumber?: String;
  productId?: Int;
  status?: Boolean;
  updateTime?: DateTimeInput;
  userId?: Int;
}

export interface CupDataRawUpdateWithoutSerialNumberDataInput {
  pageData?: String;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Int;
  anonUserId?: Int;
  email?: String;
  referralCode?: String;
}>;

export interface CupDataRawUpsertWithWhereUniqueWithoutSerialNumberInput {
  where: CupDataRawWhereUniqueInput;
  update: CupDataRawUpdateWithoutSerialNumberDataInput;
  create: CupDataRawCreateWithoutSerialNumberInput;
}

export interface UserCoinHistoryCreateWithoutMarketBuyHistoryInput {
  category: String;
  coin: Int;
  contents: String;
  date: DateTimeInput;
  txhash: String;
  userId?: UserCreateOneWithoutUserCoinHistoryInput;
  userRecordCameraDataByTime?: UserRecordCameraDataByTimeCreateManyWithoutCoinHistoryRowIdInput;
  walletId?: Int;
}

export interface CupDataRawScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  pageData?: String;
  pageData_not?: String;
  pageData_in?: String[] | String;
  pageData_not_in?: String[] | String;
  pageData_lt?: String;
  pageData_lte?: String;
  pageData_gt?: String;
  pageData_gte?: String;
  pageData_contains?: String;
  pageData_not_contains?: String;
  pageData_starts_with?: String;
  pageData_not_starts_with?: String;
  pageData_ends_with?: String;
  pageData_not_ends_with?: String;
  AND?: CupDataRawScalarWhereInput[] | CupDataRawScalarWhereInput;
  OR?: CupDataRawScalarWhereInput[] | CupDataRawScalarWhereInput;
  NOT?: CupDataRawScalarWhereInput[] | CupDataRawScalarWhereInput;
}

export type UserCoinHistoryWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CupDataRawUpdateManyWithWhereNestedInput {
  where: CupDataRawScalarWhereInput;
  data: CupDataRawUpdateManyDataInput;
}

export interface MarketAmazonCouponUpdateManyMutationInput {
  availability?: Boolean;
  couponNumber?: String;
  createTime?: DateTimeInput;
  endTime?: DateTimeInput;
  marketListId?: Int;
  price?: Int;
  startTime?: DateTimeInput;
  title?: String;
}

export interface CupDataRawUpdateManyDataInput {
  pageData?: String;
}

export type UserCoinRewardsFeeWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface FirmwareUpdateOneWithoutCupInput {
  create?: FirmwareCreateWithoutCupInput;
  update?: FirmwareUpdateWithoutCupDataInput;
  upsert?: FirmwareUpsertWithoutCupInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: FirmwareWhereUniqueInput;
}

export interface UserCoinRewardsFeeWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  amount?: Int;
  amount_not?: Int;
  amount_in?: Int[] | Int;
  amount_not_in?: Int[] | Int;
  amount_lt?: Int;
  amount_lte?: Int;
  amount_gt?: Int;
  amount_gte?: Int;
  contents?: String;
  contents_not?: String;
  contents_in?: String[] | String;
  contents_not_in?: String[] | String;
  contents_lt?: String;
  contents_lte?: String;
  contents_gt?: String;
  contents_gte?: String;
  contents_contains?: String;
  contents_not_contains?: String;
  contents_starts_with?: String;
  contents_not_starts_with?: String;
  contents_ends_with?: String;
  contents_not_ends_with?: String;
  createTime?: DateTimeInput;
  createTime_not?: DateTimeInput;
  createTime_in?: DateTimeInput[] | DateTimeInput;
  createTime_not_in?: DateTimeInput[] | DateTimeInput;
  createTime_lt?: DateTimeInput;
  createTime_lte?: DateTimeInput;
  createTime_gt?: DateTimeInput;
  createTime_gte?: DateTimeInput;
  updateTime?: DateTimeInput;
  updateTime_not?: DateTimeInput;
  updateTime_in?: DateTimeInput[] | DateTimeInput;
  updateTime_not_in?: DateTimeInput[] | DateTimeInput;
  updateTime_lt?: DateTimeInput;
  updateTime_lte?: DateTimeInput;
  updateTime_gt?: DateTimeInput;
  updateTime_gte?: DateTimeInput;
  AND?: UserCoinRewardsFeeWhereInput[] | UserCoinRewardsFeeWhereInput;
  OR?: UserCoinRewardsFeeWhereInput[] | UserCoinRewardsFeeWhereInput;
  NOT?: UserCoinRewardsFeeWhereInput[] | UserCoinRewardsFeeWhereInput;
}

export interface FirmwareUpdateWithoutCupDataInput {
  fwVersion?: String;
}

export interface CupUpsertWithWhereUniqueWithoutHwIdInput {
  where: CupWhereUniqueInput;
  update: CupUpdateWithoutHwIdDataInput;
  create: CupCreateWithoutHwIdInput;
}

export interface FirmwareUpsertWithoutCupInput {
  update: FirmwareUpdateWithoutCupDataInput;
  create: FirmwareCreateWithoutCupInput;
}

export interface CupUpdateWithWhereUniqueWithoutHwIdInput {
  where: CupWhereUniqueInput;
  data: CupUpdateWithoutHwIdDataInput;
}

export interface HardwareUpdateOneWithoutCupInput {
  create?: HardwareCreateWithoutCupInput;
  update?: HardwareUpdateWithoutCupDataInput;
  upsert?: HardwareUpsertWithoutCupInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: HardwareWhereUniqueInput;
}

export interface CupUpdateManyWithoutHwIdInput {
  create?: CupCreateWithoutHwIdInput[] | CupCreateWithoutHwIdInput;
  delete?: CupWhereUniqueInput[] | CupWhereUniqueInput;
  connect?: CupWhereUniqueInput[] | CupWhereUniqueInput;
  set?: CupWhereUniqueInput[] | CupWhereUniqueInput;
  disconnect?: CupWhereUniqueInput[] | CupWhereUniqueInput;
  update?:
    | CupUpdateWithWhereUniqueWithoutHwIdInput[]
    | CupUpdateWithWhereUniqueWithoutHwIdInput;
  upsert?:
    | CupUpsertWithWhereUniqueWithoutHwIdInput[]
    | CupUpsertWithWhereUniqueWithoutHwIdInput;
  deleteMany?: CupScalarWhereInput[] | CupScalarWhereInput;
  updateMany?:
    | CupUpdateManyWithWhereNestedInput[]
    | CupUpdateManyWithWhereNestedInput;
}

export interface HardwareUpdateWithoutCupDataInput {
  hwVersion?: String;
}

export interface CupCreateWithoutHwIdInput {
  anonSerialNumber: Int;
  calibId?: CalibrationCreateOneWithoutCupInput;
  companyId?: CompanyCreateOneWithoutCupInput;
  cupAppSync?: CupAppSyncCreateManyWithoutSerialNumberInput;
  cupData?: CupDatumCreateManyWithoutSerialNumberInput;
  cupDataColourCalib?: CupDataColourCalibCreateManyWithoutSerialNumberInput;
  cupDataRaw?: CupDataRawCreateManyWithoutSerialNumberInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutSerialNumberInput;
  encryptionKey: Int;
  fwId?: FirmwareCreateOneWithoutCupInput;
  userCups?: UserCupCreateManyWithoutSerialNumberInput;
}

export interface HardwareUpsertWithoutCupInput {
  update: HardwareUpdateWithoutCupDataInput;
  create: HardwareCreateWithoutCupInput;
}

export interface CupCreateManyWithoutHwIdInput {
  create?: CupCreateWithoutHwIdInput[] | CupCreateWithoutHwIdInput;
  connect?: CupWhereUniqueInput[] | CupWhereUniqueInput;
}

export interface UserCupUpdateManyWithoutSerialNumberInput {
  create?:
    | UserCupCreateWithoutSerialNumberInput[]
    | UserCupCreateWithoutSerialNumberInput;
  delete?: UserCupWhereUniqueInput[] | UserCupWhereUniqueInput;
  connect?: UserCupWhereUniqueInput[] | UserCupWhereUniqueInput;
  set?: UserCupWhereUniqueInput[] | UserCupWhereUniqueInput;
  disconnect?: UserCupWhereUniqueInput[] | UserCupWhereUniqueInput;
  update?:
    | UserCupUpdateWithWhereUniqueWithoutSerialNumberInput[]
    | UserCupUpdateWithWhereUniqueWithoutSerialNumberInput;
  upsert?:
    | UserCupUpsertWithWhereUniqueWithoutSerialNumberInput[]
    | UserCupUpsertWithWhereUniqueWithoutSerialNumberInput;
  deleteMany?: UserCupScalarWhereInput[] | UserCupScalarWhereInput;
}

export interface FirmwareUpdateManyMutationInput {
  fwVersion?: String;
}

export interface UserCupUpdateWithWhereUniqueWithoutSerialNumberInput {
  where: UserCupWhereUniqueInput;
  data: UserCupUpdateWithoutSerialNumberDataInput;
}

export interface CupUpsertWithWhereUniqueWithoutFwIdInput {
  where: CupWhereUniqueInput;
  update: CupUpdateWithoutFwIdDataInput;
  create: CupCreateWithoutFwIdInput;
}

export interface UserCupUpdateWithoutSerialNumberDataInput {
  userId?: UserUpdateOneWithoutUserCupsInput;
}

export interface CupUpdateWithWhereUniqueWithoutFwIdInput {
  where: CupWhereUniqueInput;
  data: CupUpdateWithoutFwIdDataInput;
}

export interface UserUpdateOneWithoutUserCupsInput {
  create?: UserCreateWithoutUserCupsInput;
  update?: UserUpdateWithoutUserCupsDataInput;
  upsert?: UserUpsertWithoutUserCupsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface CupUpdateManyWithoutFwIdInput {
  create?: CupCreateWithoutFwIdInput[] | CupCreateWithoutFwIdInput;
  delete?: CupWhereUniqueInput[] | CupWhereUniqueInput;
  connect?: CupWhereUniqueInput[] | CupWhereUniqueInput;
  set?: CupWhereUniqueInput[] | CupWhereUniqueInput;
  disconnect?: CupWhereUniqueInput[] | CupWhereUniqueInput;
  update?:
    | CupUpdateWithWhereUniqueWithoutFwIdInput[]
    | CupUpdateWithWhereUniqueWithoutFwIdInput;
  upsert?:
    | CupUpsertWithWhereUniqueWithoutFwIdInput[]
    | CupUpsertWithWhereUniqueWithoutFwIdInput;
  deleteMany?: CupScalarWhereInput[] | CupScalarWhereInput;
  updateMany?:
    | CupUpdateManyWithWhereNestedInput[]
    | CupUpdateManyWithWhereNestedInput;
}

export interface UserUpdateWithoutUserCupsDataInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncUpdateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowUpdateManyWithoutUserIdInput;
  cupDataProcMdates?: CupDataProcMdateUpdateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseUpdateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob?: DateTimeInput;
  email?: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityUpdateOneWithoutUsersInput;
  firstName?: String;
  givenBirth?: Boolean;
  lastName?: String;
  macId?: String;
  password?: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryUpdateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumUpdateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodUpdateManyWithoutUserIdInput;
  userWallet?: UserWalletUpdateManyWithoutUserIdInput;
}

export interface CupCreateWithoutFwIdInput {
  anonSerialNumber: Int;
  calibId?: CalibrationCreateOneWithoutCupInput;
  companyId?: CompanyCreateOneWithoutCupInput;
  cupAppSync?: CupAppSyncCreateManyWithoutSerialNumberInput;
  cupData?: CupDatumCreateManyWithoutSerialNumberInput;
  cupDataColourCalib?: CupDataColourCalibCreateManyWithoutSerialNumberInput;
  cupDataRaw?: CupDataRawCreateManyWithoutSerialNumberInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutSerialNumberInput;
  encryptionKey: Int;
  hwId?: HardwareCreateOneWithoutCupInput;
  userCups?: UserCupCreateManyWithoutSerialNumberInput;
}

export interface EthnicityUpdateOneWithoutUsersInput {
  create?: EthnicityCreateWithoutUsersInput;
  update?: EthnicityUpdateWithoutUsersDataInput;
  upsert?: EthnicityUpsertWithoutUsersInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: EthnicityWhereUniqueInput;
}

export interface CupCreateManyWithoutFwIdInput {
  create?: CupCreateWithoutFwIdInput[] | CupCreateWithoutFwIdInput;
  connect?: CupWhereUniqueInput[] | CupWhereUniqueInput;
}

export interface EthnicityUpdateWithoutUsersDataInput {
  ethnicity?: String;
}

export interface EthnicityUpdateManyMutationInput {
  ethnicity?: String;
}

export interface EthnicityUpsertWithoutUsersInput {
  update: EthnicityUpdateWithoutUsersDataInput;
  create: EthnicityCreateWithoutUsersInput;
}

export interface UserUpdateManyDataInput {
  anonUserId?: Int;
  countryId?: Int;
  deleted?: Boolean;
  deviceModel?: String;
  dob?: DateTimeInput;
  email?: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  firstName?: String;
  givenBirth?: Boolean;
  lastName?: String;
  macId?: String;
  password?: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
}

export interface UserCoinHistoryUpdateManyWithoutUserIdInput {
  create?:
    | UserCoinHistoryCreateWithoutUserIdInput[]
    | UserCoinHistoryCreateWithoutUserIdInput;
  delete?: UserCoinHistoryWhereUniqueInput[] | UserCoinHistoryWhereUniqueInput;
  connect?: UserCoinHistoryWhereUniqueInput[] | UserCoinHistoryWhereUniqueInput;
  set?: UserCoinHistoryWhereUniqueInput[] | UserCoinHistoryWhereUniqueInput;
  disconnect?:
    | UserCoinHistoryWhereUniqueInput[]
    | UserCoinHistoryWhereUniqueInput;
  update?:
    | UserCoinHistoryUpdateWithWhereUniqueWithoutUserIdInput[]
    | UserCoinHistoryUpdateWithWhereUniqueWithoutUserIdInput;
  upsert?:
    | UserCoinHistoryUpsertWithWhereUniqueWithoutUserIdInput[]
    | UserCoinHistoryUpsertWithWhereUniqueWithoutUserIdInput;
  deleteMany?:
    | UserCoinHistoryScalarWhereInput[]
    | UserCoinHistoryScalarWhereInput;
  updateMany?:
    | UserCoinHistoryUpdateManyWithWhereNestedInput[]
    | UserCoinHistoryUpdateManyWithWhereNestedInput;
}

export interface UserScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  anonUserId?: Int;
  anonUserId_not?: Int;
  anonUserId_in?: Int[] | Int;
  anonUserId_not_in?: Int[] | Int;
  anonUserId_lt?: Int;
  anonUserId_lte?: Int;
  anonUserId_gt?: Int;
  anonUserId_gte?: Int;
  countryId?: Int;
  countryId_not?: Int;
  countryId_in?: Int[] | Int;
  countryId_not_in?: Int[] | Int;
  countryId_lt?: Int;
  countryId_lte?: Int;
  countryId_gt?: Int;
  countryId_gte?: Int;
  deleted?: Boolean;
  deleted_not?: Boolean;
  deviceModel?: String;
  deviceModel_not?: String;
  deviceModel_in?: String[] | String;
  deviceModel_not_in?: String[] | String;
  deviceModel_lt?: String;
  deviceModel_lte?: String;
  deviceModel_gt?: String;
  deviceModel_gte?: String;
  deviceModel_contains?: String;
  deviceModel_not_contains?: String;
  deviceModel_starts_with?: String;
  deviceModel_not_starts_with?: String;
  deviceModel_ends_with?: String;
  deviceModel_not_ends_with?: String;
  dob?: DateTimeInput;
  dob_not?: DateTimeInput;
  dob_in?: DateTimeInput[] | DateTimeInput;
  dob_not_in?: DateTimeInput[] | DateTimeInput;
  dob_lt?: DateTimeInput;
  dob_lte?: DateTimeInput;
  dob_gt?: DateTimeInput;
  dob_gte?: DateTimeInput;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  emailVerify?: Boolean;
  emailVerify_not?: Boolean;
  encryptSaltString?: String;
  encryptSaltString_not?: String;
  encryptSaltString_in?: String[] | String;
  encryptSaltString_not_in?: String[] | String;
  encryptSaltString_lt?: String;
  encryptSaltString_lte?: String;
  encryptSaltString_gt?: String;
  encryptSaltString_gte?: String;
  encryptSaltString_contains?: String;
  encryptSaltString_not_contains?: String;
  encryptSaltString_starts_with?: String;
  encryptSaltString_not_starts_with?: String;
  encryptSaltString_ends_with?: String;
  encryptSaltString_not_ends_with?: String;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  givenBirth?: Boolean;
  givenBirth_not?: Boolean;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  macId?: String;
  macId_not?: String;
  macId_in?: String[] | String;
  macId_not_in?: String[] | String;
  macId_lt?: String;
  macId_lte?: String;
  macId_gt?: String;
  macId_gte?: String;
  macId_contains?: String;
  macId_not_contains?: String;
  macId_starts_with?: String;
  macId_not_starts_with?: String;
  macId_ends_with?: String;
  macId_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  personalHealthRecord?: Boolean;
  personalHealthRecord_not?: Boolean;
  referralCode?: String;
  referralCode_not?: String;
  referralCode_in?: String[] | String;
  referralCode_not_in?: String[] | String;
  referralCode_lt?: String;
  referralCode_lte?: String;
  referralCode_gt?: String;
  referralCode_gte?: String;
  referralCode_contains?: String;
  referralCode_not_contains?: String;
  referralCode_starts_with?: String;
  referralCode_not_starts_with?: String;
  referralCode_ends_with?: String;
  referralCode_not_ends_with?: String;
  tutorial?: Boolean;
  tutorial_not?: Boolean;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface UserCoinHistoryUpdateWithWhereUniqueWithoutUserIdInput {
  where: UserCoinHistoryWhereUniqueInput;
  data: UserCoinHistoryUpdateWithoutUserIdDataInput;
}

export interface UserUpsertWithWhereUniqueWithoutEthnicityIdInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutEthnicityIdDataInput;
  create: UserCreateWithoutEthnicityIdInput;
}

export interface UserCoinHistoryUpdateWithoutUserIdDataInput {
  category?: String;
  coin?: Int;
  contents?: String;
  date?: DateTimeInput;
  marketBuyHistory?: MarketBuyHistoryUpdateManyWithoutCoinHistoryRowIdInput;
  txhash?: String;
  userRecordCameraDataByTime?: UserRecordCameraDataByTimeUpdateManyWithoutCoinHistoryRowIdInput;
  walletId?: Int;
}

export interface UserUpdateWithWhereUniqueWithoutEthnicityIdInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutEthnicityIdDataInput;
}

export interface MarketBuyHistoryUpdateManyWithoutCoinHistoryRowIdInput {
  create?:
    | MarketBuyHistoryCreateWithoutCoinHistoryRowIdInput[]
    | MarketBuyHistoryCreateWithoutCoinHistoryRowIdInput;
  delete?:
    | MarketBuyHistoryWhereUniqueInput[]
    | MarketBuyHistoryWhereUniqueInput;
  connect?:
    | MarketBuyHistoryWhereUniqueInput[]
    | MarketBuyHistoryWhereUniqueInput;
  set?: MarketBuyHistoryWhereUniqueInput[] | MarketBuyHistoryWhereUniqueInput;
  disconnect?:
    | MarketBuyHistoryWhereUniqueInput[]
    | MarketBuyHistoryWhereUniqueInput;
  update?:
    | MarketBuyHistoryUpdateWithWhereUniqueWithoutCoinHistoryRowIdInput[]
    | MarketBuyHistoryUpdateWithWhereUniqueWithoutCoinHistoryRowIdInput;
  upsert?:
    | MarketBuyHistoryUpsertWithWhereUniqueWithoutCoinHistoryRowIdInput[]
    | MarketBuyHistoryUpsertWithWhereUniqueWithoutCoinHistoryRowIdInput;
  deleteMany?:
    | MarketBuyHistoryScalarWhereInput[]
    | MarketBuyHistoryScalarWhereInput;
  updateMany?:
    | MarketBuyHistoryUpdateManyWithWhereNestedInput[]
    | MarketBuyHistoryUpdateManyWithWhereNestedInput;
}

export interface UserUpdateManyWithoutEthnicityIdInput {
  create?:
    | UserCreateWithoutEthnicityIdInput[]
    | UserCreateWithoutEthnicityIdInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutEthnicityIdInput[]
    | UserUpdateWithWhereUniqueWithoutEthnicityIdInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutEthnicityIdInput[]
    | UserUpsertWithWhereUniqueWithoutEthnicityIdInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface MarketBuyHistoryUpdateWithWhereUniqueWithoutCoinHistoryRowIdInput {
  where: MarketBuyHistoryWhereUniqueInput;
  data: MarketBuyHistoryUpdateWithoutCoinHistoryRowIdDataInput;
}

export interface UserCreateWithoutEthnicityIdInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncCreateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowCreateManyWithoutUserIdInput;
  cupDataProcMdates?: CupDataProcMdateCreateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseCreateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob: DateTimeInput;
  email: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  firstName: String;
  givenBirth: Boolean;
  lastName: String;
  macId?: String;
  password: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryCreateManyWithoutUserIdInput;
  userCups?: UserCupCreateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumCreateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodCreateManyWithoutUserIdInput;
  userWallet?: UserWalletCreateManyWithoutUserIdInput;
}

export interface MarketBuyHistoryUpdateWithoutCoinHistoryRowIdDataInput {
  cancelYn?: Boolean;
  category?: String;
  createTime?: DateTimeInput;
  orderNumber?: String;
  productId?: Int;
  status?: Boolean;
  updateTime?: DateTimeInput;
  userId?: Int;
}

export interface UserCreateManyWithoutEthnicityIdInput {
  create?:
    | UserCreateWithoutEthnicityIdInput[]
    | UserCreateWithoutEthnicityIdInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface MarketBuyHistoryUpsertWithWhereUniqueWithoutCoinHistoryRowIdInput {
  where: MarketBuyHistoryWhereUniqueInput;
  update: MarketBuyHistoryUpdateWithoutCoinHistoryRowIdDataInput;
  create: MarketBuyHistoryCreateWithoutCoinHistoryRowIdInput;
}

export interface EthnicityCreateInput {
  ethnicity: String;
  users?: UserCreateManyWithoutEthnicityIdInput;
}

export interface MarketBuyHistoryScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  cancelYn?: Boolean;
  cancelYn_not?: Boolean;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  createTime?: DateTimeInput;
  createTime_not?: DateTimeInput;
  createTime_in?: DateTimeInput[] | DateTimeInput;
  createTime_not_in?: DateTimeInput[] | DateTimeInput;
  createTime_lt?: DateTimeInput;
  createTime_lte?: DateTimeInput;
  createTime_gt?: DateTimeInput;
  createTime_gte?: DateTimeInput;
  orderNumber?: String;
  orderNumber_not?: String;
  orderNumber_in?: String[] | String;
  orderNumber_not_in?: String[] | String;
  orderNumber_lt?: String;
  orderNumber_lte?: String;
  orderNumber_gt?: String;
  orderNumber_gte?: String;
  orderNumber_contains?: String;
  orderNumber_not_contains?: String;
  orderNumber_starts_with?: String;
  orderNumber_not_starts_with?: String;
  orderNumber_ends_with?: String;
  orderNumber_not_ends_with?: String;
  productId?: Int;
  productId_not?: Int;
  productId_in?: Int[] | Int;
  productId_not_in?: Int[] | Int;
  productId_lt?: Int;
  productId_lte?: Int;
  productId_gt?: Int;
  productId_gte?: Int;
  status?: Boolean;
  status_not?: Boolean;
  updateTime?: DateTimeInput;
  updateTime_not?: DateTimeInput;
  updateTime_in?: DateTimeInput[] | DateTimeInput;
  updateTime_not_in?: DateTimeInput[] | DateTimeInput;
  updateTime_lt?: DateTimeInput;
  updateTime_lte?: DateTimeInput;
  updateTime_gt?: DateTimeInput;
  updateTime_gte?: DateTimeInput;
  userId?: Int;
  userId_not?: Int;
  userId_in?: Int[] | Int;
  userId_not_in?: Int[] | Int;
  userId_lt?: Int;
  userId_lte?: Int;
  userId_gt?: Int;
  userId_gte?: Int;
  AND?: MarketBuyHistoryScalarWhereInput[] | MarketBuyHistoryScalarWhereInput;
  OR?: MarketBuyHistoryScalarWhereInput[] | MarketBuyHistoryScalarWhereInput;
  NOT?: MarketBuyHistoryScalarWhereInput[] | MarketBuyHistoryScalarWhereInput;
}

export interface CupDatumUpdateInput {
  battery?: Int;
  calibFlag?: Boolean;
  ch1?: Int;
  ch10?: Int;
  ch11?: Int;
  ch12?: Int;
  ch13?: Int;
  ch14?: Int;
  ch2?: Int;
  ch3?: Int;
  ch4?: Int;
  ch5?: Int;
  ch6?: Int;
  ch7?: Int;
  ch8?: Int;
  ch9?: Int;
  colourB?: Int;
  colourC?: Int;
  colourG?: Int;
  colourR?: Int;
  cupDataColourCalc?: CupDataColourCalcUpdateManyWithoutCupDataRowIdInput;
  cupDataProcVolume?: CupDataProcVolumeUpdateManyWithoutCupDataRowIdInput;
  date?: DateTimeInput;
  day?: Int;
  hour?: Int;
  line?: Int;
  minute?: Int;
  month?: Int;
  page?: Int;
  rawTotalVolume?: Int;
  rawVolumeL?: Int;
  rawVolumeR?: Int;
  serialNumber?: CupUpdateOneWithoutCupDataInput;
  temperature?: Int;
  x?: Int;
  y?: Int;
  year?: Int;
  z?: Int;
}

export interface MarketBuyHistoryUpdateManyWithWhereNestedInput {
  where: MarketBuyHistoryScalarWhereInput;
  data: MarketBuyHistoryUpdateManyDataInput;
}

export interface CupDataUserRemoveExplainUpdateManyMutationInput {
  explain?: String;
}

export interface MarketBuyHistoryUpdateManyDataInput {
  cancelYn?: Boolean;
  category?: String;
  createTime?: DateTimeInput;
  orderNumber?: String;
  productId?: Int;
  status?: Boolean;
  updateTime?: DateTimeInput;
  userId?: Int;
}

export interface AdditionalInfoCreateInput {
  abnormalUltrasoundFinding: Boolean;
  conditionSurgicalHistory?: String;
  cycle?: Int;
  cycleIrregular: Boolean;
  ethnicity?: String;
  height: Float;
  inUseMenstrualCup?: String;
  inUseMenstrualCupSize?: String;
  iudImplanonExpireDate?: DateTimeInput;
  iudImplanonInsertDate?: DateTimeInput;
  lastPeriodDate: DateTimeInput;
  medicineList?: String;
  period?: Int;
  periodIrregular: Boolean;
  userId?: Int;
  weight: Float;
}

export interface UserRecordCameraDataByTimeUpdateManyWithoutCoinHistoryRowIdInput {
  create?:
    | UserRecordCameraDataByTimeCreateWithoutCoinHistoryRowIdInput[]
    | UserRecordCameraDataByTimeCreateWithoutCoinHistoryRowIdInput;
  delete?:
    | UserRecordCameraDataByTimeWhereUniqueInput[]
    | UserRecordCameraDataByTimeWhereUniqueInput;
  connect?:
    | UserRecordCameraDataByTimeWhereUniqueInput[]
    | UserRecordCameraDataByTimeWhereUniqueInput;
  set?:
    | UserRecordCameraDataByTimeWhereUniqueInput[]
    | UserRecordCameraDataByTimeWhereUniqueInput;
  disconnect?:
    | UserRecordCameraDataByTimeWhereUniqueInput[]
    | UserRecordCameraDataByTimeWhereUniqueInput;
  update?:
    | UserRecordCameraDataByTimeUpdateWithWhereUniqueWithoutCoinHistoryRowIdInput[]
    | UserRecordCameraDataByTimeUpdateWithWhereUniqueWithoutCoinHistoryRowIdInput;
  upsert?:
    | UserRecordCameraDataByTimeUpsertWithWhereUniqueWithoutCoinHistoryRowIdInput[]
    | UserRecordCameraDataByTimeUpsertWithWhereUniqueWithoutCoinHistoryRowIdInput;
  deleteMany?:
    | UserRecordCameraDataByTimeScalarWhereInput[]
    | UserRecordCameraDataByTimeScalarWhereInput;
  updateMany?:
    | UserRecordCameraDataByTimeUpdateManyWithWhereNestedInput[]
    | UserRecordCameraDataByTimeUpdateManyWithWhereNestedInput;
}

export interface AdditionalInfoUpdateManyMutationInput {
  abnormalUltrasoundFinding?: Boolean;
  conditionSurgicalHistory?: String;
  cycle?: Int;
  cycleIrregular?: Boolean;
  ethnicity?: String;
  height?: Float;
  inUseMenstrualCup?: String;
  inUseMenstrualCupSize?: String;
  iudImplanonExpireDate?: DateTimeInput;
  iudImplanonInsertDate?: DateTimeInput;
  lastPeriodDate?: DateTimeInput;
  medicineList?: String;
  period?: Int;
  periodIrregular?: Boolean;
  userId?: Int;
  weight?: Float;
}

export interface UserRecordCameraDataByTimeWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  coinHistoryRowId?: UserCoinHistoryWhereInput;
  confirmYn?: Boolean;
  confirmYn_not?: Boolean;
  deleteYn?: Boolean;
  deleteYn_not?: Boolean;
  height?: Float;
  height_not?: Float;
  height_in?: Float[] | Float;
  height_not_in?: Float[] | Float;
  height_lt?: Float;
  height_lte?: Float;
  height_gt?: Float;
  height_gte?: Float;
  imagePath?: String;
  imagePath_not?: String;
  imagePath_in?: String[] | String;
  imagePath_not_in?: String[] | String;
  imagePath_lt?: String;
  imagePath_lte?: String;
  imagePath_gt?: String;
  imagePath_gte?: String;
  imagePath_contains?: String;
  imagePath_not_contains?: String;
  imagePath_starts_with?: String;
  imagePath_not_starts_with?: String;
  imagePath_ends_with?: String;
  imagePath_not_ends_with?: String;
  locationX?: Float;
  locationX_not?: Float;
  locationX_in?: Float[] | Float;
  locationX_not_in?: Float[] | Float;
  locationX_lt?: Float;
  locationX_lte?: Float;
  locationX_gt?: Float;
  locationX_gte?: Float;
  locationY?: Float;
  locationY_not?: Float;
  locationY_in?: Float[] | Float;
  locationY_not_in?: Float[] | Float;
  locationY_lt?: Float;
  locationY_lte?: Float;
  locationY_gt?: Float;
  locationY_gte?: Float;
  size?: Float;
  size_not?: Float;
  size_in?: Float[] | Float;
  size_not_in?: Float[] | Float;
  size_lt?: Float;
  size_lte?: Float;
  size_gt?: Float;
  size_gte?: Float;
  width?: Float;
  width_not?: Float;
  width_in?: Float[] | Float;
  width_not_in?: Float[] | Float;
  width_lt?: Float;
  width_lte?: Float;
  width_gt?: Float;
  width_gte?: Float;
  AND?:
    | UserRecordCameraDataByTimeWhereInput[]
    | UserRecordCameraDataByTimeWhereInput;
  OR?:
    | UserRecordCameraDataByTimeWhereInput[]
    | UserRecordCameraDataByTimeWhereInput;
  NOT?:
    | UserRecordCameraDataByTimeWhereInput[]
    | UserRecordCameraDataByTimeWhereInput;
}

export interface CupDataUserRemoveUpdateWithoutExplainIdDataInput {
  changeTime?: DateTimeInput;
  serialNumber?: CupUpdateOneRequiredWithoutCupDataUserRemoveInput;
  userId?: UserUpdateOneRequiredWithoutCupDataUserRemoveInput;
}

export interface UserRecordCameraDataByTimeUpdateWithoutCoinHistoryRowIdDataInput {
  confirmYn?: Boolean;
  deleteYn?: Boolean;
  height?: Float;
  imagePath?: String;
  locationX?: Float;
  locationY?: Float;
  size?: Float;
  width?: Float;
}

export interface UserInterviewQuestionCreateManyWithoutAnswerTypeIdInput {
  create?:
    | UserInterviewQuestionCreateWithoutAnswerTypeIdInput[]
    | UserInterviewQuestionCreateWithoutAnswerTypeIdInput;
  connect?:
    | UserInterviewQuestionWhereUniqueInput[]
    | UserInterviewQuestionWhereUniqueInput;
}

export interface UserRecordCameraDataByTimeUpsertWithWhereUniqueWithoutCoinHistoryRowIdInput {
  where: UserRecordCameraDataByTimeWhereUniqueInput;
  update: UserRecordCameraDataByTimeUpdateWithoutCoinHistoryRowIdDataInput;
  create: UserRecordCameraDataByTimeCreateWithoutCoinHistoryRowIdInput;
}

export interface UserInterviewDatumCreateManyWithoutQuestionIdInput {
  create?:
    | UserInterviewDatumCreateWithoutQuestionIdInput[]
    | UserInterviewDatumCreateWithoutQuestionIdInput;
  connect?:
    | UserInterviewDatumWhereUniqueInput[]
    | UserInterviewDatumWhereUniqueInput;
}

export interface UserRecordCameraDataByTimeScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  confirmYn?: Boolean;
  confirmYn_not?: Boolean;
  deleteYn?: Boolean;
  deleteYn_not?: Boolean;
  height?: Float;
  height_not?: Float;
  height_in?: Float[] | Float;
  height_not_in?: Float[] | Float;
  height_lt?: Float;
  height_lte?: Float;
  height_gt?: Float;
  height_gte?: Float;
  imagePath?: String;
  imagePath_not?: String;
  imagePath_in?: String[] | String;
  imagePath_not_in?: String[] | String;
  imagePath_lt?: String;
  imagePath_lte?: String;
  imagePath_gt?: String;
  imagePath_gte?: String;
  imagePath_contains?: String;
  imagePath_not_contains?: String;
  imagePath_starts_with?: String;
  imagePath_not_starts_with?: String;
  imagePath_ends_with?: String;
  imagePath_not_ends_with?: String;
  locationX?: Float;
  locationX_not?: Float;
  locationX_in?: Float[] | Float;
  locationX_not_in?: Float[] | Float;
  locationX_lt?: Float;
  locationX_lte?: Float;
  locationX_gt?: Float;
  locationX_gte?: Float;
  locationY?: Float;
  locationY_not?: Float;
  locationY_in?: Float[] | Float;
  locationY_not_in?: Float[] | Float;
  locationY_lt?: Float;
  locationY_lte?: Float;
  locationY_gt?: Float;
  locationY_gte?: Float;
  size?: Float;
  size_not?: Float;
  size_in?: Float[] | Float;
  size_not_in?: Float[] | Float;
  size_lt?: Float;
  size_lte?: Float;
  size_gt?: Float;
  size_gte?: Float;
  width?: Float;
  width_not?: Float;
  width_in?: Float[] | Float;
  width_not_in?: Float[] | Float;
  width_lt?: Float;
  width_lte?: Float;
  width_gt?: Float;
  width_gte?: Float;
  AND?:
    | UserRecordCameraDataByTimeScalarWhereInput[]
    | UserRecordCameraDataByTimeScalarWhereInput;
  OR?:
    | UserRecordCameraDataByTimeScalarWhereInput[]
    | UserRecordCameraDataByTimeScalarWhereInput;
  NOT?:
    | UserRecordCameraDataByTimeScalarWhereInput[]
    | UserRecordCameraDataByTimeScalarWhereInput;
}

export interface UserCreateOneWithoutUserInterviewDataInput {
  create?: UserCreateWithoutUserInterviewDataInput;
  connect?: UserWhereUniqueInput;
}

export interface UserRecordCameraDataByTimeUpdateManyWithWhereNestedInput {
  where: UserRecordCameraDataByTimeScalarWhereInput;
  data: UserRecordCameraDataByTimeUpdateManyDataInput;
}

export interface AppServerSyncCreateManyWithoutUserIdInput {
  create?:
    | AppServerSyncCreateWithoutUserIdInput[]
    | AppServerSyncCreateWithoutUserIdInput;
  connect?: AppServerSyncWhereUniqueInput[] | AppServerSyncWhereUniqueInput;
}

export interface UserRecordCameraDataByTimeUpdateManyDataInput {
  confirmYn?: Boolean;
  deleteYn?: Boolean;
  height?: Float;
  imagePath?: String;
  locationX?: Float;
  locationY?: Float;
  size?: Float;
  width?: Float;
}

export interface CupDataProcFlowCreateManyWithoutUserIdInput {
  create?:
    | CupDataProcFlowCreateWithoutUserIdInput[]
    | CupDataProcFlowCreateWithoutUserIdInput;
  connect?: CupDataProcFlowWhereUniqueInput[] | CupDataProcFlowWhereUniqueInput;
}

export interface UserCoinHistoryUpsertWithWhereUniqueWithoutUserIdInput {
  where: UserCoinHistoryWhereUniqueInput;
  update: UserCoinHistoryUpdateWithoutUserIdDataInput;
  create: UserCoinHistoryCreateWithoutUserIdInput;
}

export interface CupDataProcMdateCreateOneWithoutCupDataProcFlowInput {
  create?: CupDataProcMdateCreateWithoutCupDataProcFlowInput;
  connect?: CupDataProcMdateWhereUniqueInput;
}

export interface UserCoinHistoryScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  coin?: Int;
  coin_not?: Int;
  coin_in?: Int[] | Int;
  coin_not_in?: Int[] | Int;
  coin_lt?: Int;
  coin_lte?: Int;
  coin_gt?: Int;
  coin_gte?: Int;
  contents?: String;
  contents_not?: String;
  contents_in?: String[] | String;
  contents_not_in?: String[] | String;
  contents_lt?: String;
  contents_lte?: String;
  contents_gt?: String;
  contents_gte?: String;
  contents_contains?: String;
  contents_not_contains?: String;
  contents_starts_with?: String;
  contents_not_starts_with?: String;
  contents_ends_with?: String;
  contents_not_ends_with?: String;
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[] | DateTimeInput;
  date_not_in?: DateTimeInput[] | DateTimeInput;
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  txhash?: String;
  txhash_not?: String;
  txhash_in?: String[] | String;
  txhash_not_in?: String[] | String;
  txhash_lt?: String;
  txhash_lte?: String;
  txhash_gt?: String;
  txhash_gte?: String;
  txhash_contains?: String;
  txhash_not_contains?: String;
  txhash_starts_with?: String;
  txhash_not_starts_with?: String;
  txhash_ends_with?: String;
  txhash_not_ends_with?: String;
  walletId?: Int;
  walletId_not?: Int;
  walletId_in?: Int[] | Int;
  walletId_not_in?: Int[] | Int;
  walletId_lt?: Int;
  walletId_lte?: Int;
  walletId_gt?: Int;
  walletId_gte?: Int;
  AND?: UserCoinHistoryScalarWhereInput[] | UserCoinHistoryScalarWhereInput;
  OR?: UserCoinHistoryScalarWhereInput[] | UserCoinHistoryScalarWhereInput;
  NOT?: UserCoinHistoryScalarWhereInput[] | UserCoinHistoryScalarWhereInput;
}

export interface CupDataManMdateCreateManyWithoutMdateRowIdInput {
  create?:
    | CupDataManMdateCreateWithoutMdateRowIdInput[]
    | CupDataManMdateCreateWithoutMdateRowIdInput;
  connect?: CupDataManMdateWhereUniqueInput[] | CupDataManMdateWhereUniqueInput;
}

export interface UserCoinHistoryUpdateManyWithWhereNestedInput {
  where: UserCoinHistoryScalarWhereInput;
  data: UserCoinHistoryUpdateManyDataInput;
}

export interface CupDataRejectionCreateOneWithoutCupDataProcMdatesInput {
  create?: CupDataRejectionCreateWithoutCupDataProcMdatesInput;
  connect?: CupDataRejectionWhereUniqueInput;
}

export interface UserCoinHistoryUpdateManyDataInput {
  category?: String;
  coin?: Int;
  contents?: String;
  date?: DateTimeInput;
  txhash?: String;
  walletId?: Int;
}

export interface UserCreateOneWithoutCupDataProcMdatesInput {
  create?: UserCreateWithoutCupDataProcMdatesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserInterviewDatumUpdateManyWithoutUserIdInput {
  create?:
    | UserInterviewDatumCreateWithoutUserIdInput[]
    | UserInterviewDatumCreateWithoutUserIdInput;
  delete?:
    | UserInterviewDatumWhereUniqueInput[]
    | UserInterviewDatumWhereUniqueInput;
  connect?:
    | UserInterviewDatumWhereUniqueInput[]
    | UserInterviewDatumWhereUniqueInput;
  set?:
    | UserInterviewDatumWhereUniqueInput[]
    | UserInterviewDatumWhereUniqueInput;
  disconnect?:
    | UserInterviewDatumWhereUniqueInput[]
    | UserInterviewDatumWhereUniqueInput;
  update?:
    | UserInterviewDatumUpdateWithWhereUniqueWithoutUserIdInput[]
    | UserInterviewDatumUpdateWithWhereUniqueWithoutUserIdInput;
  upsert?:
    | UserInterviewDatumUpsertWithWhereUniqueWithoutUserIdInput[]
    | UserInterviewDatumUpsertWithWhereUniqueWithoutUserIdInput;
  deleteMany?:
    | UserInterviewDatumScalarWhereInput[]
    | UserInterviewDatumScalarWhereInput;
  updateMany?:
    | UserInterviewDatumUpdateManyWithWhereNestedInput[]
    | UserInterviewDatumUpdateManyWithWhereNestedInput;
}

export interface CupDataQaResponseCreateManyWithoutUserIdInput {
  create?:
    | CupDataQaResponseCreateWithoutUserIdInput[]
    | CupDataQaResponseCreateWithoutUserIdInput;
  connect?:
    | CupDataQaResponseWhereUniqueInput[]
    | CupDataQaResponseWhereUniqueInput;
}

export interface UserInterviewDatumUpdateWithWhereUniqueWithoutUserIdInput {
  where: UserInterviewDatumWhereUniqueInput;
  data: UserInterviewDatumUpdateWithoutUserIdDataInput;
}

export interface CupDataAnswerCreateOneWithoutCupDataQaResponseInput {
  create?: CupDataAnswerCreateWithoutCupDataQaResponseInput;
  connect?: CupDataAnswerWhereUniqueInput;
}

export interface UserInterviewDatumUpdateWithoutUserIdDataInput {
  answerRange?: Int;
  answerText?: String;
  answerYn?: Boolean;
  date?: DateTimeInput;
  questionId?: UserInterviewQuestionUpdateOneRequiredWithoutUserInterviewDataInput;
}

export interface CupDataQuestionCreateOneWithoutCupDataAnswerInput {
  create?: CupDataQuestionCreateWithoutCupDataAnswerInput;
  connect?: CupDataQuestionWhereUniqueInput;
}

export interface UserInterviewQuestionUpdateOneRequiredWithoutUserInterviewDataInput {
  create?: UserInterviewQuestionCreateWithoutUserInterviewDataInput;
  update?: UserInterviewQuestionUpdateWithoutUserInterviewDataDataInput;
  upsert?: UserInterviewQuestionUpsertWithoutUserInterviewDataInput;
  connect?: UserInterviewQuestionWhereUniqueInput;
}

export interface CupDataQaResponseCreateManyWithoutQuestionIdInput {
  create?:
    | CupDataQaResponseCreateWithoutQuestionIdInput[]
    | CupDataQaResponseCreateWithoutQuestionIdInput;
  connect?:
    | CupDataQaResponseWhereUniqueInput[]
    | CupDataQaResponseWhereUniqueInput;
}

export interface UserInterviewQuestionUpdateWithoutUserInterviewDataDataInput {
  answerTypeId?: AnswerTypeUpdateOneRequiredWithoutUserInterviewQuestionsInput;
  question?: String;
}

export interface UserCreateOneWithoutCupDataQaResponseInput {
  create?: UserCreateWithoutCupDataQaResponseInput;
  connect?: UserWhereUniqueInput;
}

export interface AnswerTypeUpdateOneRequiredWithoutUserInterviewQuestionsInput {
  create?: AnswerTypeCreateWithoutUserInterviewQuestionsInput;
  update?: AnswerTypeUpdateWithoutUserInterviewQuestionsDataInput;
  upsert?: AnswerTypeUpsertWithoutUserInterviewQuestionsInput;
  connect?: AnswerTypeWhereUniqueInput;
}

export interface CupDataProcMdateCreateManyWithoutUserIdInput {
  create?:
    | CupDataProcMdateCreateWithoutUserIdInput[]
    | CupDataProcMdateCreateWithoutUserIdInput;
  connect?:
    | CupDataProcMdateWhereUniqueInput[]
    | CupDataProcMdateWhereUniqueInput;
}

export interface AnswerTypeUpdateWithoutUserInterviewQuestionsDataInput {
  answerType?: String;
}

export interface CupDataProcFlowCreateManyWithoutMdateRowIdInput {
  create?:
    | CupDataProcFlowCreateWithoutMdateRowIdInput[]
    | CupDataProcFlowCreateWithoutMdateRowIdInput;
  connect?: CupDataProcFlowWhereUniqueInput[] | CupDataProcFlowWhereUniqueInput;
}

export interface AnswerTypeUpsertWithoutUserInterviewQuestionsInput {
  update: AnswerTypeUpdateWithoutUserInterviewQuestionsDataInput;
  create: AnswerTypeCreateWithoutUserInterviewQuestionsInput;
}

export interface UserCreateOneWithoutCupDataProcFlowInput {
  create?: UserCreateWithoutCupDataProcFlowInput;
  connect?: UserWhereUniqueInput;
}

export interface UserInterviewQuestionUpsertWithoutUserInterviewDataInput {
  update: UserInterviewQuestionUpdateWithoutUserInterviewDataDataInput;
  create: UserInterviewQuestionCreateWithoutUserInterviewDataInput;
}

export interface CupDataUserRemoveCreateManyWithoutUserIdInput {
  create?:
    | CupDataUserRemoveCreateWithoutUserIdInput[]
    | CupDataUserRemoveCreateWithoutUserIdInput;
  connect?:
    | CupDataUserRemoveWhereUniqueInput[]
    | CupDataUserRemoveWhereUniqueInput;
}

export interface UserInterviewDatumUpsertWithWhereUniqueWithoutUserIdInput {
  where: UserInterviewDatumWhereUniqueInput;
  update: UserInterviewDatumUpdateWithoutUserIdDataInput;
  create: UserInterviewDatumCreateWithoutUserIdInput;
}

export interface CupDataUserRemoveExplainCreateOneWithoutCupDataUserRemoveInput {
  create?: CupDataUserRemoveExplainCreateWithoutCupDataUserRemoveInput;
  connect?: CupDataUserRemoveExplainWhereUniqueInput;
}

export interface UserInterviewDatumScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  answerRange?: Int;
  answerRange_not?: Int;
  answerRange_in?: Int[] | Int;
  answerRange_not_in?: Int[] | Int;
  answerRange_lt?: Int;
  answerRange_lte?: Int;
  answerRange_gt?: Int;
  answerRange_gte?: Int;
  answerText?: String;
  answerText_not?: String;
  answerText_in?: String[] | String;
  answerText_not_in?: String[] | String;
  answerText_lt?: String;
  answerText_lte?: String;
  answerText_gt?: String;
  answerText_gte?: String;
  answerText_contains?: String;
  answerText_not_contains?: String;
  answerText_starts_with?: String;
  answerText_not_starts_with?: String;
  answerText_ends_with?: String;
  answerText_not_ends_with?: String;
  answerYn?: Boolean;
  answerYn_not?: Boolean;
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[] | DateTimeInput;
  date_not_in?: DateTimeInput[] | DateTimeInput;
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  AND?:
    | UserInterviewDatumScalarWhereInput[]
    | UserInterviewDatumScalarWhereInput;
  OR?:
    | UserInterviewDatumScalarWhereInput[]
    | UserInterviewDatumScalarWhereInput;
  NOT?:
    | UserInterviewDatumScalarWhereInput[]
    | UserInterviewDatumScalarWhereInput;
}

export interface CupCreateOneWithoutCupDataUserRemoveInput {
  create?: CupCreateWithoutCupDataUserRemoveInput;
  connect?: CupWhereUniqueInput;
}

export interface UserInterviewDatumUpdateManyWithWhereNestedInput {
  where: UserInterviewDatumScalarWhereInput;
  data: UserInterviewDatumUpdateManyDataInput;
}

export interface CalibrationCreateOneWithoutCupInput {
  create?: CalibrationCreateWithoutCupInput;
  connect?: CalibrationWhereUniqueInput;
}

export interface UserInterviewDatumUpdateManyDataInput {
  answerRange?: Int;
  answerText?: String;
  answerYn?: Boolean;
  date?: DateTimeInput;
}

export interface CompanyCreateOneWithoutCupInput {
  create?: CompanyCreateWithoutCupInput;
  connect?: CompanyWhereUniqueInput;
}

export interface UserRecordDataByPeriodUpdateManyWithoutUserIdInput {
  create?:
    | UserRecordDataByPeriodCreateWithoutUserIdInput[]
    | UserRecordDataByPeriodCreateWithoutUserIdInput;
  delete?:
    | UserRecordDataByPeriodWhereUniqueInput[]
    | UserRecordDataByPeriodWhereUniqueInput;
  connect?:
    | UserRecordDataByPeriodWhereUniqueInput[]
    | UserRecordDataByPeriodWhereUniqueInput;
  set?:
    | UserRecordDataByPeriodWhereUniqueInput[]
    | UserRecordDataByPeriodWhereUniqueInput;
  disconnect?:
    | UserRecordDataByPeriodWhereUniqueInput[]
    | UserRecordDataByPeriodWhereUniqueInput;
  update?:
    | UserRecordDataByPeriodUpdateWithWhereUniqueWithoutUserIdInput[]
    | UserRecordDataByPeriodUpdateWithWhereUniqueWithoutUserIdInput;
  upsert?:
    | UserRecordDataByPeriodUpsertWithWhereUniqueWithoutUserIdInput[]
    | UserRecordDataByPeriodUpsertWithWhereUniqueWithoutUserIdInput;
  deleteMany?:
    | UserRecordDataByPeriodScalarWhereInput[]
    | UserRecordDataByPeriodScalarWhereInput;
  updateMany?:
    | UserRecordDataByPeriodUpdateManyWithWhereNestedInput[]
    | UserRecordDataByPeriodUpdateManyWithWhereNestedInput;
}

export interface CupAppSyncCreateManyWithoutSerialNumberInput {
  create?:
    | CupAppSyncCreateWithoutSerialNumberInput[]
    | CupAppSyncCreateWithoutSerialNumberInput;
  connect?: CupAppSyncWhereUniqueInput[] | CupAppSyncWhereUniqueInput;
}

export interface UserRecordDataByPeriodUpdateWithWhereUniqueWithoutUserIdInput {
  where: UserRecordDataByPeriodWhereUniqueInput;
  data: UserRecordDataByPeriodUpdateWithoutUserIdDataInput;
}

export interface CupDatumCreateManyWithoutSerialNumberInput {
  create?:
    | CupDatumCreateWithoutSerialNumberInput[]
    | CupDatumCreateWithoutSerialNumberInput;
  connect?: CupDatumWhereUniqueInput[] | CupDatumWhereUniqueInput;
}

export interface UserRecordDataByPeriodUpdateWithoutUserIdDataInput {
  coinHistoryRowId?: Int;
  isTakePill?: Boolean;
  mensFinish?: DateTimeInput;
  mensStart?: DateTimeInput;
  userRecordDataByDay?: UserRecordDataByDayUpdateManyWithoutRecordPeriodRowIdInput;
}

export interface CupDataColourCalcCreateManyWithoutCupDataRowIdInput {
  create?:
    | CupDataColourCalcCreateWithoutCupDataRowIdInput[]
    | CupDataColourCalcCreateWithoutCupDataRowIdInput;
  connect?:
    | CupDataColourCalcWhereUniqueInput[]
    | CupDataColourCalcWhereUniqueInput;
}

export interface UserRecordDataByDayUpdateManyWithoutRecordPeriodRowIdInput {
  create?:
    | UserRecordDataByDayCreateWithoutRecordPeriodRowIdInput[]
    | UserRecordDataByDayCreateWithoutRecordPeriodRowIdInput;
  delete?:
    | UserRecordDataByDayWhereUniqueInput[]
    | UserRecordDataByDayWhereUniqueInput;
  connect?:
    | UserRecordDataByDayWhereUniqueInput[]
    | UserRecordDataByDayWhereUniqueInput;
  set?:
    | UserRecordDataByDayWhereUniqueInput[]
    | UserRecordDataByDayWhereUniqueInput;
  disconnect?:
    | UserRecordDataByDayWhereUniqueInput[]
    | UserRecordDataByDayWhereUniqueInput;
  update?:
    | UserRecordDataByDayUpdateWithWhereUniqueWithoutRecordPeriodRowIdInput[]
    | UserRecordDataByDayUpdateWithWhereUniqueWithoutRecordPeriodRowIdInput;
  upsert?:
    | UserRecordDataByDayUpsertWithWhereUniqueWithoutRecordPeriodRowIdInput[]
    | UserRecordDataByDayUpsertWithWhereUniqueWithoutRecordPeriodRowIdInput;
  deleteMany?:
    | UserRecordDataByDayScalarWhereInput[]
    | UserRecordDataByDayScalarWhereInput;
  updateMany?:
    | UserRecordDataByDayUpdateManyWithWhereNestedInput[]
    | UserRecordDataByDayUpdateManyWithWhereNestedInput;
}

export interface CupDataProcVolumeCreateManyWithoutCupDataRowIdInput {
  create?:
    | CupDataProcVolumeCreateWithoutCupDataRowIdInput[]
    | CupDataProcVolumeCreateWithoutCupDataRowIdInput;
  connect?:
    | CupDataProcVolumeWhereUniqueInput[]
    | CupDataProcVolumeWhereUniqueInput;
}

export interface UserRecordDataByDayUpdateWithWhereUniqueWithoutRecordPeriodRowIdInput {
  where: UserRecordDataByDayWhereUniqueInput;
  data: UserRecordDataByDayUpdateWithoutRecordPeriodRowIdDataInput;
}

export interface CupDataColourCalibCreateManyWithoutSerialNumberInput {
  create?:
    | CupDataColourCalibCreateWithoutSerialNumberInput[]
    | CupDataColourCalibCreateWithoutSerialNumberInput;
  connect?:
    | CupDataColourCalibWhereUniqueInput[]
    | CupDataColourCalibWhereUniqueInput;
}

export interface UserRecordDataByDayUpdateWithoutRecordPeriodRowIdDataInput {
  crampsLevel?: Int;
  recordDate?: DateTimeInput;
  userRecordDataByTime?: UserRecordDataByTimeUpdateManyWithoutRecordDayRowIdInput;
}

export interface CupDataRawCreateManyWithoutSerialNumberInput {
  create?:
    | CupDataRawCreateWithoutSerialNumberInput[]
    | CupDataRawCreateWithoutSerialNumberInput;
  connect?: CupDataRawWhereUniqueInput[] | CupDataRawWhereUniqueInput;
}

export interface UserRecordDataByTimeUpdateManyWithoutRecordDayRowIdInput {
  create?:
    | UserRecordDataByTimeCreateWithoutRecordDayRowIdInput[]
    | UserRecordDataByTimeCreateWithoutRecordDayRowIdInput;
  delete?:
    | UserRecordDataByTimeWhereUniqueInput[]
    | UserRecordDataByTimeWhereUniqueInput;
  connect?:
    | UserRecordDataByTimeWhereUniqueInput[]
    | UserRecordDataByTimeWhereUniqueInput;
  set?:
    | UserRecordDataByTimeWhereUniqueInput[]
    | UserRecordDataByTimeWhereUniqueInput;
  disconnect?:
    | UserRecordDataByTimeWhereUniqueInput[]
    | UserRecordDataByTimeWhereUniqueInput;
  update?:
    | UserRecordDataByTimeUpdateWithWhereUniqueWithoutRecordDayRowIdInput[]
    | UserRecordDataByTimeUpdateWithWhereUniqueWithoutRecordDayRowIdInput;
  upsert?:
    | UserRecordDataByTimeUpsertWithWhereUniqueWithoutRecordDayRowIdInput[]
    | UserRecordDataByTimeUpsertWithWhereUniqueWithoutRecordDayRowIdInput;
  deleteMany?:
    | UserRecordDataByTimeScalarWhereInput[]
    | UserRecordDataByTimeScalarWhereInput;
  updateMany?:
    | UserRecordDataByTimeUpdateManyWithWhereNestedInput[]
    | UserRecordDataByTimeUpdateManyWithWhereNestedInput;
}

export interface FirmwareCreateOneWithoutCupInput {
  create?: FirmwareCreateWithoutCupInput;
  connect?: FirmwareWhereUniqueInput;
}

export interface UserRecordDataByTimeUpdateWithWhereUniqueWithoutRecordDayRowIdInput {
  where: UserRecordDataByTimeWhereUniqueInput;
  data: UserRecordDataByTimeUpdateWithoutRecordDayRowIdDataInput;
}

export interface HardwareCreateOneWithoutCupInput {
  create?: HardwareCreateWithoutCupInput;
  connect?: HardwareWhereUniqueInput;
}

export interface UserRecordDataByTimeUpdateWithoutRecordDayRowIdDataInput {
  cameraDataId?: Int;
  changeTime?: DateTimeInput;
  colorB?: Int;
  colorG?: Int;
  colorR?: Int;
  leakage?: String;
  startTime?: DateTimeInput;
  volume?: Float;
}

export interface UserCupCreateManyWithoutSerialNumberInput {
  create?:
    | UserCupCreateWithoutSerialNumberInput[]
    | UserCupCreateWithoutSerialNumberInput;
  connect?: UserCupWhereUniqueInput[] | UserCupWhereUniqueInput;
}

export interface UserRecordDataByTimeUpsertWithWhereUniqueWithoutRecordDayRowIdInput {
  where: UserRecordDataByTimeWhereUniqueInput;
  update: UserRecordDataByTimeUpdateWithoutRecordDayRowIdDataInput;
  create: UserRecordDataByTimeCreateWithoutRecordDayRowIdInput;
}

export interface UserCreateOneWithoutUserCupsInput {
  create?: UserCreateWithoutUserCupsInput;
  connect?: UserWhereUniqueInput;
}

export interface UserRecordDataByTimeScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  cameraDataId?: Int;
  cameraDataId_not?: Int;
  cameraDataId_in?: Int[] | Int;
  cameraDataId_not_in?: Int[] | Int;
  cameraDataId_lt?: Int;
  cameraDataId_lte?: Int;
  cameraDataId_gt?: Int;
  cameraDataId_gte?: Int;
  changeTime?: DateTimeInput;
  changeTime_not?: DateTimeInput;
  changeTime_in?: DateTimeInput[] | DateTimeInput;
  changeTime_not_in?: DateTimeInput[] | DateTimeInput;
  changeTime_lt?: DateTimeInput;
  changeTime_lte?: DateTimeInput;
  changeTime_gt?: DateTimeInput;
  changeTime_gte?: DateTimeInput;
  colorB?: Int;
  colorB_not?: Int;
  colorB_in?: Int[] | Int;
  colorB_not_in?: Int[] | Int;
  colorB_lt?: Int;
  colorB_lte?: Int;
  colorB_gt?: Int;
  colorB_gte?: Int;
  colorG?: Int;
  colorG_not?: Int;
  colorG_in?: Int[] | Int;
  colorG_not_in?: Int[] | Int;
  colorG_lt?: Int;
  colorG_lte?: Int;
  colorG_gt?: Int;
  colorG_gte?: Int;
  colorR?: Int;
  colorR_not?: Int;
  colorR_in?: Int[] | Int;
  colorR_not_in?: Int[] | Int;
  colorR_lt?: Int;
  colorR_lte?: Int;
  colorR_gt?: Int;
  colorR_gte?: Int;
  leakage?: String;
  leakage_not?: String;
  leakage_in?: String[] | String;
  leakage_not_in?: String[] | String;
  leakage_lt?: String;
  leakage_lte?: String;
  leakage_gt?: String;
  leakage_gte?: String;
  leakage_contains?: String;
  leakage_not_contains?: String;
  leakage_starts_with?: String;
  leakage_not_starts_with?: String;
  leakage_ends_with?: String;
  leakage_not_ends_with?: String;
  startTime?: DateTimeInput;
  startTime_not?: DateTimeInput;
  startTime_in?: DateTimeInput[] | DateTimeInput;
  startTime_not_in?: DateTimeInput[] | DateTimeInput;
  startTime_lt?: DateTimeInput;
  startTime_lte?: DateTimeInput;
  startTime_gt?: DateTimeInput;
  startTime_gte?: DateTimeInput;
  volume?: Float;
  volume_not?: Float;
  volume_in?: Float[] | Float;
  volume_not_in?: Float[] | Float;
  volume_lt?: Float;
  volume_lte?: Float;
  volume_gt?: Float;
  volume_gte?: Float;
  AND?:
    | UserRecordDataByTimeScalarWhereInput[]
    | UserRecordDataByTimeScalarWhereInput;
  OR?:
    | UserRecordDataByTimeScalarWhereInput[]
    | UserRecordDataByTimeScalarWhereInput;
  NOT?:
    | UserRecordDataByTimeScalarWhereInput[]
    | UserRecordDataByTimeScalarWhereInput;
}

export interface EthnicityCreateOneWithoutUsersInput {
  create?: EthnicityCreateWithoutUsersInput;
  connect?: EthnicityWhereUniqueInput;
}

export interface UserRecordDataByTimeUpdateManyWithWhereNestedInput {
  where: UserRecordDataByTimeScalarWhereInput;
  data: UserRecordDataByTimeUpdateManyDataInput;
}

export interface UserCoinHistoryCreateManyWithoutUserIdInput {
  create?:
    | UserCoinHistoryCreateWithoutUserIdInput[]
    | UserCoinHistoryCreateWithoutUserIdInput;
  connect?: UserCoinHistoryWhereUniqueInput[] | UserCoinHistoryWhereUniqueInput;
}

export interface UserRecordDataByTimeUpdateManyDataInput {
  cameraDataId?: Int;
  changeTime?: DateTimeInput;
  colorB?: Int;
  colorG?: Int;
  colorR?: Int;
  leakage?: String;
  startTime?: DateTimeInput;
  volume?: Float;
}

export interface MarketBuyHistoryCreateManyWithoutCoinHistoryRowIdInput {
  create?:
    | MarketBuyHistoryCreateWithoutCoinHistoryRowIdInput[]
    | MarketBuyHistoryCreateWithoutCoinHistoryRowIdInput;
  connect?:
    | MarketBuyHistoryWhereUniqueInput[]
    | MarketBuyHistoryWhereUniqueInput;
}

export interface UserRecordDataByDayUpsertWithWhereUniqueWithoutRecordPeriodRowIdInput {
  where: UserRecordDataByDayWhereUniqueInput;
  update: UserRecordDataByDayUpdateWithoutRecordPeriodRowIdDataInput;
  create: UserRecordDataByDayCreateWithoutRecordPeriodRowIdInput;
}

export interface UserRecordCameraDataByTimeCreateManyWithoutCoinHistoryRowIdInput {
  create?:
    | UserRecordCameraDataByTimeCreateWithoutCoinHistoryRowIdInput[]
    | UserRecordCameraDataByTimeCreateWithoutCoinHistoryRowIdInput;
  connect?:
    | UserRecordCameraDataByTimeWhereUniqueInput[]
    | UserRecordCameraDataByTimeWhereUniqueInput;
}

export interface UserRecordDataByDayScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  crampsLevel?: Int;
  crampsLevel_not?: Int;
  crampsLevel_in?: Int[] | Int;
  crampsLevel_not_in?: Int[] | Int;
  crampsLevel_lt?: Int;
  crampsLevel_lte?: Int;
  crampsLevel_gt?: Int;
  crampsLevel_gte?: Int;
  recordDate?: DateTimeInput;
  recordDate_not?: DateTimeInput;
  recordDate_in?: DateTimeInput[] | DateTimeInput;
  recordDate_not_in?: DateTimeInput[] | DateTimeInput;
  recordDate_lt?: DateTimeInput;
  recordDate_lte?: DateTimeInput;
  recordDate_gt?: DateTimeInput;
  recordDate_gte?: DateTimeInput;
  AND?:
    | UserRecordDataByDayScalarWhereInput[]
    | UserRecordDataByDayScalarWhereInput;
  OR?:
    | UserRecordDataByDayScalarWhereInput[]
    | UserRecordDataByDayScalarWhereInput;
  NOT?:
    | UserRecordDataByDayScalarWhereInput[]
    | UserRecordDataByDayScalarWhereInput;
}

export interface UserInterviewDatumCreateManyWithoutUserIdInput {
  create?:
    | UserInterviewDatumCreateWithoutUserIdInput[]
    | UserInterviewDatumCreateWithoutUserIdInput;
  connect?:
    | UserInterviewDatumWhereUniqueInput[]
    | UserInterviewDatumWhereUniqueInput;
}

export interface UserRecordDataByDayUpdateManyWithWhereNestedInput {
  where: UserRecordDataByDayScalarWhereInput;
  data: UserRecordDataByDayUpdateManyDataInput;
}

export interface UserInterviewQuestionCreateOneWithoutUserInterviewDataInput {
  create?: UserInterviewQuestionCreateWithoutUserInterviewDataInput;
  connect?: UserInterviewQuestionWhereUniqueInput;
}

export interface UserRecordDataByDayUpdateManyDataInput {
  crampsLevel?: Int;
  recordDate?: DateTimeInput;
}

export interface AnswerTypeCreateOneWithoutUserInterviewQuestionsInput {
  create?: AnswerTypeCreateWithoutUserInterviewQuestionsInput;
  connect?: AnswerTypeWhereUniqueInput;
}

export interface UserRecordDataByPeriodUpsertWithWhereUniqueWithoutUserIdInput {
  where: UserRecordDataByPeriodWhereUniqueInput;
  update: UserRecordDataByPeriodUpdateWithoutUserIdDataInput;
  create: UserRecordDataByPeriodCreateWithoutUserIdInput;
}

export interface UserRecordDataByPeriodCreateManyWithoutUserIdInput {
  create?:
    | UserRecordDataByPeriodCreateWithoutUserIdInput[]
    | UserRecordDataByPeriodCreateWithoutUserIdInput;
  connect?:
    | UserRecordDataByPeriodWhereUniqueInput[]
    | UserRecordDataByPeriodWhereUniqueInput;
}

export interface UserRecordDataByPeriodScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  coinHistoryRowId?: Int;
  coinHistoryRowId_not?: Int;
  coinHistoryRowId_in?: Int[] | Int;
  coinHistoryRowId_not_in?: Int[] | Int;
  coinHistoryRowId_lt?: Int;
  coinHistoryRowId_lte?: Int;
  coinHistoryRowId_gt?: Int;
  coinHistoryRowId_gte?: Int;
  isTakePill?: Boolean;
  isTakePill_not?: Boolean;
  mensFinish?: DateTimeInput;
  mensFinish_not?: DateTimeInput;
  mensFinish_in?: DateTimeInput[] | DateTimeInput;
  mensFinish_not_in?: DateTimeInput[] | DateTimeInput;
  mensFinish_lt?: DateTimeInput;
  mensFinish_lte?: DateTimeInput;
  mensFinish_gt?: DateTimeInput;
  mensFinish_gte?: DateTimeInput;
  mensStart?: DateTimeInput;
  mensStart_not?: DateTimeInput;
  mensStart_in?: DateTimeInput[] | DateTimeInput;
  mensStart_not_in?: DateTimeInput[] | DateTimeInput;
  mensStart_lt?: DateTimeInput;
  mensStart_lte?: DateTimeInput;
  mensStart_gt?: DateTimeInput;
  mensStart_gte?: DateTimeInput;
  AND?:
    | UserRecordDataByPeriodScalarWhereInput[]
    | UserRecordDataByPeriodScalarWhereInput;
  OR?:
    | UserRecordDataByPeriodScalarWhereInput[]
    | UserRecordDataByPeriodScalarWhereInput;
  NOT?:
    | UserRecordDataByPeriodScalarWhereInput[]
    | UserRecordDataByPeriodScalarWhereInput;
}

export interface UserRecordDataByDayCreateManyWithoutRecordPeriodRowIdInput {
  create?:
    | UserRecordDataByDayCreateWithoutRecordPeriodRowIdInput[]
    | UserRecordDataByDayCreateWithoutRecordPeriodRowIdInput;
  connect?:
    | UserRecordDataByDayWhereUniqueInput[]
    | UserRecordDataByDayWhereUniqueInput;
}

export interface UserRecordDataByPeriodUpdateManyWithWhereNestedInput {
  where: UserRecordDataByPeriodScalarWhereInput;
  data: UserRecordDataByPeriodUpdateManyDataInput;
}

export interface UserRecordDataByTimeCreateManyWithoutRecordDayRowIdInput {
  create?:
    | UserRecordDataByTimeCreateWithoutRecordDayRowIdInput[]
    | UserRecordDataByTimeCreateWithoutRecordDayRowIdInput;
  connect?:
    | UserRecordDataByTimeWhereUniqueInput[]
    | UserRecordDataByTimeWhereUniqueInput;
}

export interface UserRecordDataByPeriodUpdateManyDataInput {
  coinHistoryRowId?: Int;
  isTakePill?: Boolean;
  mensFinish?: DateTimeInput;
  mensStart?: DateTimeInput;
}

export interface UserWalletCreateManyWithoutUserIdInput {
  create?:
    | UserWalletCreateWithoutUserIdInput[]
    | UserWalletCreateWithoutUserIdInput;
  connect?: UserWalletWhereUniqueInput[] | UserWalletWhereUniqueInput;
}

export interface UserWalletUpdateManyWithoutUserIdInput {
  create?:
    | UserWalletCreateWithoutUserIdInput[]
    | UserWalletCreateWithoutUserIdInput;
  delete?: UserWalletWhereUniqueInput[] | UserWalletWhereUniqueInput;
  connect?: UserWalletWhereUniqueInput[] | UserWalletWhereUniqueInput;
  set?: UserWalletWhereUniqueInput[] | UserWalletWhereUniqueInput;
  disconnect?: UserWalletWhereUniqueInput[] | UserWalletWhereUniqueInput;
  update?:
    | UserWalletUpdateWithWhereUniqueWithoutUserIdInput[]
    | UserWalletUpdateWithWhereUniqueWithoutUserIdInput;
  upsert?:
    | UserWalletUpsertWithWhereUniqueWithoutUserIdInput[]
    | UserWalletUpsertWithWhereUniqueWithoutUserIdInput;
  deleteMany?: UserWalletScalarWhereInput[] | UserWalletScalarWhereInput;
  updateMany?:
    | UserWalletUpdateManyWithWhereNestedInput[]
    | UserWalletUpdateManyWithWhereNestedInput;
}

export interface UserCupCreateManyWithoutUserIdInput {
  create?: UserCupCreateWithoutUserIdInput[] | UserCupCreateWithoutUserIdInput;
  connect?: UserCupWhereUniqueInput[] | UserCupWhereUniqueInput;
}

export interface UserWalletUpdateWithWhereUniqueWithoutUserIdInput {
  where: UserWalletWhereUniqueInput;
  data: UserWalletUpdateWithoutUserIdDataInput;
}

export interface CupCreateOneWithoutUserCupsInput {
  create?: CupCreateWithoutUserCupsInput;
  connect?: CupWhereUniqueInput;
}

export interface UserWalletUpdateWithoutUserIdDataInput {
  address?: String;
  createTime?: DateTimeInput;
  status?: Boolean;
}

export interface CupDataUserRemoveCreateManyWithoutSerialNumberInput {
  create?:
    | CupDataUserRemoveCreateWithoutSerialNumberInput[]
    | CupDataUserRemoveCreateWithoutSerialNumberInput;
  connect?:
    | CupDataUserRemoveWhereUniqueInput[]
    | CupDataUserRemoveWhereUniqueInput;
}

export interface UserWalletUpsertWithWhereUniqueWithoutUserIdInput {
  where: UserWalletWhereUniqueInput;
  update: UserWalletUpdateWithoutUserIdDataInput;
  create: UserWalletCreateWithoutUserIdInput;
}

export interface UserCreateOneWithoutCupDataUserRemoveInput {
  create?: UserCreateWithoutCupDataUserRemoveInput;
  connect?: UserWhereUniqueInput;
}

export interface UserWalletScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  address?: String;
  address_not?: String;
  address_in?: String[] | String;
  address_not_in?: String[] | String;
  address_lt?: String;
  address_lte?: String;
  address_gt?: String;
  address_gte?: String;
  address_contains?: String;
  address_not_contains?: String;
  address_starts_with?: String;
  address_not_starts_with?: String;
  address_ends_with?: String;
  address_not_ends_with?: String;
  createTime?: DateTimeInput;
  createTime_not?: DateTimeInput;
  createTime_in?: DateTimeInput[] | DateTimeInput;
  createTime_not_in?: DateTimeInput[] | DateTimeInput;
  createTime_lt?: DateTimeInput;
  createTime_lte?: DateTimeInput;
  createTime_gt?: DateTimeInput;
  createTime_gte?: DateTimeInput;
  status?: Boolean;
  status_not?: Boolean;
  AND?: UserWalletScalarWhereInput[] | UserWalletScalarWhereInput;
  OR?: UserWalletScalarWhereInput[] | UserWalletScalarWhereInput;
  NOT?: UserWalletScalarWhereInput[] | UserWalletScalarWhereInput;
}

export interface CupDataQuestionCreateOneWithoutCupDataQaResponseInput {
  create?: CupDataQuestionCreateWithoutCupDataQaResponseInput;
  connect?: CupDataQuestionWhereUniqueInput;
}

export interface UserWalletUpdateManyWithWhereNestedInput {
  where: UserWalletScalarWhereInput;
  data: UserWalletUpdateManyDataInput;
}

export interface CupDataAnswerCreateManyWithoutQuestionIdInput {
  create?:
    | CupDataAnswerCreateWithoutQuestionIdInput[]
    | CupDataAnswerCreateWithoutQuestionIdInput;
  connect?: CupDataAnswerWhereUniqueInput[] | CupDataAnswerWhereUniqueInput;
}

export interface UserWalletUpdateManyDataInput {
  address?: String;
  createTime?: DateTimeInput;
  status?: Boolean;
}

export interface CupDataQaResponseCreateManyWithoutAnswerIdInput {
  create?:
    | CupDataQaResponseCreateWithoutAnswerIdInput[]
    | CupDataQaResponseCreateWithoutAnswerIdInput;
  connect?:
    | CupDataQaResponseWhereUniqueInput[]
    | CupDataQaResponseWhereUniqueInput;
}

export interface UserUpsertWithoutUserCupsInput {
  update: UserUpdateWithoutUserCupsDataInput;
  create: UserCreateWithoutUserCupsInput;
}

export interface AnswerTypeUpdateInput {
  answerType?: String;
  userInterviewQuestions?: UserInterviewQuestionUpdateManyWithoutAnswerTypeIdInput;
}

export interface UserCupUpsertWithWhereUniqueWithoutSerialNumberInput {
  where: UserCupWhereUniqueInput;
  update: UserCupUpdateWithoutSerialNumberDataInput;
  create: UserCupCreateWithoutSerialNumberInput;
}

export interface UsersDataAnalysisSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UsersDataAnalysisWhereInput;
  AND?:
    | UsersDataAnalysisSubscriptionWhereInput[]
    | UsersDataAnalysisSubscriptionWhereInput;
  OR?:
    | UsersDataAnalysisSubscriptionWhereInput[]
    | UsersDataAnalysisSubscriptionWhereInput;
  NOT?:
    | UsersDataAnalysisSubscriptionWhereInput[]
    | UsersDataAnalysisSubscriptionWhereInput;
}

export interface UserCupScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  AND?: UserCupScalarWhereInput[] | UserCupScalarWhereInput;
  OR?: UserCupScalarWhereInput[] | UserCupScalarWhereInput;
  NOT?: UserCupScalarWhereInput[] | UserCupScalarWhereInput;
}

export interface UserCoinHistoryWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  coin?: Int;
  coin_not?: Int;
  coin_in?: Int[] | Int;
  coin_not_in?: Int[] | Int;
  coin_lt?: Int;
  coin_lte?: Int;
  coin_gt?: Int;
  coin_gte?: Int;
  contents?: String;
  contents_not?: String;
  contents_in?: String[] | String;
  contents_not_in?: String[] | String;
  contents_lt?: String;
  contents_lte?: String;
  contents_gt?: String;
  contents_gte?: String;
  contents_contains?: String;
  contents_not_contains?: String;
  contents_starts_with?: String;
  contents_not_starts_with?: String;
  contents_ends_with?: String;
  contents_not_ends_with?: String;
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[] | DateTimeInput;
  date_not_in?: DateTimeInput[] | DateTimeInput;
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  marketBuyHistory_every?: MarketBuyHistoryWhereInput;
  marketBuyHistory_some?: MarketBuyHistoryWhereInput;
  marketBuyHistory_none?: MarketBuyHistoryWhereInput;
  txhash?: String;
  txhash_not?: String;
  txhash_in?: String[] | String;
  txhash_not_in?: String[] | String;
  txhash_lt?: String;
  txhash_lte?: String;
  txhash_gt?: String;
  txhash_gte?: String;
  txhash_contains?: String;
  txhash_not_contains?: String;
  txhash_starts_with?: String;
  txhash_not_starts_with?: String;
  txhash_ends_with?: String;
  txhash_not_ends_with?: String;
  userId?: UserWhereInput;
  userRecordCameraDataByTime_every?: UserRecordCameraDataByTimeWhereInput;
  userRecordCameraDataByTime_some?: UserRecordCameraDataByTimeWhereInput;
  userRecordCameraDataByTime_none?: UserRecordCameraDataByTimeWhereInput;
  walletId?: Int;
  walletId_not?: Int;
  walletId_in?: Int[] | Int;
  walletId_not_in?: Int[] | Int;
  walletId_lt?: Int;
  walletId_lte?: Int;
  walletId_gt?: Int;
  walletId_gte?: Int;
  AND?: UserCoinHistoryWhereInput[] | UserCoinHistoryWhereInput;
  OR?: UserCoinHistoryWhereInput[] | UserCoinHistoryWhereInput;
  NOT?: UserCoinHistoryWhereInput[] | UserCoinHistoryWhereInput;
}

export interface CupUpsertWithoutCupDataUserRemoveInput {
  update: CupUpdateWithoutCupDataUserRemoveDataInput;
  create: CupCreateWithoutCupDataUserRemoveInput;
}

export interface UserRecordCameraDataByTimeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserRecordCameraDataByTimeWhereInput;
  AND?:
    | UserRecordCameraDataByTimeSubscriptionWhereInput[]
    | UserRecordCameraDataByTimeSubscriptionWhereInput;
  OR?:
    | UserRecordCameraDataByTimeSubscriptionWhereInput[]
    | UserRecordCameraDataByTimeSubscriptionWhereInput;
  NOT?:
    | UserRecordCameraDataByTimeSubscriptionWhereInput[]
    | UserRecordCameraDataByTimeSubscriptionWhereInput;
}

export interface CupDataUserRemoveUpsertWithWhereUniqueWithoutUserIdInput {
  where: CupDataUserRemoveWhereUniqueInput;
  update: CupDataUserRemoveUpdateWithoutUserIdDataInput;
  create: CupDataUserRemoveCreateWithoutUserIdInput;
}

export interface UserInterviewDatumSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserInterviewDatumWhereInput;
  AND?:
    | UserInterviewDatumSubscriptionWhereInput[]
    | UserInterviewDatumSubscriptionWhereInput;
  OR?:
    | UserInterviewDatumSubscriptionWhereInput[]
    | UserInterviewDatumSubscriptionWhereInput;
  NOT?:
    | UserInterviewDatumSubscriptionWhereInput[]
    | UserInterviewDatumSubscriptionWhereInput;
}

export interface CupDataUserRemoveScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  changeTime?: DateTimeInput;
  changeTime_not?: DateTimeInput;
  changeTime_in?: DateTimeInput[] | DateTimeInput;
  changeTime_not_in?: DateTimeInput[] | DateTimeInput;
  changeTime_lt?: DateTimeInput;
  changeTime_lte?: DateTimeInput;
  changeTime_gt?: DateTimeInput;
  changeTime_gte?: DateTimeInput;
  AND?: CupDataUserRemoveScalarWhereInput[] | CupDataUserRemoveScalarWhereInput;
  OR?: CupDataUserRemoveScalarWhereInput[] | CupDataUserRemoveScalarWhereInput;
  NOT?: CupDataUserRemoveScalarWhereInput[] | CupDataUserRemoveScalarWhereInput;
}

export interface CupDataRawWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  pageData?: String;
  pageData_not?: String;
  pageData_in?: String[] | String;
  pageData_not_in?: String[] | String;
  pageData_lt?: String;
  pageData_lte?: String;
  pageData_gt?: String;
  pageData_gte?: String;
  pageData_contains?: String;
  pageData_not_contains?: String;
  pageData_starts_with?: String;
  pageData_not_starts_with?: String;
  pageData_ends_with?: String;
  pageData_not_ends_with?: String;
  serialNumber?: CupWhereInput;
  AND?: CupDataRawWhereInput[] | CupDataRawWhereInput;
  OR?: CupDataRawWhereInput[] | CupDataRawWhereInput;
  NOT?: CupDataRawWhereInput[] | CupDataRawWhereInput;
}

export interface CupDataUserRemoveUpdateManyWithWhereNestedInput {
  where: CupDataUserRemoveScalarWhereInput;
  data: CupDataUserRemoveUpdateManyDataInput;
}

export interface MarketListDetailSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MarketListDetailWhereInput;
  AND?:
    | MarketListDetailSubscriptionWhereInput[]
    | MarketListDetailSubscriptionWhereInput;
  OR?:
    | MarketListDetailSubscriptionWhereInput[]
    | MarketListDetailSubscriptionWhereInput;
  NOT?:
    | MarketListDetailSubscriptionWhereInput[]
    | MarketListDetailSubscriptionWhereInput;
}

export interface CupDataUserRemoveUpdateManyDataInput {
  changeTime?: DateTimeInput;
}

export interface MarketBuyHistorySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MarketBuyHistoryWhereInput;
  AND?:
    | MarketBuyHistorySubscriptionWhereInput[]
    | MarketBuyHistorySubscriptionWhereInput;
  OR?:
    | MarketBuyHistorySubscriptionWhereInput[]
    | MarketBuyHistorySubscriptionWhereInput;
  NOT?:
    | MarketBuyHistorySubscriptionWhereInput[]
    | MarketBuyHistorySubscriptionWhereInput;
}

export interface UserCupUpdateManyWithoutUserIdInput {
  create?: UserCupCreateWithoutUserIdInput[] | UserCupCreateWithoutUserIdInput;
  delete?: UserCupWhereUniqueInput[] | UserCupWhereUniqueInput;
  connect?: UserCupWhereUniqueInput[] | UserCupWhereUniqueInput;
  set?: UserCupWhereUniqueInput[] | UserCupWhereUniqueInput;
  disconnect?: UserCupWhereUniqueInput[] | UserCupWhereUniqueInput;
  update?:
    | UserCupUpdateWithWhereUniqueWithoutUserIdInput[]
    | UserCupUpdateWithWhereUniqueWithoutUserIdInput;
  upsert?:
    | UserCupUpsertWithWhereUniqueWithoutUserIdInput[]
    | UserCupUpsertWithWhereUniqueWithoutUserIdInput;
  deleteMany?: UserCupScalarWhereInput[] | UserCupScalarWhereInput;
}

export interface HardwareSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: HardwareWhereInput;
  AND?: HardwareSubscriptionWhereInput[] | HardwareSubscriptionWhereInput;
  OR?: HardwareSubscriptionWhereInput[] | HardwareSubscriptionWhereInput;
  NOT?: HardwareSubscriptionWhereInput[] | HardwareSubscriptionWhereInput;
}

export interface UserCupUpdateWithWhereUniqueWithoutUserIdInput {
  where: UserCupWhereUniqueInput;
  data: UserCupUpdateWithoutUserIdDataInput;
}

export interface EthnicitySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: EthnicityWhereInput;
  AND?: EthnicitySubscriptionWhereInput[] | EthnicitySubscriptionWhereInput;
  OR?: EthnicitySubscriptionWhereInput[] | EthnicitySubscriptionWhereInput;
  NOT?: EthnicitySubscriptionWhereInput[] | EthnicitySubscriptionWhereInput;
}

export interface UserCupUpdateWithoutUserIdDataInput {
  serialNumber?: CupUpdateOneWithoutUserCupsInput;
}

export interface CupDataUserRemoveSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CupDataUserRemoveWhereInput;
  AND?:
    | CupDataUserRemoveSubscriptionWhereInput[]
    | CupDataUserRemoveSubscriptionWhereInput;
  OR?:
    | CupDataUserRemoveSubscriptionWhereInput[]
    | CupDataUserRemoveSubscriptionWhereInput;
  NOT?:
    | CupDataUserRemoveSubscriptionWhereInput[]
    | CupDataUserRemoveSubscriptionWhereInput;
}

export interface CupUpdateOneWithoutUserCupsInput {
  create?: CupCreateWithoutUserCupsInput;
  update?: CupUpdateWithoutUserCupsDataInput;
  upsert?: CupUpsertWithoutUserCupsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CupWhereUniqueInput;
}

export interface CupDataUserRemoveExplainWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  cupDataUserRemove_every?: CupDataUserRemoveWhereInput;
  cupDataUserRemove_some?: CupDataUserRemoveWhereInput;
  cupDataUserRemove_none?: CupDataUserRemoveWhereInput;
  explain?: String;
  explain_not?: String;
  explain_in?: String[] | String;
  explain_not_in?: String[] | String;
  explain_lt?: String;
  explain_lte?: String;
  explain_gt?: String;
  explain_gte?: String;
  explain_contains?: String;
  explain_not_contains?: String;
  explain_starts_with?: String;
  explain_not_starts_with?: String;
  explain_ends_with?: String;
  explain_not_ends_with?: String;
  AND?:
    | CupDataUserRemoveExplainWhereInput[]
    | CupDataUserRemoveExplainWhereInput;
  OR?:
    | CupDataUserRemoveExplainWhereInput[]
    | CupDataUserRemoveExplainWhereInput;
  NOT?:
    | CupDataUserRemoveExplainWhereInput[]
    | CupDataUserRemoveExplainWhereInput;
}

export interface CupUpdateWithoutUserCupsDataInput {
  anonSerialNumber?: Int;
  calibId?: CalibrationUpdateOneWithoutCupInput;
  companyId?: CompanyUpdateOneWithoutCupInput;
  cupAppSync?: CupAppSyncUpdateManyWithoutSerialNumberInput;
  cupData?: CupDatumUpdateManyWithoutSerialNumberInput;
  cupDataColourCalib?: CupDataColourCalibUpdateManyWithoutSerialNumberInput;
  cupDataRaw?: CupDataRawUpdateManyWithoutSerialNumberInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutSerialNumberInput;
  encryptionKey?: Int;
  fwId?: FirmwareUpdateOneWithoutCupInput;
  hwId?: HardwareUpdateOneWithoutCupInput;
}

export interface CupDataQaResponseSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CupDataQaResponseWhereInput;
  AND?:
    | CupDataQaResponseSubscriptionWhereInput[]
    | CupDataQaResponseSubscriptionWhereInput;
  OR?:
    | CupDataQaResponseSubscriptionWhereInput[]
    | CupDataQaResponseSubscriptionWhereInput;
  NOT?:
    | CupDataQaResponseSubscriptionWhereInput[]
    | CupDataQaResponseSubscriptionWhereInput;
}

export interface CupDataUserRemoveUpdateManyWithoutSerialNumberInput {
  create?:
    | CupDataUserRemoveCreateWithoutSerialNumberInput[]
    | CupDataUserRemoveCreateWithoutSerialNumberInput;
  delete?:
    | CupDataUserRemoveWhereUniqueInput[]
    | CupDataUserRemoveWhereUniqueInput;
  connect?:
    | CupDataUserRemoveWhereUniqueInput[]
    | CupDataUserRemoveWhereUniqueInput;
  set?: CupDataUserRemoveWhereUniqueInput[] | CupDataUserRemoveWhereUniqueInput;
  disconnect?:
    | CupDataUserRemoveWhereUniqueInput[]
    | CupDataUserRemoveWhereUniqueInput;
  update?:
    | CupDataUserRemoveUpdateWithWhereUniqueWithoutSerialNumberInput[]
    | CupDataUserRemoveUpdateWithWhereUniqueWithoutSerialNumberInput;
  upsert?:
    | CupDataUserRemoveUpsertWithWhereUniqueWithoutSerialNumberInput[]
    | CupDataUserRemoveUpsertWithWhereUniqueWithoutSerialNumberInput;
  deleteMany?:
    | CupDataUserRemoveScalarWhereInput[]
    | CupDataUserRemoveScalarWhereInput;
  updateMany?:
    | CupDataUserRemoveUpdateManyWithWhereNestedInput[]
    | CupDataUserRemoveUpdateManyWithWhereNestedInput;
}

export interface CupDataProcMdateSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CupDataProcMdateWhereInput;
  AND?:
    | CupDataProcMdateSubscriptionWhereInput[]
    | CupDataProcMdateSubscriptionWhereInput;
  OR?:
    | CupDataProcMdateSubscriptionWhereInput[]
    | CupDataProcMdateSubscriptionWhereInput;
  NOT?:
    | CupDataProcMdateSubscriptionWhereInput[]
    | CupDataProcMdateSubscriptionWhereInput;
}

export interface CupDataUserRemoveUpdateWithWhereUniqueWithoutSerialNumberInput {
  where: CupDataUserRemoveWhereUniqueInput;
  data: CupDataUserRemoveUpdateWithoutSerialNumberDataInput;
}

export interface CupDataManMdateSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CupDataManMdateWhereInput;
  AND?:
    | CupDataManMdateSubscriptionWhereInput[]
    | CupDataManMdateSubscriptionWhereInput;
  OR?:
    | CupDataManMdateSubscriptionWhereInput[]
    | CupDataManMdateSubscriptionWhereInput;
  NOT?:
    | CupDataManMdateSubscriptionWhereInput[]
    | CupDataManMdateSubscriptionWhereInput;
}

export interface CupDataUserRemoveUpdateWithoutSerialNumberDataInput {
  changeTime?: DateTimeInput;
  explainId?: CupDataUserRemoveExplainUpdateOneRequiredWithoutCupDataUserRemoveInput;
  userId?: UserUpdateOneRequiredWithoutCupDataUserRemoveInput;
}

export interface CupDataColourCalcSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CupDataColourCalcWhereInput;
  AND?:
    | CupDataColourCalcSubscriptionWhereInput[]
    | CupDataColourCalcSubscriptionWhereInput;
  OR?:
    | CupDataColourCalcSubscriptionWhereInput[]
    | CupDataColourCalcSubscriptionWhereInput;
  NOT?:
    | CupDataColourCalcSubscriptionWhereInput[]
    | CupDataColourCalcSubscriptionWhereInput;
}

export interface UserUpdateOneRequiredWithoutCupDataUserRemoveInput {
  create?: UserCreateWithoutCupDataUserRemoveInput;
  update?: UserUpdateWithoutCupDataUserRemoveDataInput;
  upsert?: UserUpsertWithoutCupDataUserRemoveInput;
  connect?: UserWhereUniqueInput;
}

export interface CupSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CupWhereInput;
  AND?: CupSubscriptionWhereInput[] | CupSubscriptionWhereInput;
  OR?: CupSubscriptionWhereInput[] | CupSubscriptionWhereInput;
  NOT?: CupSubscriptionWhereInput[] | CupSubscriptionWhereInput;
}

export interface UserUpdateWithoutCupDataUserRemoveDataInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncUpdateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowUpdateManyWithoutUserIdInput;
  cupDataProcMdates?: CupDataProcMdateUpdateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseUpdateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob?: DateTimeInput;
  email?: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityUpdateOneWithoutUsersInput;
  firstName?: String;
  givenBirth?: Boolean;
  lastName?: String;
  macId?: String;
  password?: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryUpdateManyWithoutUserIdInput;
  userCups?: UserCupUpdateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumUpdateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodUpdateManyWithoutUserIdInput;
  userWallet?: UserWalletUpdateManyWithoutUserIdInput;
}

export interface CalibrationSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CalibrationWhereInput;
  AND?: CalibrationSubscriptionWhereInput[] | CalibrationSubscriptionWhereInput;
  OR?: CalibrationSubscriptionWhereInput[] | CalibrationSubscriptionWhereInput;
  NOT?: CalibrationSubscriptionWhereInput[] | CalibrationSubscriptionWhereInput;
}

export interface UserUpsertWithoutCupDataUserRemoveInput {
  update: UserUpdateWithoutCupDataUserRemoveDataInput;
  create: UserCreateWithoutCupDataUserRemoveInput;
}

export interface AppServerSyncSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AppServerSyncWhereInput;
  AND?:
    | AppServerSyncSubscriptionWhereInput[]
    | AppServerSyncSubscriptionWhereInput;
  OR?:
    | AppServerSyncSubscriptionWhereInput[]
    | AppServerSyncSubscriptionWhereInput;
  NOT?:
    | AppServerSyncSubscriptionWhereInput[]
    | AppServerSyncSubscriptionWhereInput;
}

export interface CupDataUserRemoveUpsertWithWhereUniqueWithoutSerialNumberInput {
  where: CupDataUserRemoveWhereUniqueInput;
  update: CupDataUserRemoveUpdateWithoutSerialNumberDataInput;
  create: CupDataUserRemoveCreateWithoutSerialNumberInput;
}

export interface AdditionalInfoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AdditionalInfoWhereInput;
  AND?:
    | AdditionalInfoSubscriptionWhereInput[]
    | AdditionalInfoSubscriptionWhereInput;
  OR?:
    | AdditionalInfoSubscriptionWhereInput[]
    | AdditionalInfoSubscriptionWhereInput;
  NOT?:
    | AdditionalInfoSubscriptionWhereInput[]
    | AdditionalInfoSubscriptionWhereInput;
}

export interface CupUpsertWithoutUserCupsInput {
  update: CupUpdateWithoutUserCupsDataInput;
  create: CupCreateWithoutUserCupsInput;
}

export interface UserInterviewDatumWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  answerRange?: Int;
  answerRange_not?: Int;
  answerRange_in?: Int[] | Int;
  answerRange_not_in?: Int[] | Int;
  answerRange_lt?: Int;
  answerRange_lte?: Int;
  answerRange_gt?: Int;
  answerRange_gte?: Int;
  answerText?: String;
  answerText_not?: String;
  answerText_in?: String[] | String;
  answerText_not_in?: String[] | String;
  answerText_lt?: String;
  answerText_lte?: String;
  answerText_gt?: String;
  answerText_gte?: String;
  answerText_contains?: String;
  answerText_not_contains?: String;
  answerText_starts_with?: String;
  answerText_not_starts_with?: String;
  answerText_ends_with?: String;
  answerText_not_ends_with?: String;
  answerYn?: Boolean;
  answerYn_not?: Boolean;
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[] | DateTimeInput;
  date_not_in?: DateTimeInput[] | DateTimeInput;
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  questionId?: UserInterviewQuestionWhereInput;
  userId?: UserWhereInput;
  AND?: UserInterviewDatumWhereInput[] | UserInterviewDatumWhereInput;
  OR?: UserInterviewDatumWhereInput[] | UserInterviewDatumWhereInput;
  NOT?: UserInterviewDatumWhereInput[] | UserInterviewDatumWhereInput;
}

export interface UserCupUpsertWithWhereUniqueWithoutUserIdInput {
  where: UserCupWhereUniqueInput;
  update: UserCupUpdateWithoutUserIdDataInput;
  create: UserCupCreateWithoutUserIdInput;
}

export type CountryWhereUniqueInput = AtLeastOne<{
  id: Int;
  countryName?: String;
}>;

export interface UserUpsertWithoutCupDataProcFlowInput {
  update: UserUpdateWithoutCupDataProcFlowDataInput;
  create: UserCreateWithoutCupDataProcFlowInput;
}

export interface UserUpdateOneWithoutUserWalletInput {
  create?: UserCreateWithoutUserWalletInput;
  update?: UserUpdateWithoutUserWalletDataInput;
  upsert?: UserUpsertWithoutUserWalletInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface CupDataProcFlowUpsertWithWhereUniqueWithoutMdateRowIdInput {
  where: CupDataProcFlowWhereUniqueInput;
  update: CupDataProcFlowUpdateWithoutMdateRowIdDataInput;
  create: CupDataProcFlowCreateWithoutMdateRowIdInput;
}

export interface UserCreateOneWithoutUserWalletInput {
  create?: UserCreateWithoutUserWalletInput;
  connect?: UserWhereUniqueInput;
}

export interface CupDataProcFlowScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  date?: DateTimeInput;
  date_not?: DateTimeInput;
  date_in?: DateTimeInput[] | DateTimeInput;
  date_not_in?: DateTimeInput[] | DateTimeInput;
  date_lt?: DateTimeInput;
  date_lte?: DateTimeInput;
  date_gt?: DateTimeInput;
  date_gte?: DateTimeInput;
  hourlyFlow?: Int;
  hourlyFlow_not?: Int;
  hourlyFlow_in?: Int[] | Int;
  hourlyFlow_not_in?: Int[] | Int;
  hourlyFlow_lt?: Int;
  hourlyFlow_lte?: Int;
  hourlyFlow_gt?: Int;
  hourlyFlow_gte?: Int;
  AND?: CupDataProcFlowScalarWhereInput[] | CupDataProcFlowScalarWhereInput;
  OR?: CupDataProcFlowScalarWhereInput[] | CupDataProcFlowScalarWhereInput;
  NOT?: CupDataProcFlowScalarWhereInput[] | CupDataProcFlowScalarWhereInput;
}

export interface UserRecordDataByDayUpsertWithoutUserRecordDataByTimeInput {
  update: UserRecordDataByDayUpdateWithoutUserRecordDataByTimeDataInput;
  create: UserRecordDataByDayCreateWithoutUserRecordDataByTimeInput;
}

export interface CupDataProcFlowUpdateManyWithWhereNestedInput {
  where: CupDataProcFlowScalarWhereInput;
  data: CupDataProcFlowUpdateManyDataInput;
}

export interface UserRecordDataByTimeUpdateInput {
  cameraDataId?: Int;
  changeTime?: DateTimeInput;
  colorB?: Int;
  colorG?: Int;
  colorR?: Int;
  leakage?: String;
  recordDayRowId?: UserRecordDataByDayUpdateOneWithoutUserRecordDataByTimeInput;
  startTime?: DateTimeInput;
  volume?: Float;
}

export interface CupDataProcFlowUpdateManyDataInput {
  date?: DateTimeInput;
  hourlyFlow?: Int;
}

export interface UserRecordDataByTimeCreateInput {
  cameraDataId?: Int;
  changeTime: DateTimeInput;
  colorB?: Int;
  colorG?: Int;
  colorR?: Int;
  leakage?: String;
  recordDayRowId?: UserRecordDataByDayCreateOneWithoutUserRecordDataByTimeInput;
  startTime?: DateTimeInput;
  volume?: Float;
}

export interface CupDataProcMdateUpsertWithWhereUniqueWithoutUserIdInput {
  where: CupDataProcMdateWhereUniqueInput;
  update: CupDataProcMdateUpdateWithoutUserIdDataInput;
  create: CupDataProcMdateCreateWithoutUserIdInput;
}

export interface UserRecordDataByPeriodCreateInput {
  coinHistoryRowId?: Int;
  isTakePill?: Boolean;
  mensFinish?: DateTimeInput;
  mensStart?: DateTimeInput;
  userId?: UserCreateOneWithoutUserRecordDataByPeriodInput;
  userRecordDataByDay?: UserRecordDataByDayCreateManyWithoutRecordPeriodRowIdInput;
}

export interface CupDataProcMdateScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  dataRejected?: Boolean;
  dataRejected_not?: Boolean;
  dataVerified?: Boolean;
  dataVerified_not?: Boolean;
  menFinish?: DateTimeInput;
  menFinish_not?: DateTimeInput;
  menFinish_in?: DateTimeInput[] | DateTimeInput;
  menFinish_not_in?: DateTimeInput[] | DateTimeInput;
  menFinish_lt?: DateTimeInput;
  menFinish_lte?: DateTimeInput;
  menFinish_gt?: DateTimeInput;
  menFinish_gte?: DateTimeInput;
  menStart?: DateTimeInput;
  menStart_not?: DateTimeInput;
  menStart_in?: DateTimeInput[] | DateTimeInput;
  menStart_not_in?: DateTimeInput[] | DateTimeInput;
  menStart_lt?: DateTimeInput;
  menStart_lte?: DateTimeInput;
  menStart_gt?: DateTimeInput;
  menStart_gte?: DateTimeInput;
  rewardAmount?: Int;
  rewardAmount_not?: Int;
  rewardAmount_in?: Int[] | Int;
  rewardAmount_not_in?: Int[] | Int;
  rewardAmount_lt?: Int;
  rewardAmount_lte?: Int;
  rewardAmount_gt?: Int;
  rewardAmount_gte?: Int;
  AND?: CupDataProcMdateScalarWhereInput[] | CupDataProcMdateScalarWhereInput;
  OR?: CupDataProcMdateScalarWhereInput[] | CupDataProcMdateScalarWhereInput;
  NOT?: CupDataProcMdateScalarWhereInput[] | CupDataProcMdateScalarWhereInput;
}

export interface UserUpsertWithoutUserRecordDataByPeriodInput {
  update: UserUpdateWithoutUserRecordDataByPeriodDataInput;
  create: UserCreateWithoutUserRecordDataByPeriodInput;
}

export interface CupDataProcMdateUpdateManyWithWhereNestedInput {
  where: CupDataProcMdateScalarWhereInput;
  data: CupDataProcMdateUpdateManyDataInput;
}

export interface UserRecordDataByPeriodUpdateWithoutUserRecordDataByDayDataInput {
  coinHistoryRowId?: Int;
  isTakePill?: Boolean;
  mensFinish?: DateTimeInput;
  mensStart?: DateTimeInput;
  userId?: UserUpdateOneWithoutUserRecordDataByPeriodInput;
}

export interface CupDataProcMdateUpdateManyDataInput {
  dataRejected?: Boolean;
  dataVerified?: Boolean;
  menFinish?: DateTimeInput;
  menStart?: DateTimeInput;
  rewardAmount?: Int;
}

export interface UserCreateWithoutUserRecordDataByPeriodInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncCreateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowCreateManyWithoutUserIdInput;
  cupDataProcMdates?: CupDataProcMdateCreateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseCreateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob: DateTimeInput;
  email: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityCreateOneWithoutUsersInput;
  firstName: String;
  givenBirth: Boolean;
  lastName: String;
  macId?: String;
  password: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryCreateManyWithoutUserIdInput;
  userCups?: UserCupCreateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumCreateManyWithoutUserIdInput;
  userWallet?: UserWalletCreateManyWithoutUserIdInput;
}

export interface UserUpsertWithoutCupDataQaResponseInput {
  update: UserUpdateWithoutCupDataQaResponseDataInput;
  create: UserCreateWithoutCupDataQaResponseInput;
}

export interface UserRecordDataByPeriodCreateOneWithoutUserRecordDataByDayInput {
  create?: UserRecordDataByPeriodCreateWithoutUserRecordDataByDayInput;
  connect?: UserRecordDataByPeriodWhereUniqueInput;
}

export interface CupDataQaResponseUpsertWithWhereUniqueWithoutQuestionIdInput {
  where: CupDataQaResponseWhereUniqueInput;
  update: CupDataQaResponseUpdateWithoutQuestionIdDataInput;
  create: CupDataQaResponseCreateWithoutQuestionIdInput;
}

export interface UserCoinHistoryUpsertWithoutUserRecordCameraDataByTimeInput {
  update: UserCoinHistoryUpdateWithoutUserRecordCameraDataByTimeDataInput;
  create: UserCoinHistoryCreateWithoutUserRecordCameraDataByTimeInput;
}

export interface CupDataQaResponseScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  qaDate?: DateTimeInput;
  qaDate_not?: DateTimeInput;
  qaDate_in?: DateTimeInput[] | DateTimeInput;
  qaDate_not_in?: DateTimeInput[] | DateTimeInput;
  qaDate_lt?: DateTimeInput;
  qaDate_lte?: DateTimeInput;
  qaDate_gt?: DateTimeInput;
  qaDate_gte?: DateTimeInput;
  AND?: CupDataQaResponseScalarWhereInput[] | CupDataQaResponseScalarWhereInput;
  OR?: CupDataQaResponseScalarWhereInput[] | CupDataQaResponseScalarWhereInput;
  NOT?: CupDataQaResponseScalarWhereInput[] | CupDataQaResponseScalarWhereInput;
}

export interface UserInterviewQuestionWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  answerTypeId?: AnswerTypeWhereInput;
  question?: String;
  question_not?: String;
  question_in?: String[] | String;
  question_not_in?: String[] | String;
  question_lt?: String;
  question_lte?: String;
  question_gt?: String;
  question_gte?: String;
  question_contains?: String;
  question_not_contains?: String;
  question_starts_with?: String;
  question_not_starts_with?: String;
  question_ends_with?: String;
  question_not_ends_with?: String;
  userInterviewData_every?: UserInterviewDatumWhereInput;
  userInterviewData_some?: UserInterviewDatumWhereInput;
  userInterviewData_none?: UserInterviewDatumWhereInput;
  AND?: UserInterviewQuestionWhereInput[] | UserInterviewQuestionWhereInput;
  OR?: UserInterviewQuestionWhereInput[] | UserInterviewQuestionWhereInput;
  NOT?: UserInterviewQuestionWhereInput[] | UserInterviewQuestionWhereInput;
}

export interface CupDataQaResponseUpdateManyWithWhereNestedInput {
  where: CupDataQaResponseScalarWhereInput;
  data: CupDataQaResponseUpdateManyDataInput;
}

export type CupDataRawWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CupDataQaResponseUpdateManyDataInput {
  qaDate?: DateTimeInput;
}

export type CupDataRejectionWhereUniqueInput = AtLeastOne<{
  id: Int;
  rejectionDescription?: String;
}>;

export interface CupDataQuestionUpsertWithoutCupDataAnswerInput {
  update: CupDataQuestionUpdateWithoutCupDataAnswerDataInput;
  create: CupDataQuestionCreateWithoutCupDataAnswerInput;
}

export interface UserInterviewDatumCreateInput {
  answerRange?: Int;
  answerText?: String;
  answerYn?: Boolean;
  date: DateTimeInput;
  questionId: UserInterviewQuestionCreateOneWithoutUserInterviewDataInput;
  userId: UserCreateOneWithoutUserInterviewDataInput;
}

export interface CupDataAnswerUpsertWithoutCupDataQaResponseInput {
  update: CupDataAnswerUpdateWithoutCupDataQaResponseDataInput;
  create: CupDataAnswerCreateWithoutCupDataQaResponseInput;
}

export interface UserCoinRewardsFeeUpdateManyMutationInput {
  amount?: Int;
  contents?: String;
  createTime?: DateTimeInput;
  updateTime?: DateTimeInput;
}

export interface CupDataQuestionUpdateOneRequiredWithoutCupDataQaResponseInput {
  create?: CupDataQuestionCreateWithoutCupDataQaResponseInput;
  update?: CupDataQuestionUpdateWithoutCupDataQaResponseDataInput;
  upsert?: CupDataQuestionUpsertWithoutCupDataQaResponseInput;
  connect?: CupDataQuestionWhereUniqueInput;
}

export interface UserCoinRewardsFeeCreateInput {
  amount?: Int;
  contents?: String;
  createTime?: DateTimeInput;
  updateTime?: DateTimeInput;
}

export interface CupDataQuestionUpdateWithoutCupDataQaResponseDataInput {
  cupDataAnswer?: CupDataAnswerUpdateManyWithoutQuestionIdInput;
  questionText?: String;
}

export interface UserCoinHistoryCreateInput {
  category: String;
  coin: Int;
  contents: String;
  date: DateTimeInput;
  marketBuyHistory?: MarketBuyHistoryCreateManyWithoutCoinHistoryRowIdInput;
  txhash: String;
  userId?: UserCreateOneWithoutUserCoinHistoryInput;
  userRecordCameraDataByTime?: UserRecordCameraDataByTimeCreateManyWithoutCoinHistoryRowIdInput;
  walletId?: Int;
}

export interface CupDataAnswerUpdateManyWithoutQuestionIdInput {
  create?:
    | CupDataAnswerCreateWithoutQuestionIdInput[]
    | CupDataAnswerCreateWithoutQuestionIdInput;
  delete?: CupDataAnswerWhereUniqueInput[] | CupDataAnswerWhereUniqueInput;
  connect?: CupDataAnswerWhereUniqueInput[] | CupDataAnswerWhereUniqueInput;
  set?: CupDataAnswerWhereUniqueInput[] | CupDataAnswerWhereUniqueInput;
  disconnect?: CupDataAnswerWhereUniqueInput[] | CupDataAnswerWhereUniqueInput;
  update?:
    | CupDataAnswerUpdateWithWhereUniqueWithoutQuestionIdInput[]
    | CupDataAnswerUpdateWithWhereUniqueWithoutQuestionIdInput;
  upsert?:
    | CupDataAnswerUpsertWithWhereUniqueWithoutQuestionIdInput[]
    | CupDataAnswerUpsertWithWhereUniqueWithoutQuestionIdInput;
  deleteMany?: CupDataAnswerScalarWhereInput[] | CupDataAnswerScalarWhereInput;
  updateMany?:
    | CupDataAnswerUpdateManyWithWhereNestedInput[]
    | CupDataAnswerUpdateManyWithWhereNestedInput;
}

export interface UserCreateInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncCreateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowCreateManyWithoutUserIdInput;
  cupDataProcMdates?: CupDataProcMdateCreateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseCreateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob: DateTimeInput;
  email: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityCreateOneWithoutUsersInput;
  firstName: String;
  givenBirth: Boolean;
  lastName: String;
  macId?: String;
  password: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryCreateManyWithoutUserIdInput;
  userCups?: UserCupCreateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumCreateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodCreateManyWithoutUserIdInput;
  userWallet?: UserWalletCreateManyWithoutUserIdInput;
}

export interface CupDataAnswerUpdateWithWhereUniqueWithoutQuestionIdInput {
  where: CupDataAnswerWhereUniqueInput;
  data: CupDataAnswerUpdateWithoutQuestionIdDataInput;
}

export interface PlatformCompCreateInput {
  phoneId: Int;
  platformId: Int;
  problemHistory?: Boolean;
  softwareId: Int;
  successHistory?: Boolean;
}

export interface CupDataAnswerUpdateWithoutQuestionIdDataInput {
  answerText?: String;
  cupDataQaResponse?: CupDataQaResponseUpdateManyWithoutAnswerIdInput;
}

export type HardwareWhereUniqueInput = AtLeastOne<{
  id: Int;
  hwVersion?: String;
}>;

export interface CupDataQaResponseUpdateManyWithoutAnswerIdInput {
  create?:
    | CupDataQaResponseCreateWithoutAnswerIdInput[]
    | CupDataQaResponseCreateWithoutAnswerIdInput;
  delete?:
    | CupDataQaResponseWhereUniqueInput[]
    | CupDataQaResponseWhereUniqueInput;
  connect?:
    | CupDataQaResponseWhereUniqueInput[]
    | CupDataQaResponseWhereUniqueInput;
  set?: CupDataQaResponseWhereUniqueInput[] | CupDataQaResponseWhereUniqueInput;
  disconnect?:
    | CupDataQaResponseWhereUniqueInput[]
    | CupDataQaResponseWhereUniqueInput;
  update?:
    | CupDataQaResponseUpdateWithWhereUniqueWithoutAnswerIdInput[]
    | CupDataQaResponseUpdateWithWhereUniqueWithoutAnswerIdInput;
  upsert?:
    | CupDataQaResponseUpsertWithWhereUniqueWithoutAnswerIdInput[]
    | CupDataQaResponseUpsertWithWhereUniqueWithoutAnswerIdInput;
  deleteMany?:
    | CupDataQaResponseScalarWhereInput[]
    | CupDataQaResponseScalarWhereInput;
  updateMany?:
    | CupDataQaResponseUpdateManyWithWhereNestedInput[]
    | CupDataQaResponseUpdateManyWithWhereNestedInput;
}

export interface MarketListCreateOneWithoutMarketListDetailInput {
  create?: MarketListCreateWithoutMarketListDetailInput;
  connect?: MarketListWhereUniqueInput;
}

export interface CupDataQaResponseUpdateWithWhereUniqueWithoutAnswerIdInput {
  where: CupDataQaResponseWhereUniqueInput;
  data: CupDataQaResponseUpdateWithoutAnswerIdDataInput;
}

export interface MarketListUpdateManyMutationInput {
  count?: Int;
  endTime?: DateTimeInput;
  image?: String;
  price?: Int;
  startTime?: DateTimeInput;
  title?: String;
}

export interface CupDataQaResponseUpdateWithoutAnswerIdDataInput {
  qaDate?: DateTimeInput;
  questionId?: CupDataQuestionUpdateOneRequiredWithoutCupDataQaResponseInput;
  userId?: UserUpdateOneRequiredWithoutCupDataQaResponseInput;
}

export type MarketBuyHistoryWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CupDataQaResponseUpsertWithWhereUniqueWithoutAnswerIdInput {
  where: CupDataQaResponseWhereUniqueInput;
  update: CupDataQaResponseUpdateWithoutAnswerIdDataInput;
  create: CupDataQaResponseCreateWithoutAnswerIdInput;
}

export type MarketListWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CupDataAnswerUpsertWithWhereUniqueWithoutQuestionIdInput {
  where: CupDataAnswerWhereUniqueInput;
  update: CupDataAnswerUpdateWithoutQuestionIdDataInput;
  create: CupDataAnswerCreateWithoutQuestionIdInput;
}

export interface AdditionalInfoWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  abnormalUltrasoundFinding?: Boolean;
  abnormalUltrasoundFinding_not?: Boolean;
  conditionSurgicalHistory?: String;
  conditionSurgicalHistory_not?: String;
  conditionSurgicalHistory_in?: String[] | String;
  conditionSurgicalHistory_not_in?: String[] | String;
  conditionSurgicalHistory_lt?: String;
  conditionSurgicalHistory_lte?: String;
  conditionSurgicalHistory_gt?: String;
  conditionSurgicalHistory_gte?: String;
  conditionSurgicalHistory_contains?: String;
  conditionSurgicalHistory_not_contains?: String;
  conditionSurgicalHistory_starts_with?: String;
  conditionSurgicalHistory_not_starts_with?: String;
  conditionSurgicalHistory_ends_with?: String;
  conditionSurgicalHistory_not_ends_with?: String;
  cycle?: Int;
  cycle_not?: Int;
  cycle_in?: Int[] | Int;
  cycle_not_in?: Int[] | Int;
  cycle_lt?: Int;
  cycle_lte?: Int;
  cycle_gt?: Int;
  cycle_gte?: Int;
  cycleIrregular?: Boolean;
  cycleIrregular_not?: Boolean;
  ethnicity?: String;
  ethnicity_not?: String;
  ethnicity_in?: String[] | String;
  ethnicity_not_in?: String[] | String;
  ethnicity_lt?: String;
  ethnicity_lte?: String;
  ethnicity_gt?: String;
  ethnicity_gte?: String;
  ethnicity_contains?: String;
  ethnicity_not_contains?: String;
  ethnicity_starts_with?: String;
  ethnicity_not_starts_with?: String;
  ethnicity_ends_with?: String;
  ethnicity_not_ends_with?: String;
  height?: Float;
  height_not?: Float;
  height_in?: Float[] | Float;
  height_not_in?: Float[] | Float;
  height_lt?: Float;
  height_lte?: Float;
  height_gt?: Float;
  height_gte?: Float;
  inUseMenstrualCup?: String;
  inUseMenstrualCup_not?: String;
  inUseMenstrualCup_in?: String[] | String;
  inUseMenstrualCup_not_in?: String[] | String;
  inUseMenstrualCup_lt?: String;
  inUseMenstrualCup_lte?: String;
  inUseMenstrualCup_gt?: String;
  inUseMenstrualCup_gte?: String;
  inUseMenstrualCup_contains?: String;
  inUseMenstrualCup_not_contains?: String;
  inUseMenstrualCup_starts_with?: String;
  inUseMenstrualCup_not_starts_with?: String;
  inUseMenstrualCup_ends_with?: String;
  inUseMenstrualCup_not_ends_with?: String;
  inUseMenstrualCupSize?: String;
  inUseMenstrualCupSize_not?: String;
  inUseMenstrualCupSize_in?: String[] | String;
  inUseMenstrualCupSize_not_in?: String[] | String;
  inUseMenstrualCupSize_lt?: String;
  inUseMenstrualCupSize_lte?: String;
  inUseMenstrualCupSize_gt?: String;
  inUseMenstrualCupSize_gte?: String;
  inUseMenstrualCupSize_contains?: String;
  inUseMenstrualCupSize_not_contains?: String;
  inUseMenstrualCupSize_starts_with?: String;
  inUseMenstrualCupSize_not_starts_with?: String;
  inUseMenstrualCupSize_ends_with?: String;
  inUseMenstrualCupSize_not_ends_with?: String;
  iudImplanonExpireDate?: DateTimeInput;
  iudImplanonExpireDate_not?: DateTimeInput;
  iudImplanonExpireDate_in?: DateTimeInput[] | DateTimeInput;
  iudImplanonExpireDate_not_in?: DateTimeInput[] | DateTimeInput;
  iudImplanonExpireDate_lt?: DateTimeInput;
  iudImplanonExpireDate_lte?: DateTimeInput;
  iudImplanonExpireDate_gt?: DateTimeInput;
  iudImplanonExpireDate_gte?: DateTimeInput;
  iudImplanonInsertDate?: DateTimeInput;
  iudImplanonInsertDate_not?: DateTimeInput;
  iudImplanonInsertDate_in?: DateTimeInput[] | DateTimeInput;
  iudImplanonInsertDate_not_in?: DateTimeInput[] | DateTimeInput;
  iudImplanonInsertDate_lt?: DateTimeInput;
  iudImplanonInsertDate_lte?: DateTimeInput;
  iudImplanonInsertDate_gt?: DateTimeInput;
  iudImplanonInsertDate_gte?: DateTimeInput;
  lastPeriodDate?: DateTimeInput;
  lastPeriodDate_not?: DateTimeInput;
  lastPeriodDate_in?: DateTimeInput[] | DateTimeInput;
  lastPeriodDate_not_in?: DateTimeInput[] | DateTimeInput;
  lastPeriodDate_lt?: DateTimeInput;
  lastPeriodDate_lte?: DateTimeInput;
  lastPeriodDate_gt?: DateTimeInput;
  lastPeriodDate_gte?: DateTimeInput;
  medicineList?: String;
  medicineList_not?: String;
  medicineList_in?: String[] | String;
  medicineList_not_in?: String[] | String;
  medicineList_lt?: String;
  medicineList_lte?: String;
  medicineList_gt?: String;
  medicineList_gte?: String;
  medicineList_contains?: String;
  medicineList_not_contains?: String;
  medicineList_starts_with?: String;
  medicineList_not_starts_with?: String;
  medicineList_ends_with?: String;
  medicineList_not_ends_with?: String;
  period?: Int;
  period_not?: Int;
  period_in?: Int[] | Int;
  period_not_in?: Int[] | Int;
  period_lt?: Int;
  period_lte?: Int;
  period_gt?: Int;
  period_gte?: Int;
  periodIrregular?: Boolean;
  periodIrregular_not?: Boolean;
  userId?: Int;
  userId_not?: Int;
  userId_in?: Int[] | Int;
  userId_not_in?: Int[] | Int;
  userId_lt?: Int;
  userId_lte?: Int;
  userId_gt?: Int;
  userId_gte?: Int;
  weight?: Float;
  weight_not?: Float;
  weight_in?: Float[] | Float;
  weight_not_in?: Float[] | Float;
  weight_lt?: Float;
  weight_lte?: Float;
  weight_gt?: Float;
  weight_gte?: Float;
  AND?: AdditionalInfoWhereInput[] | AdditionalInfoWhereInput;
  OR?: AdditionalInfoWhereInput[] | AdditionalInfoWhereInput;
  NOT?: AdditionalInfoWhereInput[] | AdditionalInfoWhereInput;
}

export interface CupDataAnswerScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  answerText?: String;
  answerText_not?: String;
  answerText_in?: String[] | String;
  answerText_not_in?: String[] | String;
  answerText_lt?: String;
  answerText_lte?: String;
  answerText_gt?: String;
  answerText_gte?: String;
  answerText_contains?: String;
  answerText_not_contains?: String;
  answerText_starts_with?: String;
  answerText_not_starts_with?: String;
  answerText_ends_with?: String;
  answerText_not_ends_with?: String;
  AND?: CupDataAnswerScalarWhereInput[] | CupDataAnswerScalarWhereInput;
  OR?: CupDataAnswerScalarWhereInput[] | CupDataAnswerScalarWhereInput;
  NOT?: CupDataAnswerScalarWhereInput[] | CupDataAnswerScalarWhereInput;
}

export interface MarketListCreateInput {
  count?: Int;
  endTime: DateTimeInput;
  image?: String;
  marketListDetail?: MarketListDetailCreateManyWithoutMarketListIdInput;
  price?: Int;
  startTime: DateTimeInput;
  title?: String;
}

export interface CupDataAnswerUpdateManyWithWhereNestedInput {
  where: CupDataAnswerScalarWhereInput;
  data: CupDataAnswerUpdateManyDataInput;
}

export interface UserUpsertWithoutUserCoinHistoryInput {
  update: UserUpdateWithoutUserCoinHistoryDataInput;
  create: UserCreateWithoutUserCoinHistoryInput;
}

export interface CupDataAnswerUpdateManyDataInput {
  answerText?: String;
}

export interface PlatformCompWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  phoneId?: Int;
  phoneId_not?: Int;
  phoneId_in?: Int[] | Int;
  phoneId_not_in?: Int[] | Int;
  phoneId_lt?: Int;
  phoneId_lte?: Int;
  phoneId_gt?: Int;
  phoneId_gte?: Int;
  platformId?: Int;
  platformId_not?: Int;
  platformId_in?: Int[] | Int;
  platformId_not_in?: Int[] | Int;
  platformId_lt?: Int;
  platformId_lte?: Int;
  platformId_gt?: Int;
  platformId_gte?: Int;
  problemHistory?: Boolean;
  problemHistory_not?: Boolean;
  softwareId?: Int;
  softwareId_not?: Int;
  softwareId_in?: Int[] | Int;
  softwareId_not_in?: Int[] | Int;
  softwareId_lt?: Int;
  softwareId_lte?: Int;
  softwareId_gt?: Int;
  softwareId_gte?: Int;
  successHistory?: Boolean;
  successHistory_not?: Boolean;
  AND?: PlatformCompWhereInput[] | PlatformCompWhereInput;
  OR?: PlatformCompWhereInput[] | PlatformCompWhereInput;
  NOT?: PlatformCompWhereInput[] | PlatformCompWhereInput;
}

export interface CupDataQuestionUpsertWithoutCupDataQaResponseInput {
  update: CupDataQuestionUpdateWithoutCupDataQaResponseDataInput;
  create: CupDataQuestionCreateWithoutCupDataQaResponseInput;
}

export interface UserCreateWithoutUserCoinHistoryInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncCreateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowCreateManyWithoutUserIdInput;
  cupDataProcMdates?: CupDataProcMdateCreateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseCreateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob: DateTimeInput;
  email: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityCreateOneWithoutUsersInput;
  firstName: String;
  givenBirth: Boolean;
  lastName: String;
  macId?: String;
  password: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCups?: UserCupCreateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumCreateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodCreateManyWithoutUserIdInput;
  userWallet?: UserWalletCreateManyWithoutUserIdInput;
}

export interface CupDataQaResponseUpsertWithWhereUniqueWithoutUserIdInput {
  where: CupDataQaResponseWhereUniqueInput;
  update: CupDataQaResponseUpdateWithoutUserIdDataInput;
  create: CupDataQaResponseCreateWithoutUserIdInput;
}

export interface UserCoinHistoryCreateOneWithoutMarketBuyHistoryInput {
  create?: UserCoinHistoryCreateWithoutMarketBuyHistoryInput;
  connect?: UserCoinHistoryWhereUniqueInput;
}

export interface UserUpsertWithoutCupDataProcMdatesInput {
  update: UserUpdateWithoutCupDataProcMdatesDataInput;
  create: UserCreateWithoutCupDataProcMdatesInput;
}

export interface MarketAmazonCouponUpdateInput {
  availability?: Boolean;
  couponNumber?: String;
  createTime?: DateTimeInput;
  endTime?: DateTimeInput;
  marketListId?: Int;
  price?: Int;
  startTime?: DateTimeInput;
  title?: String;
}

export interface CupDataProcMdateUpsertWithoutCupDataProcFlowInput {
  update: CupDataProcMdateUpdateWithoutCupDataProcFlowDataInput;
  create: CupDataProcMdateCreateWithoutCupDataProcFlowInput;
}

export interface HardwareUpdateManyMutationInput {
  hwVersion?: String;
}

export interface CupDataProcFlowUpsertWithWhereUniqueWithoutUserIdInput {
  where: CupDataProcFlowWhereUniqueInput;
  update: CupDataProcFlowUpdateWithoutUserIdDataInput;
  create: CupDataProcFlowCreateWithoutUserIdInput;
}

export type UserCupWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface UserUpsertWithoutUserInterviewDataInput {
  update: UserUpdateWithoutUserInterviewDataDataInput;
  create: UserCreateWithoutUserInterviewDataInput;
}

export type UserInterviewDatumWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface UserInterviewDatumUpsertWithWhereUniqueWithoutQuestionIdInput {
  where: UserInterviewDatumWhereUniqueInput;
  update: UserInterviewDatumUpdateWithoutQuestionIdDataInput;
  create: UserInterviewDatumCreateWithoutQuestionIdInput;
}

export type UserInterviewQuestionWhereUniqueInput = AtLeastOne<{
  id: Int;
  question?: String;
}>;

export interface UserInterviewQuestionUpsertWithWhereUniqueWithoutAnswerTypeIdInput {
  where: UserInterviewQuestionWhereUniqueInput;
  update: UserInterviewQuestionUpdateWithoutAnswerTypeIdDataInput;
  create: UserInterviewQuestionCreateWithoutAnswerTypeIdInput;
}

export type UserRecordCameraDataByTimeWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface UserInterviewQuestionScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  question?: String;
  question_not?: String;
  question_in?: String[] | String;
  question_not_in?: String[] | String;
  question_lt?: String;
  question_lte?: String;
  question_gt?: String;
  question_gte?: String;
  question_contains?: String;
  question_not_contains?: String;
  question_starts_with?: String;
  question_not_starts_with?: String;
  question_ends_with?: String;
  question_not_ends_with?: String;
  AND?:
    | UserInterviewQuestionScalarWhereInput[]
    | UserInterviewQuestionScalarWhereInput;
  OR?:
    | UserInterviewQuestionScalarWhereInput[]
    | UserInterviewQuestionScalarWhereInput;
  NOT?:
    | UserInterviewQuestionScalarWhereInput[]
    | UserInterviewQuestionScalarWhereInput;
}

export type UserRecordDataByDayWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface UserInterviewQuestionUpdateManyWithWhereNestedInput {
  where: UserInterviewQuestionScalarWhereInput;
  data: UserInterviewQuestionUpdateManyDataInput;
}

export type UserRecordDataByPeriodWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface UserInterviewQuestionUpdateManyDataInput {
  question?: String;
}

export type UserRecordDataByTimeWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface AnswerTypeUpdateManyMutationInput {
  answerType?: String;
}

export type UserWalletWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface AppServerSyncCreateInput {
  serverSynchTime: DateTimeInput;
  userId: UserCreateOneWithoutAppServerSyncInput;
}

export type UsersDataAnalysisWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface UserCreateOneWithoutAppServerSyncInput {
  create?: UserCreateWithoutAppServerSyncInput;
  connect?: UserWhereUniqueInput;
}

export interface CupDatumUpdateManyMutationInput {
  battery?: Int;
  calibFlag?: Boolean;
  ch1?: Int;
  ch10?: Int;
  ch11?: Int;
  ch12?: Int;
  ch13?: Int;
  ch14?: Int;
  ch2?: Int;
  ch3?: Int;
  ch4?: Int;
  ch5?: Int;
  ch6?: Int;
  ch7?: Int;
  ch8?: Int;
  ch9?: Int;
  colourB?: Int;
  colourC?: Int;
  colourG?: Int;
  colourR?: Int;
  date?: DateTimeInput;
  day?: Int;
  hour?: Int;
  line?: Int;
  minute?: Int;
  month?: Int;
  page?: Int;
  rawTotalVolume?: Int;
  rawVolumeL?: Int;
  rawVolumeR?: Int;
  temperature?: Int;
  x?: Int;
  y?: Int;
  year?: Int;
  z?: Int;
}

export interface UserCreateWithoutAppServerSyncInput {
  anonUserId?: Int;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowCreateManyWithoutUserIdInput;
  cupDataProcMdates?: CupDataProcMdateCreateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseCreateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob: DateTimeInput;
  email: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityCreateOneWithoutUsersInput;
  firstName: String;
  givenBirth: Boolean;
  lastName: String;
  macId?: String;
  password: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryCreateManyWithoutUserIdInput;
  userCups?: UserCupCreateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumCreateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodCreateManyWithoutUserIdInput;
  userWallet?: UserWalletCreateManyWithoutUserIdInput;
}

export interface CupDataUserRemoveUpsertWithWhereUniqueWithoutExplainIdInput {
  where: CupDataUserRemoveWhereUniqueInput;
  update: CupDataUserRemoveUpdateWithoutExplainIdDataInput;
  create: CupDataUserRemoveCreateWithoutExplainIdInput;
}

export interface AppServerSyncUpdateInput {
  serverSynchTime?: DateTimeInput;
  userId?: UserUpdateOneRequiredWithoutAppServerSyncInput;
}

export interface UserInterviewQuestionCreateWithoutAnswerTypeIdInput {
  question: String;
  userInterviewData?: UserInterviewDatumCreateManyWithoutQuestionIdInput;
}

export interface UserUpdateOneRequiredWithoutAppServerSyncInput {
  create?: UserCreateWithoutAppServerSyncInput;
  update?: UserUpdateWithoutAppServerSyncDataInput;
  upsert?: UserUpsertWithoutAppServerSyncInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutUserInterviewDataInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncCreateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowCreateManyWithoutUserIdInput;
  cupDataProcMdates?: CupDataProcMdateCreateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseCreateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob: DateTimeInput;
  email: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityCreateOneWithoutUsersInput;
  firstName: String;
  givenBirth: Boolean;
  lastName: String;
  macId?: String;
  password: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryCreateManyWithoutUserIdInput;
  userCups?: UserCupCreateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodCreateManyWithoutUserIdInput;
  userWallet?: UserWalletCreateManyWithoutUserIdInput;
}

export interface UserUpdateWithoutAppServerSyncDataInput {
  anonUserId?: Int;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowUpdateManyWithoutUserIdInput;
  cupDataProcMdates?: CupDataProcMdateUpdateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseUpdateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob?: DateTimeInput;
  email?: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityUpdateOneWithoutUsersInput;
  firstName?: String;
  givenBirth?: Boolean;
  lastName?: String;
  macId?: String;
  password?: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryUpdateManyWithoutUserIdInput;
  userCups?: UserCupUpdateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumUpdateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodUpdateManyWithoutUserIdInput;
  userWallet?: UserWalletUpdateManyWithoutUserIdInput;
}

export interface CupDataProcFlowCreateWithoutUserIdInput {
  date: DateTimeInput;
  hourlyFlow: Int;
  mdateRowId: CupDataProcMdateCreateOneWithoutCupDataProcFlowInput;
}

export interface UserUpsertWithoutAppServerSyncInput {
  update: UserUpdateWithoutAppServerSyncDataInput;
  create: UserCreateWithoutAppServerSyncInput;
}

export interface CupDataManMdateCreateWithoutMdateRowIdInput {
  menFinish?: DateTimeInput;
  menStart?: DateTimeInput;
}

export interface AppServerSyncUpdateManyMutationInput {
  serverSynchTime?: DateTimeInput;
}

export interface UserCreateWithoutCupDataProcMdatesInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncCreateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowCreateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseCreateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob: DateTimeInput;
  email: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityCreateOneWithoutUsersInput;
  firstName: String;
  givenBirth: Boolean;
  lastName: String;
  macId?: String;
  password: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryCreateManyWithoutUserIdInput;
  userCups?: UserCupCreateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumCreateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodCreateManyWithoutUserIdInput;
  userWallet?: UserWalletCreateManyWithoutUserIdInput;
}

export interface CalibrationCreateInput {
  calibVersion: String;
  cup?: CupCreateManyWithoutCalibIdInput;
}

export interface CupDataAnswerCreateWithoutCupDataQaResponseInput {
  answerText: String;
  questionId: CupDataQuestionCreateOneWithoutCupDataAnswerInput;
}

export interface CupCreateManyWithoutCalibIdInput {
  create?: CupCreateWithoutCalibIdInput[] | CupCreateWithoutCalibIdInput;
  connect?: CupWhereUniqueInput[] | CupWhereUniqueInput;
}

export interface CupDataQaResponseCreateWithoutQuestionIdInput {
  answerId: CupDataAnswerCreateOneWithoutCupDataQaResponseInput;
  qaDate: DateTimeInput;
  userId: UserCreateOneWithoutCupDataQaResponseInput;
}

export interface CupCreateWithoutCalibIdInput {
  anonSerialNumber: Int;
  companyId?: CompanyCreateOneWithoutCupInput;
  cupAppSync?: CupAppSyncCreateManyWithoutSerialNumberInput;
  cupData?: CupDatumCreateManyWithoutSerialNumberInput;
  cupDataColourCalib?: CupDataColourCalibCreateManyWithoutSerialNumberInput;
  cupDataRaw?: CupDataRawCreateManyWithoutSerialNumberInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutSerialNumberInput;
  encryptionKey: Int;
  fwId?: FirmwareCreateOneWithoutCupInput;
  hwId?: HardwareCreateOneWithoutCupInput;
  userCups?: UserCupCreateManyWithoutSerialNumberInput;
}

export interface CupDataProcMdateCreateWithoutUserIdInput {
  cupDataManMdates?: CupDataManMdateCreateManyWithoutMdateRowIdInput;
  cupDataProcFlow?: CupDataProcFlowCreateManyWithoutMdateRowIdInput;
  dataRejected?: Boolean;
  dataVerified: Boolean;
  menFinish: DateTimeInput;
  menStart: DateTimeInput;
  rejectId?: CupDataRejectionCreateOneWithoutCupDataProcMdatesInput;
  rewardAmount?: Int;
}

export interface CalibrationUpdateInput {
  calibVersion?: String;
  cup?: CupUpdateManyWithoutCalibIdInput;
}

export interface UserCreateWithoutCupDataProcFlowInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncCreateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcMdates?: CupDataProcMdateCreateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseCreateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob: DateTimeInput;
  email: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityCreateOneWithoutUsersInput;
  firstName: String;
  givenBirth: Boolean;
  lastName: String;
  macId?: String;
  password: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryCreateManyWithoutUserIdInput;
  userCups?: UserCupCreateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumCreateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodCreateManyWithoutUserIdInput;
  userWallet?: UserWalletCreateManyWithoutUserIdInput;
}

export interface CupUpdateManyWithoutCalibIdInput {
  create?: CupCreateWithoutCalibIdInput[] | CupCreateWithoutCalibIdInput;
  delete?: CupWhereUniqueInput[] | CupWhereUniqueInput;
  connect?: CupWhereUniqueInput[] | CupWhereUniqueInput;
  set?: CupWhereUniqueInput[] | CupWhereUniqueInput;
  disconnect?: CupWhereUniqueInput[] | CupWhereUniqueInput;
  update?:
    | CupUpdateWithWhereUniqueWithoutCalibIdInput[]
    | CupUpdateWithWhereUniqueWithoutCalibIdInput;
  upsert?:
    | CupUpsertWithWhereUniqueWithoutCalibIdInput[]
    | CupUpsertWithWhereUniqueWithoutCalibIdInput;
  deleteMany?: CupScalarWhereInput[] | CupScalarWhereInput;
  updateMany?:
    | CupUpdateManyWithWhereNestedInput[]
    | CupUpdateManyWithWhereNestedInput;
}

export interface CupDataUserRemoveExplainCreateWithoutCupDataUserRemoveInput {
  explain: String;
}

export interface CupUpdateWithWhereUniqueWithoutCalibIdInput {
  where: CupWhereUniqueInput;
  data: CupUpdateWithoutCalibIdDataInput;
}

export interface CalibrationCreateWithoutCupInput {
  calibVersion: String;
}

export interface CupUpdateWithoutCalibIdDataInput {
  anonSerialNumber?: Int;
  companyId?: CompanyUpdateOneWithoutCupInput;
  cupAppSync?: CupAppSyncUpdateManyWithoutSerialNumberInput;
  cupData?: CupDatumUpdateManyWithoutSerialNumberInput;
  cupDataColourCalib?: CupDataColourCalibUpdateManyWithoutSerialNumberInput;
  cupDataRaw?: CupDataRawUpdateManyWithoutSerialNumberInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutSerialNumberInput;
  encryptionKey?: Int;
  fwId?: FirmwareUpdateOneWithoutCupInput;
  hwId?: HardwareUpdateOneWithoutCupInput;
  userCups?: UserCupUpdateManyWithoutSerialNumberInput;
}

export interface CupAppSyncCreateWithoutSerialNumberInput {
  appSynchTime: DateTimeInput;
}

export interface CupUpsertWithWhereUniqueWithoutCalibIdInput {
  where: CupWhereUniqueInput;
  update: CupUpdateWithoutCalibIdDataInput;
  create: CupCreateWithoutCalibIdInput;
}

export interface CupDataColourCalcCreateWithoutCupDataRowIdInput {
  blue: Int;
  green: Int;
  red: Int;
}

export interface CupScalarWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  anonSerialNumber?: Int;
  anonSerialNumber_not?: Int;
  anonSerialNumber_in?: Int[] | Int;
  anonSerialNumber_not_in?: Int[] | Int;
  anonSerialNumber_lt?: Int;
  anonSerialNumber_lte?: Int;
  anonSerialNumber_gt?: Int;
  anonSerialNumber_gte?: Int;
  encryptionKey?: Int;
  encryptionKey_not?: Int;
  encryptionKey_in?: Int[] | Int;
  encryptionKey_not_in?: Int[] | Int;
  encryptionKey_lt?: Int;
  encryptionKey_lte?: Int;
  encryptionKey_gt?: Int;
  encryptionKey_gte?: Int;
  AND?: CupScalarWhereInput[] | CupScalarWhereInput;
  OR?: CupScalarWhereInput[] | CupScalarWhereInput;
  NOT?: CupScalarWhereInput[] | CupScalarWhereInput;
}

export interface CupDataColourCalibCreateWithoutSerialNumberInput {
  blue: Int;
  c: Int;
  green: Int;
  red: Int;
}

export interface CupUpdateManyWithWhereNestedInput {
  where: CupScalarWhereInput;
  data: CupUpdateManyDataInput;
}

export interface FirmwareCreateWithoutCupInput {
  fwVersion: String;
}

export interface CupUpdateManyDataInput {
  anonSerialNumber?: Int;
  encryptionKey?: Int;
}

export interface UserCupCreateWithoutSerialNumberInput {
  userId?: UserCreateOneWithoutUserCupsInput;
}

export interface CalibrationUpdateManyMutationInput {
  calibVersion?: String;
}

export interface EthnicityCreateWithoutUsersInput {
  ethnicity: String;
}

export interface CompanyCreateInput {
  companyName: String;
  cup?: CupCreateManyWithoutCompanyIdInput;
}

export interface MarketBuyHistoryCreateWithoutCoinHistoryRowIdInput {
  cancelYn?: Boolean;
  category?: String;
  createTime: DateTimeInput;
  orderNumber?: String;
  productId?: Int;
  status?: Boolean;
  updateTime: DateTimeInput;
  userId?: Int;
}

export interface CupCreateManyWithoutCompanyIdInput {
  create?: CupCreateWithoutCompanyIdInput[] | CupCreateWithoutCompanyIdInput;
  connect?: CupWhereUniqueInput[] | CupWhereUniqueInput;
}

export interface UserInterviewDatumCreateWithoutUserIdInput {
  answerRange?: Int;
  answerText?: String;
  answerYn?: Boolean;
  date: DateTimeInput;
  questionId: UserInterviewQuestionCreateOneWithoutUserInterviewDataInput;
}

export interface CupCreateWithoutCompanyIdInput {
  anonSerialNumber: Int;
  calibId?: CalibrationCreateOneWithoutCupInput;
  cupAppSync?: CupAppSyncCreateManyWithoutSerialNumberInput;
  cupData?: CupDatumCreateManyWithoutSerialNumberInput;
  cupDataColourCalib?: CupDataColourCalibCreateManyWithoutSerialNumberInput;
  cupDataRaw?: CupDataRawCreateManyWithoutSerialNumberInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutSerialNumberInput;
  encryptionKey: Int;
  fwId?: FirmwareCreateOneWithoutCupInput;
  hwId?: HardwareCreateOneWithoutCupInput;
  userCups?: UserCupCreateManyWithoutSerialNumberInput;
}

export interface AnswerTypeCreateWithoutUserInterviewQuestionsInput {
  answerType: String;
}

export interface CompanyUpdateInput {
  companyName?: String;
  cup?: CupUpdateManyWithoutCompanyIdInput;
}

export interface UserRecordDataByDayCreateWithoutRecordPeriodRowIdInput {
  crampsLevel?: Int;
  recordDate: DateTimeInput;
  userRecordDataByTime?: UserRecordDataByTimeCreateManyWithoutRecordDayRowIdInput;
}

export interface CupUpdateManyWithoutCompanyIdInput {
  create?: CupCreateWithoutCompanyIdInput[] | CupCreateWithoutCompanyIdInput;
  delete?: CupWhereUniqueInput[] | CupWhereUniqueInput;
  connect?: CupWhereUniqueInput[] | CupWhereUniqueInput;
  set?: CupWhereUniqueInput[] | CupWhereUniqueInput;
  disconnect?: CupWhereUniqueInput[] | CupWhereUniqueInput;
  update?:
    | CupUpdateWithWhereUniqueWithoutCompanyIdInput[]
    | CupUpdateWithWhereUniqueWithoutCompanyIdInput;
  upsert?:
    | CupUpsertWithWhereUniqueWithoutCompanyIdInput[]
    | CupUpsertWithWhereUniqueWithoutCompanyIdInput;
  deleteMany?: CupScalarWhereInput[] | CupScalarWhereInput;
  updateMany?:
    | CupUpdateManyWithWhereNestedInput[]
    | CupUpdateManyWithWhereNestedInput;
}

export interface UserWalletCreateWithoutUserIdInput {
  address?: String;
  createTime?: DateTimeInput;
  status?: Boolean;
}

export interface CupUpdateWithWhereUniqueWithoutCompanyIdInput {
  where: CupWhereUniqueInput;
  data: CupUpdateWithoutCompanyIdDataInput;
}

export interface CupCreateWithoutUserCupsInput {
  anonSerialNumber: Int;
  calibId?: CalibrationCreateOneWithoutCupInput;
  companyId?: CompanyCreateOneWithoutCupInput;
  cupAppSync?: CupAppSyncCreateManyWithoutSerialNumberInput;
  cupData?: CupDatumCreateManyWithoutSerialNumberInput;
  cupDataColourCalib?: CupDataColourCalibCreateManyWithoutSerialNumberInput;
  cupDataRaw?: CupDataRawCreateManyWithoutSerialNumberInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutSerialNumberInput;
  encryptionKey: Int;
  fwId?: FirmwareCreateOneWithoutCupInput;
  hwId?: HardwareCreateOneWithoutCupInput;
}

export interface CupUpdateWithoutCompanyIdDataInput {
  anonSerialNumber?: Int;
  calibId?: CalibrationUpdateOneWithoutCupInput;
  cupAppSync?: CupAppSyncUpdateManyWithoutSerialNumberInput;
  cupData?: CupDatumUpdateManyWithoutSerialNumberInput;
  cupDataColourCalib?: CupDataColourCalibUpdateManyWithoutSerialNumberInput;
  cupDataRaw?: CupDataRawUpdateManyWithoutSerialNumberInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutSerialNumberInput;
  encryptionKey?: Int;
  fwId?: FirmwareUpdateOneWithoutCupInput;
  hwId?: HardwareUpdateOneWithoutCupInput;
  userCups?: UserCupUpdateManyWithoutSerialNumberInput;
}

export interface UserCreateWithoutCupDataUserRemoveInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncCreateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowCreateManyWithoutUserIdInput;
  cupDataProcMdates?: CupDataProcMdateCreateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseCreateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob: DateTimeInput;
  email: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityCreateOneWithoutUsersInput;
  firstName: String;
  givenBirth: Boolean;
  lastName: String;
  macId?: String;
  password: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryCreateManyWithoutUserIdInput;
  userCups?: UserCupCreateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumCreateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodCreateManyWithoutUserIdInput;
  userWallet?: UserWalletCreateManyWithoutUserIdInput;
}

export interface CupUpsertWithWhereUniqueWithoutCompanyIdInput {
  where: CupWhereUniqueInput;
  update: CupUpdateWithoutCompanyIdDataInput;
  create: CupCreateWithoutCompanyIdInput;
}

export interface CupDataAnswerCreateWithoutQuestionIdInput {
  answerText: String;
  cupDataQaResponse?: CupDataQaResponseCreateManyWithoutAnswerIdInput;
}

export interface CompanyUpdateManyMutationInput {
  companyName?: String;
}

export interface UserInterviewQuestionUpdateManyWithoutAnswerTypeIdInput {
  create?:
    | UserInterviewQuestionCreateWithoutAnswerTypeIdInput[]
    | UserInterviewQuestionCreateWithoutAnswerTypeIdInput;
  delete?:
    | UserInterviewQuestionWhereUniqueInput[]
    | UserInterviewQuestionWhereUniqueInput;
  connect?:
    | UserInterviewQuestionWhereUniqueInput[]
    | UserInterviewQuestionWhereUniqueInput;
  set?:
    | UserInterviewQuestionWhereUniqueInput[]
    | UserInterviewQuestionWhereUniqueInput;
  disconnect?:
    | UserInterviewQuestionWhereUniqueInput[]
    | UserInterviewQuestionWhereUniqueInput;
  update?:
    | UserInterviewQuestionUpdateWithWhereUniqueWithoutAnswerTypeIdInput[]
    | UserInterviewQuestionUpdateWithWhereUniqueWithoutAnswerTypeIdInput;
  upsert?:
    | UserInterviewQuestionUpsertWithWhereUniqueWithoutAnswerTypeIdInput[]
    | UserInterviewQuestionUpsertWithWhereUniqueWithoutAnswerTypeIdInput;
  deleteMany?:
    | UserInterviewQuestionScalarWhereInput[]
    | UserInterviewQuestionScalarWhereInput;
  updateMany?:
    | UserInterviewQuestionUpdateManyWithWhereNestedInput[]
    | UserInterviewQuestionUpdateManyWithWhereNestedInput;
}

export interface CountryCreateInput {
  countryName: String;
}

export interface UserRecordDataByDaySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserRecordDataByDayWhereInput;
  AND?:
    | UserRecordDataByDaySubscriptionWhereInput[]
    | UserRecordDataByDaySubscriptionWhereInput;
  OR?:
    | UserRecordDataByDaySubscriptionWhereInput[]
    | UserRecordDataByDaySubscriptionWhereInput;
  NOT?:
    | UserRecordDataByDaySubscriptionWhereInput[]
    | UserRecordDataByDaySubscriptionWhereInput;
}

export interface CountryUpdateInput {
  countryName?: String;
}

export interface UserCoinRewardsFeeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserCoinRewardsFeeWhereInput;
  AND?:
    | UserCoinRewardsFeeSubscriptionWhereInput[]
    | UserCoinRewardsFeeSubscriptionWhereInput;
  OR?:
    | UserCoinRewardsFeeSubscriptionWhereInput[]
    | UserCoinRewardsFeeSubscriptionWhereInput;
  NOT?:
    | UserCoinRewardsFeeSubscriptionWhereInput[]
    | UserCoinRewardsFeeSubscriptionWhereInput;
}

export interface CountryUpdateManyMutationInput {
  countryName?: String;
}

export interface MarketListSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MarketListWhereInput;
  AND?: MarketListSubscriptionWhereInput[] | MarketListSubscriptionWhereInput;
  OR?: MarketListSubscriptionWhereInput[] | MarketListSubscriptionWhereInput;
  NOT?: MarketListSubscriptionWhereInput[] | MarketListSubscriptionWhereInput;
}

export interface CupCreateInput {
  anonSerialNumber: Int;
  calibId?: CalibrationCreateOneWithoutCupInput;
  companyId?: CompanyCreateOneWithoutCupInput;
  cupAppSync?: CupAppSyncCreateManyWithoutSerialNumberInput;
  cupData?: CupDatumCreateManyWithoutSerialNumberInput;
  cupDataColourCalib?: CupDataColourCalibCreateManyWithoutSerialNumberInput;
  cupDataRaw?: CupDataRawCreateManyWithoutSerialNumberInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutSerialNumberInput;
  encryptionKey: Int;
  fwId?: FirmwareCreateOneWithoutCupInput;
  hwId?: HardwareCreateOneWithoutCupInput;
  userCups?: UserCupCreateManyWithoutSerialNumberInput;
}

export interface FirmwareSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: FirmwareWhereInput;
  AND?: FirmwareSubscriptionWhereInput[] | FirmwareSubscriptionWhereInput;
  OR?: FirmwareSubscriptionWhereInput[] | FirmwareSubscriptionWhereInput;
  NOT?: FirmwareSubscriptionWhereInput[] | FirmwareSubscriptionWhereInput;
}

export interface CupUpdateInput {
  anonSerialNumber?: Int;
  calibId?: CalibrationUpdateOneWithoutCupInput;
  companyId?: CompanyUpdateOneWithoutCupInput;
  cupAppSync?: CupAppSyncUpdateManyWithoutSerialNumberInput;
  cupData?: CupDatumUpdateManyWithoutSerialNumberInput;
  cupDataColourCalib?: CupDataColourCalibUpdateManyWithoutSerialNumberInput;
  cupDataRaw?: CupDataRawUpdateManyWithoutSerialNumberInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutSerialNumberInput;
  encryptionKey?: Int;
  fwId?: FirmwareUpdateOneWithoutCupInput;
  hwId?: HardwareUpdateOneWithoutCupInput;
  userCups?: UserCupUpdateManyWithoutSerialNumberInput;
}

export interface CupDataRejectionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CupDataRejectionWhereInput;
  AND?:
    | CupDataRejectionSubscriptionWhereInput[]
    | CupDataRejectionSubscriptionWhereInput;
  OR?:
    | CupDataRejectionSubscriptionWhereInput[]
    | CupDataRejectionSubscriptionWhereInput;
  NOT?:
    | CupDataRejectionSubscriptionWhereInput[]
    | CupDataRejectionSubscriptionWhereInput;
}

export interface CupUpdateManyMutationInput {
  anonSerialNumber?: Int;
  encryptionKey?: Int;
}

export interface CupDataProcVolumeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CupDataProcVolumeWhereInput;
  AND?:
    | CupDataProcVolumeSubscriptionWhereInput[]
    | CupDataProcVolumeSubscriptionWhereInput;
  OR?:
    | CupDataProcVolumeSubscriptionWhereInput[]
    | CupDataProcVolumeSubscriptionWhereInput;
  NOT?:
    | CupDataProcVolumeSubscriptionWhereInput[]
    | CupDataProcVolumeSubscriptionWhereInput;
}

export interface CupAppSyncCreateInput {
  appSynchTime: DateTimeInput;
  serialNumber: CupCreateOneWithoutCupAppSyncInput;
}

export interface CupDataColourCalibSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CupDataColourCalibWhereInput;
  AND?:
    | CupDataColourCalibSubscriptionWhereInput[]
    | CupDataColourCalibSubscriptionWhereInput;
  OR?:
    | CupDataColourCalibSubscriptionWhereInput[]
    | CupDataColourCalibSubscriptionWhereInput;
  NOT?:
    | CupDataColourCalibSubscriptionWhereInput[]
    | CupDataColourCalibSubscriptionWhereInput;
}

export interface CupCreateOneWithoutCupAppSyncInput {
  create?: CupCreateWithoutCupAppSyncInput;
  connect?: CupWhereUniqueInput;
}

export interface CompanySubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CompanyWhereInput;
  AND?: CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput;
  OR?: CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput;
  NOT?: CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput;
}

export interface CupCreateWithoutCupAppSyncInput {
  anonSerialNumber: Int;
  calibId?: CalibrationCreateOneWithoutCupInput;
  companyId?: CompanyCreateOneWithoutCupInput;
  cupData?: CupDatumCreateManyWithoutSerialNumberInput;
  cupDataColourCalib?: CupDataColourCalibCreateManyWithoutSerialNumberInput;
  cupDataRaw?: CupDataRawCreateManyWithoutSerialNumberInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutSerialNumberInput;
  encryptionKey: Int;
  fwId?: FirmwareCreateOneWithoutCupInput;
  hwId?: HardwareCreateOneWithoutCupInput;
  userCups?: UserCupCreateManyWithoutSerialNumberInput;
}

export type CalibrationWhereUniqueInput = AtLeastOne<{
  id: Int;
  calibVersion?: String;
}>;

export interface CupAppSyncUpdateInput {
  appSynchTime?: DateTimeInput;
  serialNumber?: CupUpdateOneRequiredWithoutCupAppSyncInput;
}

export interface UserWalletUpdateManyMutationInput {
  address?: String;
  createTime?: DateTimeInput;
  status?: Boolean;
}

export interface CupUpdateOneRequiredWithoutCupAppSyncInput {
  create?: CupCreateWithoutCupAppSyncInput;
  update?: CupUpdateWithoutCupAppSyncDataInput;
  upsert?: CupUpsertWithoutCupAppSyncInput;
  connect?: CupWhereUniqueInput;
}

export interface UserCreateWithoutUserWalletInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncCreateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowCreateManyWithoutUserIdInput;
  cupDataProcMdates?: CupDataProcMdateCreateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseCreateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob: DateTimeInput;
  email: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityCreateOneWithoutUsersInput;
  firstName: String;
  givenBirth: Boolean;
  lastName: String;
  macId?: String;
  password: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryCreateManyWithoutUserIdInput;
  userCups?: UserCupCreateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumCreateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodCreateManyWithoutUserIdInput;
}

export interface CupUpdateWithoutCupAppSyncDataInput {
  anonSerialNumber?: Int;
  calibId?: CalibrationUpdateOneWithoutCupInput;
  companyId?: CompanyUpdateOneWithoutCupInput;
  cupData?: CupDatumUpdateManyWithoutSerialNumberInput;
  cupDataColourCalib?: CupDataColourCalibUpdateManyWithoutSerialNumberInput;
  cupDataRaw?: CupDataRawUpdateManyWithoutSerialNumberInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutSerialNumberInput;
  encryptionKey?: Int;
  fwId?: FirmwareUpdateOneWithoutCupInput;
  hwId?: HardwareUpdateOneWithoutCupInput;
  userCups?: UserCupUpdateManyWithoutSerialNumberInput;
}

export interface UserRecordDataByDayUpdateOneWithoutUserRecordDataByTimeInput {
  create?: UserRecordDataByDayCreateWithoutUserRecordDataByTimeInput;
  update?: UserRecordDataByDayUpdateWithoutUserRecordDataByTimeDataInput;
  upsert?: UserRecordDataByDayUpsertWithoutUserRecordDataByTimeInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserRecordDataByDayWhereUniqueInput;
}

export interface CupUpsertWithoutCupAppSyncInput {
  update: CupUpdateWithoutCupAppSyncDataInput;
  create: CupCreateWithoutCupAppSyncInput;
}

export interface UserRecordDataByPeriodUpdateInput {
  coinHistoryRowId?: Int;
  isTakePill?: Boolean;
  mensFinish?: DateTimeInput;
  mensStart?: DateTimeInput;
  userId?: UserUpdateOneWithoutUserRecordDataByPeriodInput;
  userRecordDataByDay?: UserRecordDataByDayUpdateManyWithoutRecordPeriodRowIdInput;
}

export interface CupAppSyncUpdateManyMutationInput {
  appSynchTime?: DateTimeInput;
}

export interface UserUpdateOneWithoutUserRecordDataByPeriodInput {
  create?: UserCreateWithoutUserRecordDataByPeriodInput;
  update?: UserUpdateWithoutUserRecordDataByPeriodDataInput;
  upsert?: UserUpsertWithoutUserRecordDataByPeriodInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface CupDataAnswerCreateInput {
  answerText: String;
  cupDataQaResponse?: CupDataQaResponseCreateManyWithoutAnswerIdInput;
  questionId: CupDataQuestionCreateOneWithoutCupDataAnswerInput;
}

export interface UserRecordDataByPeriodCreateWithoutUserRecordDataByDayInput {
  coinHistoryRowId?: Int;
  isTakePill?: Boolean;
  mensFinish?: DateTimeInput;
  mensStart?: DateTimeInput;
  userId?: UserCreateOneWithoutUserRecordDataByPeriodInput;
}

export interface CupDataAnswerUpdateInput {
  answerText?: String;
  cupDataQaResponse?: CupDataQaResponseUpdateManyWithoutAnswerIdInput;
  questionId?: CupDataQuestionUpdateOneRequiredWithoutCupDataAnswerInput;
}

export interface UserCoinHistoryUpdateOneWithoutUserRecordCameraDataByTimeInput {
  create?: UserCoinHistoryCreateWithoutUserRecordCameraDataByTimeInput;
  update?: UserCoinHistoryUpdateWithoutUserRecordCameraDataByTimeDataInput;
  upsert?: UserCoinHistoryUpsertWithoutUserRecordCameraDataByTimeInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserCoinHistoryWhereUniqueInput;
}

export interface CupDataAnswerUpdateManyMutationInput {
  answerText?: String;
}

export interface UserInterviewQuestionUpdateManyMutationInput {
  question?: String;
}

export interface CupDataColourCalcCreateInput {
  blue: Int;
  cupDataRowId: CupDatumCreateOneWithoutCupDataColourCalcInput;
  green: Int;
  red: Int;
}

export interface UserCupUpdateInput {
  serialNumber?: CupUpdateOneWithoutUserCupsInput;
  userId?: UserUpdateOneWithoutUserCupsInput;
}

export interface CupDatumCreateOneWithoutCupDataColourCalcInput {
  create?: CupDatumCreateWithoutCupDataColourCalcInput;
  connect?: CupDatumWhereUniqueInput;
}

export type CupDatumWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CupDatumCreateWithoutCupDataColourCalcInput {
  battery: Int;
  calibFlag: Boolean;
  ch1: Int;
  ch10: Int;
  ch11: Int;
  ch12: Int;
  ch13: Int;
  ch14: Int;
  ch2: Int;
  ch3: Int;
  ch4: Int;
  ch5: Int;
  ch6: Int;
  ch7: Int;
  ch8: Int;
  ch9: Int;
  colourB: Int;
  colourC: Int;
  colourG: Int;
  colourR: Int;
  cupDataProcVolume?: CupDataProcVolumeCreateManyWithoutCupDataRowIdInput;
  date: DateTimeInput;
  day: Int;
  hour: Int;
  line: Int;
  minute: Int;
  month: Int;
  page: Int;
  rawTotalVolume?: Int;
  rawVolumeL?: Int;
  rawVolumeR?: Int;
  serialNumber?: CupCreateOneWithoutCupDataInput;
  temperature: Int;
  x: Int;
  y: Int;
  year: Int;
  z: Int;
}

export interface PlatformCompUpdateInput {
  phoneId?: Int;
  platformId?: Int;
  problemHistory?: Boolean;
  softwareId?: Int;
  successHistory?: Boolean;
}

export interface CupCreateOneWithoutCupDataInput {
  create?: CupCreateWithoutCupDataInput;
  connect?: CupWhereUniqueInput;
}

export interface MarketListDetailUpdateInput {
  contents?: String;
  detailImage?: String;
  mainImage?: String;
  marketListId?: MarketListUpdateOneWithoutMarketListDetailInput;
  price?: Int;
  savingPrice?: Int;
  subTitle?: String;
  title?: String;
}

export interface CupCreateWithoutCupDataInput {
  anonSerialNumber: Int;
  calibId?: CalibrationCreateOneWithoutCupInput;
  companyId?: CompanyCreateOneWithoutCupInput;
  cupAppSync?: CupAppSyncCreateManyWithoutSerialNumberInput;
  cupDataColourCalib?: CupDataColourCalibCreateManyWithoutSerialNumberInput;
  cupDataRaw?: CupDataRawCreateManyWithoutSerialNumberInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutSerialNumberInput;
  encryptionKey: Int;
  fwId?: FirmwareCreateOneWithoutCupInput;
  hwId?: HardwareCreateOneWithoutCupInput;
  userCups?: UserCupCreateManyWithoutSerialNumberInput;
}

export interface MarketListDetailUpdateManyWithWhereNestedInput {
  where: MarketListDetailScalarWhereInput;
  data: MarketListDetailUpdateManyDataInput;
}

export interface CupDataColourCalcUpdateInput {
  blue?: Int;
  cupDataRowId?: CupDatumUpdateOneRequiredWithoutCupDataColourCalcInput;
  green?: Int;
  red?: Int;
}

export interface MarketListDetailWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  contents?: String;
  contents_not?: String;
  contents_in?: String[] | String;
  contents_not_in?: String[] | String;
  contents_lt?: String;
  contents_lte?: String;
  contents_gt?: String;
  contents_gte?: String;
  contents_contains?: String;
  contents_not_contains?: String;
  contents_starts_with?: String;
  contents_not_starts_with?: String;
  contents_ends_with?: String;
  contents_not_ends_with?: String;
  detailImage?: String;
  detailImage_not?: String;
  detailImage_in?: String[] | String;
  detailImage_not_in?: String[] | String;
  detailImage_lt?: String;
  detailImage_lte?: String;
  detailImage_gt?: String;
  detailImage_gte?: String;
  detailImage_contains?: String;
  detailImage_not_contains?: String;
  detailImage_starts_with?: String;
  detailImage_not_starts_with?: String;
  detailImage_ends_with?: String;
  detailImage_not_ends_with?: String;
  mainImage?: String;
  mainImage_not?: String;
  mainImage_in?: String[] | String;
  mainImage_not_in?: String[] | String;
  mainImage_lt?: String;
  mainImage_lte?: String;
  mainImage_gt?: String;
  mainImage_gte?: String;
  mainImage_contains?: String;
  mainImage_not_contains?: String;
  mainImage_starts_with?: String;
  mainImage_not_starts_with?: String;
  mainImage_ends_with?: String;
  mainImage_not_ends_with?: String;
  marketListId?: MarketListWhereInput;
  price?: Int;
  price_not?: Int;
  price_in?: Int[] | Int;
  price_not_in?: Int[] | Int;
  price_lt?: Int;
  price_lte?: Int;
  price_gt?: Int;
  price_gte?: Int;
  savingPrice?: Int;
  savingPrice_not?: Int;
  savingPrice_in?: Int[] | Int;
  savingPrice_not_in?: Int[] | Int;
  savingPrice_lt?: Int;
  savingPrice_lte?: Int;
  savingPrice_gt?: Int;
  savingPrice_gte?: Int;
  subTitle?: String;
  subTitle_not?: String;
  subTitle_in?: String[] | String;
  subTitle_not_in?: String[] | String;
  subTitle_lt?: String;
  subTitle_lte?: String;
  subTitle_gt?: String;
  subTitle_gte?: String;
  subTitle_contains?: String;
  subTitle_not_contains?: String;
  subTitle_starts_with?: String;
  subTitle_not_starts_with?: String;
  subTitle_ends_with?: String;
  subTitle_not_ends_with?: String;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  AND?: MarketListDetailWhereInput[] | MarketListDetailWhereInput;
  OR?: MarketListDetailWhereInput[] | MarketListDetailWhereInput;
  NOT?: MarketListDetailWhereInput[] | MarketListDetailWhereInput;
}

export interface CupDatumUpdateOneRequiredWithoutCupDataColourCalcInput {
  create?: CupDatumCreateWithoutCupDataColourCalcInput;
  update?: CupDatumUpdateWithoutCupDataColourCalcDataInput;
  upsert?: CupDatumUpsertWithoutCupDataColourCalcInput;
  connect?: CupDatumWhereUniqueInput;
}

export type MarketListDetailWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CupDatumUpdateWithoutCupDataColourCalcDataInput {
  battery?: Int;
  calibFlag?: Boolean;
  ch1?: Int;
  ch10?: Int;
  ch11?: Int;
  ch12?: Int;
  ch13?: Int;
  ch14?: Int;
  ch2?: Int;
  ch3?: Int;
  ch4?: Int;
  ch5?: Int;
  ch6?: Int;
  ch7?: Int;
  ch8?: Int;
  ch9?: Int;
  colourB?: Int;
  colourC?: Int;
  colourG?: Int;
  colourR?: Int;
  cupDataProcVolume?: CupDataProcVolumeUpdateManyWithoutCupDataRowIdInput;
  date?: DateTimeInput;
  day?: Int;
  hour?: Int;
  line?: Int;
  minute?: Int;
  month?: Int;
  page?: Int;
  rawTotalVolume?: Int;
  rawVolumeL?: Int;
  rawVolumeR?: Int;
  serialNumber?: CupUpdateOneWithoutCupDataInput;
  temperature?: Int;
  x?: Int;
  y?: Int;
  year?: Int;
  z?: Int;
}

export interface UserCoinHistoryUpdateOneWithoutMarketBuyHistoryInput {
  create?: UserCoinHistoryCreateWithoutMarketBuyHistoryInput;
  update?: UserCoinHistoryUpdateWithoutMarketBuyHistoryDataInput;
  upsert?: UserCoinHistoryUpsertWithoutMarketBuyHistoryInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserCoinHistoryWhereUniqueInput;
}

export interface CupUpdateOneWithoutCupDataInput {
  create?: CupCreateWithoutCupDataInput;
  update?: CupUpdateWithoutCupDataDataInput;
  upsert?: CupUpsertWithoutCupDataInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CupWhereUniqueInput;
}

export interface MarketBuyHistoryCreateInput {
  cancelYn?: Boolean;
  category?: String;
  coinHistoryRowId?: UserCoinHistoryCreateOneWithoutMarketBuyHistoryInput;
  createTime: DateTimeInput;
  orderNumber?: String;
  productId?: Int;
  status?: Boolean;
  updateTime: DateTimeInput;
  userId?: Int;
}

export interface CupUpdateWithoutCupDataDataInput {
  anonSerialNumber?: Int;
  calibId?: CalibrationUpdateOneWithoutCupInput;
  companyId?: CompanyUpdateOneWithoutCupInput;
  cupAppSync?: CupAppSyncUpdateManyWithoutSerialNumberInput;
  cupDataColourCalib?: CupDataColourCalibUpdateManyWithoutSerialNumberInput;
  cupDataRaw?: CupDataRawUpdateManyWithoutSerialNumberInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutSerialNumberInput;
  encryptionKey?: Int;
  fwId?: FirmwareUpdateOneWithoutCupInput;
  hwId?: HardwareUpdateOneWithoutCupInput;
  userCups?: UserCupUpdateManyWithoutSerialNumberInput;
}

export interface CupUpdateWithoutHwIdDataInput {
  anonSerialNumber?: Int;
  calibId?: CalibrationUpdateOneWithoutCupInput;
  companyId?: CompanyUpdateOneWithoutCupInput;
  cupAppSync?: CupAppSyncUpdateManyWithoutSerialNumberInput;
  cupData?: CupDatumUpdateManyWithoutSerialNumberInput;
  cupDataColourCalib?: CupDataColourCalibUpdateManyWithoutSerialNumberInput;
  cupDataRaw?: CupDataRawUpdateManyWithoutSerialNumberInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutSerialNumberInput;
  encryptionKey?: Int;
  fwId?: FirmwareUpdateOneWithoutCupInput;
  userCups?: UserCupUpdateManyWithoutSerialNumberInput;
}

export interface CupUpsertWithoutCupDataInput {
  update: CupUpdateWithoutCupDataDataInput;
  create: CupCreateWithoutCupDataInput;
}

export interface HardwareCreateInput {
  cup?: CupCreateManyWithoutHwIdInput;
  hwVersion: String;
}

export interface CupDatumUpsertWithoutCupDataColourCalcInput {
  update: CupDatumUpdateWithoutCupDataColourCalcDataInput;
  create: CupDatumCreateWithoutCupDataColourCalcInput;
}

export interface FirmwareUpdateInput {
  cup?: CupUpdateManyWithoutFwIdInput;
  fwVersion?: String;
}

export interface CupDataColourCalcUpdateManyMutationInput {
  blue?: Int;
  green?: Int;
  red?: Int;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface CupDataColourCalibCreateInput {
  blue: Int;
  c: Int;
  green: Int;
  red: Int;
  serialNumber: CupCreateOneWithoutCupDataColourCalibInput;
}

export interface EthnicityUpdateInput {
  ethnicity?: String;
  users?: UserUpdateManyWithoutEthnicityIdInput;
}

export interface CupCreateOneWithoutCupDataColourCalibInput {
  create?: CupCreateWithoutCupDataColourCalibInput;
  connect?: CupWhereUniqueInput;
}

export interface CupDatumCreateInput {
  battery: Int;
  calibFlag: Boolean;
  ch1: Int;
  ch10: Int;
  ch11: Int;
  ch12: Int;
  ch13: Int;
  ch14: Int;
  ch2: Int;
  ch3: Int;
  ch4: Int;
  ch5: Int;
  ch6: Int;
  ch7: Int;
  ch8: Int;
  ch9: Int;
  colourB: Int;
  colourC: Int;
  colourG: Int;
  colourR: Int;
  cupDataColourCalc?: CupDataColourCalcCreateManyWithoutCupDataRowIdInput;
  cupDataProcVolume?: CupDataProcVolumeCreateManyWithoutCupDataRowIdInput;
  date: DateTimeInput;
  day: Int;
  hour: Int;
  line: Int;
  minute: Int;
  month: Int;
  page: Int;
  rawTotalVolume?: Int;
  rawVolumeL?: Int;
  rawVolumeR?: Int;
  serialNumber?: CupCreateOneWithoutCupDataInput;
  temperature: Int;
  x: Int;
  y: Int;
  year: Int;
  z: Int;
}

export interface CupCreateWithoutCupDataColourCalibInput {
  anonSerialNumber: Int;
  calibId?: CalibrationCreateOneWithoutCupInput;
  companyId?: CompanyCreateOneWithoutCupInput;
  cupAppSync?: CupAppSyncCreateManyWithoutSerialNumberInput;
  cupData?: CupDatumCreateManyWithoutSerialNumberInput;
  cupDataRaw?: CupDataRawCreateManyWithoutSerialNumberInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutSerialNumberInput;
  encryptionKey: Int;
  fwId?: FirmwareCreateOneWithoutCupInput;
  hwId?: HardwareCreateOneWithoutCupInput;
  userCups?: UserCupCreateManyWithoutSerialNumberInput;
}

export interface AnswerTypeCreateInput {
  answerType: String;
  userInterviewQuestions?: UserInterviewQuestionCreateManyWithoutAnswerTypeIdInput;
}

export interface CupDataColourCalibUpdateInput {
  blue?: Int;
  c?: Int;
  green?: Int;
  red?: Int;
  serialNumber?: CupUpdateOneRequiredWithoutCupDataColourCalibInput;
}

export interface AppServerSyncCreateWithoutUserIdInput {
  serverSynchTime: DateTimeInput;
}

export interface CupUpdateOneRequiredWithoutCupDataColourCalibInput {
  create?: CupCreateWithoutCupDataColourCalibInput;
  update?: CupUpdateWithoutCupDataColourCalibDataInput;
  upsert?: CupUpsertWithoutCupDataColourCalibInput;
  connect?: CupWhereUniqueInput;
}

export interface CupDataRejectionCreateWithoutCupDataProcMdatesInput {
  rejectionDescription: String;
}

export interface CupUpdateWithoutCupDataColourCalibDataInput {
  anonSerialNumber?: Int;
  calibId?: CalibrationUpdateOneWithoutCupInput;
  companyId?: CompanyUpdateOneWithoutCupInput;
  cupAppSync?: CupAppSyncUpdateManyWithoutSerialNumberInput;
  cupData?: CupDatumUpdateManyWithoutSerialNumberInput;
  cupDataRaw?: CupDataRawUpdateManyWithoutSerialNumberInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutSerialNumberInput;
  encryptionKey?: Int;
  fwId?: FirmwareUpdateOneWithoutCupInput;
  hwId?: HardwareUpdateOneWithoutCupInput;
  userCups?: UserCupUpdateManyWithoutSerialNumberInput;
}

export interface CupDataQuestionCreateWithoutCupDataAnswerInput {
  cupDataQaResponse?: CupDataQaResponseCreateManyWithoutQuestionIdInput;
  questionText: String;
}

export interface CupUpsertWithoutCupDataColourCalibInput {
  update: CupUpdateWithoutCupDataColourCalibDataInput;
  create: CupCreateWithoutCupDataColourCalibInput;
}

export interface CupDataProcFlowCreateWithoutMdateRowIdInput {
  date: DateTimeInput;
  hourlyFlow: Int;
  userId: UserCreateOneWithoutCupDataProcFlowInput;
}

export interface CupDataColourCalibUpdateManyMutationInput {
  blue?: Int;
  c?: Int;
  green?: Int;
  red?: Int;
}

export interface CupCreateWithoutCupDataUserRemoveInput {
  anonSerialNumber: Int;
  calibId?: CalibrationCreateOneWithoutCupInput;
  companyId?: CompanyCreateOneWithoutCupInput;
  cupAppSync?: CupAppSyncCreateManyWithoutSerialNumberInput;
  cupData?: CupDatumCreateManyWithoutSerialNumberInput;
  cupDataColourCalib?: CupDataColourCalibCreateManyWithoutSerialNumberInput;
  cupDataRaw?: CupDataRawCreateManyWithoutSerialNumberInput;
  encryptionKey: Int;
  fwId?: FirmwareCreateOneWithoutCupInput;
  hwId?: HardwareCreateOneWithoutCupInput;
  userCups?: UserCupCreateManyWithoutSerialNumberInput;
}

export interface CupDataManMdateCreateInput {
  mdateRowId: CupDataProcMdateCreateOneWithoutCupDataManMdatesInput;
  menFinish?: DateTimeInput;
  menStart?: DateTimeInput;
}

export interface CupDatumCreateWithoutSerialNumberInput {
  battery: Int;
  calibFlag: Boolean;
  ch1: Int;
  ch10: Int;
  ch11: Int;
  ch12: Int;
  ch13: Int;
  ch14: Int;
  ch2: Int;
  ch3: Int;
  ch4: Int;
  ch5: Int;
  ch6: Int;
  ch7: Int;
  ch8: Int;
  ch9: Int;
  colourB: Int;
  colourC: Int;
  colourG: Int;
  colourR: Int;
  cupDataColourCalc?: CupDataColourCalcCreateManyWithoutCupDataRowIdInput;
  cupDataProcVolume?: CupDataProcVolumeCreateManyWithoutCupDataRowIdInput;
  date: DateTimeInput;
  day: Int;
  hour: Int;
  line: Int;
  minute: Int;
  month: Int;
  page: Int;
  rawTotalVolume?: Int;
  rawVolumeL?: Int;
  rawVolumeR?: Int;
  temperature: Int;
  x: Int;
  y: Int;
  year: Int;
  z: Int;
}

export interface CupDataProcMdateCreateOneWithoutCupDataManMdatesInput {
  create?: CupDataProcMdateCreateWithoutCupDataManMdatesInput;
  connect?: CupDataProcMdateWhereUniqueInput;
}

export interface CupDataRawCreateWithoutSerialNumberInput {
  pageData: String;
}

export interface CupDataProcMdateCreateWithoutCupDataManMdatesInput {
  cupDataProcFlow?: CupDataProcFlowCreateManyWithoutMdateRowIdInput;
  dataRejected?: Boolean;
  dataVerified: Boolean;
  menFinish: DateTimeInput;
  menStart: DateTimeInput;
  rejectId?: CupDataRejectionCreateOneWithoutCupDataProcMdatesInput;
  rewardAmount?: Int;
  userId: UserCreateOneWithoutCupDataProcMdatesInput;
}

export interface UserCreateWithoutUserCupsInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncCreateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowCreateManyWithoutUserIdInput;
  cupDataProcMdates?: CupDataProcMdateCreateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseCreateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob: DateTimeInput;
  email: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityCreateOneWithoutUsersInput;
  firstName: String;
  givenBirth: Boolean;
  lastName: String;
  macId?: String;
  password: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryCreateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumCreateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodCreateManyWithoutUserIdInput;
  userWallet?: UserWalletCreateManyWithoutUserIdInput;
}

export interface CupDataManMdateUpdateInput {
  mdateRowId?: CupDataProcMdateUpdateOneRequiredWithoutCupDataManMdatesInput;
  menFinish?: DateTimeInput;
  menStart?: DateTimeInput;
}

export interface UserRecordCameraDataByTimeCreateWithoutCoinHistoryRowIdInput {
  confirmYn?: Boolean;
  deleteYn?: Boolean;
  height?: Float;
  imagePath?: String;
  locationX?: Float;
  locationY?: Float;
  size?: Float;
  width?: Float;
}

export interface CupDataProcMdateUpdateOneRequiredWithoutCupDataManMdatesInput {
  create?: CupDataProcMdateCreateWithoutCupDataManMdatesInput;
  update?: CupDataProcMdateUpdateWithoutCupDataManMdatesDataInput;
  upsert?: CupDataProcMdateUpsertWithoutCupDataManMdatesInput;
  connect?: CupDataProcMdateWhereUniqueInput;
}

export interface UserRecordDataByPeriodCreateWithoutUserIdInput {
  coinHistoryRowId?: Int;
  isTakePill?: Boolean;
  mensFinish?: DateTimeInput;
  mensStart?: DateTimeInput;
  userRecordDataByDay?: UserRecordDataByDayCreateManyWithoutRecordPeriodRowIdInput;
}

export interface CupDataProcMdateUpdateWithoutCupDataManMdatesDataInput {
  cupDataProcFlow?: CupDataProcFlowUpdateManyWithoutMdateRowIdInput;
  dataRejected?: Boolean;
  dataVerified?: Boolean;
  menFinish?: DateTimeInput;
  menStart?: DateTimeInput;
  rejectId?: CupDataRejectionUpdateOneWithoutCupDataProcMdatesInput;
  rewardAmount?: Int;
  userId?: UserUpdateOneRequiredWithoutCupDataProcMdatesInput;
}

export interface UserCupCreateWithoutUserIdInput {
  serialNumber?: CupCreateOneWithoutUserCupsInput;
}

export interface CupDataProcMdateUpsertWithoutCupDataManMdatesInput {
  update: CupDataProcMdateUpdateWithoutCupDataManMdatesDataInput;
  create: CupDataProcMdateCreateWithoutCupDataManMdatesInput;
}

export interface CupDataQuestionCreateWithoutCupDataQaResponseInput {
  cupDataAnswer?: CupDataAnswerCreateManyWithoutQuestionIdInput;
  questionText: String;
}

export interface CupDataManMdateUpdateManyMutationInput {
  menFinish?: DateTimeInput;
  menStart?: DateTimeInput;
}

export interface MarketBuyHistoryWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  cancelYn?: Boolean;
  cancelYn_not?: Boolean;
  category?: String;
  category_not?: String;
  category_in?: String[] | String;
  category_not_in?: String[] | String;
  category_lt?: String;
  category_lte?: String;
  category_gt?: String;
  category_gte?: String;
  category_contains?: String;
  category_not_contains?: String;
  category_starts_with?: String;
  category_not_starts_with?: String;
  category_ends_with?: String;
  category_not_ends_with?: String;
  coinHistoryRowId?: UserCoinHistoryWhereInput;
  createTime?: DateTimeInput;
  createTime_not?: DateTimeInput;
  createTime_in?: DateTimeInput[] | DateTimeInput;
  createTime_not_in?: DateTimeInput[] | DateTimeInput;
  createTime_lt?: DateTimeInput;
  createTime_lte?: DateTimeInput;
  createTime_gt?: DateTimeInput;
  createTime_gte?: DateTimeInput;
  orderNumber?: String;
  orderNumber_not?: String;
  orderNumber_in?: String[] | String;
  orderNumber_not_in?: String[] | String;
  orderNumber_lt?: String;
  orderNumber_lte?: String;
  orderNumber_gt?: String;
  orderNumber_gte?: String;
  orderNumber_contains?: String;
  orderNumber_not_contains?: String;
  orderNumber_starts_with?: String;
  orderNumber_not_starts_with?: String;
  orderNumber_ends_with?: String;
  orderNumber_not_ends_with?: String;
  productId?: Int;
  productId_not?: Int;
  productId_in?: Int[] | Int;
  productId_not_in?: Int[] | Int;
  productId_lt?: Int;
  productId_lte?: Int;
  productId_gt?: Int;
  productId_gte?: Int;
  status?: Boolean;
  status_not?: Boolean;
  updateTime?: DateTimeInput;
  updateTime_not?: DateTimeInput;
  updateTime_in?: DateTimeInput[] | DateTimeInput;
  updateTime_not_in?: DateTimeInput[] | DateTimeInput;
  updateTime_lt?: DateTimeInput;
  updateTime_lte?: DateTimeInput;
  updateTime_gt?: DateTimeInput;
  updateTime_gte?: DateTimeInput;
  userId?: Int;
  userId_not?: Int;
  userId_in?: Int[] | Int;
  userId_not_in?: Int[] | Int;
  userId_lt?: Int;
  userId_lte?: Int;
  userId_gt?: Int;
  userId_gte?: Int;
  AND?: MarketBuyHistoryWhereInput[] | MarketBuyHistoryWhereInput;
  OR?: MarketBuyHistoryWhereInput[] | MarketBuyHistoryWhereInput;
  NOT?: MarketBuyHistoryWhereInput[] | MarketBuyHistoryWhereInput;
}

export interface CupDataProcFlowCreateInput {
  date: DateTimeInput;
  hourlyFlow: Int;
  mdateRowId: CupDataProcMdateCreateOneWithoutCupDataProcFlowInput;
  userId: UserCreateOneWithoutCupDataProcFlowInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface CupDataProcFlowUpdateInput {
  date?: DateTimeInput;
  hourlyFlow?: Int;
  mdateRowId?: CupDataProcMdateUpdateOneRequiredWithoutCupDataProcFlowInput;
  userId?: UserUpdateOneRequiredWithoutCupDataProcFlowInput;
}

export interface CupDatumSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CupDatumWhereInput;
  AND?: CupDatumSubscriptionWhereInput[] | CupDatumSubscriptionWhereInput;
  OR?: CupDatumSubscriptionWhereInput[] | CupDatumSubscriptionWhereInput;
  NOT?: CupDatumSubscriptionWhereInput[] | CupDatumSubscriptionWhereInput;
}

export interface CupDataProcFlowUpdateManyMutationInput {
  date?: DateTimeInput;
  hourlyFlow?: Int;
}

export interface CupDataProcFlowSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CupDataProcFlowWhereInput;
  AND?:
    | CupDataProcFlowSubscriptionWhereInput[]
    | CupDataProcFlowSubscriptionWhereInput;
  OR?:
    | CupDataProcFlowSubscriptionWhereInput[]
    | CupDataProcFlowSubscriptionWhereInput;
  NOT?:
    | CupDataProcFlowSubscriptionWhereInput[]
    | CupDataProcFlowSubscriptionWhereInput;
}

export interface CupDataProcMdateCreateInput {
  cupDataManMdates?: CupDataManMdateCreateManyWithoutMdateRowIdInput;
  cupDataProcFlow?: CupDataProcFlowCreateManyWithoutMdateRowIdInput;
  dataRejected?: Boolean;
  dataVerified: Boolean;
  menFinish: DateTimeInput;
  menStart: DateTimeInput;
  rejectId?: CupDataRejectionCreateOneWithoutCupDataProcMdatesInput;
  rewardAmount?: Int;
  userId: UserCreateOneWithoutCupDataProcMdatesInput;
}

export interface AppServerSyncWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  serverSynchTime?: DateTimeInput;
  serverSynchTime_not?: DateTimeInput;
  serverSynchTime_in?: DateTimeInput[] | DateTimeInput;
  serverSynchTime_not_in?: DateTimeInput[] | DateTimeInput;
  serverSynchTime_lt?: DateTimeInput;
  serverSynchTime_lte?: DateTimeInput;
  serverSynchTime_gt?: DateTimeInput;
  serverSynchTime_gte?: DateTimeInput;
  userId?: UserWhereInput;
  AND?: AppServerSyncWhereInput[] | AppServerSyncWhereInput;
  OR?: AppServerSyncWhereInput[] | AppServerSyncWhereInput;
  NOT?: AppServerSyncWhereInput[] | AppServerSyncWhereInput;
}

export interface CupDataProcMdateUpdateInput {
  cupDataManMdates?: CupDataManMdateUpdateManyWithoutMdateRowIdInput;
  cupDataProcFlow?: CupDataProcFlowUpdateManyWithoutMdateRowIdInput;
  dataRejected?: Boolean;
  dataVerified?: Boolean;
  menFinish?: DateTimeInput;
  menStart?: DateTimeInput;
  rejectId?: CupDataRejectionUpdateOneWithoutCupDataProcMdatesInput;
  rewardAmount?: Int;
  userId?: UserUpdateOneRequiredWithoutCupDataProcMdatesInput;
}

export interface CountryWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  countryName?: String;
  countryName_not?: String;
  countryName_in?: String[] | String;
  countryName_not_in?: String[] | String;
  countryName_lt?: String;
  countryName_lte?: String;
  countryName_gt?: String;
  countryName_gte?: String;
  countryName_contains?: String;
  countryName_not_contains?: String;
  countryName_starts_with?: String;
  countryName_not_starts_with?: String;
  countryName_ends_with?: String;
  countryName_not_ends_with?: String;
  AND?: CountryWhereInput[] | CountryWhereInput;
  OR?: CountryWhereInput[] | CountryWhereInput;
  NOT?: CountryWhereInput[] | CountryWhereInput;
}

export interface CupDataProcMdateUpdateManyMutationInput {
  dataRejected?: Boolean;
  dataVerified?: Boolean;
  menFinish?: DateTimeInput;
  menStart?: DateTimeInput;
  rewardAmount?: Int;
}

export interface UserRecordDataByDayCreateOneWithoutUserRecordDataByTimeInput {
  create?: UserRecordDataByDayCreateWithoutUserRecordDataByTimeInput;
  connect?: UserRecordDataByDayWhereUniqueInput;
}

export interface CupDataProcVolumeCreateInput {
  confidenceL?: Int;
  confidenceR?: Int;
  cupDataRowId: CupDatumCreateOneWithoutCupDataProcVolumeInput;
  inVitro?: Boolean;
  volume?: Int;
  volumeAdj?: Int;
  volumeL?: Int;
  volumeR?: Int;
}

export interface UserRecordDataByDayUpdateInput {
  crampsLevel?: Int;
  recordDate?: DateTimeInput;
  recordPeriodRowId?: UserRecordDataByPeriodUpdateOneWithoutUserRecordDataByDayInput;
  userRecordDataByTime?: UserRecordDataByTimeUpdateManyWithoutRecordDayRowIdInput;
}

export interface CupDatumCreateOneWithoutCupDataProcVolumeInput {
  create?: CupDatumCreateWithoutCupDataProcVolumeInput;
  connect?: CupDatumWhereUniqueInput;
}

export interface UserCoinHistoryCreateWithoutUserRecordCameraDataByTimeInput {
  category: String;
  coin: Int;
  contents: String;
  date: DateTimeInput;
  marketBuyHistory?: MarketBuyHistoryCreateManyWithoutCoinHistoryRowIdInput;
  txhash: String;
  userId?: UserCreateOneWithoutUserCoinHistoryInput;
  walletId?: Int;
}

export interface CupDatumCreateWithoutCupDataProcVolumeInput {
  battery: Int;
  calibFlag: Boolean;
  ch1: Int;
  ch10: Int;
  ch11: Int;
  ch12: Int;
  ch13: Int;
  ch14: Int;
  ch2: Int;
  ch3: Int;
  ch4: Int;
  ch5: Int;
  ch6: Int;
  ch7: Int;
  ch8: Int;
  ch9: Int;
  colourB: Int;
  colourC: Int;
  colourG: Int;
  colourR: Int;
  cupDataColourCalc?: CupDataColourCalcCreateManyWithoutCupDataRowIdInput;
  date: DateTimeInput;
  day: Int;
  hour: Int;
  line: Int;
  minute: Int;
  month: Int;
  page: Int;
  rawTotalVolume?: Int;
  rawVolumeL?: Int;
  rawVolumeR?: Int;
  serialNumber?: CupCreateOneWithoutCupDataInput;
  temperature: Int;
  x: Int;
  y: Int;
  year: Int;
  z: Int;
}

export type AnswerTypeWhereUniqueInput = AtLeastOne<{
  id: Int;
  answerType?: String;
}>;

export interface CupDataProcVolumeUpdateInput {
  confidenceL?: Int;
  confidenceR?: Int;
  cupDataRowId?: CupDatumUpdateOneRequiredWithoutCupDataProcVolumeInput;
  inVitro?: Boolean;
  volume?: Int;
  volumeAdj?: Int;
  volumeL?: Int;
  volumeR?: Int;
}

export interface MarketListUpsertWithoutMarketListDetailInput {
  update: MarketListUpdateWithoutMarketListDetailDataInput;
  create: MarketListCreateWithoutMarketListDetailInput;
}

export interface CupDatumUpdateOneRequiredWithoutCupDataProcVolumeInput {
  create?: CupDatumCreateWithoutCupDataProcVolumeInput;
  update?: CupDatumUpdateWithoutCupDataProcVolumeDataInput;
  upsert?: CupDatumUpsertWithoutCupDataProcVolumeInput;
  connect?: CupDatumWhereUniqueInput;
}

export interface MarketListDetailUpdateWithoutMarketListIdDataInput {
  contents?: String;
  detailImage?: String;
  mainImage?: String;
  price?: Int;
  savingPrice?: Int;
  subTitle?: String;
  title?: String;
}

export interface CupDatumUpdateWithoutCupDataProcVolumeDataInput {
  battery?: Int;
  calibFlag?: Boolean;
  ch1?: Int;
  ch10?: Int;
  ch11?: Int;
  ch12?: Int;
  ch13?: Int;
  ch14?: Int;
  ch2?: Int;
  ch3?: Int;
  ch4?: Int;
  ch5?: Int;
  ch6?: Int;
  ch7?: Int;
  ch8?: Int;
  ch9?: Int;
  colourB?: Int;
  colourC?: Int;
  colourG?: Int;
  colourR?: Int;
  cupDataColourCalc?: CupDataColourCalcUpdateManyWithoutCupDataRowIdInput;
  date?: DateTimeInput;
  day?: Int;
  hour?: Int;
  line?: Int;
  minute?: Int;
  month?: Int;
  page?: Int;
  rawTotalVolume?: Int;
  rawVolumeL?: Int;
  rawVolumeR?: Int;
  serialNumber?: CupUpdateOneWithoutCupDataInput;
  temperature?: Int;
  x?: Int;
  y?: Int;
  year?: Int;
  z?: Int;
}

export type PlatformCompWhereUniqueInput = AtLeastOne<{
  id: Int;
}>;

export interface CupDatumUpsertWithoutCupDataProcVolumeInput {
  update: CupDatumUpdateWithoutCupDataProcVolumeDataInput;
  create: CupDatumCreateWithoutCupDataProcVolumeInput;
}

export interface MarketAmazonCouponCreateInput {
  availability?: Boolean;
  couponNumber: String;
  createTime: DateTimeInput;
  endTime: DateTimeInput;
  marketListId?: Int;
  price?: Int;
  startTime: DateTimeInput;
  title?: String;
}

export interface CupDataProcVolumeUpdateManyMutationInput {
  confidenceL?: Int;
  confidenceR?: Int;
  inVitro?: Boolean;
  volume?: Int;
  volumeAdj?: Int;
  volumeL?: Int;
  volumeR?: Int;
}

export interface CupUpdateWithoutFwIdDataInput {
  anonSerialNumber?: Int;
  calibId?: CalibrationUpdateOneWithoutCupInput;
  companyId?: CompanyUpdateOneWithoutCupInput;
  cupAppSync?: CupAppSyncUpdateManyWithoutSerialNumberInput;
  cupData?: CupDatumUpdateManyWithoutSerialNumberInput;
  cupDataColourCalib?: CupDataColourCalibUpdateManyWithoutSerialNumberInput;
  cupDataRaw?: CupDataRawUpdateManyWithoutSerialNumberInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutSerialNumberInput;
  encryptionKey?: Int;
  hwId?: HardwareUpdateOneWithoutCupInput;
  userCups?: UserCupUpdateManyWithoutSerialNumberInput;
}

export interface CupDataQaResponseCreateInput {
  answerId: CupDataAnswerCreateOneWithoutCupDataQaResponseInput;
  qaDate: DateTimeInput;
  questionId: CupDataQuestionCreateOneWithoutCupDataQaResponseInput;
  userId: UserCreateOneWithoutCupDataQaResponseInput;
}

export interface UserUpdateWithoutEthnicityIdDataInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncUpdateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowUpdateManyWithoutUserIdInput;
  cupDataProcMdates?: CupDataProcMdateUpdateManyWithoutUserIdInput;
  cupDataQaResponse?: CupDataQaResponseUpdateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob?: DateTimeInput;
  email?: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  firstName?: String;
  givenBirth?: Boolean;
  lastName?: String;
  macId?: String;
  password?: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryUpdateManyWithoutUserIdInput;
  userCups?: UserCupUpdateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumUpdateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodUpdateManyWithoutUserIdInput;
  userWallet?: UserWalletUpdateManyWithoutUserIdInput;
}

export interface CupDataQaResponseUpdateInput {
  answerId?: CupDataAnswerUpdateOneRequiredWithoutCupDataQaResponseInput;
  qaDate?: DateTimeInput;
  questionId?: CupDataQuestionUpdateOneRequiredWithoutCupDataQaResponseInput;
  userId?: UserUpdateOneRequiredWithoutCupDataQaResponseInput;
}

export interface AdditionalInfoUpdateInput {
  abnormalUltrasoundFinding?: Boolean;
  conditionSurgicalHistory?: String;
  cycle?: Int;
  cycleIrregular?: Boolean;
  ethnicity?: String;
  height?: Float;
  inUseMenstrualCup?: String;
  inUseMenstrualCupSize?: String;
  iudImplanonExpireDate?: DateTimeInput;
  iudImplanonInsertDate?: DateTimeInput;
  lastPeriodDate?: DateTimeInput;
  medicineList?: String;
  period?: Int;
  periodIrregular?: Boolean;
  userId?: Int;
  weight?: Float;
}

export interface CupDataQaResponseUpdateManyMutationInput {
  qaDate?: DateTimeInput;
}

export interface CupDataProcMdateCreateWithoutCupDataProcFlowInput {
  cupDataManMdates?: CupDataManMdateCreateManyWithoutMdateRowIdInput;
  dataRejected?: Boolean;
  dataVerified: Boolean;
  menFinish: DateTimeInput;
  menStart: DateTimeInput;
  rejectId?: CupDataRejectionCreateOneWithoutCupDataProcMdatesInput;
  rewardAmount?: Int;
  userId: UserCreateOneWithoutCupDataProcMdatesInput;
}

export interface CupDataQuestionCreateInput {
  cupDataAnswer?: CupDataAnswerCreateManyWithoutQuestionIdInput;
  cupDataQaResponse?: CupDataQaResponseCreateManyWithoutQuestionIdInput;
  questionText: String;
}

export interface UserCreateWithoutCupDataQaResponseInput {
  anonUserId?: Int;
  appServerSync?: AppServerSyncCreateManyWithoutUserIdInput;
  countryId?: Int;
  cupDataProcFlow?: CupDataProcFlowCreateManyWithoutUserIdInput;
  cupDataProcMdates?: CupDataProcMdateCreateManyWithoutUserIdInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutUserIdInput;
  deleted?: Boolean;
  deviceModel?: String;
  dob: DateTimeInput;
  email: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  ethnicityId?: EthnicityCreateOneWithoutUsersInput;
  firstName: String;
  givenBirth: Boolean;
  lastName: String;
  macId?: String;
  password: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
  userCoinHistory?: UserCoinHistoryCreateManyWithoutUserIdInput;
  userCups?: UserCupCreateManyWithoutUserIdInput;
  userInterviewData?: UserInterviewDatumCreateManyWithoutUserIdInput;
  userRecordDataByPeriod?: UserRecordDataByPeriodCreateManyWithoutUserIdInput;
  userWallet?: UserWalletCreateManyWithoutUserIdInput;
}

export interface CupDataQuestionUpdateInput {
  cupDataAnswer?: CupDataAnswerUpdateManyWithoutQuestionIdInput;
  cupDataQaResponse?: CupDataQaResponseUpdateManyWithoutQuestionIdInput;
  questionText?: String;
}

export interface CompanyCreateWithoutCupInput {
  companyName: String;
}

export interface CupDataQuestionUpdateManyMutationInput {
  questionText?: String;
}

export interface HardwareCreateWithoutCupInput {
  hwVersion: String;
}

export interface CupDataRawCreateInput {
  pageData: String;
  serialNumber?: CupCreateOneWithoutCupDataRawInput;
}

export interface UserInterviewQuestionCreateWithoutUserInterviewDataInput {
  answerTypeId: AnswerTypeCreateOneWithoutUserInterviewQuestionsInput;
  question: String;
}

export interface CupCreateOneWithoutCupDataRawInput {
  create?: CupCreateWithoutCupDataRawInput;
  connect?: CupWhereUniqueInput;
}

export interface CupDataUserRemoveCreateWithoutSerialNumberInput {
  changeTime: DateTimeInput;
  explainId: CupDataUserRemoveExplainCreateOneWithoutCupDataUserRemoveInput;
  userId: UserCreateOneWithoutCupDataUserRemoveInput;
}

export interface CupCreateWithoutCupDataRawInput {
  anonSerialNumber: Int;
  calibId?: CalibrationCreateOneWithoutCupInput;
  companyId?: CompanyCreateOneWithoutCupInput;
  cupAppSync?: CupAppSyncCreateManyWithoutSerialNumberInput;
  cupData?: CupDatumCreateManyWithoutSerialNumberInput;
  cupDataColourCalib?: CupDataColourCalibCreateManyWithoutSerialNumberInput;
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutSerialNumberInput;
  encryptionKey: Int;
  fwId?: FirmwareCreateOneWithoutCupInput;
  hwId?: HardwareCreateOneWithoutCupInput;
  userCups?: UserCupCreateManyWithoutSerialNumberInput;
}

export interface UserCupWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  serialNumber?: CupWhereInput;
  userId?: UserWhereInput;
  AND?: UserCupWhereInput[] | UserCupWhereInput;
  OR?: UserCupWhereInput[] | UserCupWhereInput;
  NOT?: UserCupWhereInput[] | UserCupWhereInput;
}

export interface CupDataRawUpdateInput {
  pageData?: String;
  serialNumber?: CupUpdateOneWithoutCupDataRawInput;
}

export interface CupDataQuestionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CupDataQuestionWhereInput;
  AND?:
    | CupDataQuestionSubscriptionWhereInput[]
    | CupDataQuestionSubscriptionWhereInput;
  OR?:
    | CupDataQuestionSubscriptionWhereInput[]
    | CupDataQuestionSubscriptionWhereInput;
  NOT?:
    | CupDataQuestionSubscriptionWhereInput[]
    | CupDataQuestionSubscriptionWhereInput;
}

export interface CupUpdateOneWithoutCupDataRawInput {
  create?: CupCreateWithoutCupDataRawInput;
  update?: CupUpdateWithoutCupDataRawDataInput;
  upsert?: CupUpsertWithoutCupDataRawInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CupWhereUniqueInput;
}

export interface UsersDataAnalysisUpdateInput {
  email?: String;
  firstName?: String;
  lastName?: String;
  password?: String;
  userId?: String;
}

export interface CupUpdateWithoutCupDataRawDataInput {
  anonSerialNumber?: Int;
  calibId?: CalibrationUpdateOneWithoutCupInput;
  companyId?: CompanyUpdateOneWithoutCupInput;
  cupAppSync?: CupAppSyncUpdateManyWithoutSerialNumberInput;
  cupData?: CupDatumUpdateManyWithoutSerialNumberInput;
  cupDataColourCalib?: CupDataColourCalibUpdateManyWithoutSerialNumberInput;
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutSerialNumberInput;
  encryptionKey?: Int;
  fwId?: FirmwareUpdateOneWithoutCupInput;
  hwId?: HardwareUpdateOneWithoutCupInput;
  userCups?: UserCupUpdateManyWithoutSerialNumberInput;
}

export interface UserRecordDataByPeriodUpsertWithoutUserRecordDataByDayInput {
  update: UserRecordDataByPeriodUpdateWithoutUserRecordDataByDayDataInput;
  create: UserRecordDataByPeriodCreateWithoutUserRecordDataByDayInput;
}

export interface CupUpsertWithoutCupDataRawInput {
  update: CupUpdateWithoutCupDataRawDataInput;
  create: CupCreateWithoutCupDataRawInput;
}

export interface UserInterviewDatumUpdateManyMutationInput {
  answerRange?: Int;
  answerText?: String;
  answerYn?: Boolean;
  date?: DateTimeInput;
}

export interface CupDataRawUpdateManyMutationInput {
  pageData?: String;
}

export interface MarketListDetailCreateInput {
  contents?: String;
  detailImage?: String;
  mainImage?: String;
  marketListId?: MarketListCreateOneWithoutMarketListDetailInput;
  price?: Int;
  savingPrice?: Int;
  subTitle?: String;
  title?: String;
}

export interface CupDataRejectionCreateInput {
  cupDataProcMdates?: CupDataProcMdateCreateManyWithoutRejectIdInput;
  rejectionDescription: String;
}

export interface UserCreateOneWithoutUserCoinHistoryInput {
  create?: UserCreateWithoutUserCoinHistoryInput;
  connect?: UserWhereUniqueInput;
}

export interface CupDataProcMdateCreateManyWithoutRejectIdInput {
  create?:
    | CupDataProcMdateCreateWithoutRejectIdInput[]
    | CupDataProcMdateCreateWithoutRejectIdInput;
  connect?:
    | CupDataProcMdateWhereUniqueInput[]
    | CupDataProcMdateWhereUniqueInput;
}

export interface FirmwareCreateInput {
  cup?: CupCreateManyWithoutFwIdInput;
  fwVersion: String;
}

export interface CupDataProcMdateCreateWithoutRejectIdInput {
  cupDataManMdates?: CupDataManMdateCreateManyWithoutMdateRowIdInput;
  cupDataProcFlow?: CupDataProcFlowCreateManyWithoutMdateRowIdInput;
  dataRejected?: Boolean;
  dataVerified: Boolean;
  menFinish: DateTimeInput;
  menStart: DateTimeInput;
  rewardAmount?: Int;
  userId: UserCreateOneWithoutCupDataProcMdatesInput;
}

export interface UserInterviewDatumCreateWithoutQuestionIdInput {
  answerRange?: Int;
  answerText?: String;
  answerYn?: Boolean;
  date: DateTimeInput;
  userId: UserCreateOneWithoutUserInterviewDataInput;
}

export interface CupDataRejectionUpdateInput {
  cupDataProcMdates?: CupDataProcMdateUpdateManyWithoutRejectIdInput;
  rejectionDescription?: String;
}

export interface CupDataUserRemoveCreateWithoutUserIdInput {
  changeTime: DateTimeInput;
  explainId: CupDataUserRemoveExplainCreateOneWithoutCupDataUserRemoveInput;
  serialNumber: CupCreateOneWithoutCupDataUserRemoveInput;
}

export interface CupDataProcMdateUpdateManyWithoutRejectIdInput {
  create?:
    | CupDataProcMdateCreateWithoutRejectIdInput[]
    | CupDataProcMdateCreateWithoutRejectIdInput;
  delete?:
    | CupDataProcMdateWhereUniqueInput[]
    | CupDataProcMdateWhereUniqueInput;
  connect?:
    | CupDataProcMdateWhereUniqueInput[]
    | CupDataProcMdateWhereUniqueInput;
  set?: CupDataProcMdateWhereUniqueInput[] | CupDataProcMdateWhereUniqueInput;
  disconnect?:
    | CupDataProcMdateWhereUniqueInput[]
    | CupDataProcMdateWhereUniqueInput;
  update?:
    | CupDataProcMdateUpdateWithWhereUniqueWithoutRejectIdInput[]
    | CupDataProcMdateUpdateWithWhereUniqueWithoutRejectIdInput;
  upsert?:
    | CupDataProcMdateUpsertWithWhereUniqueWithoutRejectIdInput[]
    | CupDataProcMdateUpsertWithWhereUniqueWithoutRejectIdInput;
  deleteMany?:
    | CupDataProcMdateScalarWhereInput[]
    | CupDataProcMdateScalarWhereInput;
  updateMany?:
    | CupDataProcMdateUpdateManyWithWhereNestedInput[]
    | CupDataProcMdateUpdateManyWithWhereNestedInput;
}

export interface UserCoinHistoryCreateWithoutUserIdInput {
  category: String;
  coin: Int;
  contents: String;
  date: DateTimeInput;
  marketBuyHistory?: MarketBuyHistoryCreateManyWithoutCoinHistoryRowIdInput;
  txhash: String;
  userRecordCameraDataByTime?: UserRecordCameraDataByTimeCreateManyWithoutCoinHistoryRowIdInput;
  walletId?: Int;
}

export interface CupDataProcMdateUpdateWithWhereUniqueWithoutRejectIdInput {
  where: CupDataProcMdateWhereUniqueInput;
  data: CupDataProcMdateUpdateWithoutRejectIdDataInput;
}

export interface CupDataQaResponseCreateWithoutAnswerIdInput {
  qaDate: DateTimeInput;
  questionId: CupDataQuestionCreateOneWithoutCupDataQaResponseInput;
  userId: UserCreateOneWithoutCupDataQaResponseInput;
}

export interface CupDataProcMdateUpdateWithoutRejectIdDataInput {
  cupDataManMdates?: CupDataManMdateUpdateManyWithoutMdateRowIdInput;
  cupDataProcFlow?: CupDataProcFlowUpdateManyWithoutMdateRowIdInput;
  dataRejected?: Boolean;
  dataVerified?: Boolean;
  menFinish?: DateTimeInput;
  menStart?: DateTimeInput;
  rewardAmount?: Int;
  userId?: UserUpdateOneRequiredWithoutCupDataProcMdatesInput;
}

export interface CupAppSyncSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CupAppSyncWhereInput;
  AND?: CupAppSyncSubscriptionWhereInput[] | CupAppSyncSubscriptionWhereInput;
  OR?: CupAppSyncSubscriptionWhereInput[] | CupAppSyncSubscriptionWhereInput;
  NOT?: CupAppSyncSubscriptionWhereInput[] | CupAppSyncSubscriptionWhereInput;
}

export interface CupDataProcMdateUpsertWithWhereUniqueWithoutRejectIdInput {
  where: CupDataProcMdateWhereUniqueInput;
  update: CupDataProcMdateUpdateWithoutRejectIdDataInput;
  create: CupDataProcMdateCreateWithoutRejectIdInput;
}

export interface UserRecordCameraDataByTimeUpdateManyMutationInput {
  confirmYn?: Boolean;
  deleteYn?: Boolean;
  height?: Float;
  imagePath?: String;
  locationX?: Float;
  locationY?: Float;
  size?: Float;
  width?: Float;
}

export interface CupDataRejectionUpdateManyMutationInput {
  rejectionDescription?: String;
}

export interface MarketListDetailCreateWithoutMarketListIdInput {
  contents?: String;
  detailImage?: String;
  mainImage?: String;
  price?: Int;
  savingPrice?: Int;
  subTitle?: String;
  title?: String;
}

export interface CupDataUserRemoveCreateInput {
  changeTime: DateTimeInput;
  explainId: CupDataUserRemoveExplainCreateOneWithoutCupDataUserRemoveInput;
  serialNumber: CupCreateOneWithoutCupDataUserRemoveInput;
  userId: UserCreateOneWithoutCupDataUserRemoveInput;
}

export interface UsersDataAnalysisWhereInput {
  id?: Int;
  id_not?: Int;
  id_in?: Int[] | Int;
  id_not_in?: Int[] | Int;
  id_lt?: Int;
  id_lte?: Int;
  id_gt?: Int;
  id_gte?: Int;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  userId?: String;
  userId_not?: String;
  userId_in?: String[] | String;
  userId_not_in?: String[] | String;
  userId_lt?: String;
  userId_lte?: String;
  userId_gt?: String;
  userId_gte?: String;
  userId_contains?: String;
  userId_not_contains?: String;
  userId_starts_with?: String;
  userId_not_starts_with?: String;
  userId_ends_with?: String;
  userId_not_ends_with?: String;
  AND?: UsersDataAnalysisWhereInput[] | UsersDataAnalysisWhereInput;
  OR?: UsersDataAnalysisWhereInput[] | UsersDataAnalysisWhereInput;
  NOT?: UsersDataAnalysisWhereInput[] | UsersDataAnalysisWhereInput;
}

export interface CupDataUserRemoveUpdateInput {
  changeTime?: DateTimeInput;
  explainId?: CupDataUserRemoveExplainUpdateOneRequiredWithoutCupDataUserRemoveInput;
  serialNumber?: CupUpdateOneRequiredWithoutCupDataUserRemoveInput;
  userId?: UserUpdateOneRequiredWithoutCupDataUserRemoveInput;
}

export interface CupDataProcVolumeCreateWithoutCupDataRowIdInput {
  confidenceL?: Int;
  confidenceR?: Int;
  inVitro?: Boolean;
  volume?: Int;
  volumeAdj?: Int;
  volumeL?: Int;
  volumeR?: Int;
}

export interface CupDataUserRemoveUpdateManyMutationInput {
  changeTime?: DateTimeInput;
}

export interface MarketAmazonCouponSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MarketAmazonCouponWhereInput;
  AND?:
    | MarketAmazonCouponSubscriptionWhereInput[]
    | MarketAmazonCouponSubscriptionWhereInput;
  OR?:
    | MarketAmazonCouponSubscriptionWhereInput[]
    | MarketAmazonCouponSubscriptionWhereInput;
  NOT?:
    | MarketAmazonCouponSubscriptionWhereInput[]
    | MarketAmazonCouponSubscriptionWhereInput;
}

export interface CupDataUserRemoveExplainUpdateInput {
  cupDataUserRemove?: CupDataUserRemoveUpdateManyWithoutExplainIdInput;
  explain?: String;
}

export interface CupDataUserRemoveCreateWithoutExplainIdInput {
  changeTime: DateTimeInput;
  serialNumber: CupCreateOneWithoutCupDataUserRemoveInput;
  userId: UserCreateOneWithoutCupDataUserRemoveInput;
}

export interface CupDataUserRemoveCreateManyWithoutExplainIdInput {
  create?:
    | CupDataUserRemoveCreateWithoutExplainIdInput[]
    | CupDataUserRemoveCreateWithoutExplainIdInput;
  connect?:
    | CupDataUserRemoveWhereUniqueInput[]
    | CupDataUserRemoveWhereUniqueInput;
}

export interface CupDataUserRemoveExplainCreateInput {
  cupDataUserRemove?: CupDataUserRemoveCreateManyWithoutExplainIdInput;
  explain: String;
}

export interface UserRecordDataByTimeUpdateManyMutationInput {
  cameraDataId?: Int;
  changeTime?: DateTimeInput;
  colorB?: Int;
  colorG?: Int;
  colorR?: Int;
  leakage?: String;
  startTime?: DateTimeInput;
  volume?: Float;
}

export interface UserRecordDataByTimeCreateWithoutRecordDayRowIdInput {
  cameraDataId?: Int;
  changeTime: DateTimeInput;
  colorB?: Int;
  colorG?: Int;
  colorR?: Int;
  leakage?: String;
  startTime?: DateTimeInput;
  volume?: Float;
}

export interface CupDataQaResponseCreateWithoutUserIdInput {
  answerId: CupDataAnswerCreateOneWithoutCupDataQaResponseInput;
  qaDate: DateTimeInput;
  questionId: CupDataQuestionCreateOneWithoutCupDataQaResponseInput;
}

export interface HardwareUpdateInput {
  cup?: CupUpdateManyWithoutHwIdInput;
  hwVersion?: String;
}

export type EthnicityWhereUniqueInput = AtLeastOne<{
  id: Int;
  ethnicity?: String;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface UsersDataAnalysisPreviousValues {
  id: Int;
  email: String;
  firstName: String;
  lastName: String;
  password: String;
  userId: String;
}

export interface UsersDataAnalysisPreviousValuesPromise
  extends Promise<UsersDataAnalysisPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface UsersDataAnalysisPreviousValuesSubscription
  extends Promise<AsyncIterator<UsersDataAnalysisPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface CompanyConnection {
  pageInfo: PageInfo;
  edges: CompanyEdge[];
}

export interface CompanyConnectionPromise
  extends Promise<CompanyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompanyEdge>>() => T;
  aggregate: <T = AggregateCompanyPromise>() => T;
}

export interface CompanyConnectionSubscription
  extends Promise<AsyncIterator<CompanyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompanyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompanySubscription>() => T;
}

export interface UserInterviewQuestion {
  id: Int;
  question: String;
}

export interface UserInterviewQuestionPromise
  extends Promise<UserInterviewQuestion>,
    Fragmentable {
  id: () => Promise<Int>;
  answerTypeId: <T = AnswerTypePromise>() => T;
  question: () => Promise<String>;
  userInterviewData: <T = FragmentableArray<UserInterviewDatum>>(
    args?: {
      where?: UserInterviewDatumWhereInput;
      orderBy?: UserInterviewDatumOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserInterviewQuestionSubscription
  extends Promise<AsyncIterator<UserInterviewQuestion>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  answerTypeId: <T = AnswerTypeSubscription>() => T;
  question: () => Promise<AsyncIterator<String>>;
  userInterviewData: <
    T = Promise<AsyncIterator<UserInterviewDatumSubscription>>
  >(
    args?: {
      where?: UserInterviewDatumWhereInput;
      orderBy?: UserInterviewDatumOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateCalibration {
  count: Int;
}

export interface AggregateCalibrationPromise
  extends Promise<AggregateCalibration>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCalibrationSubscription
  extends Promise<AsyncIterator<AggregateCalibration>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CalibrationEdge {
  node: Calibration;
  cursor: String;
}

export interface CalibrationEdgePromise
  extends Promise<CalibrationEdge>,
    Fragmentable {
  node: <T = CalibrationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CalibrationEdgeSubscription
  extends Promise<AsyncIterator<CalibrationEdge>>,
    Fragmentable {
  node: <T = CalibrationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUsersDataAnalysis {
  count: Int;
}

export interface AggregateUsersDataAnalysisPromise
  extends Promise<AggregateUsersDataAnalysis>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUsersDataAnalysisSubscription
  extends Promise<AsyncIterator<AggregateUsersDataAnalysis>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CalibrationConnection {
  pageInfo: PageInfo;
  edges: CalibrationEdge[];
}

export interface CalibrationConnectionPromise
  extends Promise<CalibrationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CalibrationEdge>>() => T;
  aggregate: <T = AggregateCalibrationPromise>() => T;
}

export interface CalibrationConnectionSubscription
  extends Promise<AsyncIterator<CalibrationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CalibrationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCalibrationSubscription>() => T;
}

export interface UsersDataAnalysisConnection {
  pageInfo: PageInfo;
  edges: UsersDataAnalysisEdge[];
}

export interface UsersDataAnalysisConnectionPromise
  extends Promise<UsersDataAnalysisConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UsersDataAnalysisEdge>>() => T;
  aggregate: <T = AggregateUsersDataAnalysisPromise>() => T;
}

export interface UsersDataAnalysisConnectionSubscription
  extends Promise<AsyncIterator<UsersDataAnalysisConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UsersDataAnalysisEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUsersDataAnalysisSubscription>() => T;
}

export interface AdditionalInfo {
  id: Int;
  abnormalUltrasoundFinding: Boolean;
  conditionSurgicalHistory?: String;
  cycle?: Int;
  cycleIrregular: Boolean;
  ethnicity?: String;
  height: Float;
  inUseMenstrualCup?: String;
  inUseMenstrualCupSize?: String;
  iudImplanonExpireDate?: DateTimeOutput;
  iudImplanonInsertDate?: DateTimeOutput;
  lastPeriodDate: DateTimeOutput;
  medicineList?: String;
  period?: Int;
  periodIrregular: Boolean;
  userId?: Int;
  weight: Float;
}

export interface AdditionalInfoPromise
  extends Promise<AdditionalInfo>,
    Fragmentable {
  id: () => Promise<Int>;
  abnormalUltrasoundFinding: () => Promise<Boolean>;
  conditionSurgicalHistory: () => Promise<String>;
  cycle: () => Promise<Int>;
  cycleIrregular: () => Promise<Boolean>;
  ethnicity: () => Promise<String>;
  height: () => Promise<Float>;
  inUseMenstrualCup: () => Promise<String>;
  inUseMenstrualCupSize: () => Promise<String>;
  iudImplanonExpireDate: () => Promise<DateTimeOutput>;
  iudImplanonInsertDate: () => Promise<DateTimeOutput>;
  lastPeriodDate: () => Promise<DateTimeOutput>;
  medicineList: () => Promise<String>;
  period: () => Promise<Int>;
  periodIrregular: () => Promise<Boolean>;
  userId: () => Promise<Int>;
  weight: () => Promise<Float>;
}

export interface AdditionalInfoSubscription
  extends Promise<AsyncIterator<AdditionalInfo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  abnormalUltrasoundFinding: () => Promise<AsyncIterator<Boolean>>;
  conditionSurgicalHistory: () => Promise<AsyncIterator<String>>;
  cycle: () => Promise<AsyncIterator<Int>>;
  cycleIrregular: () => Promise<AsyncIterator<Boolean>>;
  ethnicity: () => Promise<AsyncIterator<String>>;
  height: () => Promise<AsyncIterator<Float>>;
  inUseMenstrualCup: () => Promise<AsyncIterator<String>>;
  inUseMenstrualCupSize: () => Promise<AsyncIterator<String>>;
  iudImplanonExpireDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  iudImplanonInsertDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastPeriodDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  medicineList: () => Promise<AsyncIterator<String>>;
  period: () => Promise<AsyncIterator<Int>>;
  periodIrregular: () => Promise<AsyncIterator<Boolean>>;
  userId: () => Promise<AsyncIterator<Int>>;
  weight: () => Promise<AsyncIterator<Float>>;
}

export interface UsersDataAnalysis {
  id: Int;
  email: String;
  firstName: String;
  lastName: String;
  password: String;
  userId: String;
}

export interface UsersDataAnalysisPromise
  extends Promise<UsersDataAnalysis>,
    Fragmentable {
  id: () => Promise<Int>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  userId: () => Promise<String>;
}

export interface UsersDataAnalysisSubscription
  extends Promise<AsyncIterator<UsersDataAnalysis>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  userId: () => Promise<AsyncIterator<String>>;
}

export interface AdditionalInfoSubscriptionPayload {
  mutation: MutationType;
  node: AdditionalInfo;
  updatedFields: String[];
  previousValues: AdditionalInfoPreviousValues;
}

export interface AdditionalInfoSubscriptionPayloadPromise
  extends Promise<AdditionalInfoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AdditionalInfoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AdditionalInfoPreviousValuesPromise>() => T;
}

export interface AdditionalInfoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AdditionalInfoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AdditionalInfoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AdditionalInfoPreviousValuesSubscription>() => T;
}

export interface UserWalletEdge {
  node: UserWallet;
  cursor: String;
}

export interface UserWalletEdgePromise
  extends Promise<UserWalletEdge>,
    Fragmentable {
  node: <T = UserWalletPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserWalletEdgeSubscription
  extends Promise<AsyncIterator<UserWalletEdge>>,
    Fragmentable {
  node: <T = UserWalletSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AdditionalInfoPreviousValues {
  id: Int;
  abnormalUltrasoundFinding: Boolean;
  conditionSurgicalHistory?: String;
  cycle?: Int;
  cycleIrregular: Boolean;
  ethnicity?: String;
  height: Float;
  inUseMenstrualCup?: String;
  inUseMenstrualCupSize?: String;
  iudImplanonExpireDate?: DateTimeOutput;
  iudImplanonInsertDate?: DateTimeOutput;
  lastPeriodDate: DateTimeOutput;
  medicineList?: String;
  period?: Int;
  periodIrregular: Boolean;
  userId?: Int;
  weight: Float;
}

export interface AdditionalInfoPreviousValuesPromise
  extends Promise<AdditionalInfoPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  abnormalUltrasoundFinding: () => Promise<Boolean>;
  conditionSurgicalHistory: () => Promise<String>;
  cycle: () => Promise<Int>;
  cycleIrregular: () => Promise<Boolean>;
  ethnicity: () => Promise<String>;
  height: () => Promise<Float>;
  inUseMenstrualCup: () => Promise<String>;
  inUseMenstrualCupSize: () => Promise<String>;
  iudImplanonExpireDate: () => Promise<DateTimeOutput>;
  iudImplanonInsertDate: () => Promise<DateTimeOutput>;
  lastPeriodDate: () => Promise<DateTimeOutput>;
  medicineList: () => Promise<String>;
  period: () => Promise<Int>;
  periodIrregular: () => Promise<Boolean>;
  userId: () => Promise<Int>;
  weight: () => Promise<Float>;
}

export interface AdditionalInfoPreviousValuesSubscription
  extends Promise<AsyncIterator<AdditionalInfoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  abnormalUltrasoundFinding: () => Promise<AsyncIterator<Boolean>>;
  conditionSurgicalHistory: () => Promise<AsyncIterator<String>>;
  cycle: () => Promise<AsyncIterator<Int>>;
  cycleIrregular: () => Promise<AsyncIterator<Boolean>>;
  ethnicity: () => Promise<AsyncIterator<String>>;
  height: () => Promise<AsyncIterator<Float>>;
  inUseMenstrualCup: () => Promise<AsyncIterator<String>>;
  inUseMenstrualCupSize: () => Promise<AsyncIterator<String>>;
  iudImplanonExpireDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  iudImplanonInsertDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  lastPeriodDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  medicineList: () => Promise<AsyncIterator<String>>;
  period: () => Promise<AsyncIterator<Int>>;
  periodIrregular: () => Promise<AsyncIterator<Boolean>>;
  userId: () => Promise<AsyncIterator<Int>>;
  weight: () => Promise<AsyncIterator<Float>>;
}

export interface AggregateUserRecordDataByTime {
  count: Int;
}

export interface AggregateUserRecordDataByTimePromise
  extends Promise<AggregateUserRecordDataByTime>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserRecordDataByTimeSubscription
  extends Promise<AsyncIterator<AggregateUserRecordDataByTime>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateAuthToken {
  count: Int;
}

export interface AggregateAuthTokenPromise
  extends Promise<AggregateAuthToken>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAuthTokenSubscription
  extends Promise<AsyncIterator<AggregateAuthToken>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserRecordDataByTimeConnection {
  pageInfo: PageInfo;
  edges: UserRecordDataByTimeEdge[];
}

export interface UserRecordDataByTimeConnectionPromise
  extends Promise<UserRecordDataByTimeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserRecordDataByTimeEdge>>() => T;
  aggregate: <T = AggregateUserRecordDataByTimePromise>() => T;
}

export interface UserRecordDataByTimeConnectionSubscription
  extends Promise<AsyncIterator<UserRecordDataByTimeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<UserRecordDataByTimeEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateUserRecordDataByTimeSubscription>() => T;
}

export interface AnswerTypeSubscriptionPayload {
  mutation: MutationType;
  node: AnswerType;
  updatedFields: String[];
  previousValues: AnswerTypePreviousValues;
}

export interface AnswerTypeSubscriptionPayloadPromise
  extends Promise<AnswerTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AnswerTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AnswerTypePreviousValuesPromise>() => T;
}

export interface AnswerTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AnswerTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AnswerTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AnswerTypePreviousValuesSubscription>() => T;
}

export interface UserRecordDataByPeriodEdge {
  node: UserRecordDataByPeriod;
  cursor: String;
}

export interface UserRecordDataByPeriodEdgePromise
  extends Promise<UserRecordDataByPeriodEdge>,
    Fragmentable {
  node: <T = UserRecordDataByPeriodPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserRecordDataByPeriodEdgeSubscription
  extends Promise<AsyncIterator<UserRecordDataByPeriodEdge>>,
    Fragmentable {
  node: <T = UserRecordDataByPeriodSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AnswerTypePreviousValues {
  id: Int;
  answerType: String;
}

export interface AnswerTypePreviousValuesPromise
  extends Promise<AnswerTypePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  answerType: () => Promise<String>;
}

export interface AnswerTypePreviousValuesSubscription
  extends Promise<AsyncIterator<AnswerTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  answerType: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserRecordDataByDay {
  count: Int;
}

export interface AggregateUserRecordDataByDayPromise
  extends Promise<AggregateUserRecordDataByDay>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserRecordDataByDaySubscription
  extends Promise<AsyncIterator<AggregateUserRecordDataByDay>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AuthTokenEdge {
  node: AuthToken;
  cursor: String;
}

export interface AuthTokenEdgePromise
  extends Promise<AuthTokenEdge>,
    Fragmentable {
  node: <T = AuthTokenPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AuthTokenEdgeSubscription
  extends Promise<AsyncIterator<AuthTokenEdge>>,
    Fragmentable {
  node: <T = AuthTokenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserRecordDataByDayConnection {
  pageInfo: PageInfo;
  edges: UserRecordDataByDayEdge[];
}

export interface UserRecordDataByDayConnectionPromise
  extends Promise<UserRecordDataByDayConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserRecordDataByDayEdge>>() => T;
  aggregate: <T = AggregateUserRecordDataByDayPromise>() => T;
}

export interface UserRecordDataByDayConnectionSubscription
  extends Promise<AsyncIterator<UserRecordDataByDayConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<UserRecordDataByDayEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateUserRecordDataByDaySubscription>() => T;
}

export interface AppServerSyncSubscriptionPayload {
  mutation: MutationType;
  node: AppServerSync;
  updatedFields: String[];
  previousValues: AppServerSyncPreviousValues;
}

export interface AppServerSyncSubscriptionPayloadPromise
  extends Promise<AppServerSyncSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AppServerSyncPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AppServerSyncPreviousValuesPromise>() => T;
}

export interface AppServerSyncSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AppServerSyncSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AppServerSyncSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AppServerSyncPreviousValuesSubscription>() => T;
}

export interface UserRecordCameraDataByTimeEdge {
  node: UserRecordCameraDataByTime;
  cursor: String;
}

export interface UserRecordCameraDataByTimeEdgePromise
  extends Promise<UserRecordCameraDataByTimeEdge>,
    Fragmentable {
  node: <T = UserRecordCameraDataByTimePromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserRecordCameraDataByTimeEdgeSubscription
  extends Promise<AsyncIterator<UserRecordCameraDataByTimeEdge>>,
    Fragmentable {
  node: <T = UserRecordCameraDataByTimeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AppServerSyncPreviousValues {
  id: Int;
  serverSynchTime: DateTimeOutput;
}

export interface AppServerSyncPreviousValuesPromise
  extends Promise<AppServerSyncPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  serverSynchTime: () => Promise<DateTimeOutput>;
}

export interface AppServerSyncPreviousValuesSubscription
  extends Promise<AsyncIterator<AppServerSyncPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  serverSynchTime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateUserInterviewQuestion {
  count: Int;
}

export interface AggregateUserInterviewQuestionPromise
  extends Promise<AggregateUserInterviewQuestion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserInterviewQuestionSubscription
  extends Promise<AsyncIterator<AggregateUserInterviewQuestion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AuthTokenConnection {
  pageInfo: PageInfo;
  edges: AuthTokenEdge[];
}

export interface AuthTokenConnectionPromise
  extends Promise<AuthTokenConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AuthTokenEdge>>() => T;
  aggregate: <T = AggregateAuthTokenPromise>() => T;
}

export interface AuthTokenConnectionSubscription
  extends Promise<AsyncIterator<AuthTokenConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AuthTokenEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAuthTokenSubscription>() => T;
}

export interface UserInterviewQuestionConnection {
  pageInfo: PageInfo;
  edges: UserInterviewQuestionEdge[];
}

export interface UserInterviewQuestionConnectionPromise
  extends Promise<UserInterviewQuestionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserInterviewQuestionEdge>>() => T;
  aggregate: <T = AggregateUserInterviewQuestionPromise>() => T;
}

export interface UserInterviewQuestionConnectionSubscription
  extends Promise<AsyncIterator<UserInterviewQuestionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<UserInterviewQuestionEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateUserInterviewQuestionSubscription>() => T;
}

export interface AuthTokenSubscriptionPayload {
  mutation: MutationType;
  node: AuthToken;
  updatedFields: String[];
  previousValues: AuthTokenPreviousValues;
}

export interface AuthTokenSubscriptionPayloadPromise
  extends Promise<AuthTokenSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AuthTokenPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AuthTokenPreviousValuesPromise>() => T;
}

export interface AuthTokenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AuthTokenSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AuthTokenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AuthTokenPreviousValuesSubscription>() => T;
}

export interface UserInterviewDatumEdge {
  node: UserInterviewDatum;
  cursor: String;
}

export interface UserInterviewDatumEdgePromise
  extends Promise<UserInterviewDatumEdge>,
    Fragmentable {
  node: <T = UserInterviewDatumPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserInterviewDatumEdgeSubscription
  extends Promise<AsyncIterator<UserInterviewDatumEdge>>,
    Fragmentable {
  node: <T = UserInterviewDatumSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AuthTokenPreviousValues {
  id: Int;
}

export interface AuthTokenPreviousValuesPromise
  extends Promise<AuthTokenPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
}

export interface AuthTokenPreviousValuesSubscription
  extends Promise<AsyncIterator<AuthTokenPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUserCup {
  count: Int;
}

export interface AggregateUserCupPromise
  extends Promise<AggregateUserCup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserCupSubscription
  extends Promise<AsyncIterator<AggregateUserCup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AuthToken {
  id: Int;
}

export interface AuthTokenPromise extends Promise<AuthToken>, Fragmentable {
  id: () => Promise<Int>;
}

export interface AuthTokenSubscription
  extends Promise<AsyncIterator<AuthToken>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
}

export interface UserCupConnection {
  pageInfo: PageInfo;
  edges: UserCupEdge[];
}

export interface UserCupConnectionPromise
  extends Promise<UserCupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserCupEdge>>() => T;
  aggregate: <T = AggregateUserCupPromise>() => T;
}

export interface UserCupConnectionSubscription
  extends Promise<AsyncIterator<UserCupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserCupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserCupSubscription>() => T;
}

export interface CalibrationSubscriptionPayload {
  mutation: MutationType;
  node: Calibration;
  updatedFields: String[];
  previousValues: CalibrationPreviousValues;
}

export interface CalibrationSubscriptionPayloadPromise
  extends Promise<CalibrationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CalibrationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CalibrationPreviousValuesPromise>() => T;
}

export interface CalibrationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CalibrationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CalibrationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CalibrationPreviousValuesSubscription>() => T;
}

export interface UserCoinRewardsFeeEdge {
  node: UserCoinRewardsFee;
  cursor: String;
}

export interface UserCoinRewardsFeeEdgePromise
  extends Promise<UserCoinRewardsFeeEdge>,
    Fragmentable {
  node: <T = UserCoinRewardsFeePromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserCoinRewardsFeeEdgeSubscription
  extends Promise<AsyncIterator<UserCoinRewardsFeeEdge>>,
    Fragmentable {
  node: <T = UserCoinRewardsFeeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserCupEdge {
  node: UserCup;
  cursor: String;
}

export interface UserCupEdgePromise extends Promise<UserCupEdge>, Fragmentable {
  node: <T = UserCupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserCupEdgeSubscription
  extends Promise<AsyncIterator<UserCupEdge>>,
    Fragmentable {
  node: <T = UserCupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserRecordDataByTimePreviousValues {
  id: Int;
  cameraDataId?: Int;
  changeTime: DateTimeOutput;
  colorB?: Int;
  colorG?: Int;
  colorR?: Int;
  leakage?: String;
  startTime?: DateTimeOutput;
  volume?: Float;
}

export interface UserRecordDataByTimePreviousValuesPromise
  extends Promise<UserRecordDataByTimePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  cameraDataId: () => Promise<Int>;
  changeTime: () => Promise<DateTimeOutput>;
  colorB: () => Promise<Int>;
  colorG: () => Promise<Int>;
  colorR: () => Promise<Int>;
  leakage: () => Promise<String>;
  startTime: () => Promise<DateTimeOutput>;
  volume: () => Promise<Float>;
}

export interface UserRecordDataByTimePreviousValuesSubscription
  extends Promise<AsyncIterator<UserRecordDataByTimePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  cameraDataId: () => Promise<AsyncIterator<Int>>;
  changeTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  colorB: () => Promise<AsyncIterator<Int>>;
  colorG: () => Promise<AsyncIterator<Int>>;
  colorR: () => Promise<AsyncIterator<Int>>;
  leakage: () => Promise<AsyncIterator<String>>;
  startTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  volume: () => Promise<AsyncIterator<Float>>;
}

export interface AggregateUserCoinRewardsFee {
  count: Int;
}

export interface AggregateUserCoinRewardsFeePromise
  extends Promise<AggregateUserCoinRewardsFee>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserCoinRewardsFeeSubscription
  extends Promise<AsyncIterator<AggregateUserCoinRewardsFee>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CalibrationPreviousValues {
  id: Int;
  calibVersion: String;
}

export interface CalibrationPreviousValuesPromise
  extends Promise<CalibrationPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  calibVersion: () => Promise<String>;
}

export interface CalibrationPreviousValuesSubscription
  extends Promise<AsyncIterator<CalibrationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  calibVersion: () => Promise<AsyncIterator<String>>;
}

export interface UserCoinRewardsFeeConnection {
  pageInfo: PageInfo;
  edges: UserCoinRewardsFeeEdge[];
}

export interface UserCoinRewardsFeeConnectionPromise
  extends Promise<UserCoinRewardsFeeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserCoinRewardsFeeEdge>>() => T;
  aggregate: <T = AggregateUserCoinRewardsFeePromise>() => T;
}

export interface UserCoinRewardsFeeConnectionSubscription
  extends Promise<AsyncIterator<UserCoinRewardsFeeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<UserCoinRewardsFeeEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateUserCoinRewardsFeeSubscription>() => T;
}

export interface UserCoinHistoryEdge {
  node: UserCoinHistory;
  cursor: String;
}

export interface UserCoinHistoryEdgePromise
  extends Promise<UserCoinHistoryEdge>,
    Fragmentable {
  node: <T = UserCoinHistoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserCoinHistoryEdgeSubscription
  extends Promise<AsyncIterator<UserCoinHistoryEdge>>,
    Fragmentable {
  node: <T = UserCoinHistorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserCoinRewardsFee {
  id: Int;
  amount?: Int;
  contents?: String;
  createTime?: DateTimeOutput;
  updateTime?: DateTimeOutput;
}

export interface UserCoinRewardsFeePromise
  extends Promise<UserCoinRewardsFee>,
    Fragmentable {
  id: () => Promise<Int>;
  amount: () => Promise<Int>;
  contents: () => Promise<String>;
  createTime: () => Promise<DateTimeOutput>;
  updateTime: () => Promise<DateTimeOutput>;
}

export interface UserCoinRewardsFeeSubscription
  extends Promise<AsyncIterator<UserCoinRewardsFee>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  amount: () => Promise<AsyncIterator<Int>>;
  contents: () => Promise<AsyncIterator<String>>;
  createTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateAppServerSync {
  count: Int;
}

export interface AggregateAppServerSyncPromise
  extends Promise<AggregateAppServerSync>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAppServerSyncSubscription
  extends Promise<AsyncIterator<AggregateAppServerSync>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface CompanySubscriptionPayload {
  mutation: MutationType;
  node: Company;
  updatedFields: String[];
  previousValues: CompanyPreviousValues;
}

export interface CompanySubscriptionPayloadPromise
  extends Promise<CompanySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompanyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompanyPreviousValuesPromise>() => T;
}

export interface CompanySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompanySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompanySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompanyPreviousValuesSubscription>() => T;
}

export interface PlatformCompEdge {
  node: PlatformComp;
  cursor: String;
}

export interface PlatformCompEdgePromise
  extends Promise<PlatformCompEdge>,
    Fragmentable {
  node: <T = PlatformCompPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlatformCompEdgeSubscription
  extends Promise<AsyncIterator<PlatformCompEdge>>,
    Fragmentable {
  node: <T = PlatformCompSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CompanyPreviousValues {
  id: Int;
  companyName: String;
}

export interface CompanyPreviousValuesPromise
  extends Promise<CompanyPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  companyName: () => Promise<String>;
}

export interface CompanyPreviousValuesSubscription
  extends Promise<AsyncIterator<CompanyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  companyName: () => Promise<AsyncIterator<String>>;
}

export interface UsersDataAnalysisSubscriptionPayload {
  mutation: MutationType;
  node: UsersDataAnalysis;
  updatedFields: String[];
  previousValues: UsersDataAnalysisPreviousValues;
}

export interface UsersDataAnalysisSubscriptionPayloadPromise
  extends Promise<UsersDataAnalysisSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UsersDataAnalysisPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UsersDataAnalysisPreviousValuesPromise>() => T;
}

export interface UsersDataAnalysisSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UsersDataAnalysisSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UsersDataAnalysisSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UsersDataAnalysisPreviousValuesSubscription>() => T;
}

export interface AppServerSyncEdge {
  node: AppServerSync;
  cursor: String;
}

export interface AppServerSyncEdgePromise
  extends Promise<AppServerSyncEdge>,
    Fragmentable {
  node: <T = AppServerSyncPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AppServerSyncEdgeSubscription
  extends Promise<AsyncIterator<AppServerSyncEdge>>,
    Fragmentable {
  node: <T = AppServerSyncSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMarketListDetail {
  count: Int;
}

export interface AggregateMarketListDetailPromise
  extends Promise<AggregateMarketListDetail>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMarketListDetailSubscription
  extends Promise<AsyncIterator<AggregateMarketListDetail>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CountrySubscriptionPayload {
  mutation: MutationType;
  node: Country;
  updatedFields: String[];
  previousValues: CountryPreviousValues;
}

export interface CountrySubscriptionPayloadPromise
  extends Promise<CountrySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CountryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CountryPreviousValuesPromise>() => T;
}

export interface CountrySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CountrySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CountrySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CountryPreviousValuesSubscription>() => T;
}

export interface MarketListDetailConnection {
  pageInfo: PageInfo;
  edges: MarketListDetailEdge[];
}

export interface MarketListDetailConnectionPromise
  extends Promise<MarketListDetailConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MarketListDetailEdge>>() => T;
  aggregate: <T = AggregateMarketListDetailPromise>() => T;
}

export interface MarketListDetailConnectionSubscription
  extends Promise<AsyncIterator<MarketListDetailConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MarketListDetailEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMarketListDetailSubscription>() => T;
}

export interface CountryPreviousValues {
  id: Int;
  countryName: String;
}

export interface CountryPreviousValuesPromise
  extends Promise<CountryPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  countryName: () => Promise<String>;
}

export interface CountryPreviousValuesSubscription
  extends Promise<AsyncIterator<CountryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  countryName: () => Promise<AsyncIterator<String>>;
}

export interface MarketListEdge {
  node: MarketList;
  cursor: String;
}

export interface MarketListEdgePromise
  extends Promise<MarketListEdge>,
    Fragmentable {
  node: <T = MarketListPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MarketListEdgeSubscription
  extends Promise<AsyncIterator<MarketListEdge>>,
    Fragmentable {
  node: <T = MarketListSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AppServerSyncConnection {
  pageInfo: PageInfo;
  edges: AppServerSyncEdge[];
}

export interface AppServerSyncConnectionPromise
  extends Promise<AppServerSyncConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AppServerSyncEdge>>() => T;
  aggregate: <T = AggregateAppServerSyncPromise>() => T;
}

export interface AppServerSyncConnectionSubscription
  extends Promise<AsyncIterator<AppServerSyncConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AppServerSyncEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAppServerSyncSubscription>() => T;
}

export interface UserInterviewDatum {
  id: Int;
  answerRange?: Int;
  answerText?: String;
  answerYn?: Boolean;
  date: DateTimeOutput;
}

export interface UserInterviewDatumPromise
  extends Promise<UserInterviewDatum>,
    Fragmentable {
  id: () => Promise<Int>;
  answerRange: () => Promise<Int>;
  answerText: () => Promise<String>;
  answerYn: () => Promise<Boolean>;
  date: () => Promise<DateTimeOutput>;
  questionId: <T = UserInterviewQuestionPromise>() => T;
  userId: <T = UserPromise>() => T;
}

export interface UserInterviewDatumSubscription
  extends Promise<AsyncIterator<UserInterviewDatum>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  answerRange: () => Promise<AsyncIterator<Int>>;
  answerText: () => Promise<AsyncIterator<String>>;
  answerYn: () => Promise<AsyncIterator<Boolean>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  questionId: <T = UserInterviewQuestionSubscription>() => T;
  userId: <T = UserSubscription>() => T;
}

export interface CupSubscriptionPayload {
  mutation: MutationType;
  node: Cup;
  updatedFields: String[];
  previousValues: CupPreviousValues;
}

export interface CupSubscriptionPayloadPromise
  extends Promise<CupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CupPreviousValuesPromise>() => T;
}

export interface CupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CupPreviousValuesSubscription>() => T;
}

export interface MarketList {
  id: Int;
  count: Int;
  endTime: DateTimeOutput;
  image?: String;
  price: Int;
  startTime: DateTimeOutput;
  title?: String;
}

export interface MarketListPromise extends Promise<MarketList>, Fragmentable {
  id: () => Promise<Int>;
  count: () => Promise<Int>;
  endTime: () => Promise<DateTimeOutput>;
  image: () => Promise<String>;
  marketListDetail: <T = FragmentableArray<MarketListDetail>>(
    args?: {
      where?: MarketListDetailWhereInput;
      orderBy?: MarketListDetailOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  price: () => Promise<Int>;
  startTime: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
}

export interface MarketListSubscription
  extends Promise<AsyncIterator<MarketList>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  count: () => Promise<AsyncIterator<Int>>;
  endTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  image: () => Promise<AsyncIterator<String>>;
  marketListDetail: <T = Promise<AsyncIterator<MarketListDetailSubscription>>>(
    args?: {
      where?: MarketListDetailWhereInput;
      orderBy?: MarketListDetailOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  price: () => Promise<AsyncIterator<Int>>;
  startTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface CupPreviousValues {
  id: Int;
  anonSerialNumber: Int;
  encryptionKey: Int;
}

export interface CupPreviousValuesPromise
  extends Promise<CupPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  anonSerialNumber: () => Promise<Int>;
  encryptionKey: () => Promise<Int>;
}

export interface CupPreviousValuesSubscription
  extends Promise<AsyncIterator<CupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  anonSerialNumber: () => Promise<AsyncIterator<Int>>;
  encryptionKey: () => Promise<AsyncIterator<Int>>;
}

export interface MarketBuyHistoryEdge {
  node: MarketBuyHistory;
  cursor: String;
}

export interface MarketBuyHistoryEdgePromise
  extends Promise<MarketBuyHistoryEdge>,
    Fragmentable {
  node: <T = MarketBuyHistoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MarketBuyHistoryEdgeSubscription
  extends Promise<AsyncIterator<MarketBuyHistoryEdge>>,
    Fragmentable {
  node: <T = MarketBuyHistorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAnswerType {
  count: Int;
}

export interface AggregateAnswerTypePromise
  extends Promise<AggregateAnswerType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAnswerTypeSubscription
  extends Promise<AsyncIterator<AggregateAnswerType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateMarketAmazonCoupon {
  count: Int;
}

export interface AggregateMarketAmazonCouponPromise
  extends Promise<AggregateMarketAmazonCoupon>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMarketAmazonCouponSubscription
  extends Promise<AsyncIterator<AggregateMarketAmazonCoupon>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CupAppSyncSubscriptionPayload {
  mutation: MutationType;
  node: CupAppSync;
  updatedFields: String[];
  previousValues: CupAppSyncPreviousValues;
}

export interface CupAppSyncSubscriptionPayloadPromise
  extends Promise<CupAppSyncSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CupAppSyncPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CupAppSyncPreviousValuesPromise>() => T;
}

export interface CupAppSyncSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CupAppSyncSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CupAppSyncSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CupAppSyncPreviousValuesSubscription>() => T;
}

export interface MarketAmazonCouponConnection {
  pageInfo: PageInfo;
  edges: MarketAmazonCouponEdge[];
}

export interface MarketAmazonCouponConnectionPromise
  extends Promise<MarketAmazonCouponConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MarketAmazonCouponEdge>>() => T;
  aggregate: <T = AggregateMarketAmazonCouponPromise>() => T;
}

export interface MarketAmazonCouponConnectionSubscription
  extends Promise<AsyncIterator<MarketAmazonCouponConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<MarketAmazonCouponEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateMarketAmazonCouponSubscription>() => T;
}

export interface CupAppSyncPreviousValues {
  id: Int;
  appSynchTime: DateTimeOutput;
}

export interface CupAppSyncPreviousValuesPromise
  extends Promise<CupAppSyncPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  appSynchTime: () => Promise<DateTimeOutput>;
}

export interface CupAppSyncPreviousValuesSubscription
  extends Promise<AsyncIterator<CupAppSyncPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  appSynchTime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MarketAmazonCoupon {
  id: Int;
  availability: Boolean;
  couponNumber: String;
  createTime: DateTimeOutput;
  endTime: DateTimeOutput;
  marketListId?: Int;
  price: Int;
  startTime: DateTimeOutput;
  title?: String;
}

export interface MarketAmazonCouponPromise
  extends Promise<MarketAmazonCoupon>,
    Fragmentable {
  id: () => Promise<Int>;
  availability: () => Promise<Boolean>;
  couponNumber: () => Promise<String>;
  createTime: () => Promise<DateTimeOutput>;
  endTime: () => Promise<DateTimeOutput>;
  marketListId: () => Promise<Int>;
  price: () => Promise<Int>;
  startTime: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
}

export interface MarketAmazonCouponSubscription
  extends Promise<AsyncIterator<MarketAmazonCoupon>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  availability: () => Promise<AsyncIterator<Boolean>>;
  couponNumber: () => Promise<AsyncIterator<String>>;
  createTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  endTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  marketListId: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Int>>;
  startTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface AnswerTypeEdge {
  node: AnswerType;
  cursor: String;
}

export interface AnswerTypeEdgePromise
  extends Promise<AnswerTypeEdge>,
    Fragmentable {
  node: <T = AnswerTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface AnswerTypeEdgeSubscription
  extends Promise<AsyncIterator<AnswerTypeEdge>>,
    Fragmentable {
  node: <T = AnswerTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface HardwareEdge {
  node: Hardware;
  cursor: String;
}

export interface HardwareEdgePromise
  extends Promise<HardwareEdge>,
    Fragmentable {
  node: <T = HardwarePromise>() => T;
  cursor: () => Promise<String>;
}

export interface HardwareEdgeSubscription
  extends Promise<AsyncIterator<HardwareEdge>>,
    Fragmentable {
  node: <T = HardwareSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CupDataAnswerSubscriptionPayload {
  mutation: MutationType;
  node: CupDataAnswer;
  updatedFields: String[];
  previousValues: CupDataAnswerPreviousValues;
}

export interface CupDataAnswerSubscriptionPayloadPromise
  extends Promise<CupDataAnswerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CupDataAnswerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CupDataAnswerPreviousValuesPromise>() => T;
}

export interface CupDataAnswerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CupDataAnswerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CupDataAnswerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CupDataAnswerPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CupDataAnswerPreviousValues {
  id: Int;
  answerText: String;
}

export interface CupDataAnswerPreviousValuesPromise
  extends Promise<CupDataAnswerPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  answerText: () => Promise<String>;
}

export interface CupDataAnswerPreviousValuesSubscription
  extends Promise<AsyncIterator<CupDataAnswerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  answerText: () => Promise<AsyncIterator<String>>;
}

export interface FirmwareEdge {
  node: Firmware;
  cursor: String;
}

export interface FirmwareEdgePromise
  extends Promise<FirmwareEdge>,
    Fragmentable {
  node: <T = FirmwarePromise>() => T;
  cursor: () => Promise<String>;
}

export interface FirmwareEdgeSubscription
  extends Promise<AsyncIterator<FirmwareEdge>>,
    Fragmentable {
  node: <T = FirmwareSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AnswerTypeConnection {
  pageInfo: PageInfo;
  edges: AnswerTypeEdge[];
}

export interface AnswerTypeConnectionPromise
  extends Promise<AnswerTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AnswerTypeEdge>>() => T;
  aggregate: <T = AggregateAnswerTypePromise>() => T;
}

export interface AnswerTypeConnectionSubscription
  extends Promise<AsyncIterator<AnswerTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AnswerTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAnswerTypeSubscription>() => T;
}

export interface AdditionalInfoEdge {
  node: AdditionalInfo;
  cursor: String;
}

export interface AdditionalInfoEdgePromise
  extends Promise<AdditionalInfoEdge>,
    Fragmentable {
  node: <T = AdditionalInfoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AdditionalInfoEdgeSubscription
  extends Promise<AsyncIterator<AdditionalInfoEdge>>,
    Fragmentable {
  node: <T = AdditionalInfoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CupDataColourCalcSubscriptionPayload {
  mutation: MutationType;
  node: CupDataColourCalc;
  updatedFields: String[];
  previousValues: CupDataColourCalcPreviousValues;
}

export interface CupDataColourCalcSubscriptionPayloadPromise
  extends Promise<CupDataColourCalcSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CupDataColourCalcPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CupDataColourCalcPreviousValuesPromise>() => T;
}

export interface CupDataColourCalcSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CupDataColourCalcSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CupDataColourCalcSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CupDataColourCalcPreviousValuesSubscription>() => T;
}

export interface EthnicityEdge {
  node: Ethnicity;
  cursor: String;
}

export interface EthnicityEdgePromise
  extends Promise<EthnicityEdge>,
    Fragmentable {
  node: <T = EthnicityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EthnicityEdgeSubscription
  extends Promise<AsyncIterator<EthnicityEdge>>,
    Fragmentable {
  node: <T = EthnicitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CupDataColourCalcPreviousValues {
  id: Int;
  blue: Int;
  green: Int;
  red: Int;
}

export interface CupDataColourCalcPreviousValuesPromise
  extends Promise<CupDataColourCalcPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  blue: () => Promise<Int>;
  green: () => Promise<Int>;
  red: () => Promise<Int>;
}

export interface CupDataColourCalcPreviousValuesSubscription
  extends Promise<AsyncIterator<CupDataColourCalcPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  blue: () => Promise<AsyncIterator<Int>>;
  green: () => Promise<AsyncIterator<Int>>;
  red: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateAdditionalInfo {
  count: Int;
}

export interface AggregateAdditionalInfoPromise
  extends Promise<AggregateAdditionalInfo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAdditionalInfoSubscription
  extends Promise<AsyncIterator<AggregateAdditionalInfo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserWallet {
  id: Int;
  address?: String;
  createTime?: DateTimeOutput;
  status?: Boolean;
}

export interface UserWalletPromise extends Promise<UserWallet>, Fragmentable {
  id: () => Promise<Int>;
  address: () => Promise<String>;
  createTime: () => Promise<DateTimeOutput>;
  status: () => Promise<Boolean>;
  userId: <T = UserPromise>() => T;
}

export interface UserWalletSubscription
  extends Promise<AsyncIterator<UserWallet>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  address: () => Promise<AsyncIterator<String>>;
  createTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  userId: <T = UserSubscription>() => T;
}

export interface CupDatumEdge {
  node: CupDatum;
  cursor: String;
}

export interface CupDatumEdgePromise
  extends Promise<CupDatumEdge>,
    Fragmentable {
  node: <T = CupDatumPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CupDatumEdgeSubscription
  extends Promise<AsyncIterator<CupDatumEdge>>,
    Fragmentable {
  node: <T = CupDatumSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CupDataColourCalibSubscriptionPayload {
  mutation: MutationType;
  node: CupDataColourCalib;
  updatedFields: String[];
  previousValues: CupDataColourCalibPreviousValues;
}

export interface CupDataColourCalibSubscriptionPayloadPromise
  extends Promise<CupDataColourCalibSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CupDataColourCalibPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CupDataColourCalibPreviousValuesPromise>() => T;
}

export interface CupDataColourCalibSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CupDataColourCalibSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CupDataColourCalibSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CupDataColourCalibPreviousValuesSubscription>() => T;
}

export interface AggregateCupDataUserRemoveExplain {
  count: Int;
}

export interface AggregateCupDataUserRemoveExplainPromise
  extends Promise<AggregateCupDataUserRemoveExplain>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCupDataUserRemoveExplainSubscription
  extends Promise<AsyncIterator<AggregateCupDataUserRemoveExplain>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CupDataColourCalibPreviousValues {
  id: Int;
  blue: Int;
  c: Int;
  green: Int;
  red: Int;
}

export interface CupDataColourCalibPreviousValuesPromise
  extends Promise<CupDataColourCalibPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  blue: () => Promise<Int>;
  c: () => Promise<Int>;
  green: () => Promise<Int>;
  red: () => Promise<Int>;
}

export interface CupDataColourCalibPreviousValuesSubscription
  extends Promise<AsyncIterator<CupDataColourCalibPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  blue: () => Promise<AsyncIterator<Int>>;
  c: () => Promise<AsyncIterator<Int>>;
  green: () => Promise<AsyncIterator<Int>>;
  red: () => Promise<AsyncIterator<Int>>;
}

export interface CupDataUserRemoveExplainConnection {
  pageInfo: PageInfo;
  edges: CupDataUserRemoveExplainEdge[];
}

export interface CupDataUserRemoveExplainConnectionPromise
  extends Promise<CupDataUserRemoveExplainConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CupDataUserRemoveExplainEdge>>() => T;
  aggregate: <T = AggregateCupDataUserRemoveExplainPromise>() => T;
}

export interface CupDataUserRemoveExplainConnectionSubscription
  extends Promise<AsyncIterator<CupDataUserRemoveExplainConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<CupDataUserRemoveExplainEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateCupDataUserRemoveExplainSubscription>() => T;
}

export interface UserRecordDataByTime {
  id: Int;
  cameraDataId?: Int;
  changeTime: DateTimeOutput;
  colorB?: Int;
  colorG?: Int;
  colorR?: Int;
  leakage?: String;
  startTime?: DateTimeOutput;
  volume?: Float;
}

export interface UserRecordDataByTimePromise
  extends Promise<UserRecordDataByTime>,
    Fragmentable {
  id: () => Promise<Int>;
  cameraDataId: () => Promise<Int>;
  changeTime: () => Promise<DateTimeOutput>;
  colorB: () => Promise<Int>;
  colorG: () => Promise<Int>;
  colorR: () => Promise<Int>;
  leakage: () => Promise<String>;
  recordDayRowId: <T = UserRecordDataByDayPromise>() => T;
  startTime: () => Promise<DateTimeOutput>;
  volume: () => Promise<Float>;
}

export interface UserRecordDataByTimeSubscription
  extends Promise<AsyncIterator<UserRecordDataByTime>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  cameraDataId: () => Promise<AsyncIterator<Int>>;
  changeTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  colorB: () => Promise<AsyncIterator<Int>>;
  colorG: () => Promise<AsyncIterator<Int>>;
  colorR: () => Promise<AsyncIterator<Int>>;
  leakage: () => Promise<AsyncIterator<String>>;
  recordDayRowId: <T = UserRecordDataByDaySubscription>() => T;
  startTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  volume: () => Promise<AsyncIterator<Float>>;
}

export interface CupDataUserRemoveEdge {
  node: CupDataUserRemove;
  cursor: String;
}

export interface CupDataUserRemoveEdgePromise
  extends Promise<CupDataUserRemoveEdge>,
    Fragmentable {
  node: <T = CupDataUserRemovePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CupDataUserRemoveEdgeSubscription
  extends Promise<AsyncIterator<CupDataUserRemoveEdge>>,
    Fragmentable {
  node: <T = CupDataUserRemoveSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CupDataManMdateSubscriptionPayload {
  mutation: MutationType;
  node: CupDataManMdate;
  updatedFields: String[];
  previousValues: CupDataManMdatePreviousValues;
}

export interface CupDataManMdateSubscriptionPayloadPromise
  extends Promise<CupDataManMdateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CupDataManMdatePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CupDataManMdatePreviousValuesPromise>() => T;
}

export interface CupDataManMdateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CupDataManMdateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CupDataManMdateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CupDataManMdatePreviousValuesSubscription>() => T;
}

export interface AggregateCupDataRejection {
  count: Int;
}

export interface AggregateCupDataRejectionPromise
  extends Promise<AggregateCupDataRejection>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCupDataRejectionSubscription
  extends Promise<AsyncIterator<AggregateCupDataRejection>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CupDataManMdatePreviousValues {
  id: Int;
  menFinish?: DateTimeOutput;
  menStart?: DateTimeOutput;
}

export interface CupDataManMdatePreviousValuesPromise
  extends Promise<CupDataManMdatePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  menFinish: () => Promise<DateTimeOutput>;
  menStart: () => Promise<DateTimeOutput>;
}

export interface CupDataManMdatePreviousValuesSubscription
  extends Promise<AsyncIterator<CupDataManMdatePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  menFinish: () => Promise<AsyncIterator<DateTimeOutput>>;
  menStart: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CupDataRejectionConnection {
  pageInfo: PageInfo;
  edges: CupDataRejectionEdge[];
}

export interface CupDataRejectionConnectionPromise
  extends Promise<CupDataRejectionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CupDataRejectionEdge>>() => T;
  aggregate: <T = AggregateCupDataRejectionPromise>() => T;
}

export interface CupDataRejectionConnectionSubscription
  extends Promise<AsyncIterator<CupDataRejectionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CupDataRejectionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCupDataRejectionSubscription>() => T;
}

export interface UserRecordDataByDay {
  id: Int;
  crampsLevel?: Int;
  recordDate: DateTimeOutput;
}

export interface UserRecordDataByDayPromise
  extends Promise<UserRecordDataByDay>,
    Fragmentable {
  id: () => Promise<Int>;
  crampsLevel: () => Promise<Int>;
  recordDate: () => Promise<DateTimeOutput>;
  recordPeriodRowId: <T = UserRecordDataByPeriodPromise>() => T;
  userRecordDataByTime: <T = FragmentableArray<UserRecordDataByTime>>(
    args?: {
      where?: UserRecordDataByTimeWhereInput;
      orderBy?: UserRecordDataByTimeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserRecordDataByDaySubscription
  extends Promise<AsyncIterator<UserRecordDataByDay>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  crampsLevel: () => Promise<AsyncIterator<Int>>;
  recordDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  recordPeriodRowId: <T = UserRecordDataByPeriodSubscription>() => T;
  userRecordDataByTime: <
    T = Promise<AsyncIterator<UserRecordDataByTimeSubscription>>
  >(
    args?: {
      where?: UserRecordDataByTimeWhereInput;
      orderBy?: UserRecordDataByTimeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateCupDataRaw {
  count: Int;
}

export interface AggregateCupDataRawPromise
  extends Promise<AggregateCupDataRaw>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCupDataRawSubscription
  extends Promise<AsyncIterator<AggregateCupDataRaw>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CupDataProcFlowSubscriptionPayload {
  mutation: MutationType;
  node: CupDataProcFlow;
  updatedFields: String[];
  previousValues: CupDataProcFlowPreviousValues;
}

export interface CupDataProcFlowSubscriptionPayloadPromise
  extends Promise<CupDataProcFlowSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CupDataProcFlowPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CupDataProcFlowPreviousValuesPromise>() => T;
}

export interface CupDataProcFlowSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CupDataProcFlowSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CupDataProcFlowSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CupDataProcFlowPreviousValuesSubscription>() => T;
}

export interface CupDataRawConnection {
  pageInfo: PageInfo;
  edges: CupDataRawEdge[];
}

export interface CupDataRawConnectionPromise
  extends Promise<CupDataRawConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CupDataRawEdge>>() => T;
  aggregate: <T = AggregateCupDataRawPromise>() => T;
}

export interface CupDataRawConnectionSubscription
  extends Promise<AsyncIterator<CupDataRawConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CupDataRawEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCupDataRawSubscription>() => T;
}

export interface CupDataProcFlowPreviousValues {
  id: Int;
  date: DateTimeOutput;
  hourlyFlow: Int;
}

export interface CupDataProcFlowPreviousValuesPromise
  extends Promise<CupDataProcFlowPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  date: () => Promise<DateTimeOutput>;
  hourlyFlow: () => Promise<Int>;
}

export interface CupDataProcFlowPreviousValuesSubscription
  extends Promise<AsyncIterator<CupDataProcFlowPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  hourlyFlow: () => Promise<AsyncIterator<Int>>;
}

export interface CupDataQuestionEdge {
  node: CupDataQuestion;
  cursor: String;
}

export interface CupDataQuestionEdgePromise
  extends Promise<CupDataQuestionEdge>,
    Fragmentable {
  node: <T = CupDataQuestionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CupDataQuestionEdgeSubscription
  extends Promise<AsyncIterator<CupDataQuestionEdge>>,
    Fragmentable {
  node: <T = CupDataQuestionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserRecordDataByPeriod {
  id: Int;
  coinHistoryRowId?: Int;
  isTakePill?: Boolean;
  mensFinish?: DateTimeOutput;
  mensStart?: DateTimeOutput;
}

export interface UserRecordDataByPeriodPromise
  extends Promise<UserRecordDataByPeriod>,
    Fragmentable {
  id: () => Promise<Int>;
  coinHistoryRowId: () => Promise<Int>;
  isTakePill: () => Promise<Boolean>;
  mensFinish: () => Promise<DateTimeOutput>;
  mensStart: () => Promise<DateTimeOutput>;
  userId: <T = UserPromise>() => T;
  userRecordDataByDay: <T = FragmentableArray<UserRecordDataByDay>>(
    args?: {
      where?: UserRecordDataByDayWhereInput;
      orderBy?: UserRecordDataByDayOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserRecordDataByPeriodSubscription
  extends Promise<AsyncIterator<UserRecordDataByPeriod>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  coinHistoryRowId: () => Promise<AsyncIterator<Int>>;
  isTakePill: () => Promise<AsyncIterator<Boolean>>;
  mensFinish: () => Promise<AsyncIterator<DateTimeOutput>>;
  mensStart: () => Promise<AsyncIterator<DateTimeOutput>>;
  userId: <T = UserSubscription>() => T;
  userRecordDataByDay: <
    T = Promise<AsyncIterator<UserRecordDataByDaySubscription>>
  >(
    args?: {
      where?: UserRecordDataByDayWhereInput;
      orderBy?: UserRecordDataByDayOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateCupDataQaResponse {
  count: Int;
}

export interface AggregateCupDataQaResponsePromise
  extends Promise<AggregateCupDataQaResponse>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCupDataQaResponseSubscription
  extends Promise<AsyncIterator<AggregateCupDataQaResponse>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CupDataProcMdateSubscriptionPayload {
  mutation: MutationType;
  node: CupDataProcMdate;
  updatedFields: String[];
  previousValues: CupDataProcMdatePreviousValues;
}

export interface CupDataProcMdateSubscriptionPayloadPromise
  extends Promise<CupDataProcMdateSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CupDataProcMdatePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CupDataProcMdatePreviousValuesPromise>() => T;
}

export interface CupDataProcMdateSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CupDataProcMdateSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CupDataProcMdateSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CupDataProcMdatePreviousValuesSubscription>() => T;
}

export interface CupDataQaResponseConnection {
  pageInfo: PageInfo;
  edges: CupDataQaResponseEdge[];
}

export interface CupDataQaResponseConnectionPromise
  extends Promise<CupDataQaResponseConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CupDataQaResponseEdge>>() => T;
  aggregate: <T = AggregateCupDataQaResponsePromise>() => T;
}

export interface CupDataQaResponseConnectionSubscription
  extends Promise<AsyncIterator<CupDataQaResponseConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CupDataQaResponseEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCupDataQaResponseSubscription>() => T;
}

export interface CupDataProcMdatePreviousValues {
  id: Int;
  dataRejected?: Boolean;
  dataVerified: Boolean;
  menFinish: DateTimeOutput;
  menStart: DateTimeOutput;
  rewardAmount?: Int;
}

export interface CupDataProcMdatePreviousValuesPromise
  extends Promise<CupDataProcMdatePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  dataRejected: () => Promise<Boolean>;
  dataVerified: () => Promise<Boolean>;
  menFinish: () => Promise<DateTimeOutput>;
  menStart: () => Promise<DateTimeOutput>;
  rewardAmount: () => Promise<Int>;
}

export interface CupDataProcMdatePreviousValuesSubscription
  extends Promise<AsyncIterator<CupDataProcMdatePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  dataRejected: () => Promise<AsyncIterator<Boolean>>;
  dataVerified: () => Promise<AsyncIterator<Boolean>>;
  menFinish: () => Promise<AsyncIterator<DateTimeOutput>>;
  menStart: () => Promise<AsyncIterator<DateTimeOutput>>;
  rewardAmount: () => Promise<AsyncIterator<Int>>;
}

export interface CupDataProcVolumeEdge {
  node: CupDataProcVolume;
  cursor: String;
}

export interface CupDataProcVolumeEdgePromise
  extends Promise<CupDataProcVolumeEdge>,
    Fragmentable {
  node: <T = CupDataProcVolumePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CupDataProcVolumeEdgeSubscription
  extends Promise<AsyncIterator<CupDataProcVolumeEdge>>,
    Fragmentable {
  node: <T = CupDataProcVolumeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserRecordCameraDataByTime {
  id: Int;
  confirmYn?: Boolean;
  deleteYn?: Boolean;
  height?: Float;
  imagePath?: String;
  locationX?: Float;
  locationY?: Float;
  size?: Float;
  width?: Float;
}

export interface UserRecordCameraDataByTimePromise
  extends Promise<UserRecordCameraDataByTime>,
    Fragmentable {
  id: () => Promise<Int>;
  coinHistoryRowId: <T = UserCoinHistoryPromise>() => T;
  confirmYn: () => Promise<Boolean>;
  deleteYn: () => Promise<Boolean>;
  height: () => Promise<Float>;
  imagePath: () => Promise<String>;
  locationX: () => Promise<Float>;
  locationY: () => Promise<Float>;
  size: () => Promise<Float>;
  width: () => Promise<Float>;
}

export interface UserRecordCameraDataByTimeSubscription
  extends Promise<AsyncIterator<UserRecordCameraDataByTime>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  coinHistoryRowId: <T = UserCoinHistorySubscription>() => T;
  confirmYn: () => Promise<AsyncIterator<Boolean>>;
  deleteYn: () => Promise<AsyncIterator<Boolean>>;
  height: () => Promise<AsyncIterator<Float>>;
  imagePath: () => Promise<AsyncIterator<String>>;
  locationX: () => Promise<AsyncIterator<Float>>;
  locationY: () => Promise<AsyncIterator<Float>>;
  size: () => Promise<AsyncIterator<Float>>;
  width: () => Promise<AsyncIterator<Float>>;
}

export interface AggregateCupDataProcMdate {
  count: Int;
}

export interface AggregateCupDataProcMdatePromise
  extends Promise<AggregateCupDataProcMdate>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCupDataProcMdateSubscription
  extends Promise<AsyncIterator<AggregateCupDataProcMdate>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CupDataProcVolumeSubscriptionPayload {
  mutation: MutationType;
  node: CupDataProcVolume;
  updatedFields: String[];
  previousValues: CupDataProcVolumePreviousValues;
}

export interface CupDataProcVolumeSubscriptionPayloadPromise
  extends Promise<CupDataProcVolumeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CupDataProcVolumePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CupDataProcVolumePreviousValuesPromise>() => T;
}

export interface CupDataProcVolumeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CupDataProcVolumeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CupDataProcVolumeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CupDataProcVolumePreviousValuesSubscription>() => T;
}

export interface CupDataProcMdateConnection {
  pageInfo: PageInfo;
  edges: CupDataProcMdateEdge[];
}

export interface CupDataProcMdateConnectionPromise
  extends Promise<CupDataProcMdateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CupDataProcMdateEdge>>() => T;
  aggregate: <T = AggregateCupDataProcMdatePromise>() => T;
}

export interface CupDataProcMdateConnectionSubscription
  extends Promise<AsyncIterator<CupDataProcMdateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CupDataProcMdateEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCupDataProcMdateSubscription>() => T;
}

export interface CupDataProcVolumePreviousValues {
  id: Int;
  confidenceL?: Int;
  confidenceR?: Int;
  inVitro: Boolean;
  volume?: Int;
  volumeAdj?: Int;
  volumeL?: Int;
  volumeR?: Int;
}

export interface CupDataProcVolumePreviousValuesPromise
  extends Promise<CupDataProcVolumePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  confidenceL: () => Promise<Int>;
  confidenceR: () => Promise<Int>;
  inVitro: () => Promise<Boolean>;
  volume: () => Promise<Int>;
  volumeAdj: () => Promise<Int>;
  volumeL: () => Promise<Int>;
  volumeR: () => Promise<Int>;
}

export interface CupDataProcVolumePreviousValuesSubscription
  extends Promise<AsyncIterator<CupDataProcVolumePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  confidenceL: () => Promise<AsyncIterator<Int>>;
  confidenceR: () => Promise<AsyncIterator<Int>>;
  inVitro: () => Promise<AsyncIterator<Boolean>>;
  volume: () => Promise<AsyncIterator<Int>>;
  volumeAdj: () => Promise<AsyncIterator<Int>>;
  volumeL: () => Promise<AsyncIterator<Int>>;
  volumeR: () => Promise<AsyncIterator<Int>>;
}

export interface CupDataProcFlowEdge {
  node: CupDataProcFlow;
  cursor: String;
}

export interface CupDataProcFlowEdgePromise
  extends Promise<CupDataProcFlowEdge>,
    Fragmentable {
  node: <T = CupDataProcFlowPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CupDataProcFlowEdgeSubscription
  extends Promise<AsyncIterator<CupDataProcFlowEdge>>,
    Fragmentable {
  node: <T = CupDataProcFlowSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MarketBuyHistory {
  id: Int;
  cancelYn?: Boolean;
  category?: String;
  createTime: DateTimeOutput;
  orderNumber?: String;
  productId?: Int;
  status: Boolean;
  updateTime: DateTimeOutput;
  userId?: Int;
}

export interface MarketBuyHistoryPromise
  extends Promise<MarketBuyHistory>,
    Fragmentable {
  id: () => Promise<Int>;
  cancelYn: () => Promise<Boolean>;
  category: () => Promise<String>;
  coinHistoryRowId: <T = UserCoinHistoryPromise>() => T;
  createTime: () => Promise<DateTimeOutput>;
  orderNumber: () => Promise<String>;
  productId: () => Promise<Int>;
  status: () => Promise<Boolean>;
  updateTime: () => Promise<DateTimeOutput>;
  userId: () => Promise<Int>;
}

export interface MarketBuyHistorySubscription
  extends Promise<AsyncIterator<MarketBuyHistory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  cancelYn: () => Promise<AsyncIterator<Boolean>>;
  category: () => Promise<AsyncIterator<String>>;
  coinHistoryRowId: <T = UserCoinHistorySubscription>() => T;
  createTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  orderNumber: () => Promise<AsyncIterator<String>>;
  productId: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  updateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  userId: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateCupDataManMdate {
  count: Int;
}

export interface AggregateCupDataManMdatePromise
  extends Promise<AggregateCupDataManMdate>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCupDataManMdateSubscription
  extends Promise<AsyncIterator<AggregateCupDataManMdate>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CupDataQaResponseSubscriptionPayload {
  mutation: MutationType;
  node: CupDataQaResponse;
  updatedFields: String[];
  previousValues: CupDataQaResponsePreviousValues;
}

export interface CupDataQaResponseSubscriptionPayloadPromise
  extends Promise<CupDataQaResponseSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CupDataQaResponsePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CupDataQaResponsePreviousValuesPromise>() => T;
}

export interface CupDataQaResponseSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CupDataQaResponseSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CupDataQaResponseSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CupDataQaResponsePreviousValuesSubscription>() => T;
}

export interface CupDataManMdateConnection {
  pageInfo: PageInfo;
  edges: CupDataManMdateEdge[];
}

export interface CupDataManMdateConnectionPromise
  extends Promise<CupDataManMdateConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CupDataManMdateEdge>>() => T;
  aggregate: <T = AggregateCupDataManMdatePromise>() => T;
}

export interface CupDataManMdateConnectionSubscription
  extends Promise<AsyncIterator<CupDataManMdateConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CupDataManMdateEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCupDataManMdateSubscription>() => T;
}

export interface CupDataQaResponsePreviousValues {
  id: Int;
  qaDate: DateTimeOutput;
}

export interface CupDataQaResponsePreviousValuesPromise
  extends Promise<CupDataQaResponsePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  qaDate: () => Promise<DateTimeOutput>;
}

export interface CupDataQaResponsePreviousValuesSubscription
  extends Promise<AsyncIterator<CupDataQaResponsePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  qaDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CupDataColourCalibEdge {
  node: CupDataColourCalib;
  cursor: String;
}

export interface CupDataColourCalibEdgePromise
  extends Promise<CupDataColourCalibEdge>,
    Fragmentable {
  node: <T = CupDataColourCalibPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CupDataColourCalibEdgeSubscription
  extends Promise<AsyncIterator<CupDataColourCalibEdge>>,
    Fragmentable {
  node: <T = CupDataColourCalibSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserCoinHistory {
  id: Int;
  category: String;
  coin: Int;
  contents: String;
  date: DateTimeOutput;
  txhash: String;
  walletId?: Int;
}

export interface UserCoinHistoryPromise
  extends Promise<UserCoinHistory>,
    Fragmentable {
  id: () => Promise<Int>;
  category: () => Promise<String>;
  coin: () => Promise<Int>;
  contents: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  marketBuyHistory: <T = FragmentableArray<MarketBuyHistory>>(
    args?: {
      where?: MarketBuyHistoryWhereInput;
      orderBy?: MarketBuyHistoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  txhash: () => Promise<String>;
  userId: <T = UserPromise>() => T;
  userRecordCameraDataByTime: <
    T = FragmentableArray<UserRecordCameraDataByTime>
  >(
    args?: {
      where?: UserRecordCameraDataByTimeWhereInput;
      orderBy?: UserRecordCameraDataByTimeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  walletId: () => Promise<Int>;
}

export interface UserCoinHistorySubscription
  extends Promise<AsyncIterator<UserCoinHistory>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  category: () => Promise<AsyncIterator<String>>;
  coin: () => Promise<AsyncIterator<Int>>;
  contents: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  marketBuyHistory: <T = Promise<AsyncIterator<MarketBuyHistorySubscription>>>(
    args?: {
      where?: MarketBuyHistoryWhereInput;
      orderBy?: MarketBuyHistoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  txhash: () => Promise<AsyncIterator<String>>;
  userId: <T = UserSubscription>() => T;
  userRecordCameraDataByTime: <
    T = Promise<AsyncIterator<UserRecordCameraDataByTimeSubscription>>
  >(
    args?: {
      where?: UserRecordCameraDataByTimeWhereInput;
      orderBy?: UserRecordCameraDataByTimeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  walletId: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateCupDataColourCalc {
  count: Int;
}

export interface AggregateCupDataColourCalcPromise
  extends Promise<AggregateCupDataColourCalc>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCupDataColourCalcSubscription
  extends Promise<AsyncIterator<AggregateCupDataColourCalc>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CupDataQuestionSubscriptionPayload {
  mutation: MutationType;
  node: CupDataQuestion;
  updatedFields: String[];
  previousValues: CupDataQuestionPreviousValues;
}

export interface CupDataQuestionSubscriptionPayloadPromise
  extends Promise<CupDataQuestionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CupDataQuestionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CupDataQuestionPreviousValuesPromise>() => T;
}

export interface CupDataQuestionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CupDataQuestionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CupDataQuestionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CupDataQuestionPreviousValuesSubscription>() => T;
}

export interface CupDataColourCalcConnection {
  pageInfo: PageInfo;
  edges: CupDataColourCalcEdge[];
}

export interface CupDataColourCalcConnectionPromise
  extends Promise<CupDataColourCalcConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CupDataColourCalcEdge>>() => T;
  aggregate: <T = AggregateCupDataColourCalcPromise>() => T;
}

export interface CupDataColourCalcConnectionSubscription
  extends Promise<AsyncIterator<CupDataColourCalcConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CupDataColourCalcEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCupDataColourCalcSubscription>() => T;
}

export interface CupDataQuestionPreviousValues {
  id: Int;
  questionText: String;
}

export interface CupDataQuestionPreviousValuesPromise
  extends Promise<CupDataQuestionPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  questionText: () => Promise<String>;
}

export interface CupDataQuestionPreviousValuesSubscription
  extends Promise<AsyncIterator<CupDataQuestionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  questionText: () => Promise<AsyncIterator<String>>;
}

export interface CupDataAnswerEdge {
  node: CupDataAnswer;
  cursor: String;
}

export interface CupDataAnswerEdgePromise
  extends Promise<CupDataAnswerEdge>,
    Fragmentable {
  node: <T = CupDataAnswerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CupDataAnswerEdgeSubscription
  extends Promise<AsyncIterator<CupDataAnswerEdge>>,
    Fragmentable {
  node: <T = CupDataAnswerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Ethnicity {
  id: Int;
  ethnicity: String;
}

export interface EthnicityPromise extends Promise<Ethnicity>, Fragmentable {
  id: () => Promise<Int>;
  ethnicity: () => Promise<String>;
  users: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface EthnicitySubscription
  extends Promise<AsyncIterator<Ethnicity>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ethnicity: () => Promise<AsyncIterator<String>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateCupAppSync {
  count: Int;
}

export interface AggregateCupAppSyncPromise
  extends Promise<AggregateCupAppSync>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCupAppSyncSubscription
  extends Promise<AsyncIterator<AggregateCupAppSync>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CupDataRawSubscriptionPayload {
  mutation: MutationType;
  node: CupDataRaw;
  updatedFields: String[];
  previousValues: CupDataRawPreviousValues;
}

export interface CupDataRawSubscriptionPayloadPromise
  extends Promise<CupDataRawSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CupDataRawPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CupDataRawPreviousValuesPromise>() => T;
}

export interface CupDataRawSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CupDataRawSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CupDataRawSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CupDataRawPreviousValuesSubscription>() => T;
}

export interface CupAppSyncConnection {
  pageInfo: PageInfo;
  edges: CupAppSyncEdge[];
}

export interface CupAppSyncConnectionPromise
  extends Promise<CupAppSyncConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CupAppSyncEdge>>() => T;
  aggregate: <T = AggregateCupAppSyncPromise>() => T;
}

export interface CupAppSyncConnectionSubscription
  extends Promise<AsyncIterator<CupAppSyncConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CupAppSyncEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCupAppSyncSubscription>() => T;
}

export interface CupDataRawPreviousValues {
  id: Int;
  pageData: String;
}

export interface CupDataRawPreviousValuesPromise
  extends Promise<CupDataRawPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  pageData: () => Promise<String>;
}

export interface CupDataRawPreviousValuesSubscription
  extends Promise<AsyncIterator<CupDataRawPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  pageData: () => Promise<AsyncIterator<String>>;
}

export interface CupEdge {
  node: Cup;
  cursor: String;
}

export interface CupEdgePromise extends Promise<CupEdge>, Fragmentable {
  node: <T = CupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CupEdgeSubscription
  extends Promise<AsyncIterator<CupEdge>>,
    Fragmentable {
  node: <T = CupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserCup {
  id: Int;
}

export interface UserCupPromise extends Promise<UserCup>, Fragmentable {
  id: () => Promise<Int>;
  serialNumber: <T = CupPromise>() => T;
  userId: <T = UserPromise>() => T;
}

export interface UserCupSubscription
  extends Promise<AsyncIterator<UserCup>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  serialNumber: <T = CupSubscription>() => T;
  userId: <T = UserSubscription>() => T;
}

export interface AggregateCountry {
  count: Int;
}

export interface AggregateCountryPromise
  extends Promise<AggregateCountry>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCountrySubscription
  extends Promise<AsyncIterator<AggregateCountry>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CupDataRejectionSubscriptionPayload {
  mutation: MutationType;
  node: CupDataRejection;
  updatedFields: String[];
  previousValues: CupDataRejectionPreviousValues;
}

export interface CupDataRejectionSubscriptionPayloadPromise
  extends Promise<CupDataRejectionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CupDataRejectionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CupDataRejectionPreviousValuesPromise>() => T;
}

export interface CupDataRejectionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CupDataRejectionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CupDataRejectionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CupDataRejectionPreviousValuesSubscription>() => T;
}

export interface CountryConnection {
  pageInfo: PageInfo;
  edges: CountryEdge[];
}

export interface CountryConnectionPromise
  extends Promise<CountryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CountryEdge>>() => T;
  aggregate: <T = AggregateCountryPromise>() => T;
}

export interface CountryConnectionSubscription
  extends Promise<AsyncIterator<CountryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CountryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCountrySubscription>() => T;
}

export interface CupDataRejectionPreviousValues {
  id: Int;
  rejectionDescription: String;
}

export interface CupDataRejectionPreviousValuesPromise
  extends Promise<CupDataRejectionPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  rejectionDescription: () => Promise<String>;
}

export interface CupDataRejectionPreviousValuesSubscription
  extends Promise<AsyncIterator<CupDataRejectionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  rejectionDescription: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCompany {
  count: Int;
}

export interface AggregateCompanyPromise
  extends Promise<AggregateCompany>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompanySubscription
  extends Promise<AsyncIterator<AggregateCompany>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Hardware {
  id: Int;
  hwVersion: String;
}

export interface HardwarePromise extends Promise<Hardware>, Fragmentable {
  id: () => Promise<Int>;
  cup: <T = FragmentableArray<Cup>>(
    args?: {
      where?: CupWhereInput;
      orderBy?: CupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  hwVersion: () => Promise<String>;
}

export interface HardwareSubscription
  extends Promise<AsyncIterator<Hardware>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  cup: <T = Promise<AsyncIterator<CupSubscription>>>(
    args?: {
      where?: CupWhereInput;
      orderBy?: CupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  hwVersion: () => Promise<AsyncIterator<String>>;
}

export interface UserWalletPreviousValues {
  id: Int;
  address?: String;
  createTime?: DateTimeOutput;
  status?: Boolean;
}

export interface UserWalletPreviousValuesPromise
  extends Promise<UserWalletPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  address: () => Promise<String>;
  createTime: () => Promise<DateTimeOutput>;
  status: () => Promise<Boolean>;
}

export interface UserWalletPreviousValuesSubscription
  extends Promise<AsyncIterator<UserWalletPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  address: () => Promise<AsyncIterator<String>>;
  createTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<Boolean>>;
}

export interface CupDataUserRemoveSubscriptionPayload {
  mutation: MutationType;
  node: CupDataUserRemove;
  updatedFields: String[];
  previousValues: CupDataUserRemovePreviousValues;
}

export interface CupDataUserRemoveSubscriptionPayloadPromise
  extends Promise<CupDataUserRemoveSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CupDataUserRemovePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CupDataUserRemovePreviousValuesPromise>() => T;
}

export interface CupDataUserRemoveSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CupDataUserRemoveSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CupDataUserRemoveSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CupDataUserRemovePreviousValuesSubscription>() => T;
}

export interface UsersDataAnalysisEdge {
  node: UsersDataAnalysis;
  cursor: String;
}

export interface UsersDataAnalysisEdgePromise
  extends Promise<UsersDataAnalysisEdge>,
    Fragmentable {
  node: <T = UsersDataAnalysisPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UsersDataAnalysisEdgeSubscription
  extends Promise<AsyncIterator<UsersDataAnalysisEdge>>,
    Fragmentable {
  node: <T = UsersDataAnalysisSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CupDataUserRemovePreviousValues {
  id: Int;
  changeTime: DateTimeOutput;
}

export interface CupDataUserRemovePreviousValuesPromise
  extends Promise<CupDataUserRemovePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  changeTime: () => Promise<DateTimeOutput>;
}

export interface CupDataUserRemovePreviousValuesSubscription
  extends Promise<AsyncIterator<CupDataUserRemovePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  changeTime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateUserWallet {
  count: Int;
}

export interface AggregateUserWalletPromise
  extends Promise<AggregateUserWallet>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserWalletSubscription
  extends Promise<AsyncIterator<AggregateUserWallet>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Firmware {
  id: Int;
  fwVersion: String;
}

export interface FirmwarePromise extends Promise<Firmware>, Fragmentable {
  id: () => Promise<Int>;
  cup: <T = FragmentableArray<Cup>>(
    args?: {
      where?: CupWhereInput;
      orderBy?: CupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  fwVersion: () => Promise<String>;
}

export interface FirmwareSubscription
  extends Promise<AsyncIterator<Firmware>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  cup: <T = Promise<AsyncIterator<CupSubscription>>>(
    args?: {
      where?: CupWhereInput;
      orderBy?: CupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  fwVersion: () => Promise<AsyncIterator<String>>;
}

export interface UserRecordDataByTimeEdge {
  node: UserRecordDataByTime;
  cursor: String;
}

export interface UserRecordDataByTimeEdgePromise
  extends Promise<UserRecordDataByTimeEdge>,
    Fragmentable {
  node: <T = UserRecordDataByTimePromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserRecordDataByTimeEdgeSubscription
  extends Promise<AsyncIterator<UserRecordDataByTimeEdge>>,
    Fragmentable {
  node: <T = UserRecordDataByTimeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CupDataUserRemoveExplainSubscriptionPayload {
  mutation: MutationType;
  node: CupDataUserRemoveExplain;
  updatedFields: String[];
  previousValues: CupDataUserRemoveExplainPreviousValues;
}

export interface CupDataUserRemoveExplainSubscriptionPayloadPromise
  extends Promise<CupDataUserRemoveExplainSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CupDataUserRemoveExplainPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CupDataUserRemoveExplainPreviousValuesPromise>() => T;
}

export interface CupDataUserRemoveExplainSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CupDataUserRemoveExplainSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CupDataUserRemoveExplainSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = CupDataUserRemoveExplainPreviousValuesSubscription
  >() => T;
}

export interface UserRecordDataByPeriodConnection {
  pageInfo: PageInfo;
  edges: UserRecordDataByPeriodEdge[];
}

export interface UserRecordDataByPeriodConnectionPromise
  extends Promise<UserRecordDataByPeriodConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserRecordDataByPeriodEdge>>() => T;
  aggregate: <T = AggregateUserRecordDataByPeriodPromise>() => T;
}

export interface UserRecordDataByPeriodConnectionSubscription
  extends Promise<AsyncIterator<UserRecordDataByPeriodConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<UserRecordDataByPeriodEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateUserRecordDataByPeriodSubscription>() => T;
}

export interface CupDataUserRemoveExplainPreviousValues {
  id: Int;
  explain: String;
}

export interface CupDataUserRemoveExplainPreviousValuesPromise
  extends Promise<CupDataUserRemoveExplainPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  explain: () => Promise<String>;
}

export interface CupDataUserRemoveExplainPreviousValuesSubscription
  extends Promise<AsyncIterator<CupDataUserRemoveExplainPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  explain: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserRecordCameraDataByTime {
  count: Int;
}

export interface AggregateUserRecordCameraDataByTimePromise
  extends Promise<AggregateUserRecordCameraDataByTime>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserRecordCameraDataByTimeSubscription
  extends Promise<AsyncIterator<AggregateUserRecordCameraDataByTime>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CupDataRaw {
  id: Int;
  pageData: String;
}

export interface CupDataRawPromise extends Promise<CupDataRaw>, Fragmentable {
  id: () => Promise<Int>;
  pageData: () => Promise<String>;
  serialNumber: <T = CupPromise>() => T;
}

export interface CupDataRawSubscription
  extends Promise<AsyncIterator<CupDataRaw>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  pageData: () => Promise<AsyncIterator<String>>;
  serialNumber: <T = CupSubscription>() => T;
}

export interface UserInterviewQuestionEdge {
  node: UserInterviewQuestion;
  cursor: String;
}

export interface UserInterviewQuestionEdgePromise
  extends Promise<UserInterviewQuestionEdge>,
    Fragmentable {
  node: <T = UserInterviewQuestionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserInterviewQuestionEdgeSubscription
  extends Promise<AsyncIterator<UserInterviewQuestionEdge>>,
    Fragmentable {
  node: <T = UserInterviewQuestionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CupDatumSubscriptionPayload {
  mutation: MutationType;
  node: CupDatum;
  updatedFields: String[];
  previousValues: CupDatumPreviousValues;
}

export interface CupDatumSubscriptionPayloadPromise
  extends Promise<CupDatumSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CupDatumPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CupDatumPreviousValuesPromise>() => T;
}

export interface CupDatumSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CupDatumSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CupDatumSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CupDatumPreviousValuesSubscription>() => T;
}

export interface UserInterviewDatumConnection {
  pageInfo: PageInfo;
  edges: UserInterviewDatumEdge[];
}

export interface UserInterviewDatumConnectionPromise
  extends Promise<UserInterviewDatumConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserInterviewDatumEdge>>() => T;
  aggregate: <T = AggregateUserInterviewDatumPromise>() => T;
}

export interface UserInterviewDatumConnectionSubscription
  extends Promise<AsyncIterator<UserInterviewDatumConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<UserInterviewDatumEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateUserInterviewDatumSubscription>() => T;
}

export interface CupDatumPreviousValues {
  id: Int;
  battery: Int;
  calibFlag: Boolean;
  ch1: Int;
  ch10: Int;
  ch11: Int;
  ch12: Int;
  ch13: Int;
  ch14: Int;
  ch2: Int;
  ch3: Int;
  ch4: Int;
  ch5: Int;
  ch6: Int;
  ch7: Int;
  ch8: Int;
  ch9: Int;
  colourB: Int;
  colourC: Int;
  colourG: Int;
  colourR: Int;
  date: DateTimeOutput;
  day: Int;
  hour: Int;
  line: Int;
  minute: Int;
  month: Int;
  page: Int;
  rawTotalVolume?: Int;
  rawVolumeL?: Int;
  rawVolumeR?: Int;
  temperature: Int;
  x: Int;
  y: Int;
  year: Int;
  z: Int;
}

export interface CupDatumPreviousValuesPromise
  extends Promise<CupDatumPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  battery: () => Promise<Int>;
  calibFlag: () => Promise<Boolean>;
  ch1: () => Promise<Int>;
  ch10: () => Promise<Int>;
  ch11: () => Promise<Int>;
  ch12: () => Promise<Int>;
  ch13: () => Promise<Int>;
  ch14: () => Promise<Int>;
  ch2: () => Promise<Int>;
  ch3: () => Promise<Int>;
  ch4: () => Promise<Int>;
  ch5: () => Promise<Int>;
  ch6: () => Promise<Int>;
  ch7: () => Promise<Int>;
  ch8: () => Promise<Int>;
  ch9: () => Promise<Int>;
  colourB: () => Promise<Int>;
  colourC: () => Promise<Int>;
  colourG: () => Promise<Int>;
  colourR: () => Promise<Int>;
  date: () => Promise<DateTimeOutput>;
  day: () => Promise<Int>;
  hour: () => Promise<Int>;
  line: () => Promise<Int>;
  minute: () => Promise<Int>;
  month: () => Promise<Int>;
  page: () => Promise<Int>;
  rawTotalVolume: () => Promise<Int>;
  rawVolumeL: () => Promise<Int>;
  rawVolumeR: () => Promise<Int>;
  temperature: () => Promise<Int>;
  x: () => Promise<Int>;
  y: () => Promise<Int>;
  year: () => Promise<Int>;
  z: () => Promise<Int>;
}

export interface CupDatumPreviousValuesSubscription
  extends Promise<AsyncIterator<CupDatumPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  battery: () => Promise<AsyncIterator<Int>>;
  calibFlag: () => Promise<AsyncIterator<Boolean>>;
  ch1: () => Promise<AsyncIterator<Int>>;
  ch10: () => Promise<AsyncIterator<Int>>;
  ch11: () => Promise<AsyncIterator<Int>>;
  ch12: () => Promise<AsyncIterator<Int>>;
  ch13: () => Promise<AsyncIterator<Int>>;
  ch14: () => Promise<AsyncIterator<Int>>;
  ch2: () => Promise<AsyncIterator<Int>>;
  ch3: () => Promise<AsyncIterator<Int>>;
  ch4: () => Promise<AsyncIterator<Int>>;
  ch5: () => Promise<AsyncIterator<Int>>;
  ch6: () => Promise<AsyncIterator<Int>>;
  ch7: () => Promise<AsyncIterator<Int>>;
  ch8: () => Promise<AsyncIterator<Int>>;
  ch9: () => Promise<AsyncIterator<Int>>;
  colourB: () => Promise<AsyncIterator<Int>>;
  colourC: () => Promise<AsyncIterator<Int>>;
  colourG: () => Promise<AsyncIterator<Int>>;
  colourR: () => Promise<AsyncIterator<Int>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  day: () => Promise<AsyncIterator<Int>>;
  hour: () => Promise<AsyncIterator<Int>>;
  line: () => Promise<AsyncIterator<Int>>;
  minute: () => Promise<AsyncIterator<Int>>;
  month: () => Promise<AsyncIterator<Int>>;
  page: () => Promise<AsyncIterator<Int>>;
  rawTotalVolume: () => Promise<AsyncIterator<Int>>;
  rawVolumeL: () => Promise<AsyncIterator<Int>>;
  rawVolumeR: () => Promise<AsyncIterator<Int>>;
  temperature: () => Promise<AsyncIterator<Int>>;
  x: () => Promise<AsyncIterator<Int>>;
  y: () => Promise<AsyncIterator<Int>>;
  year: () => Promise<AsyncIterator<Int>>;
  z: () => Promise<AsyncIterator<Int>>;
}

export interface UserCoinHistoryConnection {
  pageInfo: PageInfo;
  edges: UserCoinHistoryEdge[];
}

export interface UserCoinHistoryConnectionPromise
  extends Promise<UserCoinHistoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserCoinHistoryEdge>>() => T;
  aggregate: <T = AggregateUserCoinHistoryPromise>() => T;
}

export interface UserCoinHistoryConnectionSubscription
  extends Promise<AsyncIterator<UserCoinHistoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserCoinHistoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserCoinHistorySubscription>() => T;
}

export interface CupDataColourCalib {
  id: Int;
  blue: Int;
  c: Int;
  green: Int;
  red: Int;
}

export interface CupDataColourCalibPromise
  extends Promise<CupDataColourCalib>,
    Fragmentable {
  id: () => Promise<Int>;
  blue: () => Promise<Int>;
  c: () => Promise<Int>;
  green: () => Promise<Int>;
  red: () => Promise<Int>;
  serialNumber: <T = CupPromise>() => T;
}

export interface CupDataColourCalibSubscription
  extends Promise<AsyncIterator<CupDataColourCalib>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  blue: () => Promise<AsyncIterator<Int>>;
  c: () => Promise<AsyncIterator<Int>>;
  green: () => Promise<AsyncIterator<Int>>;
  red: () => Promise<AsyncIterator<Int>>;
  serialNumber: <T = CupSubscription>() => T;
}

export interface AggregatePlatformComp {
  count: Int;
}

export interface AggregatePlatformCompPromise
  extends Promise<AggregatePlatformComp>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlatformCompSubscription
  extends Promise<AsyncIterator<AggregatePlatformComp>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface EthnicitySubscriptionPayload {
  mutation: MutationType;
  node: Ethnicity;
  updatedFields: String[];
  previousValues: EthnicityPreviousValues;
}

export interface EthnicitySubscriptionPayloadPromise
  extends Promise<EthnicitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EthnicityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EthnicityPreviousValuesPromise>() => T;
}

export interface EthnicitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EthnicitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EthnicitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EthnicityPreviousValuesSubscription>() => T;
}

export interface PlatformComp {
  id: Int;
  phoneId: Int;
  platformId: Int;
  problemHistory?: Boolean;
  softwareId: Int;
  successHistory?: Boolean;
}

export interface PlatformCompPromise
  extends Promise<PlatformComp>,
    Fragmentable {
  id: () => Promise<Int>;
  phoneId: () => Promise<Int>;
  platformId: () => Promise<Int>;
  problemHistory: () => Promise<Boolean>;
  softwareId: () => Promise<Int>;
  successHistory: () => Promise<Boolean>;
}

export interface PlatformCompSubscription
  extends Promise<AsyncIterator<PlatformComp>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  phoneId: () => Promise<AsyncIterator<Int>>;
  platformId: () => Promise<AsyncIterator<Int>>;
  problemHistory: () => Promise<AsyncIterator<Boolean>>;
  softwareId: () => Promise<AsyncIterator<Int>>;
  successHistory: () => Promise<AsyncIterator<Boolean>>;
}

export interface EthnicityPreviousValues {
  id: Int;
  ethnicity: String;
}

export interface EthnicityPreviousValuesPromise
  extends Promise<EthnicityPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  ethnicity: () => Promise<String>;
}

export interface EthnicityPreviousValuesSubscription
  extends Promise<AsyncIterator<EthnicityPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  ethnicity: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMarketList {
  count: Int;
}

export interface AggregateMarketListPromise
  extends Promise<AggregateMarketList>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMarketListSubscription
  extends Promise<AsyncIterator<AggregateMarketList>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CupDataProcVolume {
  id: Int;
  confidenceL?: Int;
  confidenceR?: Int;
  inVitro: Boolean;
  volume?: Int;
  volumeAdj?: Int;
  volumeL?: Int;
  volumeR?: Int;
}

export interface CupDataProcVolumePromise
  extends Promise<CupDataProcVolume>,
    Fragmentable {
  id: () => Promise<Int>;
  confidenceL: () => Promise<Int>;
  confidenceR: () => Promise<Int>;
  cupDataRowId: <T = CupDatumPromise>() => T;
  inVitro: () => Promise<Boolean>;
  volume: () => Promise<Int>;
  volumeAdj: () => Promise<Int>;
  volumeL: () => Promise<Int>;
  volumeR: () => Promise<Int>;
}

export interface CupDataProcVolumeSubscription
  extends Promise<AsyncIterator<CupDataProcVolume>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  confidenceL: () => Promise<AsyncIterator<Int>>;
  confidenceR: () => Promise<AsyncIterator<Int>>;
  cupDataRowId: <T = CupDatumSubscription>() => T;
  inVitro: () => Promise<AsyncIterator<Boolean>>;
  volume: () => Promise<AsyncIterator<Int>>;
  volumeAdj: () => Promise<AsyncIterator<Int>>;
  volumeL: () => Promise<AsyncIterator<Int>>;
  volumeR: () => Promise<AsyncIterator<Int>>;
}

export interface MarketListDetail {
  id: Int;
  contents?: String;
  detailImage?: String;
  mainImage?: String;
  price?: Int;
  savingPrice?: Int;
  subTitle?: String;
  title?: String;
}

export interface MarketListDetailPromise
  extends Promise<MarketListDetail>,
    Fragmentable {
  id: () => Promise<Int>;
  contents: () => Promise<String>;
  detailImage: () => Promise<String>;
  mainImage: () => Promise<String>;
  marketListId: <T = MarketListPromise>() => T;
  price: () => Promise<Int>;
  savingPrice: () => Promise<Int>;
  subTitle: () => Promise<String>;
  title: () => Promise<String>;
}

export interface MarketListDetailSubscription
  extends Promise<AsyncIterator<MarketListDetail>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  contents: () => Promise<AsyncIterator<String>>;
  detailImage: () => Promise<AsyncIterator<String>>;
  mainImage: () => Promise<AsyncIterator<String>>;
  marketListId: <T = MarketListSubscription>() => T;
  price: () => Promise<AsyncIterator<Int>>;
  savingPrice: () => Promise<AsyncIterator<Int>>;
  subTitle: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface FirmwareSubscriptionPayload {
  mutation: MutationType;
  node: Firmware;
  updatedFields: String[];
  previousValues: FirmwarePreviousValues;
}

export interface FirmwareSubscriptionPayloadPromise
  extends Promise<FirmwareSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FirmwarePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FirmwarePreviousValuesPromise>() => T;
}

export interface FirmwareSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FirmwareSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FirmwareSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FirmwarePreviousValuesSubscription>() => T;
}

export interface MarketBuyHistoryConnection {
  pageInfo: PageInfo;
  edges: MarketBuyHistoryEdge[];
}

export interface MarketBuyHistoryConnectionPromise
  extends Promise<MarketBuyHistoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MarketBuyHistoryEdge>>() => T;
  aggregate: <T = AggregateMarketBuyHistoryPromise>() => T;
}

export interface MarketBuyHistoryConnectionSubscription
  extends Promise<AsyncIterator<MarketBuyHistoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MarketBuyHistoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMarketBuyHistorySubscription>() => T;
}

export interface FirmwarePreviousValues {
  id: Int;
  fwVersion: String;
}

export interface FirmwarePreviousValuesPromise
  extends Promise<FirmwarePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  fwVersion: () => Promise<String>;
}

export interface FirmwarePreviousValuesSubscription
  extends Promise<AsyncIterator<FirmwarePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  fwVersion: () => Promise<AsyncIterator<String>>;
}

export interface AdditionalInfoConnection {
  pageInfo: PageInfo;
  edges: AdditionalInfoEdge[];
}

export interface AdditionalInfoConnectionPromise
  extends Promise<AdditionalInfoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AdditionalInfoEdge>>() => T;
  aggregate: <T = AggregateAdditionalInfoPromise>() => T;
}

export interface AdditionalInfoConnectionSubscription
  extends Promise<AsyncIterator<AdditionalInfoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AdditionalInfoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAdditionalInfoSubscription>() => T;
}

export interface CupDataColourCalc {
  id: Int;
  blue: Int;
  green: Int;
  red: Int;
}

export interface CupDataColourCalcPromise
  extends Promise<CupDataColourCalc>,
    Fragmentable {
  id: () => Promise<Int>;
  blue: () => Promise<Int>;
  cupDataRowId: <T = CupDatumPromise>() => T;
  green: () => Promise<Int>;
  red: () => Promise<Int>;
}

export interface CupDataColourCalcSubscription
  extends Promise<AsyncIterator<CupDataColourCalc>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  blue: () => Promise<AsyncIterator<Int>>;
  cupDataRowId: <T = CupDatumSubscription>() => T;
  green: () => Promise<AsyncIterator<Int>>;
  red: () => Promise<AsyncIterator<Int>>;
}

export interface HardwareConnection {
  pageInfo: PageInfo;
  edges: HardwareEdge[];
}

export interface HardwareConnectionPromise
  extends Promise<HardwareConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<HardwareEdge>>() => T;
  aggregate: <T = AggregateHardwarePromise>() => T;
}

export interface HardwareConnectionSubscription
  extends Promise<AsyncIterator<HardwareConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<HardwareEdgeSubscription>>>() => T;
  aggregate: <T = AggregateHardwareSubscription>() => T;
}

export interface HardwareSubscriptionPayload {
  mutation: MutationType;
  node: Hardware;
  updatedFields: String[];
  previousValues: HardwarePreviousValues;
}

export interface HardwareSubscriptionPayloadPromise
  extends Promise<HardwareSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = HardwarePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = HardwarePreviousValuesPromise>() => T;
}

export interface HardwareSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<HardwareSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = HardwareSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = HardwarePreviousValuesSubscription>() => T;
}

export interface FirmwareConnection {
  pageInfo: PageInfo;
  edges: FirmwareEdge[];
}

export interface FirmwareConnectionPromise
  extends Promise<FirmwareConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FirmwareEdge>>() => T;
  aggregate: <T = AggregateFirmwarePromise>() => T;
}

export interface FirmwareConnectionSubscription
  extends Promise<AsyncIterator<FirmwareConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FirmwareEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFirmwareSubscription>() => T;
}

export interface HardwarePreviousValues {
  id: Int;
  hwVersion: String;
}

export interface HardwarePreviousValuesPromise
  extends Promise<HardwarePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  hwVersion: () => Promise<String>;
}

export interface HardwarePreviousValuesSubscription
  extends Promise<AsyncIterator<HardwarePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  hwVersion: () => Promise<AsyncIterator<String>>;
}

export interface EthnicityConnection {
  pageInfo: PageInfo;
  edges: EthnicityEdge[];
}

export interface EthnicityConnectionPromise
  extends Promise<EthnicityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EthnicityEdge>>() => T;
  aggregate: <T = AggregateEthnicityPromise>() => T;
}

export interface EthnicityConnectionSubscription
  extends Promise<AsyncIterator<EthnicityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EthnicityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEthnicitySubscription>() => T;
}

export interface CupDatum {
  id: Int;
  battery: Int;
  calibFlag: Boolean;
  ch1: Int;
  ch10: Int;
  ch11: Int;
  ch12: Int;
  ch13: Int;
  ch14: Int;
  ch2: Int;
  ch3: Int;
  ch4: Int;
  ch5: Int;
  ch6: Int;
  ch7: Int;
  ch8: Int;
  ch9: Int;
  colourB: Int;
  colourC: Int;
  colourG: Int;
  colourR: Int;
  date: DateTimeOutput;
  day: Int;
  hour: Int;
  line: Int;
  minute: Int;
  month: Int;
  page: Int;
  rawTotalVolume?: Int;
  rawVolumeL?: Int;
  rawVolumeR?: Int;
  temperature: Int;
  x: Int;
  y: Int;
  year: Int;
  z: Int;
}

export interface CupDatumPromise extends Promise<CupDatum>, Fragmentable {
  id: () => Promise<Int>;
  battery: () => Promise<Int>;
  calibFlag: () => Promise<Boolean>;
  ch1: () => Promise<Int>;
  ch10: () => Promise<Int>;
  ch11: () => Promise<Int>;
  ch12: () => Promise<Int>;
  ch13: () => Promise<Int>;
  ch14: () => Promise<Int>;
  ch2: () => Promise<Int>;
  ch3: () => Promise<Int>;
  ch4: () => Promise<Int>;
  ch5: () => Promise<Int>;
  ch6: () => Promise<Int>;
  ch7: () => Promise<Int>;
  ch8: () => Promise<Int>;
  ch9: () => Promise<Int>;
  colourB: () => Promise<Int>;
  colourC: () => Promise<Int>;
  colourG: () => Promise<Int>;
  colourR: () => Promise<Int>;
  cupDataColourCalc: <T = FragmentableArray<CupDataColourCalc>>(
    args?: {
      where?: CupDataColourCalcWhereInput;
      orderBy?: CupDataColourCalcOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cupDataProcVolume: <T = FragmentableArray<CupDataProcVolume>>(
    args?: {
      where?: CupDataProcVolumeWhereInput;
      orderBy?: CupDataProcVolumeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  date: () => Promise<DateTimeOutput>;
  day: () => Promise<Int>;
  hour: () => Promise<Int>;
  line: () => Promise<Int>;
  minute: () => Promise<Int>;
  month: () => Promise<Int>;
  page: () => Promise<Int>;
  rawTotalVolume: () => Promise<Int>;
  rawVolumeL: () => Promise<Int>;
  rawVolumeR: () => Promise<Int>;
  serialNumber: <T = CupPromise>() => T;
  temperature: () => Promise<Int>;
  x: () => Promise<Int>;
  y: () => Promise<Int>;
  year: () => Promise<Int>;
  z: () => Promise<Int>;
}

export interface CupDatumSubscription
  extends Promise<AsyncIterator<CupDatum>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  battery: () => Promise<AsyncIterator<Int>>;
  calibFlag: () => Promise<AsyncIterator<Boolean>>;
  ch1: () => Promise<AsyncIterator<Int>>;
  ch10: () => Promise<AsyncIterator<Int>>;
  ch11: () => Promise<AsyncIterator<Int>>;
  ch12: () => Promise<AsyncIterator<Int>>;
  ch13: () => Promise<AsyncIterator<Int>>;
  ch14: () => Promise<AsyncIterator<Int>>;
  ch2: () => Promise<AsyncIterator<Int>>;
  ch3: () => Promise<AsyncIterator<Int>>;
  ch4: () => Promise<AsyncIterator<Int>>;
  ch5: () => Promise<AsyncIterator<Int>>;
  ch6: () => Promise<AsyncIterator<Int>>;
  ch7: () => Promise<AsyncIterator<Int>>;
  ch8: () => Promise<AsyncIterator<Int>>;
  ch9: () => Promise<AsyncIterator<Int>>;
  colourB: () => Promise<AsyncIterator<Int>>;
  colourC: () => Promise<AsyncIterator<Int>>;
  colourG: () => Promise<AsyncIterator<Int>>;
  colourR: () => Promise<AsyncIterator<Int>>;
  cupDataColourCalc: <
    T = Promise<AsyncIterator<CupDataColourCalcSubscription>>
  >(
    args?: {
      where?: CupDataColourCalcWhereInput;
      orderBy?: CupDataColourCalcOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cupDataProcVolume: <
    T = Promise<AsyncIterator<CupDataProcVolumeSubscription>>
  >(
    args?: {
      where?: CupDataProcVolumeWhereInput;
      orderBy?: CupDataProcVolumeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  day: () => Promise<AsyncIterator<Int>>;
  hour: () => Promise<AsyncIterator<Int>>;
  line: () => Promise<AsyncIterator<Int>>;
  minute: () => Promise<AsyncIterator<Int>>;
  month: () => Promise<AsyncIterator<Int>>;
  page: () => Promise<AsyncIterator<Int>>;
  rawTotalVolume: () => Promise<AsyncIterator<Int>>;
  rawVolumeL: () => Promise<AsyncIterator<Int>>;
  rawVolumeR: () => Promise<AsyncIterator<Int>>;
  serialNumber: <T = CupSubscription>() => T;
  temperature: () => Promise<AsyncIterator<Int>>;
  x: () => Promise<AsyncIterator<Int>>;
  y: () => Promise<AsyncIterator<Int>>;
  year: () => Promise<AsyncIterator<Int>>;
  z: () => Promise<AsyncIterator<Int>>;
}

export interface CupDatumConnection {
  pageInfo: PageInfo;
  edges: CupDatumEdge[];
}

export interface CupDatumConnectionPromise
  extends Promise<CupDatumConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CupDatumEdge>>() => T;
  aggregate: <T = AggregateCupDatumPromise>() => T;
}

export interface CupDatumConnectionSubscription
  extends Promise<AsyncIterator<CupDatumConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CupDatumEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCupDatumSubscription>() => T;
}

export interface MarketAmazonCouponSubscriptionPayload {
  mutation: MutationType;
  node: MarketAmazonCoupon;
  updatedFields: String[];
  previousValues: MarketAmazonCouponPreviousValues;
}

export interface MarketAmazonCouponSubscriptionPayloadPromise
  extends Promise<MarketAmazonCouponSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MarketAmazonCouponPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MarketAmazonCouponPreviousValuesPromise>() => T;
}

export interface MarketAmazonCouponSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MarketAmazonCouponSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MarketAmazonCouponSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MarketAmazonCouponPreviousValuesSubscription>() => T;
}

export interface AggregateCupDataUserRemove {
  count: Int;
}

export interface AggregateCupDataUserRemovePromise
  extends Promise<AggregateCupDataUserRemove>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCupDataUserRemoveSubscription
  extends Promise<AsyncIterator<AggregateCupDataUserRemove>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MarketAmazonCouponPreviousValues {
  id: Int;
  availability: Boolean;
  couponNumber: String;
  createTime: DateTimeOutput;
  endTime: DateTimeOutput;
  marketListId?: Int;
  price: Int;
  startTime: DateTimeOutput;
  title?: String;
}

export interface MarketAmazonCouponPreviousValuesPromise
  extends Promise<MarketAmazonCouponPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  availability: () => Promise<Boolean>;
  couponNumber: () => Promise<String>;
  createTime: () => Promise<DateTimeOutput>;
  endTime: () => Promise<DateTimeOutput>;
  marketListId: () => Promise<Int>;
  price: () => Promise<Int>;
  startTime: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
}

export interface MarketAmazonCouponPreviousValuesSubscription
  extends Promise<AsyncIterator<MarketAmazonCouponPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  availability: () => Promise<AsyncIterator<Boolean>>;
  couponNumber: () => Promise<AsyncIterator<String>>;
  createTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  endTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  marketListId: () => Promise<AsyncIterator<Int>>;
  price: () => Promise<AsyncIterator<Int>>;
  startTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface CupDataRejectionEdge {
  node: CupDataRejection;
  cursor: String;
}

export interface CupDataRejectionEdgePromise
  extends Promise<CupDataRejectionEdge>,
    Fragmentable {
  node: <T = CupDataRejectionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CupDataRejectionEdgeSubscription
  extends Promise<AsyncIterator<CupDataRejectionEdge>>,
    Fragmentable {
  node: <T = CupDataRejectionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CupAppSync {
  id: Int;
  appSynchTime: DateTimeOutput;
}

export interface CupAppSyncPromise extends Promise<CupAppSync>, Fragmentable {
  id: () => Promise<Int>;
  appSynchTime: () => Promise<DateTimeOutput>;
  serialNumber: <T = CupPromise>() => T;
}

export interface CupAppSyncSubscription
  extends Promise<AsyncIterator<CupAppSync>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  appSynchTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  serialNumber: <T = CupSubscription>() => T;
}

export interface CupDataRawEdge {
  node: CupDataRaw;
  cursor: String;
}

export interface CupDataRawEdgePromise
  extends Promise<CupDataRawEdge>,
    Fragmentable {
  node: <T = CupDataRawPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CupDataRawEdgeSubscription
  extends Promise<AsyncIterator<CupDataRawEdge>>,
    Fragmentable {
  node: <T = CupDataRawSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MarketBuyHistorySubscriptionPayload {
  mutation: MutationType;
  node: MarketBuyHistory;
  updatedFields: String[];
  previousValues: MarketBuyHistoryPreviousValues;
}

export interface MarketBuyHistorySubscriptionPayloadPromise
  extends Promise<MarketBuyHistorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MarketBuyHistoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MarketBuyHistoryPreviousValuesPromise>() => T;
}

export interface MarketBuyHistorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MarketBuyHistorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MarketBuyHistorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MarketBuyHistoryPreviousValuesSubscription>() => T;
}

export interface CupDataQuestionConnection {
  pageInfo: PageInfo;
  edges: CupDataQuestionEdge[];
}

export interface CupDataQuestionConnectionPromise
  extends Promise<CupDataQuestionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CupDataQuestionEdge>>() => T;
  aggregate: <T = AggregateCupDataQuestionPromise>() => T;
}

export interface CupDataQuestionConnectionSubscription
  extends Promise<AsyncIterator<CupDataQuestionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CupDataQuestionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCupDataQuestionSubscription>() => T;
}

export interface MarketBuyHistoryPreviousValues {
  id: Int;
  cancelYn?: Boolean;
  category?: String;
  createTime: DateTimeOutput;
  orderNumber?: String;
  productId?: Int;
  status: Boolean;
  updateTime: DateTimeOutput;
  userId?: Int;
}

export interface MarketBuyHistoryPreviousValuesPromise
  extends Promise<MarketBuyHistoryPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  cancelYn: () => Promise<Boolean>;
  category: () => Promise<String>;
  createTime: () => Promise<DateTimeOutput>;
  orderNumber: () => Promise<String>;
  productId: () => Promise<Int>;
  status: () => Promise<Boolean>;
  updateTime: () => Promise<DateTimeOutput>;
  userId: () => Promise<Int>;
}

export interface MarketBuyHistoryPreviousValuesSubscription
  extends Promise<AsyncIterator<MarketBuyHistoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  cancelYn: () => Promise<AsyncIterator<Boolean>>;
  category: () => Promise<AsyncIterator<String>>;
  createTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  orderNumber: () => Promise<AsyncIterator<String>>;
  productId: () => Promise<AsyncIterator<Int>>;
  status: () => Promise<AsyncIterator<Boolean>>;
  updateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  userId: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateCupDataProcVolume {
  count: Int;
}

export interface AggregateCupDataProcVolumePromise
  extends Promise<AggregateCupDataProcVolume>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCupDataProcVolumeSubscription
  extends Promise<AsyncIterator<AggregateCupDataProcVolume>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Company {
  id: Int;
  companyName: String;
}

export interface CompanyPromise extends Promise<Company>, Fragmentable {
  id: () => Promise<Int>;
  companyName: () => Promise<String>;
  cup: <T = FragmentableArray<Cup>>(
    args?: {
      where?: CupWhereInput;
      orderBy?: CupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CompanySubscription
  extends Promise<AsyncIterator<Company>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  companyName: () => Promise<AsyncIterator<String>>;
  cup: <T = Promise<AsyncIterator<CupSubscription>>>(
    args?: {
      where?: CupWhereInput;
      orderBy?: CupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CupDataProcMdateEdge {
  node: CupDataProcMdate;
  cursor: String;
}

export interface CupDataProcMdateEdgePromise
  extends Promise<CupDataProcMdateEdge>,
    Fragmentable {
  node: <T = CupDataProcMdatePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CupDataProcMdateEdgeSubscription
  extends Promise<AsyncIterator<CupDataProcMdateEdge>>,
    Fragmentable {
  node: <T = CupDataProcMdateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MarketListSubscriptionPayload {
  mutation: MutationType;
  node: MarketList;
  updatedFields: String[];
  previousValues: MarketListPreviousValues;
}

export interface MarketListSubscriptionPayloadPromise
  extends Promise<MarketListSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MarketListPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MarketListPreviousValuesPromise>() => T;
}

export interface MarketListSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MarketListSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MarketListSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MarketListPreviousValuesSubscription>() => T;
}

export interface CupDataProcFlowConnection {
  pageInfo: PageInfo;
  edges: CupDataProcFlowEdge[];
}

export interface CupDataProcFlowConnectionPromise
  extends Promise<CupDataProcFlowConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CupDataProcFlowEdge>>() => T;
  aggregate: <T = AggregateCupDataProcFlowPromise>() => T;
}

export interface CupDataProcFlowConnectionSubscription
  extends Promise<AsyncIterator<CupDataProcFlowConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CupDataProcFlowEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCupDataProcFlowSubscription>() => T;
}

export interface MarketListPreviousValues {
  id: Int;
  count: Int;
  endTime: DateTimeOutput;
  image?: String;
  price: Int;
  startTime: DateTimeOutput;
  title?: String;
}

export interface MarketListPreviousValuesPromise
  extends Promise<MarketListPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  count: () => Promise<Int>;
  endTime: () => Promise<DateTimeOutput>;
  image: () => Promise<String>;
  price: () => Promise<Int>;
  startTime: () => Promise<DateTimeOutput>;
  title: () => Promise<String>;
}

export interface MarketListPreviousValuesSubscription
  extends Promise<AsyncIterator<MarketListPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  count: () => Promise<AsyncIterator<Int>>;
  endTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  image: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  startTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCupDataColourCalib {
  count: Int;
}

export interface AggregateCupDataColourCalibPromise
  extends Promise<AggregateCupDataColourCalib>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCupDataColourCalibSubscription
  extends Promise<AsyncIterator<AggregateCupDataColourCalib>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Calibration {
  id: Int;
  calibVersion: String;
}

export interface CalibrationPromise extends Promise<Calibration>, Fragmentable {
  id: () => Promise<Int>;
  calibVersion: () => Promise<String>;
  cup: <T = FragmentableArray<Cup>>(
    args?: {
      where?: CupWhereInput;
      orderBy?: CupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CalibrationSubscription
  extends Promise<AsyncIterator<Calibration>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  calibVersion: () => Promise<AsyncIterator<String>>;
  cup: <T = Promise<AsyncIterator<CupSubscription>>>(
    args?: {
      where?: CupWhereInput;
      orderBy?: CupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CupDataColourCalcEdge {
  node: CupDataColourCalc;
  cursor: String;
}

export interface CupDataColourCalcEdgePromise
  extends Promise<CupDataColourCalcEdge>,
    Fragmentable {
  node: <T = CupDataColourCalcPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CupDataColourCalcEdgeSubscription
  extends Promise<AsyncIterator<CupDataColourCalcEdge>>,
    Fragmentable {
  node: <T = CupDataColourCalcSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MarketListDetailSubscriptionPayload {
  mutation: MutationType;
  node: MarketListDetail;
  updatedFields: String[];
  previousValues: MarketListDetailPreviousValues;
}

export interface MarketListDetailSubscriptionPayloadPromise
  extends Promise<MarketListDetailSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MarketListDetailPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MarketListDetailPreviousValuesPromise>() => T;
}

export interface MarketListDetailSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MarketListDetailSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MarketListDetailSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MarketListDetailPreviousValuesSubscription>() => T;
}

export interface CupDataAnswerConnection {
  pageInfo: PageInfo;
  edges: CupDataAnswerEdge[];
}

export interface CupDataAnswerConnectionPromise
  extends Promise<CupDataAnswerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CupDataAnswerEdge>>() => T;
  aggregate: <T = AggregateCupDataAnswerPromise>() => T;
}

export interface CupDataAnswerConnectionSubscription
  extends Promise<AsyncIterator<CupDataAnswerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CupDataAnswerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCupDataAnswerSubscription>() => T;
}

export interface MarketListDetailPreviousValues {
  id: Int;
  contents?: String;
  detailImage?: String;
  mainImage?: String;
  price?: Int;
  savingPrice?: Int;
  subTitle?: String;
  title?: String;
}

export interface MarketListDetailPreviousValuesPromise
  extends Promise<MarketListDetailPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  contents: () => Promise<String>;
  detailImage: () => Promise<String>;
  mainImage: () => Promise<String>;
  price: () => Promise<Int>;
  savingPrice: () => Promise<Int>;
  subTitle: () => Promise<String>;
  title: () => Promise<String>;
}

export interface MarketListDetailPreviousValuesSubscription
  extends Promise<AsyncIterator<MarketListDetailPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  contents: () => Promise<AsyncIterator<String>>;
  detailImage: () => Promise<AsyncIterator<String>>;
  mainImage: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  savingPrice: () => Promise<AsyncIterator<Int>>;
  subTitle: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCup {
  count: Int;
}

export interface AggregateCupPromise
  extends Promise<AggregateCup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCupSubscription
  extends Promise<AsyncIterator<AggregateCup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Cup {
  id: Int;
  anonSerialNumber: Int;
  encryptionKey: Int;
}

export interface CupPromise extends Promise<Cup>, Fragmentable {
  id: () => Promise<Int>;
  anonSerialNumber: () => Promise<Int>;
  calibId: <T = CalibrationPromise>() => T;
  companyId: <T = CompanyPromise>() => T;
  cupAppSync: <T = FragmentableArray<CupAppSync>>(
    args?: {
      where?: CupAppSyncWhereInput;
      orderBy?: CupAppSyncOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cupData: <T = FragmentableArray<CupDatum>>(
    args?: {
      where?: CupDatumWhereInput;
      orderBy?: CupDatumOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cupDataColourCalib: <T = FragmentableArray<CupDataColourCalib>>(
    args?: {
      where?: CupDataColourCalibWhereInput;
      orderBy?: CupDataColourCalibOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cupDataRaw: <T = FragmentableArray<CupDataRaw>>(
    args?: {
      where?: CupDataRawWhereInput;
      orderBy?: CupDataRawOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cupDataUserRemove: <T = FragmentableArray<CupDataUserRemove>>(
    args?: {
      where?: CupDataUserRemoveWhereInput;
      orderBy?: CupDataUserRemoveOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  encryptionKey: () => Promise<Int>;
  fwId: <T = FirmwarePromise>() => T;
  hwId: <T = HardwarePromise>() => T;
  userCups: <T = FragmentableArray<UserCup>>(
    args?: {
      where?: UserCupWhereInput;
      orderBy?: UserCupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CupSubscription
  extends Promise<AsyncIterator<Cup>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  anonSerialNumber: () => Promise<AsyncIterator<Int>>;
  calibId: <T = CalibrationSubscription>() => T;
  companyId: <T = CompanySubscription>() => T;
  cupAppSync: <T = Promise<AsyncIterator<CupAppSyncSubscription>>>(
    args?: {
      where?: CupAppSyncWhereInput;
      orderBy?: CupAppSyncOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cupData: <T = Promise<AsyncIterator<CupDatumSubscription>>>(
    args?: {
      where?: CupDatumWhereInput;
      orderBy?: CupDatumOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cupDataColourCalib: <
    T = Promise<AsyncIterator<CupDataColourCalibSubscription>>
  >(
    args?: {
      where?: CupDataColourCalibWhereInput;
      orderBy?: CupDataColourCalibOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cupDataRaw: <T = Promise<AsyncIterator<CupDataRawSubscription>>>(
    args?: {
      where?: CupDataRawWhereInput;
      orderBy?: CupDataRawOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cupDataUserRemove: <
    T = Promise<AsyncIterator<CupDataUserRemoveSubscription>>
  >(
    args?: {
      where?: CupDataUserRemoveWhereInput;
      orderBy?: CupDataUserRemoveOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  encryptionKey: () => Promise<AsyncIterator<Int>>;
  fwId: <T = FirmwareSubscription>() => T;
  hwId: <T = HardwareSubscription>() => T;
  userCups: <T = Promise<AsyncIterator<UserCupSubscription>>>(
    args?: {
      where?: UserCupWhereInput;
      orderBy?: UserCupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CountryEdge {
  node: Country;
  cursor: String;
}

export interface CountryEdgePromise extends Promise<CountryEdge>, Fragmentable {
  node: <T = CountryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CountryEdgeSubscription
  extends Promise<AsyncIterator<CountryEdge>>,
    Fragmentable {
  node: <T = CountrySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PlatformCompSubscriptionPayload {
  mutation: MutationType;
  node: PlatformComp;
  updatedFields: String[];
  previousValues: PlatformCompPreviousValues;
}

export interface PlatformCompSubscriptionPayloadPromise
  extends Promise<PlatformCompSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlatformCompPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlatformCompPreviousValuesPromise>() => T;
}

export interface PlatformCompSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlatformCompSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlatformCompSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlatformCompPreviousValuesSubscription>() => T;
}

export interface CompanyEdge {
  node: Company;
  cursor: String;
}

export interface CompanyEdgePromise extends Promise<CompanyEdge>, Fragmentable {
  node: <T = CompanyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompanyEdgeSubscription
  extends Promise<AsyncIterator<CompanyEdge>>,
    Fragmentable {
  node: <T = CompanySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PlatformCompPreviousValues {
  id: Int;
  phoneId: Int;
  platformId: Int;
  problemHistory?: Boolean;
  softwareId: Int;
  successHistory?: Boolean;
}

export interface PlatformCompPreviousValuesPromise
  extends Promise<PlatformCompPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  phoneId: () => Promise<Int>;
  platformId: () => Promise<Int>;
  problemHistory: () => Promise<Boolean>;
  softwareId: () => Promise<Int>;
  successHistory: () => Promise<Boolean>;
}

export interface PlatformCompPreviousValuesSubscription
  extends Promise<AsyncIterator<PlatformCompPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  phoneId: () => Promise<AsyncIterator<Int>>;
  platformId: () => Promise<AsyncIterator<Int>>;
  problemHistory: () => Promise<AsyncIterator<Boolean>>;
  softwareId: () => Promise<AsyncIterator<Int>>;
  successHistory: () => Promise<AsyncIterator<Boolean>>;
}

export interface User {
  id: Int;
  anonUserId?: Int;
  countryId?: Int;
  deleted: Boolean;
  deviceModel?: String;
  dob: DateTimeOutput;
  email: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  firstName: String;
  givenBirth: Boolean;
  lastName: String;
  macId?: String;
  password: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<Int>;
  anonUserId: () => Promise<Int>;
  appServerSync: <T = FragmentableArray<AppServerSync>>(
    args?: {
      where?: AppServerSyncWhereInput;
      orderBy?: AppServerSyncOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  countryId: () => Promise<Int>;
  cupDataProcFlow: <T = FragmentableArray<CupDataProcFlow>>(
    args?: {
      where?: CupDataProcFlowWhereInput;
      orderBy?: CupDataProcFlowOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cupDataProcMdates: <T = FragmentableArray<CupDataProcMdate>>(
    args?: {
      where?: CupDataProcMdateWhereInput;
      orderBy?: CupDataProcMdateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cupDataQaResponse: <T = FragmentableArray<CupDataQaResponse>>(
    args?: {
      where?: CupDataQaResponseWhereInput;
      orderBy?: CupDataQaResponseOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cupDataUserRemove: <T = FragmentableArray<CupDataUserRemove>>(
    args?: {
      where?: CupDataUserRemoveWhereInput;
      orderBy?: CupDataUserRemoveOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  deleted: () => Promise<Boolean>;
  deviceModel: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  emailVerify: () => Promise<Boolean>;
  encryptSaltString: () => Promise<String>;
  ethnicityId: <T = EthnicityPromise>() => T;
  firstName: () => Promise<String>;
  givenBirth: () => Promise<Boolean>;
  lastName: () => Promise<String>;
  macId: () => Promise<String>;
  password: () => Promise<String>;
  personalHealthRecord: () => Promise<Boolean>;
  referralCode: () => Promise<String>;
  tutorial: () => Promise<Boolean>;
  userCoinHistory: <T = FragmentableArray<UserCoinHistory>>(
    args?: {
      where?: UserCoinHistoryWhereInput;
      orderBy?: UserCoinHistoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  userCups: <T = FragmentableArray<UserCup>>(
    args?: {
      where?: UserCupWhereInput;
      orderBy?: UserCupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  userInterviewData: <T = FragmentableArray<UserInterviewDatum>>(
    args?: {
      where?: UserInterviewDatumWhereInput;
      orderBy?: UserInterviewDatumOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  userRecordDataByPeriod: <T = FragmentableArray<UserRecordDataByPeriod>>(
    args?: {
      where?: UserRecordDataByPeriodWhereInput;
      orderBy?: UserRecordDataByPeriodOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  userWallet: <T = FragmentableArray<UserWallet>>(
    args?: {
      where?: UserWalletWhereInput;
      orderBy?: UserWalletOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  anonUserId: () => Promise<AsyncIterator<Int>>;
  appServerSync: <T = Promise<AsyncIterator<AppServerSyncSubscription>>>(
    args?: {
      where?: AppServerSyncWhereInput;
      orderBy?: AppServerSyncOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  countryId: () => Promise<AsyncIterator<Int>>;
  cupDataProcFlow: <T = Promise<AsyncIterator<CupDataProcFlowSubscription>>>(
    args?: {
      where?: CupDataProcFlowWhereInput;
      orderBy?: CupDataProcFlowOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cupDataProcMdates: <T = Promise<AsyncIterator<CupDataProcMdateSubscription>>>(
    args?: {
      where?: CupDataProcMdateWhereInput;
      orderBy?: CupDataProcMdateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cupDataQaResponse: <
    T = Promise<AsyncIterator<CupDataQaResponseSubscription>>
  >(
    args?: {
      where?: CupDataQaResponseWhereInput;
      orderBy?: CupDataQaResponseOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cupDataUserRemove: <
    T = Promise<AsyncIterator<CupDataUserRemoveSubscription>>
  >(
    args?: {
      where?: CupDataUserRemoveWhereInput;
      orderBy?: CupDataUserRemoveOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  deviceModel: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  emailVerify: () => Promise<AsyncIterator<Boolean>>;
  encryptSaltString: () => Promise<AsyncIterator<String>>;
  ethnicityId: <T = EthnicitySubscription>() => T;
  firstName: () => Promise<AsyncIterator<String>>;
  givenBirth: () => Promise<AsyncIterator<Boolean>>;
  lastName: () => Promise<AsyncIterator<String>>;
  macId: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  personalHealthRecord: () => Promise<AsyncIterator<Boolean>>;
  referralCode: () => Promise<AsyncIterator<String>>;
  tutorial: () => Promise<AsyncIterator<Boolean>>;
  userCoinHistory: <T = Promise<AsyncIterator<UserCoinHistorySubscription>>>(
    args?: {
      where?: UserCoinHistoryWhereInput;
      orderBy?: UserCoinHistoryOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  userCups: <T = Promise<AsyncIterator<UserCupSubscription>>>(
    args?: {
      where?: UserCupWhereInput;
      orderBy?: UserCupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  userInterviewData: <
    T = Promise<AsyncIterator<UserInterviewDatumSubscription>>
  >(
    args?: {
      where?: UserInterviewDatumWhereInput;
      orderBy?: UserInterviewDatumOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  userRecordDataByPeriod: <
    T = Promise<AsyncIterator<UserRecordDataByPeriodSubscription>>
  >(
    args?: {
      where?: UserRecordDataByPeriodWhereInput;
      orderBy?: UserRecordDataByPeriodOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  userWallet: <T = Promise<AsyncIterator<UserWalletSubscription>>>(
    args?: {
      where?: UserWalletWhereInput;
      orderBy?: UserWalletOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CupDataUserRemoveExplain {
  id: Int;
  explain: String;
}

export interface CupDataUserRemoveExplainPromise
  extends Promise<CupDataUserRemoveExplain>,
    Fragmentable {
  id: () => Promise<Int>;
  cupDataUserRemove: <T = FragmentableArray<CupDataUserRemove>>(
    args?: {
      where?: CupDataUserRemoveWhereInput;
      orderBy?: CupDataUserRemoveOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  explain: () => Promise<String>;
}

export interface CupDataUserRemoveExplainSubscription
  extends Promise<AsyncIterator<CupDataUserRemoveExplain>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  cupDataUserRemove: <
    T = Promise<AsyncIterator<CupDataUserRemoveSubscription>>
  >(
    args?: {
      where?: CupDataUserRemoveWhereInput;
      orderBy?: CupDataUserRemoveOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  explain: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserRecordDataByPeriod {
  count: Int;
}

export interface AggregateUserRecordDataByPeriodPromise
  extends Promise<AggregateUserRecordDataByPeriod>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserRecordDataByPeriodSubscription
  extends Promise<AsyncIterator<AggregateUserRecordDataByPeriod>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserRecordCameraDataByTimeConnection {
  pageInfo: PageInfo;
  edges: UserRecordCameraDataByTimeEdge[];
}

export interface UserRecordCameraDataByTimeConnectionPromise
  extends Promise<UserRecordCameraDataByTimeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserRecordCameraDataByTimeEdge>>() => T;
  aggregate: <T = AggregateUserRecordCameraDataByTimePromise>() => T;
}

export interface UserRecordCameraDataByTimeConnectionSubscription
  extends Promise<AsyncIterator<UserRecordCameraDataByTimeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<UserRecordCameraDataByTimeEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateUserRecordCameraDataByTimeSubscription>() => T;
}

export interface UserPreviousValues {
  id: Int;
  anonUserId?: Int;
  countryId?: Int;
  deleted: Boolean;
  deviceModel?: String;
  dob: DateTimeOutput;
  email: String;
  emailVerify?: Boolean;
  encryptSaltString?: String;
  firstName: String;
  givenBirth: Boolean;
  lastName: String;
  macId?: String;
  password: String;
  personalHealthRecord?: Boolean;
  referralCode?: String;
  tutorial?: Boolean;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  anonUserId: () => Promise<Int>;
  countryId: () => Promise<Int>;
  deleted: () => Promise<Boolean>;
  deviceModel: () => Promise<String>;
  dob: () => Promise<DateTimeOutput>;
  email: () => Promise<String>;
  emailVerify: () => Promise<Boolean>;
  encryptSaltString: () => Promise<String>;
  firstName: () => Promise<String>;
  givenBirth: () => Promise<Boolean>;
  lastName: () => Promise<String>;
  macId: () => Promise<String>;
  password: () => Promise<String>;
  personalHealthRecord: () => Promise<Boolean>;
  referralCode: () => Promise<String>;
  tutorial: () => Promise<Boolean>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  anonUserId: () => Promise<AsyncIterator<Int>>;
  countryId: () => Promise<AsyncIterator<Int>>;
  deleted: () => Promise<AsyncIterator<Boolean>>;
  deviceModel: () => Promise<AsyncIterator<String>>;
  dob: () => Promise<AsyncIterator<DateTimeOutput>>;
  email: () => Promise<AsyncIterator<String>>;
  emailVerify: () => Promise<AsyncIterator<Boolean>>;
  encryptSaltString: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  givenBirth: () => Promise<AsyncIterator<Boolean>>;
  lastName: () => Promise<AsyncIterator<String>>;
  macId: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  personalHealthRecord: () => Promise<AsyncIterator<Boolean>>;
  referralCode: () => Promise<AsyncIterator<String>>;
  tutorial: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregateUserCoinHistory {
  count: Int;
}

export interface AggregateUserCoinHistoryPromise
  extends Promise<AggregateUserCoinHistory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserCoinHistorySubscription
  extends Promise<AsyncIterator<AggregateUserCoinHistory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CupDataUserRemove {
  id: Int;
  changeTime: DateTimeOutput;
}

export interface CupDataUserRemovePromise
  extends Promise<CupDataUserRemove>,
    Fragmentable {
  id: () => Promise<Int>;
  changeTime: () => Promise<DateTimeOutput>;
  explainId: <T = CupDataUserRemoveExplainPromise>() => T;
  serialNumber: <T = CupPromise>() => T;
  userId: <T = UserPromise>() => T;
}

export interface CupDataUserRemoveSubscription
  extends Promise<AsyncIterator<CupDataUserRemove>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  changeTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  explainId: <T = CupDataUserRemoveExplainSubscription>() => T;
  serialNumber: <T = CupSubscription>() => T;
  userId: <T = UserSubscription>() => T;
}

export interface PlatformCompConnection {
  pageInfo: PageInfo;
  edges: PlatformCompEdge[];
}

export interface PlatformCompConnectionPromise
  extends Promise<PlatformCompConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlatformCompEdge>>() => T;
  aggregate: <T = AggregatePlatformCompPromise>() => T;
}

export interface PlatformCompConnectionSubscription
  extends Promise<AsyncIterator<PlatformCompConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlatformCompEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlatformCompSubscription>() => T;
}

export interface UserCoinHistorySubscriptionPayload {
  mutation: MutationType;
  node: UserCoinHistory;
  updatedFields: String[];
  previousValues: UserCoinHistoryPreviousValues;
}

export interface UserCoinHistorySubscriptionPayloadPromise
  extends Promise<UserCoinHistorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserCoinHistoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserCoinHistoryPreviousValuesPromise>() => T;
}

export interface UserCoinHistorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserCoinHistorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserCoinHistorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserCoinHistoryPreviousValuesSubscription>() => T;
}

export interface MarketListConnection {
  pageInfo: PageInfo;
  edges: MarketListEdge[];
}

export interface MarketListConnectionPromise
  extends Promise<MarketListConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MarketListEdge>>() => T;
  aggregate: <T = AggregateMarketListPromise>() => T;
}

export interface MarketListConnectionSubscription
  extends Promise<AsyncIterator<MarketListConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MarketListEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMarketListSubscription>() => T;
}

export interface UserCoinHistoryPreviousValues {
  id: Int;
  category: String;
  coin: Int;
  contents: String;
  date: DateTimeOutput;
  txhash: String;
  walletId?: Int;
}

export interface UserCoinHistoryPreviousValuesPromise
  extends Promise<UserCoinHistoryPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  category: () => Promise<String>;
  coin: () => Promise<Int>;
  contents: () => Promise<String>;
  date: () => Promise<DateTimeOutput>;
  txhash: () => Promise<String>;
  walletId: () => Promise<Int>;
}

export interface UserCoinHistoryPreviousValuesSubscription
  extends Promise<AsyncIterator<UserCoinHistoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  category: () => Promise<AsyncIterator<String>>;
  coin: () => Promise<AsyncIterator<Int>>;
  contents: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  txhash: () => Promise<AsyncIterator<String>>;
  walletId: () => Promise<AsyncIterator<Int>>;
}

export interface MarketAmazonCouponEdge {
  node: MarketAmazonCoupon;
  cursor: String;
}

export interface MarketAmazonCouponEdgePromise
  extends Promise<MarketAmazonCouponEdge>,
    Fragmentable {
  node: <T = MarketAmazonCouponPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MarketAmazonCouponEdgeSubscription
  extends Promise<AsyncIterator<MarketAmazonCouponEdge>>,
    Fragmentable {
  node: <T = MarketAmazonCouponSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CupDataQuestion {
  id: Int;
  questionText: String;
}

export interface CupDataQuestionPromise
  extends Promise<CupDataQuestion>,
    Fragmentable {
  id: () => Promise<Int>;
  cupDataAnswer: <T = FragmentableArray<CupDataAnswer>>(
    args?: {
      where?: CupDataAnswerWhereInput;
      orderBy?: CupDataAnswerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cupDataQaResponse: <T = FragmentableArray<CupDataQaResponse>>(
    args?: {
      where?: CupDataQaResponseWhereInput;
      orderBy?: CupDataQaResponseOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  questionText: () => Promise<String>;
}

export interface CupDataQuestionSubscription
  extends Promise<AsyncIterator<CupDataQuestion>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  cupDataAnswer: <T = Promise<AsyncIterator<CupDataAnswerSubscription>>>(
    args?: {
      where?: CupDataAnswerWhereInput;
      orderBy?: CupDataAnswerOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cupDataQaResponse: <
    T = Promise<AsyncIterator<CupDataQaResponseSubscription>>
  >(
    args?: {
      where?: CupDataQaResponseWhereInput;
      orderBy?: CupDataQaResponseOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  questionText: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFirmware {
  count: Int;
}

export interface AggregateFirmwarePromise
  extends Promise<AggregateFirmware>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFirmwareSubscription
  extends Promise<AsyncIterator<AggregateFirmware>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserCoinRewardsFeeSubscriptionPayload {
  mutation: MutationType;
  node: UserCoinRewardsFee;
  updatedFields: String[];
  previousValues: UserCoinRewardsFeePreviousValues;
}

export interface UserCoinRewardsFeeSubscriptionPayloadPromise
  extends Promise<UserCoinRewardsFeeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserCoinRewardsFeePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserCoinRewardsFeePreviousValuesPromise>() => T;
}

export interface UserCoinRewardsFeeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserCoinRewardsFeeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserCoinRewardsFeeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserCoinRewardsFeePreviousValuesSubscription>() => T;
}

export interface AggregateCupDatum {
  count: Int;
}

export interface AggregateCupDatumPromise
  extends Promise<AggregateCupDatum>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCupDatumSubscription
  extends Promise<AsyncIterator<AggregateCupDatum>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserCoinRewardsFeePreviousValues {
  id: Int;
  amount?: Int;
  contents?: String;
  createTime?: DateTimeOutput;
  updateTime?: DateTimeOutput;
}

export interface UserCoinRewardsFeePreviousValuesPromise
  extends Promise<UserCoinRewardsFeePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  amount: () => Promise<Int>;
  contents: () => Promise<String>;
  createTime: () => Promise<DateTimeOutput>;
  updateTime: () => Promise<DateTimeOutput>;
}

export interface UserCoinRewardsFeePreviousValuesSubscription
  extends Promise<AsyncIterator<UserCoinRewardsFeePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  amount: () => Promise<AsyncIterator<Int>>;
  contents: () => Promise<AsyncIterator<String>>;
  createTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  updateTime: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CupDataUserRemoveConnection {
  pageInfo: PageInfo;
  edges: CupDataUserRemoveEdge[];
}

export interface CupDataUserRemoveConnectionPromise
  extends Promise<CupDataUserRemoveConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CupDataUserRemoveEdge>>() => T;
  aggregate: <T = AggregateCupDataUserRemovePromise>() => T;
}

export interface CupDataUserRemoveConnectionSubscription
  extends Promise<AsyncIterator<CupDataUserRemoveConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CupDataUserRemoveEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCupDataUserRemoveSubscription>() => T;
}

export interface CupDataAnswer {
  id: Int;
  answerText: String;
}

export interface CupDataAnswerPromise
  extends Promise<CupDataAnswer>,
    Fragmentable {
  id: () => Promise<Int>;
  answerText: () => Promise<String>;
  cupDataQaResponse: <T = FragmentableArray<CupDataQaResponse>>(
    args?: {
      where?: CupDataQaResponseWhereInput;
      orderBy?: CupDataQaResponseOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  questionId: <T = CupDataQuestionPromise>() => T;
}

export interface CupDataAnswerSubscription
  extends Promise<AsyncIterator<CupDataAnswer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  answerText: () => Promise<AsyncIterator<String>>;
  cupDataQaResponse: <
    T = Promise<AsyncIterator<CupDataQaResponseSubscription>>
  >(
    args?: {
      where?: CupDataQaResponseWhereInput;
      orderBy?: CupDataQaResponseOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  questionId: <T = CupDataQuestionSubscription>() => T;
}

export interface AggregateCupDataQuestion {
  count: Int;
}

export interface AggregateCupDataQuestionPromise
  extends Promise<AggregateCupDataQuestion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCupDataQuestionSubscription
  extends Promise<AsyncIterator<AggregateCupDataQuestion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserCupSubscriptionPayload {
  mutation: MutationType;
  node: UserCup;
  updatedFields: String[];
  previousValues: UserCupPreviousValues;
}

export interface UserCupSubscriptionPayloadPromise
  extends Promise<UserCupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserCupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserCupPreviousValuesPromise>() => T;
}

export interface UserCupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserCupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserCupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserCupPreviousValuesSubscription>() => T;
}

export interface CupDataProcVolumeConnection {
  pageInfo: PageInfo;
  edges: CupDataProcVolumeEdge[];
}

export interface CupDataProcVolumeConnectionPromise
  extends Promise<CupDataProcVolumeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CupDataProcVolumeEdge>>() => T;
  aggregate: <T = AggregateCupDataProcVolumePromise>() => T;
}

export interface CupDataProcVolumeConnectionSubscription
  extends Promise<AsyncIterator<CupDataProcVolumeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CupDataProcVolumeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCupDataProcVolumeSubscription>() => T;
}

export interface UserCupPreviousValues {
  id: Int;
}

export interface UserCupPreviousValuesPromise
  extends Promise<UserCupPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
}

export interface UserCupPreviousValuesSubscription
  extends Promise<AsyncIterator<UserCupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
}

export interface CupDataManMdateEdge {
  node: CupDataManMdate;
  cursor: String;
}

export interface CupDataManMdateEdgePromise
  extends Promise<CupDataManMdateEdge>,
    Fragmentable {
  node: <T = CupDataManMdatePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CupDataManMdateEdgeSubscription
  extends Promise<AsyncIterator<CupDataManMdateEdge>>,
    Fragmentable {
  node: <T = CupDataManMdateSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CupDataQaResponse {
  id: Int;
  qaDate: DateTimeOutput;
}

export interface CupDataQaResponsePromise
  extends Promise<CupDataQaResponse>,
    Fragmentable {
  id: () => Promise<Int>;
  answerId: <T = CupDataAnswerPromise>() => T;
  qaDate: () => Promise<DateTimeOutput>;
  questionId: <T = CupDataQuestionPromise>() => T;
  userId: <T = UserPromise>() => T;
}

export interface CupDataQaResponseSubscription
  extends Promise<AsyncIterator<CupDataQaResponse>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  answerId: <T = CupDataAnswerSubscription>() => T;
  qaDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  questionId: <T = CupDataQuestionSubscription>() => T;
  userId: <T = UserSubscription>() => T;
}

export interface AggregateCupDataAnswer {
  count: Int;
}

export interface AggregateCupDataAnswerPromise
  extends Promise<AggregateCupDataAnswer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCupDataAnswerSubscription
  extends Promise<AsyncIterator<AggregateCupDataAnswer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserInterviewDatumSubscriptionPayload {
  mutation: MutationType;
  node: UserInterviewDatum;
  updatedFields: String[];
  previousValues: UserInterviewDatumPreviousValues;
}

export interface UserInterviewDatumSubscriptionPayloadPromise
  extends Promise<UserInterviewDatumSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserInterviewDatumPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserInterviewDatumPreviousValuesPromise>() => T;
}

export interface UserInterviewDatumSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserInterviewDatumSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserInterviewDatumSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserInterviewDatumPreviousValuesSubscription>() => T;
}

export interface CupConnection {
  pageInfo: PageInfo;
  edges: CupEdge[];
}

export interface CupConnectionPromise
  extends Promise<CupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CupEdge>>() => T;
  aggregate: <T = AggregateCupPromise>() => T;
}

export interface CupConnectionSubscription
  extends Promise<AsyncIterator<CupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCupSubscription>() => T;
}

export interface UserInterviewDatumPreviousValues {
  id: Int;
  answerRange?: Int;
  answerText?: String;
  answerYn?: Boolean;
  date: DateTimeOutput;
}

export interface UserInterviewDatumPreviousValuesPromise
  extends Promise<UserInterviewDatumPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  answerRange: () => Promise<Int>;
  answerText: () => Promise<String>;
  answerYn: () => Promise<Boolean>;
  date: () => Promise<DateTimeOutput>;
}

export interface UserInterviewDatumPreviousValuesSubscription
  extends Promise<AsyncIterator<UserInterviewDatumPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  answerRange: () => Promise<AsyncIterator<Int>>;
  answerText: () => Promise<AsyncIterator<String>>;
  answerYn: () => Promise<AsyncIterator<Boolean>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserWalletSubscriptionPayload {
  mutation: MutationType;
  node: UserWallet;
  updatedFields: String[];
  previousValues: UserWalletPreviousValues;
}

export interface UserWalletSubscriptionPayloadPromise
  extends Promise<UserWalletSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserWalletPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserWalletPreviousValuesPromise>() => T;
}

export interface UserWalletSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserWalletSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserWalletSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserWalletPreviousValuesSubscription>() => T;
}

export interface CupDataRejection {
  id: Int;
  rejectionDescription: String;
}

export interface CupDataRejectionPromise
  extends Promise<CupDataRejection>,
    Fragmentable {
  id: () => Promise<Int>;
  cupDataProcMdates: <T = FragmentableArray<CupDataProcMdate>>(
    args?: {
      where?: CupDataProcMdateWhereInput;
      orderBy?: CupDataProcMdateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  rejectionDescription: () => Promise<String>;
}

export interface CupDataRejectionSubscription
  extends Promise<AsyncIterator<CupDataRejection>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  cupDataProcMdates: <T = Promise<AsyncIterator<CupDataProcMdateSubscription>>>(
    args?: {
      where?: CupDataProcMdateWhereInput;
      orderBy?: CupDataProcMdateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  rejectionDescription: () => Promise<AsyncIterator<String>>;
}

export interface UserRecordDataByDayEdge {
  node: UserRecordDataByDay;
  cursor: String;
}

export interface UserRecordDataByDayEdgePromise
  extends Promise<UserRecordDataByDayEdge>,
    Fragmentable {
  node: <T = UserRecordDataByDayPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserRecordDataByDayEdgeSubscription
  extends Promise<AsyncIterator<UserRecordDataByDayEdge>>,
    Fragmentable {
  node: <T = UserRecordDataByDaySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserInterviewQuestionSubscriptionPayload {
  mutation: MutationType;
  node: UserInterviewQuestion;
  updatedFields: String[];
  previousValues: UserInterviewQuestionPreviousValues;
}

export interface UserInterviewQuestionSubscriptionPayloadPromise
  extends Promise<UserInterviewQuestionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserInterviewQuestionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserInterviewQuestionPreviousValuesPromise>() => T;
}

export interface UserInterviewQuestionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserInterviewQuestionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserInterviewQuestionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserInterviewQuestionPreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserInterviewQuestionPreviousValues {
  id: Int;
  question: String;
}

export interface UserInterviewQuestionPreviousValuesPromise
  extends Promise<UserInterviewQuestionPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  question: () => Promise<String>;
}

export interface UserInterviewQuestionPreviousValuesSubscription
  extends Promise<AsyncIterator<UserInterviewQuestionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  question: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMarketBuyHistory {
  count: Int;
}

export interface AggregateMarketBuyHistoryPromise
  extends Promise<AggregateMarketBuyHistory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMarketBuyHistorySubscription
  extends Promise<AsyncIterator<AggregateMarketBuyHistory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CupDataManMdate {
  id: Int;
  menFinish?: DateTimeOutput;
  menStart?: DateTimeOutput;
}

export interface CupDataManMdatePromise
  extends Promise<CupDataManMdate>,
    Fragmentable {
  id: () => Promise<Int>;
  mdateRowId: <T = CupDataProcMdatePromise>() => T;
  menFinish: () => Promise<DateTimeOutput>;
  menStart: () => Promise<DateTimeOutput>;
}

export interface CupDataManMdateSubscription
  extends Promise<AsyncIterator<CupDataManMdate>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  mdateRowId: <T = CupDataProcMdateSubscription>() => T;
  menFinish: () => Promise<AsyncIterator<DateTimeOutput>>;
  menStart: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateEthnicity {
  count: Int;
}

export interface AggregateEthnicityPromise
  extends Promise<AggregateEthnicity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEthnicitySubscription
  extends Promise<AsyncIterator<AggregateEthnicity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserRecordCameraDataByTimeSubscriptionPayload {
  mutation: MutationType;
  node: UserRecordCameraDataByTime;
  updatedFields: String[];
  previousValues: UserRecordCameraDataByTimePreviousValues;
}

export interface UserRecordCameraDataByTimeSubscriptionPayloadPromise
  extends Promise<UserRecordCameraDataByTimeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserRecordCameraDataByTimePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserRecordCameraDataByTimePreviousValuesPromise>() => T;
}

export interface UserRecordCameraDataByTimeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserRecordCameraDataByTimeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserRecordCameraDataByTimeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <
    T = UserRecordCameraDataByTimePreviousValuesSubscription
  >() => T;
}

export interface AnswerType {
  id: Int;
  answerType: String;
}

export interface AnswerTypePromise extends Promise<AnswerType>, Fragmentable {
  id: () => Promise<Int>;
  answerType: () => Promise<String>;
  userInterviewQuestions: <T = FragmentableArray<UserInterviewQuestion>>(
    args?: {
      where?: UserInterviewQuestionWhereInput;
      orderBy?: UserInterviewQuestionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AnswerTypeSubscription
  extends Promise<AsyncIterator<AnswerType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  answerType: () => Promise<AsyncIterator<String>>;
  userInterviewQuestions: <
    T = Promise<AsyncIterator<UserInterviewQuestionSubscription>>
  >(
    args?: {
      where?: UserInterviewQuestionWhereInput;
      orderBy?: UserInterviewQuestionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserRecordCameraDataByTimePreviousValues {
  id: Int;
  confirmYn?: Boolean;
  deleteYn?: Boolean;
  height?: Float;
  imagePath?: String;
  locationX?: Float;
  locationY?: Float;
  size?: Float;
  width?: Float;
}

export interface UserRecordCameraDataByTimePreviousValuesPromise
  extends Promise<UserRecordCameraDataByTimePreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  confirmYn: () => Promise<Boolean>;
  deleteYn: () => Promise<Boolean>;
  height: () => Promise<Float>;
  imagePath: () => Promise<String>;
  locationX: () => Promise<Float>;
  locationY: () => Promise<Float>;
  size: () => Promise<Float>;
  width: () => Promise<Float>;
}

export interface UserRecordCameraDataByTimePreviousValuesSubscription
  extends Promise<AsyncIterator<UserRecordCameraDataByTimePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  confirmYn: () => Promise<AsyncIterator<Boolean>>;
  deleteYn: () => Promise<AsyncIterator<Boolean>>;
  height: () => Promise<AsyncIterator<Float>>;
  imagePath: () => Promise<AsyncIterator<String>>;
  locationX: () => Promise<AsyncIterator<Float>>;
  locationY: () => Promise<AsyncIterator<Float>>;
  size: () => Promise<AsyncIterator<Float>>;
  width: () => Promise<AsyncIterator<Float>>;
}

export interface AggregateCupDataProcFlow {
  count: Int;
}

export interface AggregateCupDataProcFlowPromise
  extends Promise<AggregateCupDataProcFlow>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCupDataProcFlowSubscription
  extends Promise<AsyncIterator<AggregateCupDataProcFlow>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CupDataProcMdate {
  id: Int;
  dataRejected?: Boolean;
  dataVerified: Boolean;
  menFinish: DateTimeOutput;
  menStart: DateTimeOutput;
  rewardAmount?: Int;
}

export interface CupDataProcMdatePromise
  extends Promise<CupDataProcMdate>,
    Fragmentable {
  id: () => Promise<Int>;
  cupDataManMdates: <T = FragmentableArray<CupDataManMdate>>(
    args?: {
      where?: CupDataManMdateWhereInput;
      orderBy?: CupDataManMdateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cupDataProcFlow: <T = FragmentableArray<CupDataProcFlow>>(
    args?: {
      where?: CupDataProcFlowWhereInput;
      orderBy?: CupDataProcFlowOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dataRejected: () => Promise<Boolean>;
  dataVerified: () => Promise<Boolean>;
  menFinish: () => Promise<DateTimeOutput>;
  menStart: () => Promise<DateTimeOutput>;
  rejectId: <T = CupDataRejectionPromise>() => T;
  rewardAmount: () => Promise<Int>;
  userId: <T = UserPromise>() => T;
}

export interface CupDataProcMdateSubscription
  extends Promise<AsyncIterator<CupDataProcMdate>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  cupDataManMdates: <T = Promise<AsyncIterator<CupDataManMdateSubscription>>>(
    args?: {
      where?: CupDataManMdateWhereInput;
      orderBy?: CupDataManMdateOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  cupDataProcFlow: <T = Promise<AsyncIterator<CupDataProcFlowSubscription>>>(
    args?: {
      where?: CupDataProcFlowWhereInput;
      orderBy?: CupDataProcFlowOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  dataRejected: () => Promise<AsyncIterator<Boolean>>;
  dataVerified: () => Promise<AsyncIterator<Boolean>>;
  menFinish: () => Promise<AsyncIterator<DateTimeOutput>>;
  menStart: () => Promise<AsyncIterator<DateTimeOutput>>;
  rejectId: <T = CupDataRejectionSubscription>() => T;
  rewardAmount: () => Promise<AsyncIterator<Int>>;
  userId: <T = UserSubscription>() => T;
}

export interface CupAppSyncEdge {
  node: CupAppSync;
  cursor: String;
}

export interface CupAppSyncEdgePromise
  extends Promise<CupAppSyncEdge>,
    Fragmentable {
  node: <T = CupAppSyncPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CupAppSyncEdgeSubscription
  extends Promise<AsyncIterator<CupAppSyncEdge>>,
    Fragmentable {
  node: <T = CupAppSyncSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserRecordDataByDaySubscriptionPayload {
  mutation: MutationType;
  node: UserRecordDataByDay;
  updatedFields: String[];
  previousValues: UserRecordDataByDayPreviousValues;
}

export interface UserRecordDataByDaySubscriptionPayloadPromise
  extends Promise<UserRecordDataByDaySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserRecordDataByDayPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserRecordDataByDayPreviousValuesPromise>() => T;
}

export interface UserRecordDataByDaySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserRecordDataByDaySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserRecordDataByDaySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserRecordDataByDayPreviousValuesSubscription>() => T;
}

export interface UserWalletConnection {
  pageInfo: PageInfo;
  edges: UserWalletEdge[];
}

export interface UserWalletConnectionPromise
  extends Promise<UserWalletConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserWalletEdge>>() => T;
  aggregate: <T = AggregateUserWalletPromise>() => T;
}

export interface UserWalletConnectionSubscription
  extends Promise<AsyncIterator<UserWalletConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserWalletEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserWalletSubscription>() => T;
}

export interface UserRecordDataByDayPreviousValues {
  id: Int;
  crampsLevel?: Int;
  recordDate: DateTimeOutput;
}

export interface UserRecordDataByDayPreviousValuesPromise
  extends Promise<UserRecordDataByDayPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  crampsLevel: () => Promise<Int>;
  recordDate: () => Promise<DateTimeOutput>;
}

export interface UserRecordDataByDayPreviousValuesSubscription
  extends Promise<AsyncIterator<UserRecordDataByDayPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  crampsLevel: () => Promise<AsyncIterator<Int>>;
  recordDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MarketListDetailEdge {
  node: MarketListDetail;
  cursor: String;
}

export interface MarketListDetailEdgePromise
  extends Promise<MarketListDetailEdge>,
    Fragmentable {
  node: <T = MarketListDetailPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MarketListDetailEdgeSubscription
  extends Promise<AsyncIterator<MarketListDetailEdge>>,
    Fragmentable {
  node: <T = MarketListDetailSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CupDataProcFlow {
  id: Int;
  date: DateTimeOutput;
  hourlyFlow: Int;
}

export interface CupDataProcFlowPromise
  extends Promise<CupDataProcFlow>,
    Fragmentable {
  id: () => Promise<Int>;
  date: () => Promise<DateTimeOutput>;
  hourlyFlow: () => Promise<Int>;
  mdateRowId: <T = CupDataProcMdatePromise>() => T;
  userId: <T = UserPromise>() => T;
}

export interface CupDataProcFlowSubscription
  extends Promise<AsyncIterator<CupDataProcFlow>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  hourlyFlow: () => Promise<AsyncIterator<Int>>;
  mdateRowId: <T = CupDataProcMdateSubscription>() => T;
  userId: <T = UserSubscription>() => T;
}

export interface CupDataUserRemoveExplainEdge {
  node: CupDataUserRemoveExplain;
  cursor: String;
}

export interface CupDataUserRemoveExplainEdgePromise
  extends Promise<CupDataUserRemoveExplainEdge>,
    Fragmentable {
  node: <T = CupDataUserRemoveExplainPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CupDataUserRemoveExplainEdgeSubscription
  extends Promise<AsyncIterator<CupDataUserRemoveExplainEdge>>,
    Fragmentable {
  node: <T = CupDataUserRemoveExplainSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CupDataColourCalibConnection {
  pageInfo: PageInfo;
  edges: CupDataColourCalibEdge[];
}

export interface CupDataColourCalibConnectionPromise
  extends Promise<CupDataColourCalibConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CupDataColourCalibEdge>>() => T;
  aggregate: <T = AggregateCupDataColourCalibPromise>() => T;
}

export interface CupDataColourCalibConnectionSubscription
  extends Promise<AsyncIterator<CupDataColourCalibConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<CupDataColourCalibEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateCupDataColourCalibSubscription>() => T;
}

export interface UserRecordDataByTimeSubscriptionPayload {
  mutation: MutationType;
  node: UserRecordDataByTime;
  updatedFields: String[];
  previousValues: UserRecordDataByTimePreviousValues;
}

export interface UserRecordDataByTimeSubscriptionPayloadPromise
  extends Promise<UserRecordDataByTimeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserRecordDataByTimePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserRecordDataByTimePreviousValuesPromise>() => T;
}

export interface UserRecordDataByTimeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserRecordDataByTimeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserRecordDataByTimeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserRecordDataByTimePreviousValuesSubscription>() => T;
}

export interface AppServerSync {
  id: Int;
  serverSynchTime: DateTimeOutput;
}

export interface AppServerSyncPromise
  extends Promise<AppServerSync>,
    Fragmentable {
  id: () => Promise<Int>;
  serverSynchTime: () => Promise<DateTimeOutput>;
  userId: <T = UserPromise>() => T;
}

export interface AppServerSyncSubscription
  extends Promise<AsyncIterator<AppServerSync>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  serverSynchTime: () => Promise<AsyncIterator<DateTimeOutput>>;
  userId: <T = UserSubscription>() => T;
}

export interface UserRecordDataByPeriodPreviousValues {
  id: Int;
  coinHistoryRowId?: Int;
  isTakePill?: Boolean;
  mensFinish?: DateTimeOutput;
  mensStart?: DateTimeOutput;
}

export interface UserRecordDataByPeriodPreviousValuesPromise
  extends Promise<UserRecordDataByPeriodPreviousValues>,
    Fragmentable {
  id: () => Promise<Int>;
  coinHistoryRowId: () => Promise<Int>;
  isTakePill: () => Promise<Boolean>;
  mensFinish: () => Promise<DateTimeOutput>;
  mensStart: () => Promise<DateTimeOutput>;
}

export interface UserRecordDataByPeriodPreviousValuesSubscription
  extends Promise<AsyncIterator<UserRecordDataByPeriodPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  coinHistoryRowId: () => Promise<AsyncIterator<Int>>;
  isTakePill: () => Promise<AsyncIterator<Boolean>>;
  mensFinish: () => Promise<AsyncIterator<DateTimeOutput>>;
  mensStart: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserRecordDataByPeriodSubscriptionPayload {
  mutation: MutationType;
  node: UserRecordDataByPeriod;
  updatedFields: String[];
  previousValues: UserRecordDataByPeriodPreviousValues;
}

export interface UserRecordDataByPeriodSubscriptionPayloadPromise
  extends Promise<UserRecordDataByPeriodSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserRecordDataByPeriodPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserRecordDataByPeriodPreviousValuesPromise>() => T;
}

export interface UserRecordDataByPeriodSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserRecordDataByPeriodSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserRecordDataByPeriodSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserRecordDataByPeriodPreviousValuesSubscription>() => T;
}

export interface Country {
  id: Int;
  countryName: String;
}

export interface CountryPromise extends Promise<Country>, Fragmentable {
  id: () => Promise<Int>;
  countryName: () => Promise<String>;
}

export interface CountrySubscription
  extends Promise<AsyncIterator<Country>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<Int>>;
  countryName: () => Promise<AsyncIterator<String>>;
}

export interface CupDataQaResponseEdge {
  node: CupDataQaResponse;
  cursor: String;
}

export interface CupDataQaResponseEdgePromise
  extends Promise<CupDataQaResponseEdge>,
    Fragmentable {
  node: <T = CupDataQaResponsePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CupDataQaResponseEdgeSubscription
  extends Promise<AsyncIterator<CupDataQaResponseEdge>>,
    Fragmentable {
  node: <T = CupDataQaResponseSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateHardware {
  count: Int;
}

export interface AggregateHardwarePromise
  extends Promise<AggregateHardware>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateHardwareSubscription
  extends Promise<AsyncIterator<AggregateHardware>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUserInterviewDatum {
  count: Int;
}

export interface AggregateUserInterviewDatumPromise
  extends Promise<AggregateUserInterviewDatum>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserInterviewDatumSubscription
  extends Promise<AsyncIterator<AggregateUserInterviewDatum>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "AdditionalInfo",
    embedded: false
  },
  {
    name: "AnswerType",
    embedded: false
  },
  {
    name: "AppServerSync",
    embedded: false
  },
  {
    name: "AuthToken",
    embedded: false
  },
  {
    name: "Calibration",
    embedded: false
  },
  {
    name: "Company",
    embedded: false
  },
  {
    name: "Country",
    embedded: false
  },
  {
    name: "Cup",
    embedded: false
  },
  {
    name: "CupAppSync",
    embedded: false
  },
  {
    name: "CupDataAnswer",
    embedded: false
  },
  {
    name: "CupDataColourCalc",
    embedded: false
  },
  {
    name: "CupDataColourCalib",
    embedded: false
  },
  {
    name: "CupDataManMdate",
    embedded: false
  },
  {
    name: "CupDataProcFlow",
    embedded: false
  },
  {
    name: "CupDataProcMdate",
    embedded: false
  },
  {
    name: "CupDataProcVolume",
    embedded: false
  },
  {
    name: "CupDataQaResponse",
    embedded: false
  },
  {
    name: "CupDataQuestion",
    embedded: false
  },
  {
    name: "CupDataRaw",
    embedded: false
  },
  {
    name: "CupDataRejection",
    embedded: false
  },
  {
    name: "CupDataUserRemove",
    embedded: false
  },
  {
    name: "CupDataUserRemoveExplain",
    embedded: false
  },
  {
    name: "CupDatum",
    embedded: false
  },
  {
    name: "Ethnicity",
    embedded: false
  },
  {
    name: "Firmware",
    embedded: false
  },
  {
    name: "Hardware",
    embedded: false
  },
  {
    name: "MarketAmazonCoupon",
    embedded: false
  },
  {
    name: "MarketBuyHistory",
    embedded: false
  },
  {
    name: "MarketList",
    embedded: false
  },
  {
    name: "MarketListDetail",
    embedded: false
  },
  {
    name: "PlatformComp",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserCoinHistory",
    embedded: false
  },
  {
    name: "UserCoinRewardsFee",
    embedded: false
  },
  {
    name: "UserCup",
    embedded: false
  },
  {
    name: "UserInterviewDatum",
    embedded: false
  },
  {
    name: "UserInterviewQuestion",
    embedded: false
  },
  {
    name: "UserRecordCameraDataByTime",
    embedded: false
  },
  {
    name: "UserRecordDataByDay",
    embedded: false
  },
  {
    name: "UserRecordDataByPeriod",
    embedded: false
  },
  {
    name: "UserRecordDataByTime",
    embedded: false
  },
  {
    name: "UserWallet",
    embedded: false
  },
  {
    name: "UsersDataAnalysis",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
